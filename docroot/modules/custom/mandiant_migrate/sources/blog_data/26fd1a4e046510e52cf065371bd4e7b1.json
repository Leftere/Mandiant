{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue May 09 2017 13:07:07 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "EPS Processing Zero-Days Exploited by Multiple Threat Actors ",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "554b8617-c381-4ed3-b12e-174d4d7b8258",
    "author": "Genwei Jiang",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "145337f3-bcb9-4298-bfc0-9de93f089971"
    ],
    "jcr:created": "Tue May 09 2017 13:33:30 GMT-0400",
    "cq:lastReplicated": "Tue May 09 2017 13:33:30 GMT-0400",
    "cq:lastModified": "Tue May 09 2017 13:33:01 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "145337f3-bcb9-4298-bfc0-9de93f089971",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-tags:zero-day",
      "fireeye-blog-authors:cap-alex-lanstein",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-authors:alex-berry",
      "fireeye-blog-authors:ben-read",
      "fireeye-doctypes:blog",
      "fireeye-blog-authors:dhanesh-kizhakkinan",
      "fireeye-blog-authors:greg-macmanus",
      "fireeye-blog-authors:cap-genwei-jiang",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware"
    ],
    "jcr:uuid": "91de7402-a1e6-4e99-8f70-8e907f228731",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue May 09 2017 13:00:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EIn 2015, FireEye published details about two attacks exploiting vulnerabilities in Encapsulated PostScript (EPS) of Microsoft Office. One was a \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2015\/09\/attack_exploitingmi.html\u0022\u003Ezero-day\u003C\/a\u003E and one was \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2015\/12\/the_eps_awakens.html\u0022\u003Epatched\u003C\/a\u003E weeks before the attack launched.\u003C\/p\u003E\n\u003Cp\u003ERecently, FireEye identified three new zero-day vulnerabilities in Microsoft Office products that are being exploited in the wild.\u003C\/p\u003E\n\u003Cp\u003EAt the end of March 2017, we detected another malicious document leveraging an unknown vulnerability in EPS and a recently \u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0001\u0022\u003Epatched\u003C\/a\u003E vulnerability in Windows Graphics Device Interface (GDI) to drop malware. Following the April 2017 Patch Tuesday, in which Microsoft disabled EPS, FireEye detected a second unknown vulnerability in EPS.\u003C\/p\u003E\n\u003Cp\u003EFireEye believes that two actors \u2013 \u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/company\/events\/infosec\/threat-landscape-overview-fireeye-summit-paris.pdf\u0022\u003ETurla\u003C\/a\u003E and an unknown financially motivated actor \u2013 were using the first EPS zero-day (\u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0261\u0022\u003ECVE-2017-0261\u003C\/a\u003E), and \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2014\/10\/apt28-a-window-into-russias-cyber-espionage-operations.html\u0022\u003EAPT28\u003C\/a\u003E was using the second EPS zero-day (\u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0262\u0022\u003ECVE-2017-0262\u003C\/a\u003E) along with a new Escalation of Privilege (EOP) zero-day (\u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0263\u0022\u003ECVE-2017-0263\u003C\/a\u003E). Turla and APT28 are Russian cyber espionage groups that have used these zero-days against European diplomatic and military entities. The unidentified financial group targeted regional and global banks with offices in the Middle East. The following is a description of the EPS zero-days, associated malware, and the new EOP zero-day. Each EPS zero-day is accompanied by an EOP exploit, with the EOP being required to escape the sandbox that executes the FLTLDR.EXE instance used for EPS processing.\u003C\/p\u003E\n\u003Cp\u003EThe malicious documents have been used to deliver three different payloads. CVE-2017-0261 was used to deliver SHIRIME (Turla) and NETWIRE (unknown financially motivated actor), and CVE-2017-0262 was used to deliver GAMEFISH (APT28). CVE-2017-0263 is used to escalate privileges during the delivery of the GAMEFISH payload.\u003C\/p\u003E\n\u003Cp\u003EFireEye \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/products\/ex-email-security-products.html\u0022\u003Eemail\u003C\/a\u003E and \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/products\/nx-network-security-products.html\u0022\u003Enetwork\u003C\/a\u003E products detected the malicious documents.\u003C\/p\u003E\n\u003Cp\u003EFireEye has been coordinating with the Microsoft Security Response Center (MSRC) for the responsible disclosure of this information. Microsoft advises all customers to follow the guidance in \u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/ADV170005\u0022\u003Esecurity advisory ADV170005\u003C\/a\u003E as a defense-in-depth measure against EPS filter vulnerabilities.\u003C\/p\u003E\n\u003Ch4\u003ECVE-2017-0261 \u2013\u0026nbsp;EPS \u003Ci\u003E\u0026quot;restore\u0026quot;\u003C\/i\u003E Use-After-Free\u003C\/h4\u003E\n\u003Cp\u003EUpon opening the Office document, the FLTLDR.EXE is utilized to render an embedded EPS image, which contains the exploit. The EPS file is a PostScript program, which leverages a Use-After-Free vulnerability in \u201c\u003Ci\u003Erestore\u003C\/i\u003E\u201d operand.\u003C\/p\u003E\n\u003Cp\u003EFrom the \u003Ca href=\u0022https:\/\/www-cdf.fnal.gov\/offline\/PostScript\/PLRM2.pdf\u0022\u003EPostScript Manual\u003C\/a\u003E: \u201cAllocations in local VM and modifications to existing objects in local VM are subject to a feature called \u003Cb\u003Esave\u003C\/b\u003E and \u003Cb\u003Erestore\u003C\/b\u003E, named after the operators that invoke it. \u003Cb\u003Esave\u003C\/b\u003E and \u003Cb\u003Erestore\u003C\/b\u003E bracket a section of a PostScript language program whose local VM activity is to be encapsulated. \u003Cb\u003Erestore\u003C\/b\u003E deallocates new objects and undoes modifications to existing objects that were made since the matching \u003Cb\u003Esave\u003C\/b\u003E.\u201d\u003C\/p\u003E\n\u003Cp\u003EAs the manual described, the \u003Ci\u003Erestore\u003C\/i\u003E operator will reclaim memory allocated since the \u003Ci\u003Esave\u003C\/i\u003E operator. This makes a perfect condition of Use-After-Free, when combined with \u003Ci\u003Eforall\u003C\/i\u003E operator. Figure 1 shows the pseudo code to exploit the save and restore operation.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig1.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Pseudo code for the exploit\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe following operations allow the Pseudo code to leak metadata enabling a read\/write primitive:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003Eforall_proc array is created with a single element of the restore proc\u003C\/li\u003E\n\u003Cli\u003EThe EPS state is \u003Cb\u003E\u003Ci\u003Esaved\u003C\/i\u003E\u003C\/b\u003E to eps_state\u003C\/li\u003E\n\u003Cli\u003Euaf_array is created after the save\u003C\/li\u003E\n\u003Cli\u003EThe forall operator loops over the elements of the uaf_array calling forall_proc for each element\u003C\/li\u003E\n\u003Cli\u003EThe first element of uaf_array is passed to a call of restore_proc, the procedure contained in forall_proc\u003C\/li\u003E\n\u003Cli\u003Erestore_proc\u003Cul\u003E\n\u003Cli\u003E\u003Cb\u003E\u003Ci\u003Erestores\u003C\/i\u003E\u003C\/b\u003E the initial state freeing the uaf_array\u003C\/li\u003E\n\u003Cli\u003EThe alloc_string procedure reclaims the freed uaf_array\u003C\/li\u003E\n\u003Cli\u003EThe forall_proc is updated to call leak_proc\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003ESubsequent calls by the forall operator call the leak_proc on each element of the reclaimed uaf_array which elements now contain the result of the alloc_string procedure\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EFigure 2 demonstrates a debug log of the uaf_array being used after being reclaimed.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig2.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: uaf_array reclaimed debug log\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBy manipulating the operations after the \u003Ci\u003Esave\u003C\/i\u003E operator, the attacker is able to manipulate the memory layouts and convert the Use-After-Free to create a read\/write primitive. Figure 3 shows the faked string, with length set as 0x7fffffff, base as 0.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig3.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Faked String Object\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ELeveraging the power of reading and writing arbitrary user memory, the EPS program continues by searching for gadgets to build the ROP chain, and creates a \u003Cb\u003E\u003Ci\u003Efile\u003C\/i\u003E\u003C\/b\u003E object. Figure 4 demonstrates the faked file object in memory.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig4.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Fake File Object, with ROP\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBy calling \u003Cb\u003E\u003Ci\u003Eclosefile\u003C\/i\u003E\u003C\/b\u003E operand with the faked file object, the exploit pivots to the ROP and starts the shellcode. Figure 5 shows part of the disassembler of \u003Cb\u003E\u003Ci\u003Eclosefile\u003C\/i\u003E\u003C\/b\u003E operand handler.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig5.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Stack Pivot disassembler of closefile\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce execution has been achieved, the malware uses the ROP chain to change the execution protection of the memory region containing the shellcode.\u0026nbsp; At this point, the shellcode is running within a sandbox that was executing FLTLDR.EXE and an escalation of privilege is required to escape that sandbox.\u003C\/p\u003E\n\u003Cp\u003EFireEye detected two different versions of the EPS program exploiting this vulnerability.\u0026nbsp; The first, st07383.en17.docx, continues by utilizing 32 or 64 bit versions of CVE-2017-0001 to escalate privileges before executing a final JavaScript payload containing a malware implant known as SHIRIME. SHIRIME is one of multiple custom JavaScript implants used by Turla as a first stage payload to conduct initial profiling of a target system and implement command and control. Since early 2016, we have observed multiple iterations of SHIRIME used in the wild, having the most recent version (v1.0.1004) employed in this zero-day\u003C\/p\u003E\n\u003Cp\u003EThe second document, Confirmation_letter.docx, continues by utilizing 32 or 64 bit versions of CVE-2016-7255 to escalate privilege before dropping a new variant of the NETWIRE malware family. Several versions of this document were seen with similar filenames.\u003C\/p\u003E\n\u003Cp\u003EThe EPS programs contained within these documents contained different logic to perform the construction of the ROP chain as well as build the shellcode.\u0026nbsp; The first took the additional step of using a simple algorithm, shown in Figure 6, to obfuscate sections of the shellcode.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig6.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Shellcode obfuscation algorithm\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ECVE-2017-0262\u0026nbsp;\u2013 Type Confusion in EPS\u003C\/h4\u003E\n\u003Cp\u003EThe second EPS vulnerability is a type confused procedure object of forall operator that can alter the execution flow allowing an attacker to control values onto the operand stack. This vulnerability was found in a document named \u201cTrump\u0027s_Attack_on_Syria_English.docx\u201d.\u003C\/p\u003E\n\u003Cp\u003EBefore triggering the vulnerability, the EPS program sprays the memory with predefined data to occupy specific memory address and facilitate the exploitation. Figure 7 demonstrates the PostScript code snippet of spraying memory with a string.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig7.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: PostScript code snippet of spray\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter execution, the content of string occupies the memory at address 0x0d80d000, leading to the memory layout as shown in Figure 8. The exploit leverages this layout and the content to forge a procedure object and manipulate the code flow to store predefined value, in yellow, to the operator stack.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig8.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Memory layout of the sprayed data\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter spraying the heap, the exploit goes on to call a code statement in the following format: \u003Ci\u003E1 array 16#D80D020 forall\u003C\/i\u003E. It creates an Array object, sets the procedure as the hex number 0xD80D020, and calls the \u003Ci\u003Eforall\u003C\/i\u003E operator. During the operation of the forged procedure within \u003Ci\u003Eforall\u003C\/i\u003E operator, it precisely controls the execution flow to store values of the attacker\u0027s choices to operand stack. Figure 9 shows the major code flow consuming the forged procedure.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig9.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Consuming the forged procedure\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter execution of \u003Ci\u003Eforall\u003C\/i\u003E, the contents on the stack are under the attacker\u0027s control. This is s shown in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig10.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Stack after the forall execution\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ESince the operand stack has been manipulated, the subsequent operations of \u003Ci\u003Eexch\u003C\/i\u003E defines objects based on the data from the manipulated stack, as shown in Figure 11.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig11.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Subsequent code to retrieve data from stack\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe A18 is a string type object, which has a length field of 0x7ffffff0, based from 0. Within memory, the layout as shown in Figure 12.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig12.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: A18 String Object\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe A19 is an array type object, with member values all purposely crafted. The exploit defines another array object and puts it into the forged array A19. By performing these operations, it puts the newly created array object pointer into A19. The exploit can then directly read the value from the predictable address, 0xD80D020 + 0x38, and leak its vftable and infer module base address of EPSIMP32.flt. Figure 13 shows code snippets of leaking EPSIMP32 base address.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig13.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: Code snippet of leaking module base\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 14 shows the operand stack of calling \u003Ci\u003Eput\u003C\/i\u003E operator and the forged Array A19 after finishing the \u003Ci\u003Eput\u003C\/i\u003E operation.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig14.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Array A19 after the put operation\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBy leveraging the RW primitive string and the leaked module base of EPSIMP32, the exploit continues by searching ROP gadgets, creating a fake file object, and pivoting to shellcode through the \u003Ci\u003Ebytesavailable\u003C\/i\u003E operator. Figure 15 shows the forged file type object and disassembling of pivoting to ROP and shellcode.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig15.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: Pivots to ROP and Shellcode\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe shellcode continues by using a previously unknown EOP, CVE-2017-0263, to escalate privileges to escape the sandbox running FLTLDR.EXE, and then drop and execute a GAMEFISH payload. Only a 32-bit version of CVE-2017-0263 is contained in the shellcode.\u003C\/p\u003E\n\u003Ch4\u003ECVE-2017-0263\u0026nbsp;\u2013 win32k!xxxDestroyWindow Use-After-Free\u003C\/h4\u003E\n\u003Cp\u003EThe EOP Exploit setup starts by suspending all threads other than the current thread and saving the thread handles to a table, as shown in Figure 16.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig16.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: Suspending Threads\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe exploit then checks for OS version and uses that information to populate version specific fields such as token offset, syscall number, etc. An executable memory area is allocated and populated with kernel mode shellcode as wells as address information required by the shellcode. A new thread is created for triggering the vulnerability and further control of exploitation.\u003C\/p\u003E\n\u003Cp\u003EThe exploit starts by creating three PopupMenus and appending menus to them, as shown in Figure 17. The exploit creates 0x100 windows with random classnames. The User32!HMValidateHandle trick is used to leak the tagWnd address, which is used as kernel information leak throughout the exploit.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig17.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 17: Popup menu creation\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ERegisterClassExW is then used to register a window class \u201cMain_Window_Class\u201d with a WndProc pointing to a function, which calls DestroyWindow on window table created by EventHookProc, explained later in the blog. This function also shows the first popup menu, which was created earlier.\u003C\/p\u003E\n\u003Cp\u003ETwo extra windows are created with class name as \u201cMain_Window_Class\u201d. SetWindowLong is used to change WndProc of second window, wnd2, to a shellcode address. An application defined hook, WindowHookProc, and an event hook, EventHookProc, are installed by SetWindowsHookExW and SetWinEventHook respectively. PostMessage is used to post 0xABCD to first window, wnd1.\u003C\/p\u003E\n\u003Cp\u003EThe EventHookProc waits for EVENT_SYSTEM_MENUPOPUPSTART and saves the window\u2019s handle to a table. WindowHookProc looks for \u003Cb\u003ESysShadow \u003C\/b\u003Eclassname and sets a new WndProc for the corresponding window. Inside this WndProc, NtUserMNDragLeave syscall is invoked and SendMessage is used to send 0x9f9f to wnd2, invoking the shellcode shown in Figure 18.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Fig18.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 18: Triggering the shellcode\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe Use-After-Free happens inside WM_NCDESTROY event in kernel and overwrites wnd2\u2019s tagWnd structure, which sets bServerSideWindowProc flag. With bServerSideWindowProc set, the user mode WndProc is considered as a kernel callback and will be invoked from kernel context \u2013 in this case wnd2\u2019s WndProc is the shellcode.\u003C\/p\u003E\n\u003Cp\u003EThe shellcode checks whether the memory corruption has occurred by checking if the code segment is not the user mode code segment. It also checks whether the message sent is 0x9f9f. Once the validation is completed, shellcode finds the TOKEN address of current process and TOKEN of system process (pid 4). The shellcode then copies the system process\u2019 token to current process, which elevates current process privilege to SYSTEM.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003E\u003Ci\u003EEPS processing has become a ripe exploitation space for attackers.\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye has discovered and analyzed two of these recent EPS zero-days with examples seen before and after Microsoft disabled EPS processing in the April 2017 Patch Tuesday.\u0026nbsp; The documents explored utilize differing EPS exploits, ROP construction, shellcode, EOP exploits and final payloads. While these documents are detected by FireEye appliances, users should exercise caution because FLTLDR.EXE is not monitored by EMET.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ERussian cyber espionage is a well-resourced, dynamic threat\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThe use of zero-day exploits by Turla Group and APT28 underscores their capacity to apply technically sophisticated and costly methods when necessary. Russian cyber espionage actors use zero-day exploits in addition to less complex measures. Though these actors have relied on credential phishing and macros to carry out operations previously, the use of these methods does not reflect a lack of resources. Rather, the use of less technically sophisticated methods \u2013 when sufficient \u2013 reflects operational maturity and the foresight to protect costly exploits until they are necessary.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EA vibrant ecosystem of threats\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003ECVE-2017-0261\u2019s use by multiple actors is further evidence that cyber espionage and criminal activity exist in a shared ecosystem. Nation state actors, such as those leveraging \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/cve-2017-0199_useda.html\u0022\u003ECVE-2017-0199 to distribute FINSPY\u003C\/a\u003E, often rely on the same sources for exploits as criminal actors. This shared ecosystem creates a proliferation problem for defenders concerned with either type of threat.\u003C\/p\u003E\n\u003Cp\u003ECVE-2017-0261 was being used as a zero-day by both nation state and cyber crime actors, and we believe that both actors obtained the vulnerability from a common source. Following \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/cve-2017-0199-hta-handler.html\u0022\u003ECVE-2017-0199\u003C\/a\u003E, this is the second major vulnerability in as many months that has been used for both espionage and crime.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022437\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022177\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFilename\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EC2 Host\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2abe3cc4bff46455a945d56c27e9fb45\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022177\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EConfirmation_letter.docx.bin\u003C\/p\u003E\n\u003Cp\u003E(NETWIRE)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E84.200.2.12\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee091425d23b8db6082b40d25e938f871\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022177\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EConfirmation_letter.docx\u003C\/p\u003E\n\u003Cp\u003E(NETWIRE)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E138.201.44.30\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E006bdb19b6936329bffd4054e270dc6a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022177\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EConfirmation_letter_ACM.docx\u003C\/p\u003E\n\u003Cp\u003E(NETWIRE)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E185.106.122.113\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E15660631e31c1172ba5a299a90938c02\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022177\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Est07383.en17.docx\u003C\/p\u003E\n\u003Cp\u003E(SHIRIME)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Etnsc.webredirect.org\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef8e92d8b5488ea76c40601c8f1a08790\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022177\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETrump\u0027s_Attack_on_Syria_English.docx\u003C\/p\u003E\n\u003Cp\u003E(GAMEFISH)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ewmdmediacodecs.com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Source Exploit Documents\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/EPS%20EoP%200day\/Tab2.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: CVEs related to these attacks\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EiSIGHT Intelligence Team, FLARE Team, FireEye Labs, Microsoft Security Response Center (MSRC).\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue May 09 2017 13:33:01 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye recently identified three new zero-day vulnerabilities in Microsoft Office products that are being exploited in the wild.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue May 09 2017 12:53:18 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue May 09 2017 12:53:48 GMT-0400",
      "imageRotate": "0"
    }
  }
}
