{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon Dec 14 2020 02:39:24 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Highly Evasive Attacker Leverages SolarWinds Supply Chain to Compromise Multiple Global Victims With SUNBURST Backdoor",
    "jcr:versionHistory": "87edaace-2db4-4fbb-aafa-7e1b3c47c800",
    "author": "FireEye",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "ea0711d6-8d23-48a9-8e25-c1515509c7c5"
    ],
    "jcr:created": "Mon Dec 21 2020 20:36:33 GMT+0000",
    "cq:lastModified": "Mon Dec 21 2020 20:36:24 GMT+0000",
    "jcr:baseVersion": "ea0711d6-8d23-48a9-8e25-c1515509c7c5",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-fireeye",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:supply-chain",
      "fireeye-blog-tags:fireeye",
      "fireeye-blog-tags:evasion"
    ],
    "jcr:uuid": "4cd5b239-b1b9-487a-b35e-6807f284813f",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Sun Dec 13 2020 17:00:00 GMT-0500",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EExecutive Summary\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003EWe have discovered a global intrusion campaign. We are tracking the actors behind this campaign as UNC2452.\u003C\/li\u003E\n\u003Cli\u003EFireEye discovered a supply chain attack trojanizing SolarWinds Orion business software updates in order to distribute malware we call SUNBURST.\u0026nbsp;\u003C\/li\u003E\n\u003Cli\u003EThe attacker\u2019s post compromise activity leverages multiple techniques to evade detection and obscure their activity, but these efforts also offer some opportunities for detection.\u003C\/li\u003E\n\u003Cli\u003EThe campaign is widespread, affecting public and private organizations around the world.\u003C\/li\u003E\n\u003Cli\u003EFireEye is releasing signatures to detect this threat actor and supply chain attack in the wild. These are found on our public \u003Ca href=\u0022https:\/\/github.com\/fireeye\/sunburst_countermeasures\u0022\u003EGitHub page\u003C\/a\u003E. FireEye products and services can help customers detect and block this attack.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003ESummary\u003C\/h4\u003E\n\u003Cp\u003EFireEye has uncovered a widespread campaign, that we are tracking as UNC2452. The actors behind this campaign gained access to numerous public and private organizations around the world. They gained access to victims via trojanized updates to SolarWind\u2019s Orion IT monitoring and management software. This campaign may have begun as early as Spring 2020 and is currently ongoing. Post compromise activity following this supply chain compromise has included lateral movement and data theft. The campaign is the work of a highly skilled actor and the operation was conducted with significant operational security.\u003C\/p\u003E\n\u003Ch4\u003ESUNBURST Backdoor\u003C\/h4\u003E\n\u003Cp\u003ESolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds digitally-signed component of the Orion software framework that contains a backdoor that communicates via HTTP to third party servers. We are tracking the trojanized version of this SolarWinds Orion plug-in as SUNBURST.\u003C\/p\u003E\n\u003Cp\u003EAfter an initial dormant period of up to two weeks, it retrieves and executes commands, called \u201cJobs\u201d, that include the ability to transfer files, execute files, profile the system, reboot the machine, and disable system services. The malware masquerades its network traffic as the Orion Improvement Program (OIP) protocol and stores reconnaissance results within legitimate plugin configuration files allowing it to blend in with legitimate SolarWinds activity. The backdoor uses multiple obfuscated blocklists to identify forensic and anti-virus tools running as processes, services, and drivers.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/solarwinds\/fig1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: SolarWinds digital signature on software with backdoor\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EMultiple trojanzied updates were digitally signed from March - May 2020 and posted to the SolarWinds updates website, including:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehxxps:\/\/downloads.solarwinds[.]com\/solarwinds\/CatalogResources\/Core\/2019.4\/2019.4.5220.20574\/SolarWinds-Core-v2019.4.5220-Hotfix5.msp\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe trojanized update file is a standard Windows Installer Patch file that includes compressed resources associated with the update, including the trojanized SolarWinds.Orion.Core.BusinessLayer.dll component. Once the update is installed, the malicious DLL will be loaded by the legitimate\u0026nbsp;SolarWinds.BusinessLayerHost.exe or SolarWinds.BusinessLayerHostx64.exe (depending on system configuration). After a dormant period of up to two weeks, the malware will attempt to resolve a subdomain of avsvmcloud[.]com. The DNS response will return a CNAME record that points to a Command and Control (C2) domain. The C2 traffic to the malicious domains is designed to mimic normal SolarWinds API communications. The list of known malicious infrastructure is available on FireEye\u2019s \u003Ca href=\u0022https:\/\/github.com\/fireeye\/sunburst_countermeasures\u0022\u003EGitHub page\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EWorldwide Victims Across Multiple Verticals\u003C\/h4\u003E\n\u003Cp\u003EFireEye has detected this activity at multiple entities worldwide. The victims have included government, consulting, technology, telecom and extractive entities in North America, Europe, Asia and the Middle East. We anticipate there are additional victims in other countries and verticals. FireEye has notified all entities we are aware of being affected.\u003C\/p\u003E\n\u003Ch4\u003EPost Compromise Activity and Detection Opportunities\u003C\/h4\u003E\n\u003Cp\u003EWe are currently tracking the software supply chain compromise and related post intrusion activity as UNC2452. After gaining initial access, this group uses a variety of techniques to disguise their operations while they move laterally (Figure 2). This actor prefers to maintain a light malware footprint, instead preferring legitimate credentials and remote access for access into a victim\u2019s environment.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/solarwinds\/fig2a.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 2: Post-compromise tactics\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis section will detail the notable techniques and outline potential opportunities for detection.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ETEARDROP and BEACON Malware Used\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EMultiple SUNBURST samples have been recovered, delivering different payloads. In at least one instance the attackers deployed a previously unseen memory-only dropper we\u2019ve dubbed TEARDROP to deploy Cobalt Strike BEACON.\u003C\/p\u003E\n\u003Cp\u003ETEARDROP is a memory only dropper that runs as a service, spawns a thread and reads from the file \u201cgracious_truth.jpg\u201d, which likely has a fake JPG header. Next it checks that HKU\\SOFTWARE\\Microsoft\\CTF exists, decodes an embedded payload using a custom rolling XOR algorithm and manually loads into memory an embedded payload using a custom PE-like file format. TEARDROP does not have code overlap with any previously seen malware. We believe that this was used to execute a customized Cobalt Strike BEACON.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EMitigation\u003C\/i\u003E: FireEye has provided two Yara rules to detect TEARDROP available on our \u003Ca href=\u0022https:\/\/github.com\/fireeye\/sunburst_countermeasures\u0022\u003EGitHub\u003C\/a\u003E. Defenders should look for the following alerts from FireEye HX: MalwareGuard and WindowsDefender:\u003C\/p\u003E\n\u003Cp\u003EProcess Information\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003Efile_operation_closed\u003Cbr\u003E\nfile-path*: \u201cc:\\\\windows\\\\syswow64\\\\netsetupsvc.dll\u003Cbr\u003E\nactor-process:\u003Cbr\u003E\npid: 17900\u003C\/p\u003E\n\u003Cp\u003EWindow\u2019s defender Exploit Guard log entries: (Microsoft-Windows-Security-Mitigations\/KernelMode event ID 12)\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EProcess\u201d\\Device\\HarddiskVolume2\\Windows\\System32\\svchost.exe\u201d (PID XXXXX) would have been blocked from loading the non-Microsoft-signed binary\u003Cbr\u003E\n\u2018\\Windows\\SysWOW64\\NetSetupSvc.dll\u2019\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EAttacker Hostnames Match Victim Environment\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThe actor sets the hostnames on their command and control infrastructure to match a legitimate hostname found within the victim\u2019s environment. This allows the adversary to blend into the environment, avoid suspicion, and evade detection.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EDetection Opportunity\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThe attacker infrastructure leaks its configured hostname in RDP SSL certificates, which is identifiable in internet-wide scan data. This presents a detection opportunity for defenders -- querying internet-wide scan data sources for an organization\u2019s hostnames can uncover malicious IP addresses that may be masquerading as the organization. (Note: IP Scan history often shows IPs switching between default (WIN-*) hostnames and victim\u2019s hostnames) Cross-referencing the list of IPs identified in internet scan data with remote access logs may identify evidence of this actor in an environment. There is likely to be a single account per IP address.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EIP Addresses located in Victim\u2019s Country\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThe attacker\u2019s choice of IP addresses was also optimized to evade detection. The attacker primarily used only IP addresses originating from the same country as the victim, leveraging Virtual Private Servers.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EDetection Opportunity\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThis also presents some detection opportunities, as geolocating IP addresses used for remote access may show an impossible rate of travel if a compromised account is being used by the legitimate user and the attacker from disparate IP addresses. The attacker used multiple IP addresses per VPS provider, so once a malicious login from an unusual ASN is identified, looking at all logins from that ASN can help detect additional malicious activity. This can be done alongside baselining and normalization of ASN\u2019s used for legitimate remote access to help identify suspicious activity.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ELateral Movement Using Different Credentials\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the attacker gained access to the network with compromised credentials, they moved laterally using multiple different credentials. The credentials used for lateral movement were always different from those used for remote access.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EDetection Opportunity\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EOrganizations can use HX\u2019s LogonTracker module to graph all logon activity and analyze systems displaying a one-to-many relationship between source systems and accounts. This will uncover any single system authenticating to multiple systems with multiple accounts, a relatively uncommon occurrence during normal business operations.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ETemporary File Replacement and Temporary Task Modification\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThe attacker used a temporary file replacement technique to remotely execute utilities: they replaced a legitimate utility with theirs, executed their payload, and then restored the legitimate original file. They similarly manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returning the scheduled task to its original configuration. They routinely removed their tools, including removing backdoors once legitimate remote access was achieved.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EDetection Opportunity\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EDefenders can examine logs for SMB sessions that show access to legitimate directories and follow a delete-create-execute-delete-create pattern in a short amount of time. Additionally, defenders can monitor existing scheduled tasks for temporary updates, using frequency analysis to identify anomalous modification of tasks. Tasks can also be monitored to watch for legitimate Windows tasks executing new or unknown binaries.\u003C\/p\u003E\n\u003Cp\u003EThis campaign\u2019s post compromise activity was conducted with a high regard for operational security, in many cases leveraging dedicated infrastructure per intrusion. This is some of the best operational security that FireEye has observed in a cyber attack, focusing on evasion and leveraging inherent trust. However, it \u003Ci\u003Ecan\u003C\/i\u003E be detected through persistent defense.\u003C\/p\u003E\n\u003Ch4\u003EIn-Depth Malware Analysis\u003C\/h4\u003E\n\u003Cp\u003ESolarWinds.Orion.Core.BusinessLayer.dll (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin component of the Orion software framework that contains an obfuscated backdoor which communicates via HTTP to third party servers. After an initial dormant period of up to two weeks, it retrieves and executes commands, called \u201cJobs\u201d, that include the ability to transfer and execute files, profile the system, and disable system services. The backdoor\u2019s behavior and network protocol blend in with legitimate SolarWinds activity, such as by masquerading as the Orion Improvement Program (OIP) protocol and storing reconnaissance results within plugin configuration files. The backdoor uses multiple blocklists to identify forensic and anti-virus tools via processes, services, and drivers.\u003C\/p\u003E\n\u003Ch4\u003EUnique Capabilities\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003ESubdomain DomainName Generation Algorithm (DGA) is performed to vary DNS requests\u003Cul\u003E\n\u003Cli\u003ECNAME responses point to the C2 domain for the malware to connect to\u003C\/li\u003E\n\u003Cli\u003EThe IP block of A record responses controls malware behavior\u003C\/li\u003E\n\u003Cli\u003EDGA encoded machine domain name, used to selectively target victims\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003ECommand and control traffic masquerades as the legitimate Orion Improvement Program\u003C\/li\u003E\n\u003Cli\u003ECode hides in plain site by using fake variable names and tying into legitimate components\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EDelivery and Installation\u003C\/h4\u003E\n\u003Cp\u003EAuthorized system administrators fetch and install updates to SolarWinds Orion via packages distributed by SolarWinds\u2019s website. The update package CORE-2019.4.5220.20574-SolarWinds-Core-v2019.4.5220-Hotfix5.msp (02af7cec58b9a5da1c542b5a32151ba1) contains the SolarWinds.Orion.Core.BusinessLayer.dll described in this report. After installation, the Orion software framework executes the .NET program SolarWinds.BusinessLayerHost.exe to load plugins, including SolarWinds.Orion.Core.BusinessLayer.dll. This plugin contains many legitimate namespaces, classes, and routines that implement functionality within the Orion framework. Hidden in plain sight, the class SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer implements an HTTP-based backdoor. Code within the logically unrelated routine SolarWinds.Orion.Core.BusinessLayer.BackgroundInventory.InventoryManager.RefreshInternal invokes the backdoor code when the Inventory Manager plugin is loaded.\u003C\/p\u003E\n\u003Cp\u003ESolarWinds.Orion.Core.BusinessLayer.dll is signed by SolarWinds, using the certificate with serial number 0f:e9:73:75:20:22:a6:06:ad:f2:a3:6e:34:5d:c0:ed. The file was signed on March 24, 2020.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EInitialization\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EOn execution of the malicious SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer.Initialize method the sample verifies that its lower case process name hashes to the value 17291806236368054941. This hash value is calculated as the standard FNV-1A 64-bit hash with an additional XOR by 6605813339339102567 after computing the FNV-1A. This hash matches a process named \u0026quot;solarwinds.businesslayerhost\u0026quot;.\u003C\/p\u003E\n\u003Cp\u003EThe sample only executes if the filesystem write time of the assembly is at least 12 to 14 days prior to the current time; the exact threshold is selected randomly from an interval. The sample continues to check this time threshold as it is run by a legitimate recurring background task. Once the threshold is met, the sample creates the named pipe 583da945-62af-10e8-4902-a8f205c72b2e to act as a guard that only one instance is running before reading SolarWinds.Orion.Core.BusinessLayer.dll.config from disk and retrieving the XML field appSettings. The appSettings fields\u2019 keys are legitimate values that the malicious logic re-purposes as a persistent configuration. The key ReportWatcherRetry must be any value other than 3 for the sample to continue execution.\u003C\/p\u003E\n\u003Cp\u003EThe sample checks that the machine is domain joined and retrieves the domain name before execution continues. A userID is generated by computing the MD5 of a network interface MAC address that is up and not a loopback device, the domain name, and the registry value HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid. The userID is encoded via a custom XOR scheme after the MD5 is calculated. The ReportWatcherPostpone key of appSettings is then read from SolarWinds.Orion.Core.BusinessLayer.dll.config to retrieve the initial, legitimate value. This operation is performed as the sample later bit packs flags into this field and the initial value must be known in order to read out the bit flags. The sample then invokes the method Update which is the core event loop of the sample.\u003C\/p\u003E\n\u003Ch4\u003EDGA and Blocklists\u003C\/h4\u003E\n\u003Cp\u003EThe backdoor determines its C2 server using a Domain Generation Algorithm (DGA) to construct and resolve a subdomain of avsvmcloud[.]com. The Update method is responsible for initializing cryptographic helpers for the generation of these random C2 subdomains. Subdomains are generated by concatenating a victim userId with a reversible encoding of the victims local machine domain name. The attacker likely utilizes the DGA subdomain to vary the DNS response to victims as a means to control the targeting of the malware. These subdomains are concatenated with one of the following to create the hostname to resolve:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E.appsync-api.eu-west-1[.]avsvmcloud[.]com\u003C\/li\u003E\n\u003Cli\u003E.appsync-api.us-west-2[.]avsvmcloud[.]com\u003C\/li\u003E\n\u003Cli\u003E.appsync-api.us-east-1[.]avsvmcloud[.]com\u003C\/li\u003E\n\u003Cli\u003E.appsync-api.us-east-2[.]avsvmcloud[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EProcess name, service name, and driver path listings are obtained, and each value is hashed via the FNV-1a + XOR algorithm as described previously and checked against hardcoded blocklists. Some of these hashes have been brute force reversed as part of this analysis, showing that these routines are scanning for analysis tools and antivirus engine components. If a blocklisted process is found the Update routine exits and the sample will continue to try executing the routine until the blocklist passes. Blocklisted services are stopped by setting their HKLM\\SYSTEM\\CurrentControlSet\\services\\\u0026lt;service_name\u0026gt;\\Start registry entries to value 4 for disabled. Some entries in the service list if found on the system may affect the DGA algorithms behavior in terms of the values generated. The list of stopped services is then bit-packed into the ReportWatcherPostpone key of the appSettings entry for the samples\u2019 config file. If any service was transitioned to disabled the Update method exits and retries later. The sample retrieves a driver listing via the WMI query Select * From Win32_SystemDriver. If any blocklisted driver is seen the Update method exits and retries. If all blocklist tests pass, the sample tries to resolve api.solarwinds.com to test the network for connectivity.\u003C\/p\u003E\n\u003Ch4\u003ENetwork Command and Control (C2)\u003C\/h4\u003E\n\u003Cp\u003EIf all blocklist and connectivity checks pass, the sample starts generating domains in a while loop via its DGA. The sample will delay for random intervals between the generation of domains; this interval may be any random value from the ranges 1 to 3 minutes, 30 to 120 minutes, or on error conditions up to 420 to 540 minutes (9 hours). The DNS A record of generated domains is checked against a hardcoded list of IP address blocks which control the malware\u2019s behavior. Records within the following ranges will terminate the malware and update the configuration key ReportWatcherRetry to a value that prevents further execution:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E10.0.0.0\/8\u003C\/li\u003E\n\u003Cli\u003E172.16.0.0\/12\u003C\/li\u003E\n\u003Cli\u003E192.168.0.0\/16\u003C\/li\u003E\n\u003Cli\u003E224.0.0.0\/3\u003C\/li\u003E\n\u003Cli\u003Efc00:: - fe00::\u003C\/li\u003E\n\u003Cli\u003Efec0:: - ffc0::\u003C\/li\u003E\n\u003Cli\u003Eff00:: - ff00::\u003C\/li\u003E\n\u003Cli\u003E20.140.0.0\/15\u003C\/li\u003E\n\u003Cli\u003E96.31.172.0\/24\u003C\/li\u003E\n\u003Cli\u003E131.228.12.0\/22\u003C\/li\u003E\n\u003Cli\u003E144.86.226.0\/24\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EOnce a domain has been successfully retrieved in a CNAME DNS response the sample will spawn a new thread of execution invoking the method HttpHelper.Initialize which is responsible for all C2 communications and dispatching. The HTTP thread begins by delaying for a configurable amount of time that is controlled by the SetTime command. The HTTP thread will delay for a minimum of 1 minute between callouts. The malware uses HTTP GET or HTTP POST requests. If the sample is attempting to send outbound data the content-type HTTP header will be set to \u0026quot;application\/octet-stream\u0026quot; otherwise to \u0026quot;application\/json\u0026quot;.\u003C\/p\u003E\n\u003Cp\u003EA JSON payload is present for all HTTP POST and PUT requests and contains the keys \u201cuserId\u201d, \u201csessionId\u201d, and \u201csteps\u201d. The \u201csteps\u201d field contains a list of objects with the following keys: \u201cTimestamp\u201d, \u201cIndex\u201d, \u201cEventType\u201d, \u201cEventName\u201d, \u201cDurationMs\u201d, \u201cSucceeded\u201d, and \u201cMessage\u201d. The JSON key \u201cEventType\u201d is hardcoded to the value \u201cOrion\u201d, and the \u201cEventName\u201d is hardcoded to \u201cEventManager\u201d. Malware response messages to send to the server are DEFLATE compressed and single-byte-XOR encoded, then split among the \u201cMessage\u201d fields in the \u201csteps\u201d array. Each \u201cMessage\u201d value is Base64 encoded separately. Not all objects in the \u201csteps\u201d array contribute to the malware message \u2013 the integer in the \u201cTimestamp\u201d field must have the 0x2 bit set to indicate that the contents of the \u201cMessage\u201d field are used in the malware message. Step objects whose bit 0x2 is clear in the Timestamp field contain random data and are discarded when assembling the malware response.\u003C\/p\u003E\n\u003Ch4\u003ESteganography\u003C\/h4\u003E\n\u003Cp\u003EIn observed traffic these HTTP response bodies attempt to appear like benign XML related to .NET assemblies, but command data is actually spread across the many GUID and HEX strings present. Commands are extracted from HTTP response bodies by searching for HEX strings using the following regular expression: \u0026quot;\\{[0-9a-f-]{36}\\}\u0026quot;|\u0026quot;[0-9a-f]{32}\u0026quot;|\u0026quot;[0-9a-f]{16}\u0026quot;. Command data is spread across multiple strings that are disguised as GUID and HEX strings. All matched substrings in the response are filtered for non HEX characters, joined together, and HEX-decoded. The first DWORD value shows the actual size of the message, followed immediately with the message, with optional additional junk bytes following. The extracted message is single-byte XOR decoded using the first byte of the message, and this is then DEFLATE decompressed. The first character is an ASCII integer that maps to the JobEngine enum, with optional additional command arguments delimited by space characters.\u003C\/p\u003E\n\u003Cp\u003ECommands are then dispatched to a JobExecutionEngine based upon the command value as described next.\u003C\/p\u003E\n\u003Ch4\u003ESupported Commands\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022686\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003ECommand\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EValue\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EOperation\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EIdle\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo operation\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExit\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETerminate the current thread.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESetTime\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESets the delay time between main event loop executions Delay is in seconds, and varies random between [.9 * \u0026lt;delay\u0026gt;, 1.1 * \u0026lt;delay\u0026gt;]. \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; If the delay is \u0026lt; 300 it is doubled on the next execution through the loop, this means it should settle onto an interval of around [5, 10] minutes. \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; There is a second, unrelated delay routine that delays for a random interval between [16hrs, 83hrs]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECollectSystemDescription\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EProfile the local system including hostname, username, OS version, MAC addresses, IP address, DHCP configuration, and domain information.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUploadSystemDescription\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPerform a HTTP request to the specified URL, parse the results and compare components against unknown hashed values. Format a report and send to the C2 server.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERunTask\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStarts a new process with the given file path and arguments\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGetProcessByDescription\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReturns a process listing. If no arguments are provided returns just the PID and process name. \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; If an argument is provided it also returns the parent PID and username and domain for the process owner.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EKillTask\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETerminate the given process, by PID.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGetFileSystemEntries\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGiven a path and an optional match pattern recursively list files and directories\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWriteFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGiven a file path and a Base64 encoded string write the contents of the Base64 decoded string to the given file path. Write using append mode. Delay for [1s, 2s] after writing is done.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFileExists\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E10\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETests whether the given file path exists.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDeleteFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E11\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDeletes the specified file path.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGetFileHash\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E12\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECompute the MD5 of a file at a given path and return result as a HEX string. If an argument is provided, it is the expected MD5 hash of the file and returns an error if the calculated MD5 differs.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReadRegistryValue\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E13\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EArbitrary registry read from one of the supported hives\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESetRegistryValue\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EArbitrary registry write from one of the supported hives.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDeleteRegistryValue\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E15\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EArbitrary registry delete from one of the supported hives\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGetRegistrySubKeyAndValueNames\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E16\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReturns listing of subkeys and value names beneath the given registry path\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022176\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReboot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E17\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022455\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAttempts to immediately trigger a system reboot.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EIndicators and Detections to Help the Community\u003C\/h4\u003E\n\u003Cp\u003ETo empower the community to detect this supply chain backdoor, we are publishing indicators and detections to help organizations identify this backdoor and this threat actor. The signatures are a mix of Yara, IOC, and Snort formats.\u003C\/p\u003E\n\u003Cp\u003EA list of the detections and signatures are available on the FireEye GitHub repository found \u003Ca href=\u0022https:\/\/github.com\/fireeye\/sunburst_countermeasures\u0022\u003Ehere\u003C\/a\u003E. We are releasing detections and will continue to update the public repository with overlapping detections for host and network-based indicators as we develop new or refine existing ones. We have found multiple hashes with this backdoor and we will post updates of those hashes.\u003C\/p\u003E\n\u003Ch4\u003EMITRE ATT\u0026amp;CK Techniques Observed\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EID\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EDescription\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1012\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EQuery Registry\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1027\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EObfuscated Files or Information\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1057\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EProcess Discovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1070.004\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile Deletion\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1071.001\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWeb Protocols\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1071.004\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EApplication Layer Protocol: DNS\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1083\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile and Directory Discovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1105\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EIngress Tool Transfer\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1132.001\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStandard Encoding\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1195.002\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECompromise Software Supply Chain\u003Cu\u003E\u003C\/u\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1518\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESoftware Discovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1518.001\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESecurity Software Discovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1543.003\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWindows Service\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1553.002\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECode Signing\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1568.002\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDomain Generation Algorithms\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1569.002\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EService Execution\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022308\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ET1584\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022315\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECompromise Infrastructure\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EImmediate Mitigation Recommendations\u003C\/h4\u003E\n\u003Cp\u003EPrior to following SolarWind\u2019s recommendation to utilize Orion Platform release 2020.2.1 HF 1, which is currently available via the SolarWinds Customer Portal, organizations should consider preserving impacted devices and building new systems using the latest versions. Applying an upgrade to an impacted box could potentially overwrite forensic evidence as well as leave any additional backdoors on the system. In addition, SolarWinds has released additional mitigation and hardening instructions \u003Ca href=\u0022https:\/\/www.solarwinds.com\/securityadvisory\u0022\u003Ehere\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EIn the event you are unable to follow SolarWinds\u2019 recommendations, the following are immediate mitigation techniques that could be deployed as first steps to address the risk of trojanized SolarWinds software in an environment. If attacker activity is discovered in an environment, we recommend conducting a comprehensive investigation and designing and executing a remediation strategy driven by the investigative findings and details of the impacted environment.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EEnsure that SolarWinds servers are isolated \/ contained until a further review and investigation is conducted. This should include blocking all Internet egress from SolarWinds servers.\u003C\/li\u003E\n\u003Cli\u003EIf SolarWinds infrastructure is not isolated, consider taking the following steps:\u003Cul\u003E\n\u003Cli\u003ERestrict scope of connectivity to endpoints from SolarWinds servers, especially those that would be considered Tier 0 \/ crown jewel assets\u003C\/li\u003E\n\u003Cli\u003ERestrict the scope of accounts that have local administrator privileged on SolarWinds servers.\u003C\/li\u003E\n\u003Cli\u003EBlock Internet egress from servers or other endpoints with SolarWinds software.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EConsider (at a minimum) changing passwords for accounts that have access to SolarWinds servers \/ infrastructure. Based upon further review \/ investigation, additional remediation measures may be required.\u003C\/li\u003E\n\u003Cli\u003EIf SolarWinds is used to managed networking infrastructure, consider conducting a review of network device configurations for unexpected \/ unauthorized modifications. Note, this is a proactive measure due to the scope of SolarWinds functionality, not based on investigative findings.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EThis blog post was the combined effort of numerous personnel and teams across FireEye coming together. Special thanks to:\u003C\/p\u003E\n\u003Cp\u003EAndrew Archer, Doug Bienstock, Chris DiGiamo, Glenn Edwards, Nick Hornick, Alex Pennino, Andrew Rector, Scott Runnels, Eric Scales, Nalani Fraser, Sarah Jones, John Hultquist, Ben Read, Jon Leathery, Fred House, Dileep Jallepalli, Michael Sikorski, Stephen Eckels, William Ballenthin, Jay Smith, Alex Berry, Nick Richard, Isif Ibrahima, Dan Perez, Marcin Siedlarz, Ben Withnell, Barry Vengerik, Nicole Oppenheim, Ian Ahl, Andrew Thompson, Matt Dunwoody, Evan Reese, Steve Miller, Alyssa Rahman, John Gorman, Lennard Galang, Steve Stone, Nick Bennett, Matthew McWhirt, Mike Burns, Omer Baig.\u003C\/p\u003E\n\u003Cp\u003EAlso special thanks to Nick Carr, Christopher Glyer, and Ramin Nafisi from Microsoft.\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Dec 21 2020 20:36:24 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe have discovered a global intrusion campaign, and we are tracking the actors behind this campaign as UNC2452.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Dec 14 2020 00:18:26 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Mon Dec 14 2020 00:21:57 GMT+0000",
      "imageRotate": "0"
    }
  }
}
