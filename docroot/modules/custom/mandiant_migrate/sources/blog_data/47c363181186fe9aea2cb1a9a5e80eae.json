{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Jun 11 2019 11:14:39 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Hunting COM Objects (Part Two)",
    "jcr:versionHistory": "47bd72dc-585a-42d6-9479-15d32454fe19",
    "author": "Brett Hawkins",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "bc9c0e4a-8dd2-4c6c-b217-7aad2a430081"
    ],
    "jcr:created": "Tue Oct 22 2019 15:33:03 GMT+0000",
    "cq:lastModified": "Tue Oct 22 2019 15:32:53 GMT+0000",
    "jcr:baseVersion": "bc9c0e4a-8dd2-4c6c-b217-7aad2a430081",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:brett-hawkins",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:com-objects",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:red-team"
    ],
    "jcr:uuid": "169eef5d-e010-49e1-90f2-9659e76170fc",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Jun 11 2019 11:15:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EBackground\u003C\/h4\u003E\n\u003Cp\u003EAs a follow up to \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/06\/hunting-com-objects.html\u0022\u003EPart One in this blog series on COM object hunting\u003C\/a\u003E, this post will talk about taking the COM object hunting methodology deeper by looking at interesting COM object methods exposed in properties and sub-properties of COM objects.\u003C\/p\u003E\n\u003Ch4\u003EWhat is a COM Object?\u003C\/h4\u003E\n\u003Cp\u003EAccording to \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/com\/the-component-object-model\u0022\u003EMicrosoft\u003C\/a\u003E, \u201cThe Microsoft Component Object Model (COM) is a platform-independent, distributed, object-oriented system for creating binary software components that can interact. COM is the foundation technology for Microsoft\u0027s OLE (compound documents), ActiveX (Internet-enabled components), as well as others.\u201d\u003C\/p\u003E\n\u003Cp\u003EA COM object\u2019s services can be consumed from almost any language by multiple processes, or even remotely. COM objects are usually obtained by specifying a CLSID (an identifying GUID) or ProgID (programmatic identifier). These COM objects are published in the Windows registry and can be extracted easily, as described below.\u003C\/p\u003E\n\u003Ch4\u003ECOM Object Enumeration\u003C\/h4\u003E\n\u003Cp\u003EFireEye performed research into COM objects on Windows 10 and Windows 7, along with COM objects in Microsoft Office. Part One of this blog series described a technique for \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/06\/hunting-com-objects.html\u0022\u003Eenumerating all COM objects\u003C\/a\u003E on the system, instantiating them, and searching for interesting properties and methods. However, this only scratches the surface of what is accessible through these COM objects, as each object may return other objects that cannot be directly created on their own.\u003C\/p\u003E\n\u003Cp\u003EThe change introduced here recursively searches for COM objects, which are only exposed through member methods and properties of each enumerated COM object. The original methodology looked at interesting methods exposed directly by each object and didn\u2019t recurse into any properties that may also be COM objects with their own interesting methods. This improvement to the methodology assisted in the discovery of a new COM object that can be used for code execution, and new ways to call publicly known code execution COM object methods.\u003C\/p\u003E\n\u003Ch4\u003ERecursive COM Object Method Discovery\u003C\/h4\u003E\n\u003Cp\u003EA common theme among publicly discovered techniques for code execution using COM objects is that they take advantage of a method that is exposed within a child property of the COM object. An example of this is the \u201cMMC20.Application\u201d COM object. To achieve code execution with this COM object, you need to use the \u201cExecuteShellCommand\u201d method on the View object returned by the \u201cDocument.ActiveView\u201d property, as discovered by Matt Nelson in this \u003Ca href=\u0022https:\/\/enigma0x3.net\/2017\/01\/23\/lateral-movement-via-dcom-round-2\/\u0022\u003Eblog post\u003C\/a\u003E. In Figure 1 you can see how this method is only discoverable within the object returned by \u201cDocument.ActiveView\u201d, and is not directly exposed by the MMC20.Application COM object.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/COMobjects2\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Listing ExecuteShellCommand method in MMC20.Application COM object\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAnother example of this is the \u201cShellBrowserWindow\u201d COM object, which was also first written about by Matt Nelson in this \u003Ca href=\u0022https:\/\/enigma0x3.net\/2017\/01\/23\/lateral-movement-via-dcom-round-2\/\u0022\u003Eblog post\u003C\/a\u003E. As you can see in Figure 2, the \u201cShellExecute\u201d method is not directly exposed in the COM object. However, the \u201cDocument.Application\u201d property returns an instance of the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/shell\/shell\u0022\u003EShell object\u003C\/a\u003E, which exposes the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/shell\/ishelldispatch2-shellexecute\u0022\u003EShellExecute\u003C\/a\u003E method.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/COMobjects2\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Listing ExecuteShellCommand method in ShellBrowserWindow COM object\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAs evidence of the previous two examples, it is important to not only look at methods exposed directly by the COM object, but also recursively look for objects with interesting methods exposed as properties of COM objects. This example also illustrates why simply statically exploring the Type Libraries of the COM objects may not be sufficient. The relevant functions are only accessed after dynamically enumerating objects of the generic type IDispatch. This recursive methodology can enable finding new COM objects to be used for code execution, and different ways to use publicly known COM objects that can be used for code execution.\u003C\/p\u003E\n\u003Cp\u003EAn example of how this recursive methodology found a new way to call a publicly known COM object method is the \u201cShellExecute\u201d method in the \u201cShellBrowserWindow\u201d COM object that was shown previously in this article. The previously publicly known way of calling this method within the \u201cShellBrowserWindow\u201d COM object is using the \u201cDocument.Application\u201d property. The recursive COM object method discovery also found that you can call the \u201cShellExecute\u201d method on the object returned by the \u201cDocument.Application.Parent\u201d property as seen in Figure 3. This can be useful from an evasion standpoint.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/COMobjects2\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Alternative way to call ShellExecute with ShellBrowserWindow COM object\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ECommand Execution\u003C\/h4\u003E\n\u003Cp\u003EUsing this recursive COM object method discovery, FireEye was able to find a COM object with the ProgID \u201cExcel.ChartApplication\u201d that can be used for code execution using the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/office\/vba\/api\/excel.application.ddeinitiate\u0022\u003EDDEInitiate\u003C\/a\u003E method. This DDEInitiate method of launching executables was first abused in the \u201cExcel.Application\u201d COM object as seen in this \u003Ca href=\u0022https:\/\/www.cybereason.com\/blog\/leveraging-excel-dde-for-lateral-movement-via-dcom\u0022\u003Earticle\u003C\/a\u003E by Cybereason. There are multiple properties in the \u201cExcel.ChartApplication\u201d COM object that return objects that can be used to execute the DDEInitiate method as seen in Figure 4. Although this DDEInitiate method is also exposed directly by the COM object, it was initially discovered when looking at methods exposed in the other objects accessible from this object.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/COMobjects2\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Different ways to call DDEInitiate with Excel.ChartApplication COM object\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis COM object can also be instantiated and used remotely for Office 2013 as seen in \u003C!--[if supportFields]\u003E\u003Cspan\nstyle=\u0027font-size:11.0pt;font-family:\u0022Calibri\u0022,sans-serif;mso-ascii-theme-font:\nminor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-theme-font:minor-latin\u0027\u003E\u003Cspan\nstyle=\u0027mso-element:field-begin\u0027\u003E\u003C\/span\u003E\u003Cspan style=\u0027mso-spacerun:yes\u0027\u003E\u00a0\u003C\/span\u003EREF _Ref6214171 \\h \u003Cspan style=\u0027mso-spacerun:yes\u0027\u003E\u00a0\u003C\/span\u003E\\* MERGEFORMAT \u003Cspan\nstyle=\u0027mso-element:field-separator\u0027\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C![endif]--\u003EFigure 5\u003C!--[if gte mso 9]\u003E\u003Cxml\u003E\n \u003Cw:data\u003E08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000C0000005F0052006500660036003200310034003100370031000000\u003C\/w:data\u003E\n\u003C\/xml\u003E\u003C![endif]--\u003E\u003C!--[if supportFields]\u003E\u003Cspan style=\u0027font-size:11.0pt;\nfont-family:\u0022Calibri\u0022,sans-serif;mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:\nminor-latin;mso-bidi-theme-font:minor-latin\u0027\u003E\u003Cspan style=\u0027mso-element:field-end\u0027\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C![endif]--\u003E. The COM object can only be instantiated locally on Office 2016. When trying to instantiate it remotely against Office 2016, an error code will return indicating that the COM object class is not registered for remote instantiation.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/COMobjects2\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Using Excel.ChartApplication remotely against Office 2013\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EThe recursive searching of COM object methods can lead to the discovery of new COM objects that can be used for code execution, and new ways to call publicly known COM object methods. These COM object methods can be used to subvert different detection patterns and can also be used for lateral movement.\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Jun 10 2019 22:37:38 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EThis post looks at interesting COM object methods exposed in properties and sub-properties of COM objects.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Jun 10 2019 22:39:29 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Oct 22 2019 15:32:53 GMT+0000",
      "imageRotate": "0"
    }
  }
}
