{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Tue Oct 01 2019 10:00:05 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Head Fake: Tackling Disruptive Ransomware Attacks",
    "jcr:versionHistory": "acb1cdef-7b9f-406e-afdb-3fc065c790fa",
    "author": "Bryce Abdo",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "7137a3cf-4807-41e4-a3bd-232460c1d325"
    ],
    "sling:redirect": "true",
    "jcr:created": "Thu Nov 19 2020 19:08:20 GMT+0000",
    "cq:lastModified": "Thu Nov 19 2020 19:07:23 GMT+0000",
    "sling:vanityPath": "\/blog\/threat-research\/2019\/09\/head-fake-tackling-disruptive-ransomware-attacks",
    "jcr:baseVersion": "7137a3cf-4807-41e4-a3bd-232460c1d325",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:bryce-abdo",
      "fireeye-blog-authors:brandan-schondorfer",
      "fireeye-blog-authors:kareem-hamdan",
      "fireeye-blog-authors:kimberly-goody",
      "fireeye-blog-authors:noah-klapprodt",
      "fireeye-blog-authors:matt-bromiley",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:disruptive-malware",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:ransomware",
      "fireeye-blog-tags:mandiant"
    ],
    "jcr:uuid": "60d822c6-c672-481e-8243-031900927fc0",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Oct 01 2019 03:00:00 GMT-0700",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EWithin the past several months, FireEye has observed financially-motivated threat actors employ tactics that focus on disrupting business processes by deploying ransomware in mass throughout a victim\u2019s environment. Understanding that normal business processes are critical to organizational success, these ransomware campaigns have been accompanied with multi-million dollar ransom amounts. In this post, we\u2019ll provide a technical examination of one recent campaign that stems back to a technique that we initially reported on in \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2018\/04\/fake-software-update-abuses-netsupport-remote-access-tool.html\u0022\u003EApril 2018\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EBetween May and September 2019, FireEye responded to multiple incidents involving a financially-motivated threat actor who leveraged compromised web infrastructure to establish an initial foothold in victim environments. This activity bared consistencies with a fake browser update campaign first identified in April 2018 \u2013 now tracked by FireEye as \u003Cb\u003EFakeUpdates\u003C\/b\u003E. In this newer campaign, the threat actors leveraged victim systems to deploy malware such as \u003Cb\u003EDridex \u003C\/b\u003Eor \u003Cb\u003ENetSupport\u003C\/b\u003E, and multiple post-exploitation frameworks. The threat actors\u2019 ultimate goal in some cases was to ransom systems in mass with BitPaymer or DoppelPaymer ransomware (see Figure 1).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture1.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 1: Recent FakeUpdates infection chain\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EDue to campaign proliferation, we have responded to this activity at both \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/mandiant\/managed-detection-and-response.html\u0022\u003EMandiant Managed Defense\u003C\/a\u003E customers and incident response investigations performed by Mandiant. Through Managed Defense network and host monitoring as well as Mandiant\u2019s incident response findings, we observed the routes the threat actor took, the extent of the breaches, and exposure of their various toolkits.\u003C\/p\u003E\n\u003Ch4\u003EKnock, Knock: FakeUpdates are Back!\u003C\/h4\u003E\n\u003Cp\u003EIn April 2018, FireEye identified a campaign that used compromised websites to deliver heavily obfuscated Trojan droppers masquerading as Chrome, Internet Explorer, Opera, and\/or Firefox browser updates. The compromised sites contained code injected directly into the HTML or in JavaScript components rendered by the pages which had been injected. These sites were accessed by victim users either via HTTP redirects or watering-hole techniques utilized by the attackers.\u003C\/p\u003E\n\u003Cp\u003ESince our \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2018\/04\/fake-software-update-abuses-netsupport-remote-access-tool.html\u0022\u003EApril 2018 blog post\u003C\/a\u003E, this campaign has been refined to include new techniques and the use of post-exploitation toolkits. Recent investigations have shown threat actor activity that included internal reconnaissance, credential harvesting, privilege escalation, lateral movement, and ransomware deployment in enterprise networks. FireEye has identified that a large number of the compromised sites serving up the first stage of FakeUpdates have been older, vulnerable Content Management System (CMS) applications.\u003C\/p\u003E\n\u003Ch4\u003EYou Are Using an Older Version\u2026of our Malware\u003C\/h4\u003E\n\u003Cp\u003EThe FakeUpdates campaign begins with a rather intricate sequence of browser validation, performed before the final payload is downloaded. Injected code on the initial compromised page will make the user\u2019s browser transparently navigate to a malicious website using hard-coded parameters. After victim browser information is gleaned, additional redirects are performed and the user is prompted to download a fake browser update. FireEye has observed that the browser validation sequence may have additional protections to evade sandbox detections and post-incident triage attempts on the compromise site(s).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture2.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 2: Example of FakeUpdate landing page after HTTP redirects\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe redirect process used numerous subdomains, with a limited number of IP addresses. The malicious subdomains are often changed in different parts of the initial redirects and browser validation stages.\u003C\/p\u003E\n\u003Cp\u003EAfter clicking the \u2018Update\u2019 button, we observed the downloading of one of three types of files:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EHeavily-obfuscated HTML applications (.hta file extensions)\u003C\/li\u003E\n\u003Cli\u003EJavaScript files (.js file extensions)\u003C\/li\u003E\n\u003Cli\u003EZIP-compressed JavaScript files (.zip extensions)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EFigure 3 provides a snippet of JavaScript that provides the initial download functionality.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Evar domain = \u0027\/\/gnf6.ruscacademy[.]in\/\u0027;\u003Cbr\u003E\n var statisticsRequest = \u0027wordpress\/news.php?b=612626\u0026amp;m=ad2219689502f09c225b3ca0bfd8e333\u0026amp;y=206\u0027;\u003Cbr\u003E\n var statTypeParamName = \u0027st\u0027;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u2026\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Evar filename = \u0027download.hta\u0027;\u003Cbr\u003E\n var browser = \u0027Chrome\u0027;\u003Cbr\u003E\n var special = \u00271\u0027;\u0026nbsp; \u0026nbsp;\u003Cbr\u003E\n var filePlain = window.atob(file64);\u003Cbr\u003E\n var a = document.getElementById(\u0027buttonDownload\u0027);\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Excerpts of JavaScript code identified from the FakeUpdates landing pages\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen the user opens the initial FakeUpdates downloader, the Windows Scripting Host (\u003Ci\u003Ewscript.exe)\u003C\/i\u003E is executed and the following actions are performed:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EA script is executed in memory and used to fingerprint the affected system.\u003C\/li\u003E\n\u003Cli\u003EA subsequent backdoor or banking trojan is downloaded if the system is successfully fingerprinted.\u003C\/li\u003E\n\u003Cli\u003EA script is executed in memory which:\u003Cul\u003E\n\u003Cli\u003EDownloads and launches a third party screenshot utility.\u003C\/li\u003E\n\u003Cli\u003ESends the captured screenshots to an attacker.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EThe payload delivered in step 2 is subsequently executed by the script process.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EThe backdoor and banking-trojan payloads described above have been identified as Dridex, NetSupport Manager RAT, AZOrult, and Chthonic malware. The strategy behind the selective payload delivery is unclear; however, the most prevalent malware delivered during this phase of the infection chain were variants of the Dridex backdoor.\u003C\/p\u003E\n\u003Ch4\u003EFakeUpdates: More like FakeHTTP\u003C\/h4\u003E\n\u003Cp\u003EAfter the end user executes the FakeUpdates download, the victim system will send a custom HTTP POST request to a hard-coded Command and Control (C2) server. The POST request, depicted in Figure 4, showed that the threat actors used a custom HTTP request for initial callback. The Age HTTP header, for example, was set to a string of 16 seemingly-random lowercase hexadecimal characters.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture3.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 4: Initial HTTP communication after successful execution of the FakeUpdates dropper\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe HTTP Age header typically represents the time in seconds since an object has been cached by a proxy. In this case, via analysis of the obfuscated code on disk, FireEye identified that the Age header correlates to a scripted \u201cauth header\u201d parameter; likely used by the C2 server to validate the request. The first HTTP POST request also contains an XOR-encoded HTTP payload variable \u201c\u003Cb\u003Ea=\u201d\u003C\/b\u003E.\u003C\/p\u003E\n\u003Cp\u003EThe C2 server responds to the initial HTTP request with encoded JavaScript. When the code is decoded and subsequently executed, system and user information is collected using wscript.exe. The information collected from the victim system included:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe malicious script that initialized the callback\u003C\/li\u003E\n\u003Cli\u003ESystem hostname\u003C\/li\u003E\n\u003Cli\u003ECurrent user account\u003C\/li\u003E\n\u003Cli\u003EActive Directory domain\u003C\/li\u003E\n\u003Cli\u003EHardware details, such as manufacturer\u003C\/li\u003E\n\u003Cli\u003EAnti-virus software details\u003C\/li\u003E\n\u003Cli\u003ERunning processes\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThis activity is nearly identical to the steps observed in our April 2018 post, indicating only minor changes in data collection during this stage. For example, in the earlier iteration of this campaign, we did not observe the collection of the script responsible for the C2 communication. Following the system information gathering, the data is subsequently XOR-encoded and sent via another custom HTTP POST request request to the same C2 server, with the data included in the parameter \u003Cb\u003E\u201cb=\u201d\u003C\/b\u003E. Figure 5 provides a snippet of sample of the second HTTP request.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture4.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 5: Second HTTP POST request after successful system information gathering\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 6 provides a copy of the decoded content, showing the various data points the malware transmitted back to the C2 server.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E0=500\u003Cbr\u003E\n 1=C:\\Users\\User\\AppData\\Local\\Temp\\Chrome.js\u003Cbr\u003E\n 2=AMD64\u003Cbr\u003E\n 3=SYSTEM1\u003Cbr\u003E\n 4=User\u003Cbr\u003E\n 5=4\u003Cbr\u003E\n 6=Windows_NT\u003Cbr\u003E\n 7=DOMAIN\u003Cbr\u003E\n 8=HP\u003Cbr\u003E\n 9=HP EliteDesk\u003Cbr\u003E\n 10=BIOS_VERSION\u003Cbr\u003E\n 11=Windows Defender|Vendor Anti-Virus\u003Cbr\u003E\n 12=Vendor Anti-Virus|Windows Defender|\u003Cbr\u003E\n 13=00:00:00:00:00:00\u003Cbr\u003E\n 14=Enhanced (101- or\u0026nbsp;102-key)\u003Cbr\u003E\n 15=USB Input Device\u003Cbr\u003E\n 16=1024x768\u003Cbr\u003E\n 17=System Idle Process|System|smss.exe|csrss.exe|wininit.exe|csrss.exe| winlogon.exe|services.exe|lsass.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|\u003Cbr\u003E\n svchost.exe|spoolsv.exe|svchost.exe|svchost.exe|HPLaserJetService.exe|conhost.exe\u2026\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Decoded system information gathered by the FakeUpdates malware\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter receiving the system information, the C2 server responds with an encoded payload delivered via chunked transfer-encoding to the infected system. This technique evades conventional IDS\/IPS appliances, allowing for the second-stage payload to successfully download. During our investigations and FireEye Intelligence\u2019s monitoring, we recovered encoded payloads that delivered one of the following:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EDridex (Figure 7)\u003C\/li\u003E\n\u003Cli\u003ENetSupport Manage Remote Access Tools (RATs) (Figure 8)\u003C\/li\u003E\n\u003Cli\u003EChthonic or AZORult (Figure 9)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; function runFile() {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; var lastException = \u0027\u0027;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; try {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; var wsh = new ActiveXObject(\u0026quot;WScript.Shell\u0026quot;);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; wsh.Run(\u0027cmd \/C rename \u0026quot;\u0027 + _tempFilePathSave + \u0027\u0026quot; \u0026quot;\u0027 + execFileName + \u0027\u0026quot;\u0027);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; WScript.Sleep(3 * 1000);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; runFileResult = wsh.Run(\u0027\u0026quot;\u0027 + _tempFilePathExec + \u0027\u0026quot;\u0027);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lastException = \u0027\u0027;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; } catch (error) {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lastException = error.number;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; runFileExeption += \u0027error number:\u0027 + error.number + \u0027 message:\u0027 + error.message;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; }\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Code excerpt observed in FakeUpdates used to launch Dridex payloads\u003C\/span\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cspan class=\u0022code\u0022\u003Efunction runFile() {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; var lastException = \u0027\u0027;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; try {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; var wsh = new ActiveXObject(\u0026quot;WScript.Shell\u0026quot;);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; runFileResult = wsh.Run(\u0027\u0026quot;\u0027 + _tempFilePathExec + \u0027\u0026quot; \/verysilent\u0027);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lastException = \u0027\u0027;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; } catch (error) {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lastException = error.number;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; runFileExeption += \u0027error number:\u0027 + error.number + \u0027 message:\u0027 + error.message;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; }\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Code excerpt observed in FakeUpdates used to launch NetSupport payloads\u003C\/span\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; function runFile() {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; var lastException = \u0027\u0027;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; try {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; var wsh = new ActiveXObject(\u0026quot;WScript.Shell\u0026quot;);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; runFileResult = wsh.Run(\u0027\u0026quot;\u0027 + _tempFilePathExec + \u0027\u0026quot;\u0027);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lastException = \u0027\u0027;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; } catch (error) {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lastException = error.number;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; runFileExeption += \u0027error number:\u0027 + error.number + \u0027 message:\u0027 + error.message;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; }\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Code excerpt observed in FakeUpdates used to launch Chthonic and AZORult payloads\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EDuring this process, the victim system downloads and executes nircmdc.exe, a utility specifically used during the infection process to save two system screenshots. Figure 10 provides an example command used to capture the desktop screenshots.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026quot;C:\\Users\\User\\AppData\\Local\\Temp\\nircmdc.exe\u0026quot; savescreenshot \u0026quot;C:\\Users\\User\\AppData\\Local\\Temp\\6206a2e3dc14a3d91.png\u0026quot;\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Sample command used to executed the Nircmd tool to take desktop screenshots\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe PNG screenshots of the infected systems are then transferred to the C2 server, after which they are deleted from the system. Figure 11 provides an example of a HTTP POST request, again with the custom Age and User-Agent headers.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture5.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 11: Screenshots of the infected system are sent to an attacker-controlled C2\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EInterestingly, the screenshot file transfers were neither encoded nor obfuscated, as with other data elements transferred by the FakeUpdates malware. As soon as the screenshots are transferred, nircmdc.exe is deleted.\u003C\/p\u003E\n\u003Ch4\u003EAll Hands on Deck\u003C\/h4\u003E\n\u003Cp\u003EIn certain investigations, the incident was far from over. Following the distribution of Dridex v4 binaries (botnet IDs 199 and 501), new tools and frameworks began to appear. FireEye identified the threat actors leveraged their Dridex backdoor(s) to execute the publicly-available PowerShell \u003Ca href=\u0022https:\/\/github.com\/EmpireProject\/Empire\u0022\u003EEmpire\u003C\/a\u003E and\/or \u003Ca href=\u0022https:\/\/github.com\/zerosum0x0\/koadic\u0022\u003EKoadic\u003C\/a\u003E post-exploitation frameworks. Managed Defense also identified the FakeUpdates to Dridex infection chain resulting in the download and execution of PoshC2, another publicly available tool. While it could be coincidental, it is worth noting that the use of PoshC2 was first observed in early September 2019 following the announcement that Empire would no longer be maintained and could represent a shift in attacker TTPs. These additional tools were often executed between 30 minutes and 2 hours after initial Dridex download. The pace of the initial phases of related attacks possibly suggests that automated post-compromise techniques are used in part before interactive operator activity occurs.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture6.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EWe identified extensive usage of Empire and C2 communication to various servers during these investigations. For example, via process tracking, we identified a Dridex-injected explorer.exe executing malicious PowerShell: a clear sign of an Empire stager:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture7.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 12: An example of PowerShell Empire stager execution revealed during forensic analysis\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the above example, the threat actors instructed the victim system to use the remote server 185.122.59[.]78 for command-and-control using an \u003Ca href=\u0022https:\/\/github.com\/EmpireProject\/Empire\/blob\/master\/data\/agent\/agent.ps1\u0022\u003Eout-of-the-box Empire agent C2 configuration\u003C\/a\u003E for TLS-encrypted backdoor communications.\u003C\/p\u003E\n\u003Cp\u003EDuring their hands-on post-exploitation activity, the threat actors also moved laterally via PowerShell remoting and RDP sessions. FireEye identified the use of WMI to create remote PowerShell processes, subsequently used to execute Empire stagers on domain-joined systems. In one specific case, the time delta between initial Empire backdoor and successful lateral movement was under 15 minutes. Another primary goal for the threat actor was internal reconnaissance of both the local system and domain the computer was joined to. Figure 13 provides a snippet of Active Directory reconnaissance commands issued by the attacker during one of our investigations.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture8.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: Attacker executed commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe threat actors used an Empire module named\u0026nbsp;SessionGopher\u0026nbsp;and the venerable Mimikatz to harvest endpoint session and credential information. Finally, we also identified the attackers utilized Empire\u2019s Invoke-EventVwrBypass, a Windows bypass technique used to launch executables using eventvwr.exe, as shown in Figure 14.\u003C\/p\u003E\n\u003Cp\u003E\u0026quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0026quot; -NoP -NonI -c $x=$((gp HKCU:Software\\Microsoft\\Windows Update).Update); powershell -NoP -NonI -W Hidden -enc $x\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture9.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: PowerShell event viewer bypass\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ERansomware Attacks \u0026amp; Operator Tactics\u003Cb\u003E\u003C\/b\u003E\u003C\/h4\u003E\n\u003Cp\u003EWithin these investigations, FireEye identified the deployment BitPaymer or DoppelPaymer ransomware. While these ransomware variants are highly similar, DoppelPaymer uses additional obfuscation techniques. It also has enhanced capabilities, including an updated network discovery mechanism and the requirement of specific command-line execution. DoppelPaymer also uses a different encryption and padding scheme.\u003C\/p\u003E\n\u003Cp\u003EThe ransomware and additional reconnaissance tools were downloaded through public sharing website repositories such as DropMeFiles and SendSpace. Irrespective of the ransomware deployed, the attacker used the SysInternals utlity PSEXEC to distribute and execute the ransomware. \u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ENotably, in the DoppelPaymer incident, FireEye identified that Dridex v2 with the Botnet ID 12333 was downloaded onto the same system previously impacted by an instance of Dridex v4 with Botnet ID 501. Within days, this secondary Dridex instance was then used to enable the distribution of DoppelPaymer ransomware.\u0026nbsp; Prior to DoppelPaymer, the threat actor deleted volume shadow copies and disabled anti-virus and anti-malware protections on select systems. Event log artifacts revealed commands executed through PowerShell which were used to achieve this step (Figure 15):\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002231%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EEvent Log\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u00228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EEID\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMessage\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002231%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMicrosoft-Windows-PowerShell%4Operational\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u00228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E600\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;HostApplication=powershell.exe Set-MpPreference -DisableRealtimeMonitoring $true\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002231%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMicrosoft-Windows-PowerShell%4Operational\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u00228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E600\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;HostApplication=powershell.exe Uninstall-WindowsFeature -Name Windows-Defender\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002231%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EApplication\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u00228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1034\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWindows Installer removed the product. Product Name: McAfee Agent-++-5.06.0011-++-1033-++-1603-++-McAfee, Inc.-++-(NULL)-++--++-. Product Version: 82.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: Event log entries related to the uninstallation of AV agents and disablement of real-time monitoring\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe DoppelPaymer ransomware was found in an Alternate Data Stream (ADS) in randomly named files on disk. ADSs are attributes within NTFS that allow for a file to have multiple data streams, with only the primary being visible in tools such as Windows Explorer. After ransomware execution, files are indicated as encrypted by being renamed with a \u201c.locked\u201d file extension. In addition to each \u201c.locked\u201d file, there is a ransom note with the file name \u201creadme2unlock.txt\u201d which provides instructions on how to decrypt files.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/headfakeransomware\/Picture11.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: DoppelPaymer ransomware note observed observed during a Mandiant Incident Response investigation\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ERansomware? Not In My House!\u003C\/h4\u003E\n\u003Cp\u003EOver the past few years, we have seen ransomware graduate from a nuisance malware to one being used to extort victim networks out of significant sums of money. Furthermore, threat actors are now coupling ransomware with multiple toolkits or other malware families to gain stronger footholds into an environment. In this blog post alone, we witnessed a threat actor move through multiple toolsets - some automated, some manual - with the ultimate goal of holding the victim organization hostage.\u003C\/p\u003E\n\u003Cp\u003ERansomware also raises the stakes for unprepared organizations as it levels the playing field for all areas of your enterprise. Ransomware proves that threat actors don\u2019t need to get access to the most sensitive parts of your organization \u2013 they need to get access to the ones that will disrupt business processes. This widens your attack surface, but luckily, also gives you more opportunity for detection and response. Mandiant recently published an in depth white paper on \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/09\/ransomware-protection-and-containment-strategies.html\u0022\u003ERansomware Protection and Containment Strategies\u003C\/a\u003E, which may help organizations mitigate the risk of ransomware events.\u003C\/p\u003E\n\u003Ch4\u003EIndicators\u003C\/h4\u003E\n\u003Cp\u003EThe following indicator set is a collective representation of artifacts identified during investigations into multiple customer compromises.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003E\u003Cb\u003EType\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003E\u003Cb\u003EIndicator(s)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003EFakeUpdates Files\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003E0e470395b2de61f6d975c92dea899b4f\u003C\/p\u003E\n\u003Cp\u003E7503da20d1f83ec2ef2382ac13e238a8\u003C\/p\u003E\n\u003Cp\u003E102ae3b46ddcb3d1d947d4f56c9bf88c\u003C\/p\u003E\n\u003Cp\u003Eaaca5e8e163503ff5fadb764433f8abb\u003C\/p\u003E\n\u003Cp\u003E2c444002be9847e38ec0da861f3a702b\u003C\/p\u003E\n\u003Cp\u003E62eaef72d9492a8c8d6112f250c7c4f2\u003C\/p\u003E\n\u003Cp\u003E175dcf0bd1674478fb7d82887a373174\u003Cbr\u003E\n10eefc485a42fac3b928f960a98dc451\u003Cbr\u003E\na2ac7b9c0a049ceecc1f17022f16fdc6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003EFakeUpdates Domains \u0026amp; IP Addresses\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003E\u0026lt;8-Characters\u0026gt;.green.mattingsolutions[.]co\u003Cbr\u003E\n\u0026lt;8-Characters\u0026gt;.www2.haciendarealhoa[.]com\u003Cbr\u003E\n\u0026lt;8-Characters\u0026gt;.user3.altcoinfan[.]com\u003Cbr\u003E\n93.95.100[.]178\u003Cbr\u003E\n130.0.233[.]178\u003Cbr\u003E\n185.243.115[.]84\u003C\/p\u003E\n\u003Cp\u003Egnf6.ruscacademy[.]in\u003C\/p\u003E\n\u003Cp\u003Ebackup.awarfaregaming[.]com\u003C\/p\u003E\n\u003Cp\u003Eclick.clickanalytics208[.]com\u003C\/p\u003E\n\u003Cp\u003Etrack.amishbrand[.]com\u003C\/p\u003E\n\u003Cp\u003Etrack.positiverefreshment[.]org\u003C\/p\u003E\n\u003Cp\u003Elink.easycounter210[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003Enircmdc.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003E8136d84d47cb62b4a4fe1f48eb64166e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003EDridex\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003E7239da273d3a3bfd8d169119670bb745\u003C\/p\u003E\n\u003Cp\u003E72fe19810a9089cd1ec3ac5ddda22d3f\u003Cbr\u003E\n07b0ce2dd0370392eedb0fc161c99dc7\u003Cbr\u003E\nc8bb08283e55aed151417a9ad1bc7ad9\u003C\/p\u003E\n\u003Cp\u003E6e05e84c7a993880409d7a0324c10e74\u003C\/p\u003E\n\u003Cp\u003E63d4834f453ffd63336f0851a9d4c632\u003C\/p\u003E\n\u003Cp\u003E0ef5c94779cd7861b5e872cd5e922311\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003EEmpire C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003E185.122.59[.]78\u003C\/p\u003E\n\u003Cp\u003E109.94.110[.]136\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EDetecting the Techniques\u003C\/h4\u003E\n\u003Cp\u003EFireEye detects this activity across our platforms, including named detections for Dridex, Empire, BitPaymer and DoppelPaymer Ransomware. As a result of these investigations, FireEye additionally deployed new indicators and signatures to Endpoint and Network Security appliances.\u0026nbsp; This table contains several specific detection names from a larger list of detections that were available prior to this activity occurring.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022\u003E\u003Cp\u003E\u003Cb\u003EPlatform\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022433\u0022\u003E\u003Cp\u003E\u003Cb\u003ESignature Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EEndpoint Security\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022433\u0022\u003E\u003Cp\u003EHX Exploit Detection\u003Cbr\u003E\nEmpire RAT (BACKDOOR)\u003Cbr\u003E\nEVENTVWR PARENT PROCESS (METHODOLOGY)\u003Cbr\u003E\nDridex (BACKDOOR)\u003Cbr\u003E\nDridex A (BACKDOOR)\u003Cbr\u003E\nPOWERSHELL SSL VERIFICATION DISABLE (METHODOLOGY)\u003Cbr\u003E\nSUSPICIOUS POWERSHELL USAGE (METHODOLOGY)\u003Cbr\u003E\nFAKEUPDATES SCREENSHOT CAPTURE (METHODOLOGY)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003ENetwork Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003EBackdoor.FAKEUPDATES\u003Cbr\u003E\nTrojan.Downloader.FakeUpdate\u003Cbr\u003E\nExploit.Kit.FakeUpdate\u003Cbr\u003E\nTrojan.SSLCert.SocGholish\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EMITRE ATT\u0026amp;CK Technique Mapping\u003C\/h4\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EATT\u0026amp;CK\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ETechniques\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EInitial Access\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EDrive-by Compromise (T1189), Exploit Public-Facing Application (T1190)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EExecution\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EPowerShell (T1086), Scripting (T1064), User Execution (T1204), Windows Management Instrumentation (T1047)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EPersistence\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EDLL Search Order Hijacking (T1038)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EPrivilege Escalation\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EBypass User Account Control (T1088), DLL Search Order Hijacking (T1038)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EDefense Evasion\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EBypass User Account Control (T1088), Disabling Security Tools (T1089), DLL Search Order Hijacking (T1038), File Deletion (T1107), Masquerading (T1036), NTFS File Attributes (T1096), Obfuscated Files or Information (T1027), Scripting (T1064), Virtualization\/Sandbox Evasion (T1497)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ECredential Access\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ECredential Dumping (T1003)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EDiscovery\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EAccount Discovery (T1087), Domain Trust Discovery (T1482), File and Directory Discovery (T1083), Network Share Discovery (T1135), Process Discovery (T1057), Remote System Discovery (T1018), Security Software Discovery (T1063), System Information Discovery (T1082), System Network Configuration Discovery (T1016), Virtualization\/Sandbox Evasion (T1497)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ELateral Movement\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ERemote Desktop Protocol (T1076),\u0026nbsp; Remote File Copy (T1105)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ECollection\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EData from Local System (T1005), Screen Capture (T1113)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommand And Control\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ECommonly Used Port (T1436), Custom Command and Control Protocol (T1094) ,Data Encoding (T1132), Data Obfuscation (T1001), Remote Access Tools (T1219), Remote File Copy (T1105), Standard Application Layer Protocol (T1071)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EExfiltration\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EAutomated Exfiltration (T1020), Exfiltration Over Command and Control Channel (T1041)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022149\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EImpact\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EData Encrypted for Impact (T1486), Inhibit System Recovery (T1490), Service Stop (T1489)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EA huge thanks to James Wyke and Jeremy Kennelly for their analysis of this activity and support of this post.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ECatch an on-demand recap on this and the\u0026nbsp;\u003Ca href=\u0022https:\/\/www.brighttalk.com\/webcast\/10703\/445570\u0022\u003ETop 5 Managed Defense attacks\u003C\/a\u003E\u0026nbsp;this year.\u003C\/i\u003E\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Nov 19 2020 19:07:23 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye has observed financially-motivated threat actors deploying ransomware.\u003C\/p\u003E\n",
      "jcr:lastModified": "Fri Sep 27 2019 16:00:14 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "brian.sisco@fireeye.com",
      "jcr:lastModified": "Tue Oct 01 2019 15:10:54 GMT+0000",
      "imageRotate": "0"
    }
  }
}
