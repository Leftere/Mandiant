{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed May 04 2016 09:04:15 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "FLARE IDA Pro Script Series: Generating FLAIR function patterns using IDAPython",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "c57e6952-11ab-41f5-9a5a-91b78c5fb575",
    "author": "Willi Ballenthin",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "focusKeyword": "FLARE",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "ee56431d-931e-4c4b-8136-9e1707dd4185"
    ],
    "jcr:created": "Wed May 08 2019 18:13:55 GMT-0400",
    "cq:lastReplicated": "Wed May 08 2019 18:13:54 GMT-0400",
    "cq:lastModified": "Wed May 08 2019 18:13:43 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "ee56431d-931e-4c4b-8136-9e1707dd4185",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-doctypes:blog",
      "fireeye-blog-authors:cap-willi-ballenthin",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:FLARE",
      "fireeye-blog-tags:malware-analysis",
      "fireeye-blog-tags:reverse-engineering"
    ],
    "jcr:uuid": "4c827f10-cfd3-48dc-bcab-2c9fa4d45faa",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Jan 08 2015 15:39:00 GMT-0500",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
        "text": "\u003Cp\u003EThe FireEye Labs Advanced Reverse Engineering (FLARE) Team continues to share knowledge and tools with the community. This is the third IDA Pro script we\u2019ve released via this blog and we\u2019ll continue to release these scripts \u003Ca href=\u0022https:\/\/github.com\/fireeye\/flare-ida\u0022\u003Ehere\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch2\u003ESummary\u003C\/h2\u003E\n\u003Cp\u003EThis blog describes an IDAPython script to assist with malware reverse engineering. FLIRT signatures help IDA Pro recognize common functions in compiled programs and automatically rename them for the reverse engineer. The IDAPython script idb2pat.py generates IDA Pro FLAIR patterns from existing IDB files. You can use it to generate FLIRT signatures for 32- or 64-bit executables loaded into IDA Pro, even if you don\u0027t have the typical requirements of an original source or static libraries. Because idb2pat.py is written in Python, you won\u0027t need to recompile it after each IDA Pro SDK release.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ch2\u003EProblem\u003C\/h2\u003E\n\u003Cp\u003EIDA Pro uses Fast Library Identification and Recognition Technology (FLIRT) signatures to quickly identify compiler-generated and statically linked functions in programs. Once identified, IDA Pro renames the common functions and marks these as library functions to guide the reverse engineer toward more relevant sections of code. For example, without FLIRT signatures, the reverse engineer may encounter the complex function shown in Illustration 1, and work to understand its purpose. With FLIRT signatures enabled, IDA Pro renames the function as printf, and the analyst can likely pass over it.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg width=\u0022431\u0022 height=\u0022450\u0022 src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FLARE%20fig%201.jpg\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EHex-Rays distributes utilities in the Fast Library Acquisition for Identification and Recognition (FLAIR, no relation to the FireEye FLARE team :-) ) package to generate custom FLIRT signatures on its website. These utilites operate on static libraries such as .a files on Linux and .lib files on Windows. Reverse engineers can easily teach IDA Pro to identify custom libraries with the FLAIR utilities. Typically the reverse engineer starts by using a utility such as pelf to generate a pattern file that describes major features of each function in the library. They then use the sigmake utility to translate the textual pattern file into a binary signature file. This second step resolves conflicts in the signatures and produces an efficient format that IDA Pro can digest. The reverse engineer can now load the signature file and instruct IDA Pro to rename custom library functions in a statically linked program.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EFor example, during the \u003Ca href=\u0022http:\/\/www.flare-on.com\/\u0022\u003EFLARE-On challenge\u003C\/a\u003E, some of the successful participants completed the sixth challenge (linhax) using custom FLIRT signatures. The statically linked Linux executable was stripped, so many common functions appeared mixed in with key functionality. Using the FLAIR utilities on the matching runtime libraries created the FLIRT signatures required to resolve many of the support function names in linhax.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EUnfortunately the FLAIR utilities only work on static libraries, which makes them most useful when a reverse engineer has access to source code or libraries prior to linking. Usually this is just fine; however, there are a few edge cases. For instance, Go binaries are always statically linked to their Go-language dependencies, and it is not possible to build these libraries separately. When I loaded a stripped \u0026quot;Hello, World!\u0026quot; program into IDA Pro, I encountered 1,777 unnamed functions! I\u0027d save a lot of time if a majority of those functions could be renamed automatically.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ch2\u003EExisting Solutions\u003C\/h2\u003E\n\u003Cp\u003EFor more than a decade, IDA plugins that extract signatures from programs loaded into IDA Pro have been freely available online. Notably, idb2pat and idb2sig are shared library plugins that you can download \u003Ca href=\u0022http:\/\/www.woodmann.com\/collaborative\/tools\/index.php\/Category:IDA_Signature_Creation_Tools\u0022\u003Ehere\u003C\/a\u003E. Illustration 2 shows a reverse engineer generating a pattern file from ntdll.dll using idb2sig in IDA Pro. These plugins are fast and well-tested. However, since they are written in C++, they must be recompiled with each update to the IDA Pro SDK. Also, many plugins have limited support for 64-bit programs.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg width=\u0022381\u0022 height=\u0022365\u0022 src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FLARE%20fig%202.jpg\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ch2\u003EProposed Solution\u003C\/h2\u003E\n\u003Cp\u003EThe IDAPython script idb2pat.py generates FLAIR patterns from IDB files. It works on both 32- and 64-bit programs. It is a very close port of the C++ idb2sig (by mercury, and updated by TQN) to Python.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ch2\u003EInstallation and Use\u003C\/h2\u003E\n\u003Cp\u003EThe script idb2pat.py is provided under the Apache License, version 2.0, and can be downloaded from the FLARE team\u0027s Github repository \u003Ca href=\u0022https:\/\/github.com\/fireeye\/flare-ida\u0022\u003Ehere\u003C\/a\u003E. Once downloaded, you can run the standalone script directly using IDA Pro\u0027s scripting dialog. The script will prompt you for the output file path, and use sane defaults while generating patterns of each function in the current project. These defaults can be tweaked, and sufficient documentation is found in the plugin file.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EI was motivated to develop idb2pat.py while considering how to reverse engineer Go binaries. As an example, I compiled the \u0026quot;Hello, World!\u0026quot; sample program available on the Go tutorial website \u003Ca href=\u0022http:\/\/tour.golang.org\/#1\u0022\u003Ehere\u003C\/a\u003E, for 64-bit Linux. The Go compiler includes copious debugging information and symbols in the default executable format, and IDA Pro\u0027s analysis helpfully renamed all 1,777 functions in the binary file. However, after stripping the file, IDA Pro was unable to rename any functions and I had a difficult time differentiating support code from the main function\u0027s disassembly. Illustration 3 and Illustration 4 show the before and after function listings when stripping the Go binary.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg width=\u0022421\u0022 height=\u0022239\u0022 src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FLARE%20fig%203.jpg\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg width=\u0022398\u0022 height=\u0022279\u0022 src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FLARE%20fig%204.jpg\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ETo help IDA Pro identify support functions, I used idb2pat.py to generate a pattern file from the unstripped binary. Illustration 5 shows the plugin output as the script generated 1,754 patterns. Next, I\u0026nbsp; ran the FLAIR utility sigmake to identify 18 pattern conflicts in the file, and subsequently remove them from the database. This resulted in 1,718 patterns that I translated into a signature file, also using sigmake. I used the following command to invoke sigmake against the pattern file:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp; \u0026nbsp;sigmake -ngolang-linux64 helloworld.pat helloworld.sig\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg width=\u0022512\u0022 height=\u002298\u0022 src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FLARE%20fig%205.jpg\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThen, I opened up the stripped version of the program, applied the FLIRT signature, and watched IDA Pro rename most of the functions. The few functions it missed were due to either the 18 pattern conflicts, or functions with fewer than six bytes of instructions (too short to effectively signature). Illustration 6 shows a basic block of an initialization routine when no names are recognized, and Illustration 7 shows the same block after the FLIRT signatures have been applied. The second view shows much more contextual information via the function names.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg width=\u0022472\u0022 height=\u0022400\u0022 src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FLARE%20fig%207.jpg\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg width=\u0022456\u0022 height=\u0022424\u0022 src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FLARE%20fig%207A.jpg\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EApplying the same signature to other programs in the Go tutorial series also yielded good coverage since many of the support and library functions are the same. I plan on developing a Go program that imports all standard libraries and using this as the source for a comprehensive FLIRT signature for Go.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ch2\u003EConclusion\u003C\/h2\u003E\n\u003Cp\u003EYou can use the IDAPython script idb2pat.py to quickly and easily generate function patterns for IDA Pro FLIRT signatures. This helps IDA automatically rename common functions in compiled programs. The script works on both 32- and 64-bit programs, and because it is written in Python, it can be easily updated and modified by users. I hope you\u0027ll give this free tool a shot by downloading it from the FLARE team\u0027s Github repository!\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Jan 12 2015 11:55:41 GMT-0500",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
      "text": "\u003Cp\u003EThe FireEye Labs Advanced Reverse Engineering (FLARE) Team is sharing a third installment of a blog about the IDA Pro script with the community.\u003C\/p\u003E\n",
      "jcr:lastModified": "Thu Jan 08 2015 16:17:24 GMT-0500",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Wed May 08 2019 18:13:43 GMT-0400",
      "imageRotate": "0"
    }
  }
}
