{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Sep 19 2017 16:19:05 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Introducing pywintrace: A Python Wrapper for ETW",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "9a109640-bd17-485c-890e-76b0144748a5",
    "author": "Anthony Berglund",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "c2201030-9a57-4abc-84d9-e404d5a60a69"
    ],
    "jcr:created": "Tue Sep 19 2017 16:19:05 GMT-0400",
    "cq:lastReplicated": "Tue Sep 19 2017 16:19:04 GMT-0400",
    "cq:lastModified": "Tue Sep 19 2017 16:18:10 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "c2201030-9a57-4abc-84d9-e404d5a60a69",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:kevin-boyd",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-doctypes:blog",
      "fireeye-blog-authors:anthony-berglund",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:etw"
    ],
    "jcr:uuid": "3c331982-df8d-4fbb-8039-307c49c58433",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Sep 19 2017 16:15:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EIntroduction\u003C\/h4\u003E\n\u003Cp\u003EEvent tracing for Windows (ETW) is a \u003Ca href=\u0022https:\/\/support.microsoft.com\/en-us\/help\/2593157\/event-tracing-for-windows-etw-simplified\u0022\u003Elightweight logging facility\u003C\/a\u003E first introduced with Windows 2000. Originally intended as a software diagnostic, troubleshooting and performance monitoring tool, it was greatly expanded in Windows Vista to create a \u003Ca href=\u0022https:\/\/blogs.msdn.microsoft.com\/ntdebugging\/2009\/08\/27\/part-1-etw-introduction-and-overview\/\u0022\u003Elightweight debugging mechanism\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EThe basic architecture of ETW has three discrete components: providers, controllers, and consumers. The providers supply the trace data, controllers control capture sessions, and the consumers process the data returned from the providers. Figure 1 shows an overview of this architecture.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pywintrace\/image1.jpeg\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: ETW Architecture\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWindows 7 has more than 600 providers installed by default, many of which provide verbose trace data. ETW data can be used to conduct research into almost any area of the OS without the need for a debugger. A default Windows installation ships with all the tools needed to capture ETW data, but these tools are somewhat inflexible. Another drawback is that a different tool is usually needed when analyzing the captured data.\u003C\/p\u003E\n\u003Cp\u003EPrior to making the decision to create an entirely new project, research was conducted to see if there was an existing project that would work. Several projects were found, with \u003Ca href=\u0022https:\/\/github.com\/Microsoft\/krabsetw\u0022\u003EKrabsETW from Microsoft\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/github.com\/sebmarchand\/pyetw\u0022\u003EGoogle\u2019s pyetw\u003C\/a\u003E looking the most promising. Neither of these were quite right, however, since KrabsETW is not written in Python and therefore not compatible with existing projects, and pyetw is no longer maintained. We found simple programmatic access to ETW using Python was missing.\u003C\/p\u003E\n\u003Ch4\u003EEnter pywintrace\u003C\/h4\u003E\n\u003Cp\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/pywintrace\u0022\u003EPywintrace\u003C\/a\u003E is a Python package developed by the FireEye Innovation and Custom Engineering (ICE) team to fill the need for a flexible wrapper around Windows APIs to accelerate ETW research. Using Python\u2019s ctypes, the team created a module that can create and control a capture session, as well as process trace events. The package contains three main classes:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EEventProvider \u2013 Wraps interactions with ETW providers\u003C\/li\u003E\n\u003Cli\u003EEventConsumer \u2013\u00a0 Consumer to process messages emitted from ETW trace sessions\u003C\/li\u003E\n\u003Cli\u003EETW \u2013 Main class for ETW captures\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EUsing pywintrace is simple, and it can be extended as needed to fit nearly any desired capture scenario. Typically, a user would create an instance of the ETW class to begin capturing data. Figure 2 shows a simple example of this. \u00a0\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pywintrace\/Fig2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Simple capture script\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn Figure 2, the ETW provider \u201cSome Provider\u201d with GUID \u201c11111111-1111-1111-1111-111111111111\u201d is being captured, and the resultant message data is written to the console. The run function in Figure 2 is a helper function that will process the messages returned by the system. If desired, a user may specify their own callback function and process the messages however they choose.\u003C\/p\u003E\n\u003Cp\u003EThe example in Figure 2 is simple, but shows how easy pywintrace is to use. For more examples, see the \u003Ci\u003Eexamples\u003C\/i\u003E directory of the pywintrace package.\u003C\/p\u003E\n\u003Ch4\u003ECapturing Interesting Data\u003C\/h4\u003E\n\u003Cp\u003EWhile there are many interesting providers to investigate, a blog published by Microsoft demonstrated the usefulness of the \u003Ca href=\u0022https:\/\/blogs.msdn.microsoft.com\/ntdebugging\/2009\/09\/08\/part-2-exploring-and-decoding-etw-providers-using-event-log-channels\/\u0022\u003EMicrosoft-Windows-WinINet provider\u003C\/a\u003E on Windows 7. Another interesting WinInet provider, \u003Ca href=\u0022https:\/\/technet.microsoft.com\/en-us\/library\/jj659262.aspx\u0022\u003EMicrosoft-Windows-WinINet-Capture\u003C\/a\u003E, was added with Windows 10. Using pywintrace the ICE team was easily able to perform an ETW capture using both. Since the ETW messages are delivered \u003Ca href=\u0022https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/aa363668(v=vs.85).aspx#consumers\u0022\u003Echronologically by the system\u003C\/a\u003E, there is no need for special processing when using multiple providers. Figure 3 shows some of this capture data.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pywintrace\/image2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: ETW traffic capture\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAt a minimum, each message contains a message ID, an associated event type name, description, task name, and an EventHeader. In Figure 3 the first message (ID 108), a Microsoft-Windows-WinINet provider message, shows a request handle being created for the server at \u2018www.google.com\u2019. \u00a0Of note is that domain specific information is returned, and is emitted from several other providers as well \u2013 without the need for a Layered Service Provider (LSP) or driver.\u003C\/p\u003E\n\u003Cp\u003EIn the second message (ID 2001), a Microsoft-Windows-WinINet-Capture provider message, shows the request data being sent to the server. The \u2018payload\u2019 field of this message is a hex stream of the plaintext traffic. The decoded data is shown in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pywintrace\/image3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Decoded HTTPS traffic\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIt should be noted that this capture was performed on a Windows 10 machine using the Edge browser. Other browser and OS combinations may provide different results. This information can be very useful, however, since it could be used to detect malicious activity that would normally be masked by a layer of encryption.\u003C\/p\u003E\n\u003Ch4\u003ECapturing Malicious Activity\u003C\/h4\u003E\n\u003Cp\u003EFigure 5 shows a snippet of a WinINet capture of traffic generated by a malware sample in a controlled environment.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pywintrace\/image4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Malicious traffic\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EHere the malware is seen beaconing out to its command and control (C2) server and requesting a web page. This single message shows the URL of the page being requested as well as the Process ID and Thread ID that originated the malicious activity. From this message, the URL could be used to determine if the request was malicious and the process \/ thread information could be used to track down the malware \u2013 especially in cases of process hollowing or DLL injection.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EETW provides a very powerful lightweight trace mechanism conveniently baked into Windows. Among other things it can be used to potentially detect malicious activity on an endpoint. Using pywintrace to capture ETW data is simpler than using multiple tools to do the same job, and since it is written in Python it is easy to modify for whatever is needed. This makes the job of slogging through the hundreds of ETW providers much easier, and accelerates efforts to find interesting providers.\u003C\/p\u003E\n\u003Cp\u003EDownload \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/pywintrace\u0022\u003Epywintrace\u003C\/a\u003E today!\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgement\u003C\/h4\u003E\n\u003Cp\u003ESpecial thanks to the entire ICE team. ICE is a small, highly trained, team of engineers that incubate and deliver capabilities that matter to our products, our clients and our customers. ICE is always looking for exceptional candidates interested in solving challenging problems quickly.\u003C\/p\u003E\n\u003Cp\u003EAlso, thanks to Microsoft for their extensive blog posts and documentation on ETW.\u00a0\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Sep 19 2017 11:54:37 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EPywintrace is a Python package developed by the FireEye Innovation and Custom Engineering (ICE) team to fill the need for a flexible wrapper around Windows APIs to accelerate ETW research.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Sep 18 2017 18:08:02 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Sep 19 2017 16:18:10 GMT-0400",
      "imageRotate": "0"
    }
  }
}
