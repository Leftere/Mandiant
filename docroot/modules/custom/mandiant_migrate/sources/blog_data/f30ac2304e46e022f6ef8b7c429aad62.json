{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Dec 14 2017 10:00:03 GMT-0500",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Attackers Deploy New ICS Attack Framework \u201cTRITON\u201d and Cause Operational Disruption to Critical Infrastructure",
    "jcr:versionHistory": "a534a71e-eabd-4380-9650-66d056aba498",
    "author": "Blake Johnson",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "4527b044-dba5-4e82-babf-5f1ad9c38f7a"
    ],
    "jcr:created": "Fri Jul 24 2020 06:34:50 GMT+0000",
    "cq:lastModified": "Fri Jul 24 2020 06:34:44 GMT+0000",
    "jcr:baseVersion": "4527b044-dba5-4e82-babf-5f1ad9c38f7a",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:blake-johnson",
      "fireeye-blog-authors:dan-caban",
      "fireeye-blog-authors:marina-krotofil",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:ics-security",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-authors:dan-scali",
      "fireeye-blog-authors:nathan-brubaker",
      "fireeye-blog-authors:cap-christopher-glyer",
      "fireeye-blog-tags:homepage-highlight"
    ],
    "jcr:uuid": "bcbec0d9-55a4-47ca-bc28-10c9546ed41c",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Dec 14 2017 10:00:00 GMT-0500",
    "cq:lastModifiedBy": "reference-adjustment-service",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EIntroduction\u003C\/h4\u003E\n\u003Cp\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/services.html\u0022\u003EMandiant\u003C\/a\u003E recently responded to an incident at a critical infrastructure organization where an attacker deployed malware designed to manipulate industrial safety systems. The targeted systems provided emergency shutdown capability for industrial processes. We assess with moderate confidence that the attacker was developing the capability to cause physical damage and inadvertently shutdown operations. This malware, which we call TRITON, is an attack framework built to interact with Triconex Safety Instrumented System (SIS) controllers. We have not attributed the incident to a threat actor, though we believe the activity is consistent with a nation state preparing for an attack.\u003C\/p\u003E\n\u003Cp\u003ETRITON is one of a limited number of publicly identified malicious software families targeted at \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/products\/industrial-systems-and-critical-infrastructure-security.html\u0022\u003Eindustrial control systems (ICS)\u003C\/a\u003E. It follows \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/company\/press-releases\/2014\/fireeye-reveals-rise-in-advanced-threat-activities-by-iranian-linked-ajax-security-team-in-post-stuxnet-era.html\u0022\u003EStuxnet\u003C\/a\u003E which was used against Iran in 2010 and Industroyer which we believe was deployed by Sandworm Team against Ukraine in 2016. TRITON is consistent with these attacks, in that it could prevent safety mechanisms from executing their intended function, resulting in a physical consequence.\u003C\/p\u003E\n\u003Ctable cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002290\u0022\u003E\u003Cp\u003E\u003Cb\u003EMalware Family\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022189\u0022\u003E\u003Cp\u003E\u003Cb\u003EMain Modules\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022189\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd rowspan=\u00222\u0022 width=\u002290\u0022\u003E\u003Cp\u003ETRITON\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022189\u0022\u003E\u003Cp\u003Etrilog.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022189\u0022\u003E\u003Cp\u003EMain executable leveraging libraries.zip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022189\u0022\u003E\u003Cp\u003Elibrary.zip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022189\u0022\u003E\u003Cp\u003ECustom communication library for interaction with Triconex controllers.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Description of TRITON Malware\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EIncident Summary\u003C\/h4\u003E\n\u003Cp\u003EThe attacker gained remote access to an SIS engineering workstation and deployed the TRITON attack framework to reprogram the SIS controllers. During the incident, some SIS controllers entered a failed safe state, which automatically shutdown the industrial process and prompted the asset owner to initiate an investigation. The investigation found that the SIS controllers initiated a safe shutdown when application code between redundant processing units failed a validation check -- resulting in an MP diagnostic failure message.\u003C\/p\u003E\n\u003Cp\u003EWe assess with moderate confidence that the attacker inadvertently shutdown operations while developing the ability to cause physical damage for the following reasons:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EModifying the SIS could prevent it from functioning correctly, increasing the likelihood of a failure that would result in physical consequences.\u003C\/li\u003E\n\u003Cli\u003ETRITON was used to modify application memory on SIS controllers in the environment, which could have led to a failed validation check.\u003C\/li\u003E\n\u003Cli\u003EThe failure occurred during the time period when TRITON was used.\u003C\/li\u003E\n\u003Cli\u003EIt is not likely that existing or external conditions, in isolation, caused a fault during the time of the incident.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EAttribution\u003C\/h4\u003E\n\u003Cp\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/index.html\u0022\u003EFireEye\u003C\/a\u003E has not connected this activity to any actor we currently track; however, we assess with moderate confidence that the actor is sponsored by a nation state. The targeting of critical infrastructure as well as the attacker\u2019s persistence, lack of any clear monetary goal and the technical resources necessary to create the attack framework suggest a well-resourced nation state actor. \u0026nbsp;Specifically, the following facts support this assessment:\u003C\/p\u003E\n\u003Cp\u003EThe attacker targeted the SIS suggesting an interest in causing a high-impact attack with physical consequences. This is an attack objective not typically seen from cyber-crime groups.\u003C\/p\u003E\n\u003Cp\u003EThe attacker deployed TRITON shortly after gaining access to the SIS system, indicating that they had pre-built and tested the tool which would require access to hardware and software that is not widely available. TRITON is also designed to communicate using the proprietary TriStation protocol which is not publicly documented suggesting the adversary independently reverse engineered this protocol.\u003C\/p\u003E\n\u003Cp\u003EThe targeting of critical infrastructure to disrupt, degrade, or destroy systems is consistent with numerous attack and reconnaissance activities carried out globally by Russian, Iranian, North Korean, U.S., and Israeli nation state actors. Intrusions of this nature do not necessarily indicate an immediate intent to disrupt targeted systems, and may be preparation for a contingency.\u003C\/p\u003E\n\u003Ch4\u003EBackground on Process Control and Safety Instrumented Systems\u003C\/h4\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/triton-ics\/Fig1%20(edit).jpg\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: ICS Reference Architecture\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EModern industrial process control and automation systems rely on a variety of sophisticated control systems and safety functions. These systems and functions are often referred to as \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/products\/industrial-systems-and-critical-infrastructure-security.html\u0022\u003EIndustrial Control Systems (ICS)\u003C\/a\u003E or Operational Technology (OT).\u003C\/p\u003E\n\u003Cp\u003EA Distributed Control System (DCS) provides human operators with the ability to remotely monitor and control an industrial process. It is a computerized control system consisting of computers, software applications and controllers. An Engineering Workstation is a computer used for configuration, maintenance and diagnostics of the control system applications and other control system equipment.\u003C\/p\u003E\n\u003Cp\u003EA SIS is an autonomous control system that independently monitors the status of the process under control. If the process exceeds the parameters that define a hazardous state, the SIS attempts to bring the process back into a safe state or automatically performs a safe shutdown of the process. If the SIS and DCS controls fail, the final line of defense is the design of the industrial facility, which includes mechanical protections on equipment (e.g. rupture discs), physical alarms, emergency response procedures and other mechanisms to mitigate dangerous situations.\u003C\/p\u003E\n\u003Cp\u003EAsset owners employ varied approaches to interface their plant\u0026#39;s DCS with the SIS. The traditional approach relies on the principles of segregation for both communication infrastructures and control strategies. For at least the past decade, there has been a trend towards integrating DCS and SIS designs for various reasons including lower cost, ease of use, and benefits achieved from exchanging information between the DCS and SIS. We believe TRITON acutely demonstrates the risk associated with integrated designs that allow bi-directional communication between DCS and SIS network hosts.\u003C\/p\u003E\n\u003Ch4\u003ESafety Instrumented Systems Threat Model and Attack Scenarios\u003C\/h4\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/triton-ics\/Fig2%20HR.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Temporal Relationship Between Cyber Security and Safety\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe attack lifecycle for disruptive attacks against ICS is similar to other types of cyber attacks, with a few key distinctions. First, the attacker\u2019s mission is to disrupt an operational process rather than steal data. Second, the attacker must have performed OT reconnaissance and have sufficient specialized engineering knowledge to understand the industrial process being controlled and successfully manipulate it.\u003C\/p\u003E\n\u003Cp\u003EFigure 2 represents the relationship between cyber security and safety controls in a process control environment. Even if cyber security measures fail, safety controls are designed to prevent physical damage. To maximize physical impact, a cyber attacker would also need to bypass safety controls.\u003C\/p\u003E\n\u003Cp\u003EThe SIS threat model below highlights some of the options available to an attacker who has successfully compromised an SIS.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EAttack Option 1: Use the SIS to shutdown the process\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe attacker can reprogram the SIS logic to cause it to trip and shutdown a process that is, in actuality, in a safe state. In other words, trigger a false positive.\u003C\/li\u003E\n\u003Cli\u003EImplication: Financial losses due to process downtime and complex plant start up procedure after the shutdown.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003EAttack Option 2: Reprogram the SIS to allow an unsafe state\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe attacker can reprogram the SIS logic to allow unsafe conditions to persist.\u003C\/li\u003E\n\u003Cli\u003EImplication: Increased risk that a hazardous situation will cause physical consequences (e.g. impact to equipment, product, environment and human safety) due to a loss of SIS functionality.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003EAttack Option 3: Reprogram the SIS to allow an unsafe state \u2013 while using the DCS to create an unsafe state or hazard\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe attacker can manipulate the process into an unsafe state from the DCS while preventing the SIS from functioning appropriately.\u003C\/li\u003E\n\u003Cli\u003EImplication: Impact to human safety, the environment, or damage to equipment, the extent of which depends on the physical constraints of the process and the plant design.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EAnalysis of Attacker Intent\u003C\/h4\u003E\n\u003Cp\u003EWe assess with moderate confidence that the attacker\u2019s long-term objective was to develop the capability to cause a physical consequence. We base this on the fact that the attacker initially obtained a reliable foothold on the DCS and could have developed the capability to manipulate the process or shutdown the plant, but instead proceeded to compromise the SIS system. Compromising both the DCS and SIS system would enable the attacker to develop and carry out an attack that causes the maximum amount of damage allowed by the physical and mechanical safeguards in place.\u003C\/p\u003E\n\u003Cp\u003EOnce on the SIS network, the attacker used their pre-built TRITON attack framework to interact with the SIS controllers using the TriStation protocol. The attacker could have caused a process shutdown by issuing a halt command or intentionally uploading flawed code to the SIS controller to cause it to fail. Instead, the attacker made several attempts over a period of time to develop and deliver functioning control logic for the SIS controllers in this target environment. While these attempts appear to have failed due one of the attack scripts\u2019 conditional checks, the attacker persisted with their efforts. This suggests the attacker was intent on causing a specific outcome beyond a process shutdown.\u003C\/p\u003E\n\u003Cp\u003EOf note, on several occasions, we have observed evidence of long term intrusions into ICS which were not ultimately used to disrupt or disable operations. For instance, Russian operators, such as Sandworm Team, have compromised Western ICS over a multi-year period without causing a disruption.\u003C\/p\u003E\n\u003Ch4\u003ESummary of Malware Capabilities\u003C\/h4\u003E\n\u003Cp\u003EThe TRITON attack tool was built with a number of features, including the ability to read and write programs, read and write individual functions and query the state of the SIS controller. However, only some of these capabilities were leveraged in the trilog.exe sample (e.g. the attacker did not leverage all of TRITON\u2019s extensive reconnaissance capabilities).\u003C\/p\u003E\n\u003Cp\u003EThe TRITON malware contained the capability to communicate with Triconex SIS controllers (e.g. send specific commands such as \u003Ci\u003Ehalt \u003C\/i\u003Eor read its memory content) and remotely reprogram them with an attacker-defined payload. The TRITON sample Mandiant analyzed added an attacker-provided program to the execution table of the Triconex controller. This sample left legitimate programs in place, expecting the controller to continue operating without a fault or exception. If the controller failed, TRITON would attempt to return it to a running state. If the controller did not recover within a defined time window, this sample would overwrite the malicious program with invalid data to cover its tracks.\u003C\/p\u003E\n\u003Ch4\u003ERecommendations\u003C\/h4\u003E\n\u003Cp\u003EAsset owners who wish to defend against the capabilities demonstrated in the incident, should consider the following controls:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EWhere technically feasible, segregate safety system networks from process control and information system networks. Engineering workstations capable of programming SIS controllers should not be dual-homed to any other DCS process control or information system network.\u003C\/li\u003E\n\u003Cli\u003ELeverage hardware features that provide for physical control of the ability to program safety controllers. These usually take the form of switches controlled by a physical key. On Triconex controllers, keys should not be left in the PROGRAM mode other than during scheduled programming events.\u003C\/li\u003E\n\u003Cli\u003EImplement change management procedures for changes to key position. Audit current key state regularly.\u003C\/li\u003E\n\u003Cli\u003EUse a unidirectional gateway rather than bidirectional network connections for any applications that depend on the data provided by the SIS.\u003C\/li\u003E\n\u003Cli\u003EImplement strict access control and application whitelisting on any server or workstation endpoints that can reach the SIS system over TCP\/IP.\u003C\/li\u003E\n\u003Cli\u003EMonitor ICS network traffic for unexpected communication flows and other anomalous activity.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/triton-ics\/Fig3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Triconex Key Switch (\u003Ca href=\u0022https:\/\/images-na.ssl-images-amazon.com\/images\/I\/41jr93jKzML._SX466_.jpg\u0022\u003Esource\u003C\/a\u003E)\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAppendix: Technical Analysis\u003C\/h4\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/triton-ics\/Fig4%20HR.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: TRITON Architecture and Attack Scenario\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ETRITON was deployed on an SIS engineering workstation running the Microsoft Windows operating system. The malware was named to masquerade as the legitimate Triconex Trilog application. This application is used for reviewing logs and is a part of the TriStation application suite. The malware was delivered as a Py2EXE compiled python script dependent on a zip file containing standard Python libraries, open source libraries, as well as the attacker-developed Triconex attack framework for interacting with the Triconex controllers. Along with the executable, two binary files, \u003Ci\u003Einject.bin (malicious function code)\u003C\/i\u003E and \u003Ci\u003Eimain.bin (malicious control logic)\u003C\/i\u003E, were deployed as the controller\u2019s payload. These file names were hard coded in the Py2EXE compiled python script.\u003C\/p\u003E\n\u003Cp\u003ETrilog.exe took one option from the command line, which was a single IP address of the target Triconex device. It did not leverage the underlying TRITON library\u2019s capability for Triconex device discovery, instead an instance of trilog.exe had to be invoked separately for each target controller in the environment. Once invoked, trilog.exe checked the status of the controller, then read the configuration information exposed by the TriStation protocol. If the controller was in a running state, trilog.exe encoded the two payload files \u003Ci\u003Einject.bin\u003C\/i\u003E and \u003Ci\u003Eimain.bin\u003C\/i\u003E and passed them to the communication libraries to be appended to the controller\u2019s program memory and execution table.\u003C\/p\u003E\n\u003Cp\u003EAfter payload files were inserted into memory on the Triconex controller, the script initiated a countdown, periodically checking the status of the controller. If an error was detected, the communication library\u2019s method \u003Ci\u003ESafeAppendProgramMod\u003C\/i\u003E attempted to reset the controller to the previous state using a TriStation protocol command. If this failed, trilog.exe attempted to write a small \u2018dummy\u2019 program to memory. We assess that this was an anti-forensics technique to hide the presence of the attacker code on the Triconex controller.\u003C\/p\u003E\n\u003Cp\u003EWorking with the asset owner, Mandiant ran trilog.exe in a lab environment with a valid Triconex controller and discovered a conditional check in the malware that prevented the payload binary from persisting in the environment. Mandiant confirmed that, after correcting patching the attack script to remove this check, the payload binary would persist in controller memory, and the controller would continue to run.\u003C\/p\u003E\n\u003Cp\u003ETRITON implements the TriStation protocol, which is the protocol used by the legitimate TriStation application, to configure controllers.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ETsHi\u003Cb\u003E \u003C\/b\u003E\u003C\/i\u003Eis the high-level interface created by the malware\u2019s authors that allows the threat actor\u2019s operators to implement attack scripts using the TRITON framework. It exposes functions for both reconnaissance and attack. The functions generally accept binary data from the user, and handle the code \u2018signing\u2019 and check sums prior to passing the data to lower level libraries for serialization on to the network.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ETsBase\u003C\/i\u003E, another attacker-written module,\u003Ci\u003E \u003C\/i\u003Econtains the functions called by \u003Ci\u003ETsHi\u003C\/i\u003E, which translate the attacker\u2019s intended action to the appropriate TriStation protocol function code. For certain functions, it also packs and pads the data in to the appropriate format.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ETsLow\u003C\/i\u003E is an additional attacker module that implements the TriStation UDP wire protocol. The \u003Ci\u003ETsBase\u003C\/i\u003E library primarily depends on the \u003Ci\u003Ets_exec\u003C\/i\u003E method. This method takes the function code and expected response code, and serializes the commands payload over UDP. It checks the response from the controller against the expected value and returns a result data structure indicating success or a \u003Ci\u003EFalse\u003C\/i\u003E object representing failure.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ETsLow \u003C\/i\u003Ealso exposes the connect method used to check connectivity to the target controller. If invoked with no targets, it runs the device discovery function detect_ip. This leverages a \u0026quot;ping\u0026quot; message over the TriStation protocol using IP broadcast to find controllers that are reachable via a router from where the script is invoked.\u003C\/p\u003E\n\u003Ch4\u003EIndicators\u003C\/h4\u003E\n\u003Ctable cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003E\u003Cb\u003EFilename\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003Etrilog.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003EMD5: 6c39c3f4a08d3d78f2eb973a94bd7718\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\ne8542c07b2af63ee7e72ce5d97d91036c5da56e2b091aa2afe737b224305d230\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003Eimain.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: 437f135ba179959a580412e564d3107f\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\n08c34c6ac9186b61d9f29a77ef5e618067e0bc9fe85cab1ad25dc6049c376949\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003Einject.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: 0544d425c7555dc4e9d76b571f31f500\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\n5fc4b0076eac7aa7815302b0c3158076e3569086c4c6aa2f71cd258238440d14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003Elibrary.zip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: 0face841f7b2953e7c29c064d6886523\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\nbef59b9a3e00a14956e0cd4a1f3e7524448cbe5d3cc1295d95a15b83a3579c59\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003ETS_cnames.pyc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: e98f4f3505f05bf90e17554fbc97bba9\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\n2c1d3d0a9c6f76726994b88589219cb8d9c39dd9924bc8d2d02bf41d955fe326\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003ETsBase.pyc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: 288166952f934146be172f6353e9a1f5\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\n1a2ab4df156ccd685f795baee7df49f8e701f271d3e5676b507112e30ce03c42\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003ETsHi.pyc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: 27c69aa39024d21ea109cc9c9d944a04\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\n758598370c3b84c6fbb452e3d7119f700f970ed566171e879d3cb41102154272\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003ETsLow.pyc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: f6b3a73c8c87506acda430671360ce15\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\n5c776a33568f4c16fee7140c249c0d2b1e0798a96c7a01bfd2d5684e58c9bb32\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022\u003E\u003Cp\u003Esh.pyc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022197\u0022\u003E\u003Cp\u003EMD5: 8b675db417cc8b23f4c43f3de5c83438\u003Cbr\u003E\nSHA-256:\u003Cbr\u003E\nc96ed56bf7ee85a4398cc43a98b4db86d3da311c619f17c8540ae424ca6546e1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EDetection\u003C\/h4\u003E\n\u003Ctable cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022600\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Erule TRITON_ICS_FRAMEWORK\u003Cbr\u003E\n{\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author = \u0026quot;nicholas.carr @itsreallynick\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; md5 = \u0026quot;0face841f7b2953e7c29c064d6886523\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; description = \u0026quot;TRITON framework recovered during Mandiant ICS incident response\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $python_compiled = \u0026quot;.pyc\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $python_module_01 = \u0026quot;__module__\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $python_module_02 = \u0026quot;\u0026lt;module\u0026gt;\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $python_script_01 = \u0026quot;import Ts\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $python_script_02 = \u0026quot;def ts_\u0026quot; nocase ascii wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_cnames_01 = \u0026quot;TS_cnames.py\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_cnames_02 = \u0026quot;TRICON\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_cnames_03 = \u0026quot;TriStation \u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_cnames_04 = \u0026quot; chassis \u0026quot; nocase ascii wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslibs_01 = \u0026quot;GetCpStatus\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslibs_02 = \u0026quot;ts_\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslibs_03 = \u0026quot; sequence\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslibs_04 = \/import Ts(Hi|Low|Base)[^:alpha:]\/ nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslibs_05 = \/module\\s?version\/ nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslibs_06 = \u0026quot;bad \u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslibs_07 = \u0026quot;prog_cnt\u0026quot; nocase ascii wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tsbase_01 = \u0026quot;TsBase.py\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tsbase_02 = \u0026quot;.TsBase(\u0026quot; nocase ascii wide\u0026nbsp;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tshi_01 = \u0026quot;TsHi.py\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tshi_02 = \u0026quot;keystate\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tshi_03 = \u0026quot;GetProjectInfo\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tshi_04 = \u0026quot;GetProgramTable\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tshi_05 = \u0026quot;SafeAppendProgramMod\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tshi_06 = \u0026quot;.TsHi(\u0026quot; ascii nocase wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslow_01 = \u0026quot;TsLow.py\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslow_02 = \u0026quot;print_last_error\u0026quot; ascii nocase wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslow_03 = \u0026quot;.TsLow(\u0026quot; ascii nocase wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslow_04 = \u0026quot;tcm_\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_tslow_05 = \u0026quot; TCM found\u0026quot; nocase ascii wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_crc_01 = \u0026quot;crc.pyc\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_crc_02 = \u0026quot;CRC16_MODBUS\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_crc_03 = \u0026quot;Kotov Alaxander\u0026quot; nocase ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_crc_04 = \u0026quot;CRC_CCITT_XMODEM\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_crc_05 = \u0026quot;crc16ret\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_crc_06 = \u0026quot;CRC16_CCITT_x1D0F\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_crc_07 = \/CRC16_CCITT[^_]\/ ascii wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_sh_01 = \u0026quot;sh.pyc\u0026quot; nocase ascii wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_keyword_01 = \u0026quot; FAILURE\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_keyword_02 = \u0026quot;symbol table\u0026quot; nocase ascii wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_TRIDENT_01 = \u0026quot;inject.bin\u0026quot; ascii nocase wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $py_TRIDENT_02 = \u0026quot;imain.bin\u0026quot; ascii nocase wide\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 2 of ($python_*) and 7 of ($py_*) and filesize \u0026lt; 3MB\u003Cbr\u003E\n}\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n",
        "jcr:lastModified": "Fri Dec 15 2017 12:11:52 GMT-0500",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EMandiant recently responded to an incident at a critical infrastructure organization where an attacker deployed malware designed to manipulate industrial safety systems.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Dec 13 2017 22:33:49 GMT-0500",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Dec 14 2017 14:34:11 GMT-0500",
      "imageRotate": "0"
    }
  }
}
