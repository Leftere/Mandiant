{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Tue May 12 2020 14:36:14 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Analyzing Dark Crystal RAT, a C# Backdoor",
    "jcr:versionHistory": "46936caf-fb61-475e-9021-3cd7b9493e0a",
    "author": "Jacob Thompson",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "75d56c3f-8e0b-4d8f-ac8e-0f59216f18aa"
    ],
    "jcr:created": "Tue Aug 18 2020 19:35:58 GMT+0000",
    "cq:lastModified": "Tue Aug 18 2020 19:35:50 GMT+0000",
    "jcr:baseVersion": "75d56c3f-8e0b-4d8f-ac8e-0f59216f18aa",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:jacob-thompson",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:FLARE",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware-analysis",
      "fireeye-blog-tags:rat",
      "fireeye-blog-tags:intelligence"
    ],
    "jcr:uuid": "c0aff95a-d470-4356-8e75-5773233a1fc4",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue May 12 2020 10:30:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EThe \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/mandiant\/threat-intelligence.html\u0022\u003EFireEye Mandiant Threat Intelligence Team\u003C\/a\u003E helps protect our customers by tracking cyber attackers and the malware they use. The FLARE Team helps augment our threat intelligence by reverse engineering malware samples. Recently, FLARE worked on a new C# variant of Dark Crystal RAT (DCRat) that the threat intel team passed to us. We reviewed open source intelligence and prior work, performed sandbox testing, and reverse engineered the Dark Crystal RAT to review its capabilities and communication protocol. Through publishing this blog post we aim to help defenders look for indicators of compromise and other telltale signs of Dark Crystal RAT, and to assist fellow malware researchers new to .NET malware, or who encounter future variants of this sample.\u003C\/p\u003E\n\u003Ch4\u003EDiscovering Dark Crystal RAT\u003C\/h4\u003E\n\u003Cp\u003EThe threat intel team provided FLARE with an EXE sample, believed to contain Dark Crystal RAT, and having the MD5 hash b478d340a787b85e086cc951d0696cb1. Using sandbox testing, we found that this sample produced two executables, and in turn, one of those two executables produced three more. Figure 1 shows the relationships between the malicious executables discovered via sandbox testing.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure1.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 1: The first sample we began analyzing ultimately produced five executables.\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EArmed with the sandbox results, our next step was to perform a triage analysis on each executable. We found that the original sample and mnb.exe were droppers, that dal.exe was a clean-up utility to delete the dropped files, and that daaca.exe and fsdffc.exe were variants of Plurox, a family with existing reporting. Then we moved to analyzing the final dropped sample, which was dfsds.exe. We found brief public reporting by @\u003Ci\u003EJames_inthe_box \u003C\/i\u003Eon the same sample, \u003Ca href=\u0022https:\/\/twitter.com\/James_inthe_box\/status\/1178275531692756992?s=20\u0022\u003Eidentifying it as DCRat and as a RAT and credential stealer\u003C\/a\u003E. We also found a \u003Ca href=\u0022https:\/\/app.any.run\/tasks\/01a715ca-6a34-4350-b3ba-d1daae1e3d16\/\u0022\u003Epublic sandbox run\u003C\/a\u003E that included the same sample. Other public reporting \u003Ca href=\u0022https:\/\/tccontre.blogspot.com\/2019\/10\/dcrat-malware-evades-sandbox-that-use.html\u0022\u003Edescribed DCRat, but actually analyzed the daaca.exe Plurox component\u003C\/a\u003E bundled along with DCRat in the initial sample.\u003C\/p\u003E\n\u003Cp\u003ESatisfied that dfsds.exe was a RAT lacking detailed public reporting, we decided to perform a deeper analysis.\u003C\/p\u003E\n\u003Ch4\u003EAnalyzing Dark Crystal RAT\u003C\/h4\u003E\n\u003Ch5\u003EInitial Analysis\u003C\/h5\u003E\n\u003Cp\u003EShifting aside from our sandbox for a moment, we performed static analysis on dfsds.exe. We chose to begin static analysis using CFF Explorer, a good tool for opening a PE file and breaking down its sections into a form that is easy to view. Having viewed dfsds.exe in CFF Explorer, as shown in Figure 2, the utility showed us that it is a .NET executable. This meant we could take a much different path to analyzing it than we would on a native C or C++ sample. Techniques we might have otherwise used to start narrowing down a native sample\u2019s functionality, such as looking at what DLLs it imports and what functions from those DLLs that it uses, yielded no useful results for this .NET sample. As shown in Figure 3, dfsds.exe imports only the function \u003Cspan class=\u0022code\u0022\u003E_CorExeMain\u003C\/span\u003E from mscoree.dll. We could have opened dfsds.exe in IDA Pro, but IDA Pro is usually not the most effective way of analyzing .NET samples; in fact, the free version of IDA Pro cannot handle .NET Common Language Infrastructure (CLI) intermediate code.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure2.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 2: CFF Explorer shows that dfsds.exe is a .NET executable.\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure3.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 3: The import table for dfsds.exe is not useful as it contains only one function.\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EInstead of using a disassembler like IDA Pro on dfsds.exe, we used a .NET decompiler. Luckily for the reverse engineer, decompilers operate at a higher level and often produce a close approximation of the original C# code. dnSpy is a great .NET decompiler. dnSpy\u2019s interface displays a hierarchy of the sample\u2019s namespaces and classes in the Assembly Explorer and shows code for the selected class on the right. Upon opening dfsds.exe, dnSpy told us that the sample\u2019s original name at link time was DCRatBuild.exe, and that its entry point is at \u003Cspan class=\u0022code\u0022\u003E\u0026lt;PrivateImplementationDetails\u0026gt;{63E52738-38EE-4EC2-999E-1DC99F74E08C}.Main\u003C\/span\u003E, shown in Figure 4. When we browsed to the Main method using the Assembly Explorer, we found C#-like code representing that method in Figure 5. Wherever dnSpy displays a call to another method in the code, it is possible to click on the target method name to go to it and view its code. By right-clicking on an identifier in the code, and clicking Analyze in the context menu, we caused dnSpy to look for all occurrences where the identifier is used, similar to using cross-references in IDA Pro.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: dnSpy can help us locate the sample\u0027s entry point\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure5.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: dnSpy decompiles the Main method into C#-like code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe went to the \u003Cspan class=\u0022code\u0022\u003ESchemaServerManager.Main\u003C\/span\u003E method that is called from the entry point method, and observed that it makes many calls to \u003Cspan class=\u0022code\u0022\u003EExporterServerManager.InstantiateIndexer\u003C\/span\u003E with different integer arguments, as shown in Figure 6. We browsed to the \u003Cspan class=\u0022code\u0022\u003EExporterServerManager.InstantiateIndexer\u003C\/span\u003E method, and found that it is structured as a giant switch statement with many goto statements and labels; Figure 7 shows an excerpt. This does not look like typical dnSpy output, as dnSpy often reconstructs a close approximation of the original C# code, albeit with the loss of comments and local variable names. This code structure, combined with the fact that the code refers to the \u003Cspan class=\u0022code\u0022\u003ECipherMode.CBC\u003C\/span\u003E constant, led us to believe that \u003Cspan class=\u0022code\u0022\u003EExporterServerManager.InstantiateIndexer\u003C\/span\u003E may be a decryption or deobfuscation routine. Therefore, dfsds.exe is likely obfuscated. Luckily, .NET developers often use obfuscation tools that are somewhat reversible through automated means.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: SchemaServerManager.Main makes many calls to ExporterServerManager.InstantiateIndexer\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure7.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: ExporterServerManager.InstantiateIndexer looks like it may be a deobfuscation routine\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EDeobfuscation\u003C\/h5\u003E\n\u003Cp\u003EDe4dot is a .NET deobfuscator that knows how to undo many types of obfuscations. Running de4dot -d (for detect) on dfsds.exe (Figure 8) informed us that .NET Reactor was used to obfuscate it.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026gt; de4dot -d dfsds.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ede4dot v3.1.41592.3405 Copyright (C) 2011-2015 de4dot@gmail.com\u003Cbr\u003E\n Latest version and source code: https:\/\/github.com\/0xd4d\/de4dot\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EDetected .NET Reactor (C:\\...\\dfsds.exe)\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: dfsds.exe is obfuscated with .NET Reactor\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter confirming that de4dot can deobfuscate dfsds.exe, we ran it again to deobfuscate the sample into the file dfsds_deob.exe (Figure 9).\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026gt; de4dot -f dfsds.exe -o dfsds_deob.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ede4dot v3.1.41592.3405 Copyright (C) 2011-2015 de4dot@gmail.com\u003Cbr\u003E\n Latest version and source code: https:\/\/github.com\/0xd4d\/de4dot\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EDetected .NET Reactor (C:\\Users\\user\\Desktop\\intelfirst\\dfsds.exe)\u003Cbr\u003E\n Cleaning C:\\Users\\user\\Desktop\\intelfirst\\dfsds.exe\u003Cbr\u003E\n Renaming all obfuscated symbols\u003Cbr\u003E\n Saving C:\\Users\\user\\Desktop\\intelfirst\\dfsds_deob.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: de4dot successfully deobfuscates dfsds.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter deobfuscating dfsds.exe, we ran dnSpy again on the resulting dfsds_deob.exe. When we decompiled \u003Cspan class=\u0022code\u0022\u003ESchemaServerManager.Main\u003C\/span\u003E again, the results were much different, as shown in Figure 10. Contrasting the new output with the obfuscated version shown previously in Figure 6, we found the deobfuscated code much more readable. In the deobfuscated version, all the calls to \u003Cspan class=\u0022code\u0022\u003EExporterServerManager.InstantiateIndexer\u003C\/span\u003E were removed; as suspected, it was apparently a string decoding routine. In contrast, the class names shown in the Assembly Explorer did not change; the obfuscator must have irrecoverably replaced the original class names with meaningless ones obtained from a standard list. Next, we noted that ten lines in Figure 10 hold base64-encoded data. Once the sample was successfully deobfuscated, it was time to move on to extracting its configuration and to follow the sample\u2019s code path to its persistence capabilities and initial beacon.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure10.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Deobfuscating dfsds.exe shows that the method begins with some path manipulation and then accesses Base64-encoded data\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EConfiguration, Persistence and Initial Beacon\u003C\/h5\u003E\n\u003Cp\u003ERecall that in Figure 10 we found that the method \u003Cspan class=\u0022code\u0022\u003ESchemaServerManager.Main\u003C\/span\u003E has a local variable containing Base64-encoded data; decoding that data revealed what it contains. Figure 11 shows the decoded configuration (with C2 endpoint URLs de-fanged):\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026gt; echo TUhvc3Q6aHR0cDovL2RvbWFsby5vbmxpbmUva3NlemJseGx2b3Uza2NtYnE4bDdoZjNmNGN5NXhnZW\u003Cbr\u003E\n 80dWRsYTkxZHVldTNxYTU0LzQ2a3FianZ5a2x1bnAxejU2dHh6a2hlbjdnamNpM2N5eDhnZ2twdHgy\u003Cbr\u003E\n NWk3NG1vNm15cXB4OWtsdnYzL2FrY2lpMjM5bXl6b24weHdqbHhxbm4zYjM0dyxCSG9zdDpodHRwOi\u003Cbr\u003E\n 8vZG9tYWxvLm9ubGluZS9rc2V6Ymx4bHZvdTNrY21icThsN2hmM2Y0Y3k1eGdlbzR1ZGxhOTFkdWV1\u003Cbr\u003E\n M3FhNTQvNDZrcWJqdnlrbHVucDF6NTZ0eHpraGVuN2dqY2kzY3l4OGdna3B0eDI1aTc0bW82bXlxcH\u003Cbr\u003E\n g5a2x2djMvYWtjaWkyMzlteXpvbjB4d2pseHFubjNiMzR3LE1YOkRDUl9NVVRFWC13TGNzOG8xTlZF\u003Cbr\u003E\n VXRYeEo5bjl5ZixUQUc6VU5ERUY= | base64 -d\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EMHost:hxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\/\u003Cbr\u003E\n 46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239myzon0xwjl\u003Cbr\u003E\n xqnn3b34w,BHost:hxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91\u003Cbr\u003E\n dueu3qa54\/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239\u003Cbr\u003E\n myzon0xwjlxqnn3b34w,MX:DCR_MUTEX-wLcs8o1NVEUtXxJ9n9yf,TAG:UNDEF\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Decoding the base64 data in SchemaServerManager.Main reveals a configuration string\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 11 shows that the data decoded to a configuration string containing four values: MHost, BHost, MX, and TAG. We analyzed the code that parses this string and found that MHost and BHost were used as its main and backup command and control (C2) endpoints. Observe that the MHost and BHost values in Figure 11 are identical, so this sample did not have a backup C2 endpoint.\u003C\/p\u003E\n\u003Cp\u003EIn dnSpy it is possible to give classes and methods meaningful names just as it is possible to name identifiers in IDA Pro. For example, the method \u003Cspan class=\u0022code\u0022\u003ESchemaServerManager.StopCustomer\u003C\/span\u003E picks the name of a random running process. By right-clicking the \u003Cspan class=\u0022code\u0022\u003EStopCustomer\u003C\/span\u003E identifier and choosing Edit Method, it is possible to change the method name to \u003Cspan class=\u0022code\u0022\u003EPickRandomProcessName\u003C\/span\u003E, as shown in Figure 12.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure12.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Assigning meaningful names to methods makes it easier to keep analyzing the program\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EContinuing to analyze the \u003Cspan class=\u0022code\u0022\u003ESchemaServerManager.Main\u003C\/span\u003E method revealed that the sample persists across reboots. The persistence algorithm can be summarized as follows:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EThe malware picks the name of a random running process, and then copies itself to \u003Cspan class=\u0022code\u0022\u003E%APPDATA%\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003EC:\\\u003C\/span\u003E. For example, if svchost.exe is selected, then the malware copies itself to \u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\svchost.exe\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003EC:\\svchost.exe\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003EThe malware creates a shortcut \u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\dotNET.lnk\u003C\/span\u003E pointing to the copy of the malware under \u003Cspan class=\u0022code\u0022\u003E%APPDATA%\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003EThe malware creates a shortcut named dotNET.lnk in the logged-on user\u2019s Startup folder pointing to \u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\dotNET.lnk\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003EThe malware creates a shortcut \u003Cspan class=\u0022code\u0022\u003EC:\\Sysdll32.lnk\u003C\/span\u003E pointing to the copy of the malware under \u003Cspan class=\u0022code\u0022\u003EC:\\\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003EThe malware creates a shortcut named Sysdll32.lnk in the logged-on user\u2019s Startup folder pointing to \u003Cspan class=\u0022code\u0022\u003EC:\\Sysdll32.lnk\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003EThe malware creates the registry value \u003Cspan class=\u0022code\u0022\u003EHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\scrss\u003C\/span\u003E pointing to \u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\dotNET.lnk\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003EThe malware creates the registry value \u003Cspan class=\u0022code\u0022\u003EHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Wininit\u003C\/span\u003E pointing to \u003Cspan class=\u0022code\u0022\u003EC:\\Sysdll32.lnk\u003C\/span\u003E.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EAfter its persistence steps, the malware checks for multiple instances of the malware:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EThe malware sleeps for a random interval between 5 and 7 seconds.\u003C\/li\u003E\n\u003Cli\u003EThe malware takes the MD5 hash of the still-base64-encoded configuration string, and creates the mutex whose name is the hexadecimal representation of that hash. For this sample, the malware creates the mutex \u003Cspan class=\u0022code\u0022\u003Ebc2dc004028c4f0303f5e49984983352\u003C\/span\u003E. If this fails because another instance is running, the malware exits.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EThe malware then beacons, which also allows it to determine whether to use the main host (MHost) or backup host (BHost). To do so, the malware constructs a beacon URL based on the MHost URL, makes a request to the beacon URL, and then checks to see if the server responds with the HTTP response body \u201cok.\u201d If the server does not send this response, then the malware unconditionally uses the BHost; this code is shown in Figure 13. Note that since this sample has the same MHost and BHost value (from Figure 11), the malware uses the same C2 endpoint regardless of whether the check succeeds or fails.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure13.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: The malware makes an HTTP request based on the MHost URL to determine whether to use the MHost or BHost\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe full algorithm to obtain the beacon URL is as follows:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EObtain the MHost URL, i.e., \u003Cspan class=\u0022code\u0022\u003Ehxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\u003Cbr\u003E\n \/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239my\u003Cbr\u003E\n zon0xwjlxqnn3b34w\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003ECalculate the SHA1 hash of the full MHost URL, i.e., 56743785cf97084d3a49a8bf0956f2c744a4a3e0.\u003C\/li\u003E\n\u003Cli\u003ERemove the last path component from the MHost URL, and then append the SHA1 hash from above, and ?data=active. The full beacon URL is therefore \u003Cspan class=\u0022code\u0022\u003Ehxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\u003Cbr\u003E\n \/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/56743785cf\u003Cbr\u003E\n 97084d3a49a8bf0956f2c744a4a3e0.php?data=active\u003C\/span\u003E.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EAfter beaconing the malware proceeds to send and receive messages with the configured C2.\u003C\/p\u003E\n\u003Ch3\u003EMessages and Capabilities\u003C\/h3\u003E\n\u003Cp\u003EAfter performing static analysis of dfsds.exe to determine how it selects the C2 endpoint and confirming the C2 endpoint URL, we shifted to dynamic analysis in order to collect sample C2 traffic and make it easier to understand the code that generates and accepts C2 messages. Luckily for our analysis, the malware continues to generate requests to the C2 endpoint even if the server does not send a valid response. To listen for and intercept requests to the C2 endpoint (domalo[.]online) without allowing the malware Internet access, we used \u003Ca href=\u0022https:\/\/github.com\/fireeye\/flare-fakenet-ng\u0022\u003EFLARE\u2019s FakeNet-NG tool\u003C\/a\u003E. Figure 14 shows some of the C2 requests that the malware made being captured by FakeNet-NG.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure14.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: FakeNet-NG can capture the malware\u0027s HTTP requests to the C2 endpoint\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBy comparing the messages generated by the malware and captured in FakeNet-NG with the malware\u2019s decompiled code, we determined its message format and types. Observe that the last HTTP request visible in Figure 14 contains a list of running processes. By tracing through the decompiled code, we found that the method \u003Cspan class=\u0022code\u0022\u003ESchemaServerManager.ObserverWatcher.NewMerchant\u003C\/span\u003E generated this message. We renamed this method to taskThread and assigned meaningful names to the other methods it calls; the resulting code for this method appears in Figure 15.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure15.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: The method that generates the list of running processes and sends it to the C2 endpoint\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBy analyzing the code further, we identified the components of the URLs that the malware used to send data to the C2 endpoint, and how they are constructed.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EBeacons\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThe first type of URL is a beacon, sent only once when the malware starts up. For this sample, the beacon URL was always hxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\/46kqbjvyklunp1z56txzk\u003Cbr\u003E\nhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/\u0026lt;hash\u0026gt;.php?data=active, where \u0026lt;hash\u0026gt; is the SHA1 hash of the MHost URL, as described earlier.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EGET requests, format 1\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen the malware needs to send data to or receive data from the C2, it sends a message. The first type of message, which we denote as \u201cformat 1,\u201d is a GET request to URLs of the form \u003Cspan class=\u0022code\u0022\u003Ehxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\/46kqb\u003Cbr\u003E\n jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239myzon0xwjlxqnn\u003Cbr\u003E\n 3b34w\/\u003Ci\u003E\u0026lt;hash\u0026gt;\u003C\/i\u003E.php? type=__ds_setdata\u0026amp;__ds_setdata_user=\u003Ci\u003E\u0026lt;user_hash\u0026gt;\u003C\/i\u003E\u0026amp;__ds_setdata_ext=\u003Ci\u003E\u0026lt;message_hash\u0026gt;\u003C\/i\u003E\u0026amp;__ds_setdata_data=\u003Ci\u003E\u0026lt;message\u0026gt;\u003C\/i\u003E\u003C\/span\u003E, where:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E is \u003Cspan class=\u0022code\u0022\u003EMD5(SHA1(MHost))\u003C\/span\u003E, which for this sample, is \u003Cspan class=\u0022code\u0022\u003E212bad81b4208a2b412dfca05f1d9fa7\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;user_hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E is a unique identifier for the machine on which the malware is running. It is always calculated as \u003Cspan class=\u0022code\u0022\u003ESHA1(OS_version + machine_name + user_name)\u003C\/span\u003E as provided by the .NET System.Environment class.\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E identifies what kind of message the malware is sending to the C2 endpoint. The \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E is calculated as \u003Cspan class=\u0022code\u0022\u003EMD5(\u0026lt;message_type\u0026gt; + \u0026lt;user_hash\u0026gt;)\u003C\/span\u003E, where \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_type\u0026gt;\u003C\/span\u003E is a short keyword identifying the type of message, and \u003Cspan class=\u0022code\u0022\u003E\u0026lt;user_hash\u0026gt;\u003C\/span\u003E is as calculated above.\u003Cul\u003E\n\u003Cli\u003EValues for \u0026lt;message_type\u0026gt; exist for each command that the malware supports; for possible values, see the \u201cmsgs\u201d variable in the code sample shown in Figure 19.\u003C\/li\u003E\n\u003Cli\u003EObserve that this makes it difficult to observe the message type visually from log traffic, or to write a static network signature for the message type, since it varies for every machine due to the inclusion of the \u003Cspan class=\u0022code\u0022\u003E\u0026lt;user_hash\u0026gt;\u003C\/span\u003E.\u003C\/li\u003E\n\u003Cli\u003EOne type of message uses the value u instead of a hash for \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;message\u0026gt;\u003C\/span\u003E\u003C\/i\u003E is the message data, which is not obscured in any way.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe other type of ordinary message is a \u003Cspan class=\u0022code\u0022\u003Egetdata\u003C\/span\u003E message. These are GET requests to URLs of the form \u003Cspan class=\u0022code\u0022\u003Ehxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\/46kqb\u003Cbr\u003E\n jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239myzon0xwjlxqnn\u003Cbr\u003E\n 3b34w\/\u003Ci\u003E\u0026lt;hash\u0026gt;\u003C\/i\u003E.php? type=__ds_getdata\u0026amp;__ds_getdata_user=\u003Ci\u003E\u0026lt;user_hash\u0026gt;\u003C\/i\u003E\u0026amp;__ds_getdata_ext=\u003Ci\u003E\u0026lt;message_hash\u0026gt;\u003C\/i\u003E\u0026amp;__ds_getdata_key=\u003Ci\u003E\u0026lt;key\u0026gt;\u003C\/i\u003E\u003C\/span\u003E, where:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E and \u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;user_hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E are calculated as described above for getdata messages.\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E is also calculated as described above for getdata messages, but describes the type of message the malware is expecting to receive in the server\u2019s response.\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;key\u0026gt;\u003C\/span\u003E\u003C\/i\u003E is \u003Cspan class=\u0022code\u0022\u003EMD5(\u0026lt;user_hash\u0026gt;)\u003C\/span\u003E.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe server is expected to respond to a \u003Cspan class=\u0022code\u0022\u003Egetdata\u003C\/span\u003E message with an appropriate response for the type of message specified by \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EGET requests, format 2\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EA few types of messages from the malware to the C2 use a different format, which we denote as \u201cformat 2.\u201d These messages are GET requests of the form \u003Cspan class=\u0022code\u0022\u003Ehxxp:\/\/domalo[.]online \/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\/46kqbjvyklunp1z56txzkhen7gj\u003Cbr\u003E\n ci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239myzon0xwjlxqnn3b34w\/\u003Ci\u003E\u0026lt;user_hash\u0026gt;\u003C\/i\u003E.\u003Ci\u003E\u0026lt;mes\u003Cbr\u003E\n sage_hash\u0026gt;\u003C\/i\u003E\u003C\/span\u003E, where:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;user_hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E is calculated as described above for getdata messages.\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E\u003C\/i\u003E is also calculated as described above for getdata messages, but describes the type of message the malware is expecting to receive in the server\u2019s response. \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E may also be the string \u003Cspan class=\u0022code\u0022\u003Ecomm\u003C\/span\u003E.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003ETable 1 shows possible \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_types\u0026gt;\u003C\/span\u003E that may be incorporated into \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_hash\u0026gt;\u003C\/span\u003E as part of format 2 messages to instruct the server which type of response is desired. In contrast to format 1 messages, format 2 messages are only used for a handful of \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_type\u0026gt;\u003C\/span\u003E values.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u0026lt;message_type\u0026gt;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022449\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EResponse desired\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Es_comm\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022449\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThe server sends a non-empty response if a screenshot request is pending\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Em_comm\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022449\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThe server sends a non-empty response if a microphone request is pending\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERDK\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022449\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThe server responds directly with keystrokes to replay\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecomm\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022449\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThe server responds directly with other types of tasking\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Message types when the malware uses a special message to request tasking from the server\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EPOST requests\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen the malware needs to upload large files, it makes a POST request. These POST requests are sent to \u003Cspan class=\u0022code\u0022\u003Ehxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\/46kqb\u003Cbr\u003E\n jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239myzon0xwjlxqnn\u003Cbr\u003E\n 3b34w\/\u0026lt;hash\u0026gt;.php\u003C\/span\u003E, with the following parameters in the POST data:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ci\u003Ename\u003C\/i\u003E is \u003Cspan class=\u0022code\u0022\u003E\u0026lt;user_hash\u0026gt; + \u0026quot;.\u0026quot; + \u0026lt;message_type\u0026gt;\u003C\/span\u003E, where \u003Cspan class=\u0022code\u0022\u003E\u0026lt;user_hash\u0026gt;\u003C\/span\u003E is calculated as described above and \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_type\u0026gt;\u003C\/span\u003E is the type of data being uploaded.\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003Eupload\u003C\/i\u003E is a file with the data being sent to the server.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003ETable 2 shows possible \u003Cspan class=\u0022code\u0022\u003E\u0026lt;message_type\u0026gt;\u003C\/span\u003E values along with the type of file being uploaded.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;message_type\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EType of File\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejpg\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EScreenshot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ezipstealerlog\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECookie stealer log\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ewav\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMicrophone recording\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUploaded file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebmp\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWebcam image\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERD.jpg\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERemote control screenshot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Message types when files are uploaded to the server\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ECapabilities\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EBy analyzing the code that handles the responses to the \u003Cspan class=\u0022code\u0022\u003Ecomm\u003C\/span\u003E message (format 2), it was possible for us to inventory the malware\u2019s capabilities. Table 3 shows the keywords used in responses along with the description of each capability.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022630\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EKeyword\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eshell\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExecute a shell command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edeleteall\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERecursively delete all files from C:, D:, F:, and G:\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eclosecd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EClose the CD-ROM drive door\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Esetwallpaper\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EChange the background wallpaper\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eddos\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESend TCP and UDP packets to a given host or IP address\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elogoff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELog off the current user\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ekeyboardrecorder\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReplay keystrokes as if the user had typed them\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_newfolder\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreate a new folder\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_rename\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERename or move a file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdesktopHide\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHide desktop icons\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ekeyloggerstart\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStart logging keystrokes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eexec_cs_code\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECompile and execute C# code\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Emsgbox\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EOpen a Windows MessageBox\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_upload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransfer a file from the C2 to the client\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Erdp\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERe-spawn the malware running as an administrator\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_zip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBuild a ZIP file from a directory tree and transfer it from the client to the C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ewebcam\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETake a webcam picture\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_unzip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUnzip a ZIP file to a given path on the client\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ekeyloggerstop\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStop logging keystrokes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_drives\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEnumerate drive letters\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecookiestealer\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransfer cookies and browser\/FileZilla saved credentials to the C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_delete\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERecursively delete a given directory\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edismon\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHide desktop icons and taskbar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_uploadu\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransfer a file from the C2 to the client\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etaskstart\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStart a process\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecleardesktop\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERotate screen\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elcmd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERun shell command and send standard output back to C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EtaskbarShow\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EShow taskbar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eclipboard\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESet clipboard contents\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecookiestealer_file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESave cookies and credentials to a local file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Enewuserpass\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreate a new local user account\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebeep\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBeep for set frequency and duration\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Espeak\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUse speech synthesizer to speak text\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eopenchat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EOpen chat window\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EtaskbarHide\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHide the taskbar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERDStart\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStart remote control over user\u2019s desktop\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eclosechat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EClose chat window\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERDStop\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStop remote control over user\u2019s desktop\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_opendir\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EList directory contents\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euninstall\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERemove the malware from the client\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etaskkill\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EKill a process\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eforkbomb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEndlessly spawn instances of cmd.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efm_get\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransfer a file from the client to the C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdesktopShow\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EShow desktop icons\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EClipboardget\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransfer clipboard contents to C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eplayaudiourl\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPlay a sound file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eopencd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EOpen the CD-ROM drive door\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eshutdown\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EShut down the machine\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Erestart\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERestart the machine\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebrowseurl\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022498\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EOpen a web URL in the default browser\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: Capabilities of DCRat\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EProof-of-Concept Dark Crystal RAT Server\u003C\/h4\u003E\n\u003Cp\u003EAfter gathering information from Dark Crystal RAT about its capabilities and C2 message format, another way to illustrate the capabilities and test our understanding of the messages was to write a proof-of-concept server. Here is a code snippet that we wrote containing a \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/blog\/pdfs\/pocdcrat.pdf\u0022\u003Ebarebones DCRat server written in Python\u003C\/a\u003E. Unlike a real RAT server, this one does not have a user interface to allow the attacker to pick and launch commands. Instead, it has a pre-scripted command list that it sends to the RAT.\u003C\/p\u003E\n\u003Cp\u003EWhen the server starts up, it uses the Python BaseHTTPServer to begin listening for incoming web requests (lines 166-174). Incoming POST requests are assumed to hold a file that the RAT is uploading to the server; this server assumes all file uploads are screenshots and saves them to \u201cscreen.png\u201d (lines 140-155). For GET requests, the server must distinguish between beacons, ordinary messages, and special messages (lines 123-138). For ordinary messages, \u003Cspan class=\u0022code\u0022\u003E__ds_setdata\u003C\/span\u003E messages are simply printed to standard output, while the only \u003Cspan class=\u0022code\u0022\u003E__ds_getdata\u003C\/span\u003E message type supported is \u003Cspan class=\u0022code\u0022\u003Es_comm\u003C\/span\u003E (screenshot communications), to which the server responds with the desired screenshot dimensions (lines 63-84). For messages of type comm, the server sends four types of commands in sequence: first, it hides the desktop icons; then, it causes the string \u201cHello this is tech support\u201d to be spoken; next, it displays a message box asking for a password; finally, it launches the Windows Calculator (lines 86-121).\u003C\/p\u003E\n\u003Cp\u003EFigure 16 shows the results when Dark Crystal RAT is run on a system that has been configured to redirect all traffic to domalo[.]online to the proof-of-concept server we wrote.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure17.jpg\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: The results when a Dark Crystal RAT instance communicates with the proof-of-concept server\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EOther Work and Reconnaissance\u003C\/h4\u003E\n\u003Cp\u003EAfter reverse engineering Dark Crystal RAT, we continued reconnaissance to see what additional information we could find. One limitation to our analysis was that we did not wish to allow the sample to communicate with the real C2, so we kept it isolated from the Internet. To learn more about Dark Crystal RAT we tried two approaches: the first was to browse the Dark Crystal RAT website (files.dcrat[.]ru) using Tor, and the other was to take a look at YouTube videos of others\u2019 experiments with the \u201creal\u201d Dark Crystal RAT server.\u003C\/p\u003E\n\u003Ch5\u003EDark Crystal RAT Website\u003C\/h5\u003E\n\u003Cp\u003EWe found that Dark Crystal RAT has a website at files.dcrat[.]ru, shown in Figure 17. Observe that there are options to download the RAT itself, as well as a few plugins; the DCLIB extension is consistent with the plugin loading code we found in the RAT.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure18.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 17: The website files.dcrat[.]ru allows users to download Dark Crystal RAT and some of its plugins\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 18 shows some additional plugins, including plugins with the ability to resist running in a virtual machine, disable Windows Defender, and disable webcam lights on certain models. No plugins were bundled with the sample we studied.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure19.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 18: Additional plugins listed on the Dark Crystal RAT website\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 19 lists software downloads on the RAT page. We took some time to look at these files; here are some interesting things we discovered:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe DCRat listed on the website is actually a \u201cbuilder\u201d that packages a build of the RAT and a configuration for the attacker to deploy. This is consistent with the name DCRatBuild.exe shown back in Figure 4. In our brief testing of the builder, we found that it had a licensing check. We did not pursue bypassing it once we found public YouTube videos of the DCRat builder in operation, as we show later.\u003C\/li\u003E\n\u003Cli\u003EThe DarkCrystalServer is not self-contained, rather, it is just a PHP file that allows the user to supply a username and password, which causes it to download and install the server software. Due to the need to supply credentials and communicate back with dcrat[.]ru (Figure 20), we did not pursue further analysis of DarkCrystalServer.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure20.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 19: The RAT page lists software for the RAT, the server, an API, and plugin development\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure21.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 20: The DarkCrystalServer asks for a username and password and calls back to dcrat[.]ru to download software, so we did not pursue it further\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EYouTube Videos\u003C\/h5\u003E\n\u003Cp\u003EAs part of confirming our findings about Dark Crystal RAT capabilities that we obtained through reverse engineering, we found some YouTube demonstrations of the DCRat builder and server.\u003C\/p\u003E\n\u003Cp\u003EThe YouTube user \u003Ci\u003ELIKAR \u003C\/i\u003Ehas a \u003Ca href=\u0022https:\/\/www.youtube.com\/watch?v=ElqjEzv9vog\u0022\u003EYouTube demonstration of Dark Crystal RAT\u003C\/a\u003E. The author demonstrates use of the Dark Crystal RAT software on a server with two active RAT instances. During the video, the author browses through the various screens in the software. This made it easy to envision how a cyber threat would use the RAT, and to confirm our suspicions of how it works.\u003C\/p\u003E\n\u003Cp\u003EFigure 21 shows a capture from the video at \u003Ca href=\u0022https:\/\/youtu.be\/ElqjEzv9vog?t=207\u0022\u003E3:27\u003C\/a\u003E. Note that the Dark Crystal RAT builder software refers to the DCRatBuild package as a \u201cserver\u201d rather than a client. Nonetheless, observe that one of the options was a type of Java, or C# (Beta). By watching this YouTube video and doing some additional background research, we discovered that Dark Crystal RAT has existed for some time in a Java version. The C# version is relatively new. This explained why we could not find much detailed prior reporting about it.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure22.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 21: A YouTube demonstration revealed that Dark Crystal RAT previously existed in a Java version, and the C# version we analyzed is in beta\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 22 shows another capture from the video at 6:28. The functionality displayed on the screen lines up nicely with the \u201cmsgbox\u201d, \u201cbrowseurl\u201d, \u201cclipboard\u201d, \u201cspeak\u201d, \u201copencd\u201d, \u201cclosecd\u201d, and other capabilities we discovered and enumerated in Table 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/dcrat\/Figure23.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 22: A YouTube demonstration confirmed many of the Dark Crystal RAT capabilities we found in reverse engineering\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EIn this post we walked through our analysis of the sample that the threat intel team provided to us and all its components. Through our initial triage, we found that its \u201cdfsds.exe\u201d component is Dark Crystal RAT. We found that Dark Crystal RAT was a .NET executable, and reverse engineered it. We extracted the malware\u2019s configuration, and through dynamic analysis discovered the syntax of its C2 communications. We implemented a small proof-of-concept server to test the correct format of commands that can be sent to the malware, and how to interpret its uploaded screenshots. Finally, we took a second look at how actual threat actors would download and use Dark Crystal RAT.\u003C\/p\u003E\n\u003Cp\u003ETo conclude, indicators of compromise for this version of Dark Crystal RAT (MD5: 047af34af65efd5c6ee38eb7ad100a01) are given in Table 4.\u003C\/p\u003E\n\u003Ch4\u003EIndicators of Compromise\u003C\/h4\u003E\n\u003Ch5\u003EDark Crystal RAT (dfsds.exe)\u003C\/h5\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHandle artifacts\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMutex name\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebc2dc004028c4f0303f5e49984983352\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ERegistry artifacts\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERegistry value\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\scrss\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERegistry value\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Wininit\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFile system artifacts\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC:\\Sysdll32.lnk\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E%APPDATA%\\dotNET.lnk\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStart Menu\\Programs\\Startup\\Sysdll32.lnk\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStart Menu\\Programs\\Startup\\dotNET.lnk\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E%APPDATA%\\\u0026lt;random process name\u0026gt;.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC:\\\u0026lt;random process name\u0026gt;.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ENetwork artifacts\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHTTP request\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91due\u003Cbr\u003E\nu3qa54\/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9kl\u003Cbr\u003E\nvv3\/212bad81b4208a2b412dfca05f1d9fa7.php?data=active\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHTTP request\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/domalo[.]online\/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91due\u003Cbr\u003E\nu3qa54\/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9kl\u003Cbr\u003E\nvv3\/akcii239myzon0xwjlxqnn3b34w212bad81b4208a2b412dfca05f1d9f\u003Cbr\u003E\na7.php? type=__ds_getdata\u0026amp;__ds_getdata_user=\u0026lt;user_hash\u0026gt;\u0026amp;__ds_getdata_ex\u003Cbr\u003E\nt=\u0026lt;message_hash\u0026gt;\u0026amp;__ds_getdata_key=\u0026lt;key\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHTTP request\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/domalo[.]online \/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54\/46kqbjvyklunp\u003Cbr\u003E\n1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3\/akcii239myzon0xw\u003Cbr\u003E\njlxqnn3b34w\/\u0026lt;user_hash\u0026gt;.\u0026lt;message_hash\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETCP connection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edomalo[.]online:80\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETCP connection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eipinfo[.]ip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDNS lookup\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edomalo[.]online\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDNS lookup\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eipinfo[.]ip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EStrings\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022174\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStatic string\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022450\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDCRatBuild\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 4: IoCs for this instance of DCRat\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EFireEye Product Support for Dark Crystal RAT\u003C\/h4\u003E\n\u003Cp\u003ETable 5 describes how FireEye products react to the initial sample (MD5: b478d340a787b85e086cc951d0696cb1) and its Dark Crystal RAT payload, or in the case of Mandiant Security Validation, allow a stakeholder to validate their own capability to detect Dark Crystal RAT.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFireEye Product\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022389\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESupport for Dark Crystal RAT\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Network Security (NX)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022389\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBackdoor.Plurox detection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Email Security (EX \u0026amp; ETP)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022389\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBackdoor.MSIL.DarkCrystal, Backdoor.Plurox, Malware.Binary.exe, Trojan.Vasal.FEC3, Win.Ransomware.Cerber-6267996-1, fe_ml_heuristic detections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Endpoint Security (HX)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022389\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETrojan.GenericKD.32546165, Backdoor.MSIL.DarkCrystal detections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Malware Analysis (AX)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022389\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBackdoor.Plurox.FEC2 detection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Detection on Demand (DoD)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022389\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBackdoor.Plurox.FEC2, FireEye.Malware detections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMandiant Security Validation\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022389\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBuilt-in Action coming soon\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 5: Support in FireEye products to detect Dark Crystal RAT or validate detection capability\u003C\/span\u003E\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon May 11 2020 20:16:02 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe recently worked on a new C# variant of Dark Crystal RAT and now aim to help defenders look for indicators of compromise and other telltale signs of this malware.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon May 11 2020 19:54:01 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Aug 18 2020 19:35:50 GMT+0000",
      "imageRotate": "0"
    }
  }
}
