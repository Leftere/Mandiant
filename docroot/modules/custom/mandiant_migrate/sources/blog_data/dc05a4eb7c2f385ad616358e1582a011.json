{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon Apr 08 2019 12:30:01 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Finding Weaknesses Before the Attackers Do",
    "jcr:versionHistory": "8865fe54-dc50-40b1-8d7b-1fc177d2927a",
    "author": "Alyssa Rahman",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "408bd7e0-3efc-4b3a-ac2c-425d2302df0a"
    ],
    "jcr:created": "Tue Oct 22 2019 15:35:29 GMT+0000",
    "cq:lastModified": "Tue Oct 22 2019 15:35:17 GMT+0000",
    "jcr:baseVersion": "408bd7e0-3efc-4b3a-ac2c-425d2302df0a",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:m-trends",
      "fireeye-blog-authors:alyssa-rahman",
      "fireeye-blog-authors:curtis-antolik",
      "fireeye-blog-tags:red-team"
    ],
    "jcr:uuid": "a2bd4da5-b43c-436e-afed-08ae589ce9ac",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Apr 08 2019 12:30:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003E\u003Ci\u003EThis blog post originally appeared as an article in \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/current-threats\/annual-threat-report\/mtrends.html\u0022\u003EM-Trends 2019\u003C\/a\u003E.\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye Mandiant red team consultants perform objectives-based assessments that emulate real cyber attacks by advanced and nation state attackers across the entire attack lifecycle by blending into environments and observing how employees interact with their workstations and applications. Assessments like this help organizations identify weaknesses in their current detection and response procedures so they can update their existing security programs to better deal with modern threats.\u003C\/p\u003E\n\u003Cp\u003EA financial services firm engaged a Mandiant red team to evaluate the effectiveness of its information security team\u2019s detection, prevention and response capabilities. The key objectives of this engagement were to accomplish the following actions without detection:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E\u003Cb\u003ECompromise Active Directory (AD):\u003C\/b\u003E Gain domain administrator privileges within the client\u2019s Microsoft Windows AD environment.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EAccess financial applications:\u003C\/b\u003E Gain access to applications and servers containing financial transfer data and account management functionality.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EBypass RSA Multi-Factor Authentication (MFA):\u003C\/b\u003E Bypass MFA to access sensitive applications, such as the client\u2019s payment management system.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EAccess ATM environment:\u003C\/b\u003E Identify and access ATMs in a segmented portion of the internal network.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EInitial Compromise\u003C\/h4\u003E\n\u003Cp\u003EBased on Mandiant\u2019s investigative experience, social engineering has become the most common and efficient initial attack vector used by advanced attackers. For this engagement, the red team used a phone-based social engineering scenario to circumvent email detection capabilities and avoid the residual evidence that is often left behind by a phishing email.\u003C\/p\u003E\n\u003Cp\u003EWhile performing Open-source intelligence (OSINT) reconnaissance of the client\u2019s Internet-facing infrastructure, the red team discovered an Outlook Web App login portal hosted at https:\/\/owa.customer.example. The red team registered a look-alike domain (https:\/\/owacustomer.example) and cloned the client\u2019s login portal (Figure 1).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1:\u0026nbsp;Cloned Outlook Web Portal\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter the OWA portal was cloned, the red team identified IT helpdesk and employee phone numbers through further OSINT. Once these phone numbers were gathered, the red team used a publicly available online service to call the employees while spoofing the phone number of the IT helpdesk.\u003C\/p\u003E\n\u003Cp\u003EMandiant consultants posed as helpdesk technicians and informed employees that their email inboxes had been migrated to a new company server. To complete the \u201cmigration,\u201d the employee would have to log into the cloned OWA portal. To avoid suspicion, employees were immediately redirected to the legitimate OWA portal once they authenticated. Using this campaign, the red team captured credentials from eight employees which could be used to establish a foothold in the client\u2019s internal network.\u003C\/p\u003E\n\u003Ch4\u003EEstablishing a Foothold\u003C\/h4\u003E\n\u003Cp\u003EAlthough the client\u2019s virtual private network (VPN) and Citrix web portals implemented MFA that required users to provide a password and RSA token code, the red team found a singlefactor bring-your-own-device (BYOD) portal (Figure 2).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2:\u0026nbsp;Single factor mobile device management portal\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUsing stolen domain credentials, the red team logged into the BYOD web portal to attempt enrollment of an Android phone for CUSTOMER\\user0. While the red team could view user settings, they were unable to add a new device. To bypass this restriction, the consultants downloaded the IBM MaaS360 Android app and logged in via their phone. The device configuration process installed the client\u2019s VPN certificate (Fig. 13), which was automatically imported to the Cisco AnyConnect app\u2014also installed on the phone.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: center;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig3.png\u0022 style=\u0022width: 50%; height: 50%\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3:\u0026nbsp;Setting up mobile device management\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter launching the AnyConnect app, the red team confirmed the phone received an IP address on the client\u2019s VPN. Using a generic tethering app from the Google Play store, the red team then tethered a laptop to the phone to access the client\u2019s internal network.\u003C\/p\u003E\n\u003Ch4\u003EEscalating Privileges\u003C\/h4\u003E\n\u003Cp\u003EOnce connected to the internal network, the red team used the Windows \u201crunas\u201d command to launch PowerShell as CUSTOMER\\user0 and perform a \u201c\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/adsecurity.org\/?p=3458\u0022\u003EKerberoast\u003C\/a\u003E\u201d attack.\u0026nbsp;Kerberoasting abuses legitimate features of Active Directory to retrieve service accounts\u2019 ticketgranting service (TGS) tickets and brute-force accounts with weak passwords.\u003C\/p\u003E\n\u003Cp\u003ETo perform the attack, the red team queried an Active Directory domain controller for all accounts with a service principal name (SPN). The typical Kerberoast attack would then request a TGS for the SPN of the associated user account. While Kerberos ticket requests are common, the default \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/PowerShellMafia\/PowerSploit\/blob\/dev\/Recon\/PowerView.ps1\u0022\u003EKerberoast attack tool\u003C\/a\u003E generates an increased volume of requests, which is anomalous and could be identified as suspicious. Using a keyword search for terms such as \u201cAdmin\u201d, \u201cSVC\u201d and \u201cSQL,\u201d the consultants identified 18 potentially high-value accounts. To avoid detection, the red team retrieved tickets for this targeted subset of accounts and inserted random delays between each request. The Kerberos tickets for these accounts were then uploaded to a \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/10\/gocrack-managed-password-cracking-tool.html\u0022\u003EMandiant password-cracking server\u003C\/a\u003E which successfully brute-forced the passwords of 4 out of 18 accounts within 2.5 hours.\u003C\/p\u003E\n\u003Cp\u003EThe red team then compiled a list of Active Directory group memberships for the cracked accounts, uncovering several groups that followed the naming scheme of {ComputerName}_Administrators. The red team confirmed the accounts possessed local administrator privileges to the specified computers by performing a remote directory listing of \\\\ {ComputerName}\\C$. The red team also executed commands on the system using PowerShell Remoting to gain information about logged on users and running\u0026nbsp;software. After reviewing this data, the red team identified an endpoint detection and response (EDR) agent which had the capability to perform in-memory detections that were likely to identify and alert on the execution of suspicious command line arguments and parent\/ child process heuristics associated with credential theft.\u003C\/p\u003E\n\u003Cp\u003ETo avoid detection, the red team created LSASS process memory dumps by using a custom utility executed via WMI. The red team retrieved the LSASS dump files over SMB and extracted cleartext passwords and NTLM hashes using \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/gentilkiwi\/mimikatz\u0022\u003EMimikatz\u003C\/a\u003E. The red team performed this process on 10 unique systems identified to potentially have active privileged user sessions. From one of these 10 systems, the red team successfully obtained credentials for a member of the Domain Administrators group.\u003C\/p\u003E\n\u003Cp\u003EWith access to this Domain Administrator account, the red team gained full administrative rights for all systems and users in the customer\u2019s domain. This privileged account was then used to focus on accessing several high-priority applications and network segments to demonstrate the risk of such an attack on critical customer assets.\u003C\/p\u003E\n\u003Ch4\u003EAccessing High-Value Objectives\u003C\/h4\u003E\n\u003Cp\u003EFor this phase, the client identified their RSA MFA systems, ATM network and high-value financial applications as three critical objectives for the Mandiant red team to target.\u003C\/p\u003E\n\u003Ch4\u003ETargeting Financial Applications\u003C\/h4\u003E\n\u003Cp\u003EThe red team began this phase by querying Active Directory data for hostnames related to the objectives and found multiple servers and databases that included references to their key financial application. The red team reviewed the files and documentation on financial application web servers and found an authentication\u0026nbsp;og indicating the following users accessed the financial application:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003ECUSTOMER\\user1\u003C\/li\u003E\n\u003Cli\u003ECUSTOMER\\user2\u003C\/li\u003E\n\u003Cli\u003ECUSTOMER\\user3\u003C\/li\u003E\n\u003Cli\u003ECUSTOMER\\user4\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe red team navigated to the financial application\u2019s web interface (Figure 4) and found that authentication required an \u201cRSA passcode,\u201d clearly indicating access required an MFA token.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4:\u0026nbsp;Financial application login portal\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EBypassing Multi-Factor Authentication\u003C\/h4\u003E\n\u003Cp\u003EThe red team targeted the client\u2019s RSA MFA implementation by searching network file shares for configuration files and IT documentation. In one file share (Figure 5), the red team discovered software migration log files that revealed the hostnames of three RSA servers.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5:\u0026nbsp;RSA migration logs from \\\\ CUSTOMER-FS01\\ Software\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENext, the red team focused on identifying the user who installed the RSA authentication module. The red team performed a directory listing of the C:\\Users and C:\\ data folders of the RSA servers, finding CUSTOMER\\ CUSTOMER_ADMIN10 had logged in the same day the RSA agent installer was downloaded. Using these indicators, the red team targeted CUSTOMER\\ CUSTOMER_ADMIN10 as a potential RSA administrator.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6:\u0026nbsp;Directory listing output\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBy reviewing user details, the red team identified the CUSTOMER\\CUSTOMER_ADMIN10 account was actually the privileged account for the corresponding standard user account CUSTOMER\\user103. The red team then used \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/PowerShellMafia\/PowerSploit\/blob\/dev\/Recon\/PowerView.ps1\u0022\u003EPowerView\u003C\/a\u003E, an open source PowerShell tool, to identify systems in the environment where CUSTOMER\\user103 was or had recently logged in (Figure 7).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7:\u0026nbsp;Running the PowerView Invoke-UserHunter command\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe red team harvested credentials from the LSASS memory of 10.1.33.133 and successfully obtained the cleartext password for CUSTOMER\\user103 (Figure 8).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8:\u0026nbsp;Mimikatz output\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe red team used the credential for CUSTOMER\\user103 to login, without MFA, to the web front-end of the RSA security console with administrative rights (Figure 9).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9:\u0026nbsp;RSA console\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EMany organizations have audit procedures to monitor for the creation of new RSA tokens, so the red team decided the stealthiest approach would be to provision an emergency tokencode. However, since the client was using software tokens, the emergency tokens still required a user\u2019s RSA SecurID PIN. The red team decided to target individual users of the financial application and attempt to discover an RSA PIN stored on their workstation.\u003C\/p\u003E\n\u003Cp\u003EWhile the red team knew which users could access the financial application, they did not know the system assigned to each user. To identify these systems, the red team targeted the users through their inboxes. The red team set a malicious Outlook homepage for the financial application user CUSTOMER\\user1 through MAPI over HTTP using the Ruler11 utility. This ensured that whenever the user reopened Outlook on their system, a backdoor would launch.\u003C\/p\u003E\n\u003Cp\u003EOnce CUSTOMER\\user1 had re-launched Outlook and their workstation was compromised, the red team began enumerating installed programs on the system and identified that the target user used KeePass, a common password vaulting solution.\u003C\/p\u003E\n\u003Cp\u003EThe red team performed an attack against KeePass to retrieve the contents of the file without having the master password by adding a malicious event trigger to the KeePass configuration file (Figure 10). With this trigger, the next time the user opened KeePass a comma-separated values (CSV) file was created with all passwords in the KeePass database, and the red team was able to retrieve the export from the user\u2019s roaming profile.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10:\u0026nbsp;Malicious configuration file\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOne of the entries in the resulting CSV file was login credentials for the financial application, which included not only the application password, but also the user\u2019s RSA SecurID PIN. With this information the red team possessed all the credentials needed to access the financial application.\u003C\/p\u003E\n\u003Cp\u003EThe red team logged into the RSA Security Console as CUSTOMER\\user103 and navigated to the user record for CUSTOMER\\user1. The red team then generated an online emergency access token (Figure 11). The token was configured so that the next time CUSTOMER\\ user1 authenticated with their legitimate RSA SecurID PIN + tokencode, the emergency access code would be disabled. This was done to remain covert and mitigate any impact to the user\u2019s ability to conduct business.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11:\u0026nbsp;Emergency access token\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe red team then successfully authenticated to the financial application with the emergency access token (Figure 12).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig12.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12:\u0026nbsp;Financial application accessed with emergency access token\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAccessing ATMs\u003C\/h4\u003E\n\u003Cp\u003EThe red team\u2019s final objective was to access the ATM environment, located on a separate network segment from the primary corporate domain. First, the red team prepared a list of high-value users by querying the member list of potentially relevant groups such as ATM_ Administrators. The red team then searched all accessible systems for recent logins by these targeted accounts and dumped their passwords from memory.\u003C\/p\u003E\n\u003Cp\u003EAfter obtaining a password for ATM administrator CUSTOMER\\ADMIN02, the red team logged into the client\u2019s internal Citrix portal to access the employee\u2019s desktop. The red team reviewed the administrator\u2019s documentation and determined the client\u2019s ATMs could be accessed through a server named JUMPHOST01, which connected the corporate and ATM network segments. The red team also found a bookmark saved in Internet Explorer for \u201cATM Management.\u201d While this link could not be accessed directly from the Citrix desktop, the red team determined it would likely be accessible from JUMPHOST01.\u003C\/p\u003E\n\u003Cp\u003EThe jump server enforced MFA for users attempting to RDP into the system, so the red team used a previously compromised domain administrator account, CUSTOMER\\ ADMIN01, to execute a payload on JUMPHOST01 through WMI. WMI does not support MFA, so the red team was able to establish a connection between JUMPHOST01 and the red team\u2019s CnC server, create a SOCKS proxy, and access the ATM Management application without an RSA pin. The red team successfully authenticated to the ATM Management application and could then dispense money, add local administrators, install new software and execute commands with SYSTEM privileges on all ATM machines (Figure 13).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FindingWeaknesses\/Fig13.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13:\u0026nbsp;Executing commands on ATMs as SYSTEM\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ETakeaways: Multi-Factor Authentication, Password Policy and Account Segmentation\u003C\/h4\u003E\n\u003Cp\u003E\u003Ci\u003EMulti-Factor Authentication\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EMandiant experts have seen a significant uptick in the number of clients securing their VPN or remote access infrastructure with MFA. However, there is frequently a lack of MFA for applications being accessed from within the internal corporate network. Therefore, FireEye recommends that customers enforce MFA for all externally accessible login portals and for any sensitive internal applications.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EPassword Policy\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EDuring this engagement, the red team compromised four privileged service accounts due to the use of weak passwords which could be quickly brute forced. FireEye recommends that customers enforce strong password practices for all accounts. Customers should enforce a minimum of 20-character passwords for service accounts. When possible, customers should also use Microsoft Managed Service Accounts (MSAs) or enterprise password vaulting solutions to manage privileged users.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EAccount Segmentation\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the red team obtained initial access to the environment, they were able to escalate privileges in the domain quickly due to a lack of account segmentation. FireEye recommends customers follow the \u201cprinciple of least-privilege\u201d when provisioning accounts. Accounts should be separated by role so normal users, administrative users and domain administrators are all unique accounts even if a single employee needs one of each.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ENormal user accounts should not be given local administrator access without a documented business requirement. Workstation administrators should not be allowed to log in to servers and vice versa. Finally, domain administrators should only be permitted to log in to domain controllers, and server administrators should not have access to those systems. By segmenting accounts in this way, customers can greatly increase the difficulty of an attacker escalating privileges or moving laterally from a single compromised account.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EAs demonstrated in this case study, the Mandiant red team was able to gain a foothold in the client\u2019s environment, obtain full administrative control of the company domain and compromise all critical business applications without any software or operating system exploits. Instead, the red team focused on identifying system misconfigurations, conducting social engineering attacks and using the client\u2019s internal tools and documentation. The red team was able to achieve their objectives due to the configuration of the client\u2019s MFA, service account password policy and account segmentation.\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Apr 08 2019 12:51:59 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye Mandiant red team consultants perform objectives-based assessments that emulate real cyber attacks.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Apr 01 2019 18:05:31 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Oct 22 2019 15:35:17 GMT+0000",
      "imageRotate": "0"
    }
  }
}
