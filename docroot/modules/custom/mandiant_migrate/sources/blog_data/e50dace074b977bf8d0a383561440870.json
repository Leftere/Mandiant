{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed May 04 2016 09:04:01 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "OpenIOC: Back to the Basics",
    "jcr:versionHistory": "2453f527-89b6-47fe-96fb-bdb2c9ae11d2",
    "author": "Will Gibb",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "focusKeyword": "Indicators of Compromise",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "1caef002-8346-4226-830a-4cda7787d4c8"
    ],
    "jcr:created": "Fri Jul 24 2020 00:03:29 GMT+0000",
    "cq:lastModified": "Fri Jul 24 2020 00:03:11 GMT+0000",
    "jcr:baseVersion": "1caef002-8346-4226-830a-4cda7787d4c8",
    "jcr:isCheckedOut": true,
    "cq:createdBy": "admin",
    "cq:tags": [
      "fireeye-blog-tags:indicators-of-compromise",
      "fireeye-blog-authors:cap-william-gibb",
      "fireeye-blog-tags:mir",
      "fireeye-blog-tags:iocs",
      "fireeye-blog-tags:redline",
      "fireeye-blog-tags:ioce",
      "fireeye-blog-tags:mandiant",
      "fireeye-blog-tags:openioc"
    ],
    "jcr:uuid": "9ec0edfb-168e-41d3-b574-cb422e8e54a1",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Oct 01 2013 13:45:52 GMT-0500",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "reference-adjustment-service",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
        "text": "\u003Cdiv class=\u0022c00 c00v1\u0022\u003E\u003Cp\u003E\u003Ci\u003EWritten by Will Gibb \u0026amp; Devon Kerr\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EOne challenge investigators face during incident response is finding a way to organize information about an attackers\u0027 activity, utilities, malware and other indicators of compromise, called IOCs. The \u003Ca href=\u0022http:\/\/www.openioc.org\/\u0022 target=\u0022_blank\u0022\u003EOpenIOC format\u003C\/a\u003E addresses this challenge head-on. OpenIOC provides a standard format and terms for describing the artifacts encountered during the course of an investigation. In this post we\u0027re going to provide a high-level overview of IOCs, including IOC use cases, the structure of an IOC and IOC logic.\u003C\/p\u003E\n\u003Cp\u003EBefore we continue, it\u0027s important to mention that IOCs are not signatures, and they aren\u0027t meant to function as a signature would. It is often understated, but an IOC is meant to be used in combination with human intelligence. IOCs are designed to aid in your investigation, or the investigations of others with whom you share threat intelligence.\u003C\/p\u003E\n\u003Ch4\u003EIOC Use Cases:\u003C\/h4\u003E\n\u003Cp\u003EThere are several use cases for codifying your IOCs, and these typically revolve around your objectives as an investigator. The number of potential use cases is quite large, and we\u0027ve listed some of the most common use cases below:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cb\u003EFind malware\/utility\u003C\/b\u003E: This is the most common use case. Essentially, this is an IOC written to find some type of known malware or utility, either by looking for attributes of the binary, itself, or for some artifact created upon execution, such as a prefetch file or registry key.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EMethodology\u003C\/b\u003E: Unlike an IOC written to identify malware or utilities, these IOCs find things you don\u0027t necessarily know about, in order to generate investigative leads. For example, if you wanted to identify any service DLL that wasn\u0027t signed and which was loaded from any directory that did not include the path \u0026quot;windowssystem32\u0026quot;, you could write an IOC to describe that condition. Another good example of a methodology IOC is an IOC that looks for the Registry text value of all \u0026quot;Run\u0026quot; keys for a string ending \u0026quot;.jpg\u0026quot;. This represents an abnormal condition which upon investigation may lead to evidence of a compromise.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EBulk\u003C\/b\u003E: You may already be using this kind of IOC. Many organizations subscribe to threat intelligence feeds that deliver a list of MD5s or IP addresses; a bulk IOC can represent a collection of those indicators. These kinds of IOCs are very black and white and are typically only good for an exact match.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EInvestigative\u003C\/b\u003E: As you investigate systems in an environment and identify evidence of malicious activity such as metadata related to the installation of backdoors, execution of tools, or files being staged for theft, you can track that information in an IOC. These IOCs are similar to bulk IOCs; however, an investigative IOC only contains indicators from a single investigation. Using this type of IOC can help you to prioritize which systems you want to analyze.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EIOC components:\u003C\/h4\u003E\n\u003Cp\u003EAn IOC is made up of three main parts: IOC metadata, references and the definition. Let\u0027s examine each one of these more closely, noting that we\u0027re using the Mandiant \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/services\/freeware\/ioc-editor.html\u0022 adhocenable=\u0022false\u0022\u003EIOC Editor (IOCe)\u003C\/a\u003E downloadable from the Mandiant website:\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EMetadata\u003C\/i\u003E: IOC metadata describes information like the author of the IOC (jsmith@domain.tld), the name of the IOC (Evil.exe (BACKDOOR) and a brief description such as \u0026quot;This variant of the open source Poison Ivy backdoor has been configured to beacon to 10.127.10.128 and registers itself as \u0026quot;Microsoft 1atent time services\u0026quot;.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/dam\/legacy\/ammo\/Image-11.png\u0022\u003E\u003Cimg width=\u0022512\u0022 height=\u0022164\u0022 class=\u0022alignnone  wp-image-5215\u0022 alt=\u0022Open IOC: Back to Basics\u0022 src=\u0022https:\/\/www.fireeye.com\/content\/dam\/legacy\/ammo\/Image-11.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EReferences\u003C\/i\u003E: Within the IOC, references can find information like the name of an investigation or case number, comments and information on the maturity of the IOC such as Alpha, Beta, Release, etc. This data can help you to understand where the IOC fits in your library of threat intelligence. One common use for references is to associate an IOC with a particular threat group. It is not uncommon for certain references to be removed from IOCs when sharing IOCs with third parties.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/dam\/legacy\/ammo\/Image-21.png\u0022\u003E\u003Cimg width=\u0022397\u0022 height=\u0022114\u0022 class=\u0022alignnone  wp-image-5216\u0022 alt=\u0022OpenIOC: Back to Basics\u0022 src=\u0022https:\/\/www.fireeye.com\/content\/dam\/legacy\/ammo\/Image-21.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EDefinition\u003C\/i\u003E: This is the content of the IOC, containing the artifacts that an investigator decided to codify in the IOC. For example, these may include the MD5 of a file, a registry path or something found in process memory. Inside the definition, indicators are listed out or combined into expressions that consist of two terms and some form of Boolean logic.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/dam\/legacy\/ammo\/Image-31.png\u0022\u003E\u003Cimg width=\u0022379\u0022 height=\u0022121\u0022 class=\u0022alignnone size-full wp-image-5217\u0022 alt=\u0022OpenIOC: Back to Basics\u0022 src=\u0022https:\/\/www.fireeye.com\/content\/dam\/legacy\/ammo\/Image-31.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003EOne thing about the OpenIOC format that makes it particularly useful is the ability to combine similar terms using Boolean AND \u0026amp; OR logic. The previous example shows how this type of logic can be used. This type of IOC describes three possible scenarios:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EThe name of a service is \u0026quot;MS 1atent time services\u0026quot; \u003Cb\u003E- OR -\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003EThe ServiceDLL name for any service contains \u0026quot;evil.exe\u0026quot; \u003Cb\u003E- OR -\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003EThe filename is \u0026quot;bad.exe\u0026quot; \u003Cb\u003EAND\u003C\/b\u003E the filesize attribute of that file is within the range 4096 to 10240 bytes.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EWhen you use Boolean logic, remember the following:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAn AND requires that both sides of the expression are true\u003C\/li\u003E\n\u003Cli\u003EAn OR requires that one side of the expression is true\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EUnderstanding that the Boolean statements, such as \u0027The name of a service is \u0026quot;MS 1atent time services\u0026quot;, \u003Cb\u003EOR \u003C\/b\u003E\u0026quot;filename is \u0026quot;bad.exe\u0026quot; \u003Cb\u003EAND\u003C\/b\u003E the filesize attribute of that file is within the range 4096 to 10240 bytes\u0026quot;\u0027, are evaluated separately is an important aspect understanding how the logic within an IOC works. These statements are not if-else statements, nor do they both have to exist in order for the IOC to have a match. When investigating a host, if the \u0026quot;MS 1atent time services\u0026quot; service is present, this IOC would have a match; regardless of whether or not the malicious file the IOC described was present on the host as well.\u003C\/p\u003E\n\u003Cp\u003EIn our next post we\u0027re going to have a crash course in writing IOC definitions using the Mandiant IOC editor, IOCe.\u0026nbsp;\u003C\/p\u003E\n\u003C\/div\u003E\n",
        "jcr:lastModified": "Sat Aug 29 2015 12:49:09 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "admin",
      "text": "\u003Cp\u003E\u003Cem\u003EWritten by Will Gibb \u0026 Devon Kerr\u003C\/em\u003E\u003C\/p\u003E ",
      "jcr:lastModified": "Tue Oct 01 2013 13:45:52 GMT-0500",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
