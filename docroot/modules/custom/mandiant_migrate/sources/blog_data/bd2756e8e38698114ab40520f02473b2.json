{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Thu Oct 10 2019 12:02:01 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Mahalo FIN7: Responding to the Criminal Operators\u2019 New Tools and Techniques",
    "jcr:versionHistory": "a4b28613-fd02-4ada-b0b8-9523347a46e9",
    "author": "Nick Carr",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "dca283a4-6b31-49db-b3df-84d55bb07450"
    ],
    "jcr:created": "Thu Oct 10 2019 20:22:07 GMT+0000",
    "cq:lastModified": "Thu Oct 10 2019 20:21:56 GMT+0000",
    "jcr:baseVersion": "dca283a4-6b31-49db-b3df-84d55bb07450",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:nick-carr",
      "fireeye-blog-authors:josh-yoder",
      "fireeye-blog-authors:kimberly-goody",
      "fireeye-blog-authors:scott-runnels",
      "fireeye-blog-authors:jeremy-kennelly",
      "fireeye-blog-authors:cap-jordan-nuce",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:cyber-crime",
      "fireeye-blog-tags:fin7",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware"
    ],
    "jcr:uuid": "b1a35308-f067-488b-b82b-2e908147d8a5",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Oct 10 2019 08:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EDuring several recent incident response engagements, FireEye Mandiant investigators uncovered new tools in FIN7\u2019s malware arsenal and kept pace as \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2018\/08\/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation.html\u0022\u003Ethe global criminal operators\u003C\/a\u003E attempted new evasion techniques. In this blog, we reveal two of FIN7\u2019s new tools that we have called BOOSTWRITE and RDFSNIFFER.\u003C\/p\u003E\n\u003Cp\u003EThe first of FIN7\u0027s new tools is BOOSTWRITE \u2013 an in-memory-only dropper that decrypts embedded payloads using an encryption key retrieved from a remote server at runtime. FIN7 has been observed making small changes to this malware family using multiple methods to avoid traditional antivirus detection, including a BOOSTWRITE sample where the dropper was signed by a valid Certificate Authority. One of the analyzed BOOSTWRITE variants contained two payloads: CARBANAK and RDFSNIFFER. While \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/04\/carbanak-week-part-one-a-rare-occurrence.html\u0022\u003ECARBANAK has been thoroughly analyzed\u003C\/a\u003E and has been used maliciously by several financial attackers including FIN7, RDFSNIFFER is a newly-identified tool recovered by Mandiant investigators.\u003C\/p\u003E\n\u003Cp\u003ERDFSNIFFER, a payload of BOOSTWRITE, appears to have been developed to tamper with NCR Corporation\u0027s \u201cAloha Command Center\u201d client. NCR Aloha Command Center is a remote administration toolset designed to manage and troubleshoot systems within payment card processing sectors running the Command Center Agent. The malware loads into the same process as the Command Center process by abusing the DLL load order of the legitimate Aloha utility. Mandiant provided this information to NCR.\u003C\/p\u003E\n\u003Ch4\u003EBOOSTWRITE Loader: Where You At?\u003C\/h4\u003E\n\u003Cp\u003EBOOSTWRITE is a loader crafted to be launched via abuse of the DLL search order of applications which load the legitimate \u2018Dwrite.dll\u2019 provided by the Microsoft DirectX Typography Services. The application loads the \u2018gdi\u2019 library, which loads the \u2018gdiplus\u2019 library, which ultimately loads \u2018Dwrite\u2019. Mandiant identified instances where BOOSTWRITE was placed on the file system alongside the RDFClient binary to force the application to import DWriteCreateFactory from it rather than the legitimate DWrite.dll.\u003C\/p\u003E\n\u003Cp\u003EOnce loaded, `DWrite.dll` connects to a hard-coded IP and port from which it retrieves a decryption key and initialization vector (IV) to decrypt two embedded payload DLLs. To accomplish this task, the malware first generates a random file name to be used as a text log under the current user\u0027s %TEMP% directory; this filename starts with ~rdf and is followed by a set of random numbers. Next, the malware scans its own image to find the location of a 32-byte long multi-XOR key which is used to decode data inside its body. Part of the decoded data is an IP address and port which are used to retrieve the key and the IV for the decryption of the embedded payloads. The encryption algorithm uses the ChaCha stream cipher with a 256-bit key and 64-bit IV.\u003C\/p\u003E\n\u003Cp\u003EOnce the key and the IV are downloaded the malware decrypts the embedded payloads and performs sanity checks on the results. The payloads are expected to be PE32.DLLs which, if the tests pass, are loaded into memory without touching the filesystem.\u003C\/p\u003E\n\u003Cp\u003EThe malware logs various plaintext messages to the previously created logfile %TEMP%\\~rds\u0026lt;rnd_numbers\u0026gt; which are indicative of the loader\u2019s execution progress. An example of the file content is shown in Figure 1:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELoading...\u003Cbr\u003E\nStarting...\u003Cbr\u003E\nInit OK\u003Cbr\u003E\nKey OK\u003Cbr\u003E\nData: 4606941\u003Cbr\u003E\nHS: 20\u003Cbr\u003E\nK:[32] V:[8]\u003Cbr\u003E\nDCnt: 732642317(ERR)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: BOOSTWRITE log file\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBefore exiting, the malware resolves the location of the benign DWrite.dll library and passes the execution control to its DWriteCreateFactory method.\u003C\/p\u003E\n\u003Cp\u003EThe malware decrypts and loads two payload DLLs. One of the DLLs is an instance of the CARBANAK backdoor; the other DLL is a tool tracked by FireEye as RDFSNIFFER which allows an attacker to hijack instances of the NCR Aloha Command Center Client application and interact with victim systems via existing legitimate 2FA sessions.\u003C\/p\u003E\n\u003Ch4\u003ERDFSNIFFER Module: We Smell a RAT\u003C\/h4\u003E\n\u003Cp\u003ERDFSNIFFER is a module loaded by BOOSTWRITE which allows an attacker to monitor and tamper with legitimate connections made via NCR Corporation\u2019s \u2018Aloha Command Center Client\u2019 (RDFClient), an application designed to provide visibility and system management capabilities to remote IT techs. RDFSNIFFER loads into the same process as the legitimate RDFClient by abusing the utility\u2019s DLL load order, launching each time the \u2018Aloha Command Center Client\u2019 is executed on an impacted system.\u003C\/p\u003E\n\u003Cp\u003EWhen the RDFSNIFFER module is loaded by BOOSTWRITE it hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface (Table 1). Furthermore, this enables the malware to alter the user\u2019s last input time to ensure application sessions do not time out.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022527\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003E\u003Cb\u003EWin32 API Function\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003E\u003Cb\u003EHook Description\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003ECertVerifyCertificateChainPolicy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to man-in-the-middle SSL sessions\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003ECertGetCertificateChain\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to man-in-the-middle SSL sessions\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003EWSAConnect\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to man-in-the-middle socket connections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003Econnect\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to man-in-the-middle socket connections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003EConnectEx\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to man-in-the-middle socket connections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003EDispatchMessageW\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to hijack the utility\u0027s UI\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003EDispatchMessageA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to hijack the utility\u0027s UI\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003EDefWindowProcW\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to hijack the utility\u0027s UI\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003EDefWindowProcA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to hijack the utility\u0027s UI\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022215\u0022\u003E\u003Cp\u003EGetLastInputInfo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022\u003E\u003Cp\u003EUsed to change the user\u0027s last input time (to avoid timed lock outs)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: RDFSNIFFER\u2019s Hooked Win32 API Functions\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis module also contains a backdoor component that enables it to inject commands into an active RDFClient session. This backdoor allows an attacker to upload, download, execute and\/or delete arbitrary files (Table 2).\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022637\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022114\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommand Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003E\u003Cb\u003ELegit Function in RDFClient\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Cb\u003ERDFClient Command ID\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022271\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022114\u0022\u003E\u003Cp\u003EUpload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFileMgrSendFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E107\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022271\u0022\u003E\u003Cp\u003EUploads a file to the remote system\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022114\u0022\u003E\u003Cp\u003EDownload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFileMgrGetFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E108\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022271\u0022\u003E\u003Cp\u003ERetrieves a file from the remote system\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022114\u0022\u003E\u003Cp\u003EExecute\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003ERunCommand\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E3001\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022271\u0022\u003E\u003Cp\u003EExecutes a command on the remote system\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022114\u0022\u003E\u003Cp\u003EDeleteRemote\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFileMgrDeleteFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E3019\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022271\u0022\u003E\u003Cp\u003EDeletes file on remote system\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022114\u0022\u003E\u003Cp\u003EDeleteLocal\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022271\u0022\u003E\u003Cp\u003EDeletes a local file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: RDFSNIFFER\u2019s Backdoor Functions\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ESigned: Yours Truly, FIN7\u003C\/h4\u003E\n\u003Cp\u003EWhile the majority of BOOSTWRITE variants recovered from investigations have been unsigned, Mandiant identified a signed BOOSTWRITE sample used by FIN7 during a recent investigation. Following that discovery, a signed BOOSTWRITE sample \u003Ca href=\u0022https:\/\/www.virustotal.com\/gui\/file\/18cc54e2fbdad5a317b6aeb2e7db3973cc5ffb01bbf810869d79e9cb3bf02bd5\/detection\u0022\u003Ewas uploaded to VirusTotal on October 3\u003C\/a\u003E. This executable uses a code signing certificate issued by MANGO ENTERPRISE LIMITED (Table 3).\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EOrganization\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECountry\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESerial\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea67d6e87283c34459b4660f19747a306\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Emango ENTERPRISE LIMITED\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E32 7F 8F 10 74 78 42 4A BE B8 2A 85 DC 36 57 03 CC 82 70 5B\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: Code signing certificate used for BOOSTWRITE\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis indicates the operators may be actively altering this malware to avoid traditional detection mechanisms. Notably, the signed BOOSTWRITE sample had a 0\/68 detection ratio when it was uploaded to VirusTotal, demonstrating the effectiveness of this tactic (Figure 2).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/mahalofin7\/fin7a.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Current VirusTotal detection ratio for signed BOOSTWRITE\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUse of a code signing certificate for BOOSTWRITE is not a completely new technique for FIN7 as the group has used digital certificates in the past to sign their phishing documents, backdoors, and later stage tools. By exploiting the trust inherently provided by code certificates, FIN7 increases their chances of bypassing various security controls and successfully compromising victims. The full evasion achieved against the detection engines deployed to VirusTotal \u2013\u0026nbsp;\u003Ca href=\u0022https:\/\/www.virustotal.com\/gui\/file\/8773aeb53d9034dc8de339651e61d8d6ae0a895c4c89b670d501db8dc60cd2d0\/detection\u0022 title=\u0022https:\/\/www.virustotal.com\/gui\/file\/8773aeb53d9034dc8de339651e61d8d6ae0a895c4c89b670d501db8dc60cd2d0\/detection\u0022\u003Eas compared to an unsigned BOOSTWRITE sample with an invalid checksum\u003C\/a\u003E\u2013 illustrates that FIN7\u2019s methods were effective in subverting both traditional detection and ML binary classification engines. This is a known issue and has been deeply studied since at least\u0026nbsp;\u003Ca href=\u0022https:\/\/dl.acm.org\/citation.cfm?doid=2872518.2888610\u0022\u003E2016\u2019s \u201cChains of Distrust\u201d research\u003C\/a\u003E\u0026nbsp;and\u0026nbsp;\u003Ca href=\u0022http:\/\/users.umiacs.umd.edu\/~tdumitra\/papers\/CCS-2017.pdf\u0022 title=\u0022http:\/\/users.umiacs.umd.edu\/~tdumitra\/papers\/CCS-2017.pdf\u0022\u003E2017\u2019s \u201cCertified Malware\u201d paper\u003C\/a\u003E. Since there are plenty of goodware samples with bad or no signatures \u2013 and a growing number of malware samples with good signatures \u2013 there is no easy solution here. The upside is that vendors selectively deploy engines to VirusTotal (including FireEye) and VT detection performance often isn\u2019t a comprehensive representation of encountering full security technology stacks that implement detection-in-depth. Later in this blog we further explore BOOSTWRITE\u2019s PE Authenticode signature, its anomalies, and how code signing can be turned from a detection challenge into detection opportunities.\u003C\/p\u003E\n\u003Ch4\u003EOutlook and Implications\u003C\/h4\u003E\n\u003Cp\u003EWhile these incidents have also included FIN7\u2019s typical and long-used toolsets, such as CARBANAK and BABYMETAL, the introduction of new tools and techniques provides further evidence FIN7 is continuing to evolve in response to security enhancements. Further, the use of code signing in at least one case highlights the group\u0027s judicious use of resources, potentially limiting their use of these certificates to cases where they have been attempting to bypass particular security controls. Barring any further law enforcement actions, we expect at least a portion of the actors who comprise the FIN7 criminal organization to continue conducting campaigns. As a result, organizations need to remain vigilant and continue to monitor for changes in methods employed by the FIN7 actors.\u003C\/p\u003E\n\u003Ch4\u003ESigs Up Dudes! Indicators, Toolmarks, and Detection Opportunities\u003C\/h4\u003E\n\u003Cp\u003EWhile FireEye does not release our production detection logic for the code families, this section does contain some identification and hunting concepts that we adopt in our layered detection strategy. Table 4 contains malware samples referenced in this blog that FireEye is able to share from the larger set recovered during active investigations.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003E\u003Cb\u003EType\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003E\u003Cb\u003EIndicator(s)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003EBOOSTWRITE (signed)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003EMD5: a67d6e87283c34459b4660f19747a306\u003Cbr\u003E\nSHA-1: a873f3417d54220e978d0ca9ceb63cf13ec71f84\u003Cbr\u003E\nSHA-256: 18cc54e2fbdad5a317b6aeb2e7db3973cc5ffb01bbf810869d79e9cb3bf02bd5\u003C\/p\u003E\n\u003Cp\u003EC2: 109.230.199[.]227\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022\u003E\u003Cp\u003EBOOSTWRITE (unsigned)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284%\u0022\u003E\u003Cp\u003EMD5: af2f4142463f42548b8650a3adf5ceb2\u003Cbr\u003E\nSHA1: 09f3c9ae382fbd29fb47ecdfeb3bb149d7e961a1\u003Cbr\u003E\nSHA256: 8773aeb53d9034dc8de339651e61d8d6ae0a895c4c89b670d501db8dc60cd2d0\u003C\/p\u003E\n\u003Cp\u003EC2: 109.230.199[.]227\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 4: Publicly-shareable BOOSTWRITE samples\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe signed BOOSTWRITE sample has a PE Authenticode anomaly that can be detected using \u003Ca href=\u0022https:\/\/yara.readthedocs.io\/en\/stable\/modules\/pe.html#c.signatures\u0022\u003Eyara\u2019s PE signature module\u003C\/a\u003E. Specifically, the PE linker timestamp is prior to the Authenticode validity period, as seen in Table 5.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002217%\u0022\u003E\u003Cp\u003E\u003Cb\u003ETimestamp\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282%\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002217%\u0022\u003E\u003Cp\u003E2019-05-20 09:50:55 UTC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282%\u0022\u003E\u003Cp\u003ESigned BOOSTWRITE\u2019s PE compilation time\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002217%\u0022\u003E\u003Cp\u003E2019-05-22 00:00 UTC\u003Cbr\u003E\nthrough\u003Cbr\u003E\n2020-05-21 23:59 UTC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282%\u0022\u003E\u003Cp\u003ESigned BOOSTWRITE\u2019s \u201cmango ENTERPRISE LIMITED\u201d certificate validity window\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 5: Relevant executabe timestamps\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EA public example of \u003Ca href=\u0022https:\/\/www.nccgroup.trust\/uk\/about-us\/newsroom-and-events\/blogs\/2017\/september\/signaturing-an-authenticode-anomaly-with-yara\u0022\u003Ea Yara rule covering this particular PE Authenticode timestamp anomaly is available in a blog post from David Cannings\u003C\/a\u003E, with the key logic shown in Figure 3.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Epe.number_of_signatures \u0026gt; 0 and not for all i in (0..pe.number_of_signatures - 1):\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; pe.signatures[i].valid_on(pe.timestamp)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Excerpt of NCC Group\u2019s research Yara rule\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThere are other PE Authenticode anomalies that can also be represented as Yara rules to surface similarly suspicious files. Of note, this signed BOOSTWRITE sample has no counter signature and, while the unauthenticated attributes timestamp structure is present, it is empty. In preparing this blog, FireEye\u2019s Advanced Practices team identified a possible issue with VirusTotal\u2019s parsing of signed executable timestamps as seen in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\n\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/mahalofin7\/fin7b.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Inconsistency in VirusTotal file signature timestamps for the signed BOOSTWRITE sample\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye filed a bug report with Google to address the discrepancy in VirusTotal in order to remove confusion for other users.\u003C\/p\u003E\n\u003Cp\u003ETo account for the detection weaknesses introduced by techniques like code signing, our Advanced Practices team combines the malicious confidence spectrum that comes from ML detection systems with file oddities and anomalies (weak signals) to surface highly interesting and evasive malware. This technique was recently described in our own \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/08\/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\u0022\u003EDr. Steven Miller\u2019s Definitive Dossier of Devilish Debug Details\u003C\/a\u003E. In fact, the exact same program database (PDB) path-based approach from his blog can be applied to the toolmarks seen in this sample for a quick hunting rule. Figure 5 provides the PDB path of the BOOSTWRITE samples from this blog.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EF:\\projects\\DWriteImpl\\Release\\DWriteImpl.pdb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: BOOSTWRITE PDB path\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe Yara rule template can be applied to result in the quick rule in Figure 6.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Erule ConventionEngine_BOOSTWRITE\u003Cbr\u003E\n{\u003Cbr\u003E\n\u0026nbsp;meta:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp;author = \u0026quot;Nick Carr (@itsreallynick)\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp;reference = \u0026quot;https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/08\/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\u0026quot;\u003Cbr\u003E\nstrings:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp;$weetPDB = \/RSDS[\\x00-\\xFF]{20}[a-zA-Z]?:?\\\\[\\\\\\s|*\\s]?.{0,250}\\\\DWriteImpl[\\\\\\s|*\\s]?.{0,250}\\.pdb\\x00\/ nocase\u003Cbr\u003E\n\u0026nbsp;condition:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp;(uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $weetPDB and filesize \u0026lt; 6MB\u003Cbr\u003E\n}\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Applying BOOSTWRITE\u2019s PDB path to a Yara rule\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe can apply this same concept across other executable traits, such as BOOSTWRITE\u2019s export DLL name (DWriteImpl.dll), to create quick and easy rules that can aid in quick discovery as seen in Figure 7.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Erule Exports_BOOSTWRITE\u003Cbr\u003E\n{\u003Cbr\u003E\nmeta:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp;author = \u0026quot;Steve Miller (@stvemillertime) \u0026amp; Nick Carr (@itsreallynick)\u0026quot;\u003Cbr\u003E\nstrings:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp;$exyPants = \u0026quot;DWriteImpl.dll\u0026quot; nocase\u003Cbr\u003E\ncondition:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp;uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $exyPants at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12)) and filesize \u0026lt; 6MB\u003Cbr\u003E\n}\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Applying BOOSTWRITE\u2019s export DLL names to a Yara rule (Note: this rule was updated following publication. It previously read \u0026quot;module_ls.dll\u0026quot;, which is for Turla and unrelated.)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOf course, resilient prevention capabilities are needed and to that end, FireEye detects this activity across our platforms. Table 6 contains several specific detection names from a larger list of detection capabilities that captured this activity natively.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022\u003E\u003Cp\u003E\u003Cb\u003EPlatform\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022433\u0022\u003E\u003Cp\u003E\u003Cb\u003ESignature Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022\u003E\u003Cp\u003EEndpoint Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022433\u0022\u003E\u003Cp\u003EMalwareGuard ML detection (unsigned variants)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022\u003E\u003Cp\u003ENetwork Security and Email Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022433\u0022\u003E\u003Cp\u003EMalware.binary.dll (dynamic detection)\u003Cbr\u003E\nMalwareGuard ML detection (unsigned variants)\u003Cbr\u003E\nAPTFIN.Dropper.Win.BOOSTWRITE (network traffic)\u003Cbr\u003E\nAPTFIN.Backdoor.Win.RDFSNIFFER (network traffic)\u003Cbr\u003E\nFE_APTFIN_Dropper_Win_BOOSTWRITE (static code family detection)\u003Cbr\u003E\nFE_APTFIN_Backdoor_Win_RDFSNIFFER (static code family detection)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 6: FireEye detection matrix\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDon\u2019t Sweat the Techniques \u2013 MITRE ATT\u0026amp;CK Mappings\u003C\/h4\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/blog\/files\/BOOSTWRITE.html\u0022\u003EBOOSTWRITE\u003C\/a\u003E\u003C\/i\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Cb\u003EID\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003E\u003Cb\u003ETactic\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003E\u003Cb\u003EBOOSTWRITE Context\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1022\/\u0022\u003ET1022\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EData Encrypted\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003EBOOSTWRITE encodes its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit IV to evade detection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1027\/\u0022\u003ET1027\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EObfuscated Files or Information\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003EBOOSTWRITE encodes its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit IV to evade detection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1038\/\u0022\u003ET1038\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EDLL Search Order Hijacking\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003EBOOSTWRITE exploits the applications\u2019 loading of the \u2018gdi\u2019 library, which loads the \u2018gdiplus\u2019 library, which ultimately loads the local \u2018Dwrite\u2019 dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1116\u0022\u003ET1116\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003ECode Signing\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003EBOOSTWRITE variants were observed signed by a valid CA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1129\/\u0022\u003ET1129\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EExecution through Module Load\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003EBOOSTWRITE exploits the applications\u2019 loading of the \u2018gdi\u2019 library, which loads the \u2018gdiplus\u2019 library, which ultimately loads the local \u2018Dwrite\u2019 dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1140\/\u0022\u003ET1140\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EDeobfuscate\/Decode Files or Information\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003EBOOSTWRITE decodes its payloads at runtime using using a ChaCha stream cipher with a 256-bit key and 64-bit IV\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/blog\/files\/RDFSNIFFER.html\u0022\u003ERDFSNIFFER\u003C\/a\u003E\u003C\/i\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Cb\u003EID\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003E\u003Cb\u003ETactic\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003E\u003Cb\u003ERDFSNIFFER Context\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1106\/\u0022\u003ET1106\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EExecution through API\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003ERDFSNIFFER hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1107\/\u0022\u003ET1107\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EFile Deletion\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003ERDFSNIFFER has the capability of deleting local files\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1179\/\u0022\u003ET1179\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022168\u0022\u003E\u003Cp\u003EHooking\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022365\u0022\u003E\u003Cp\u003ERDFSNIFFER hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EThe authors want to thank \u003Ca href=\u0022https:\/\/twitter.com\/SElovitz\u0022\u003ESteve Elovitz\u003C\/a\u003E, Jeremy Koppen, and the many Mandiant incident responders that go toe-to-toe with FIN7 regularly, quietly evicting them from victim environments. We appreciate the thorough detection engineering from Ayako Matsuda and the reverse engineering from FLARE\u2019s \u003Ca href=\u0022https:\/\/twitter.com\/dandonov\u0022\u003EDimiter Andonov\u003C\/a\u003E, \u003Ca href=\u0022https:\/\/twitter.com\/t00manybananas\u0022\u003EChristopher Gardner\u003C\/a\u003E\u0026nbsp;and \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/twitter.com\/spresec\u0022\u003ETyler Dean\u003C\/a\u003E. A special thanks to FLARE\u2019s Troy Ross for the development of his PE Signature analysis service and for answering our follow-up questions. Shout out to \u003Ca href=\u0022https:\/\/twitter.com\/stvemillertime\u0022\u003ESteve Miller\u003C\/a\u003E for his hot fire research and Yara anomaly work. And lastly, the rest of the Advanced Practices team for \u003Ci\u003Eboth\u003C\/i\u003E the unparalleled front-line FIN7 technical intelligence expertise and MITRE ATT\u0026amp;CK automated mapping project \u2013 with a particular thanks to \u003Ca href=\u0022https:\/\/twitter.com\/ReginaElwell\u0022\u003ERegina Elwell\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/twitter.com\/BarryV\u0022\u003EBarry Vengerik\u003C\/a\u003E.\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Oct 10 2019 20:21:56 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe uncovered new tools in FIN7\u0027s malware arsenal, and new evasion techniques being used by the cybercrime group.\u003C\/p\u003E\n",
      "jcr:lastModified": "Thu Oct 10 2019 02:26:39 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Oct 10 2019 12:01:49 GMT+0000",
      "imageRotate": "0"
    }
  }
}
