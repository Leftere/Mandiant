{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon Mar 27 2017 08:02:52 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "APT29 Domain Fronting With TOR",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "cd409bc8-998b-4c43-81d6-86056cb21fd4",
    "author": "Matthew Dunwoody ",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynn.thorne@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "f43c9e57-47ea-4344-ad99-4447c362b8af"
    ],
    "jcr:created": "Mon Mar 27 2017 08:02:52 GMT-0400",
    "cq:lastReplicated": "Mon Mar 27 2017 08:02:52 GMT-0400",
    "cq:lastModified": "Sun Mar 26 2017 19:35:39 GMT-0400",
    "cq:distribute": true,
    "jcr:description": "APT29 used domain fronting techniques for backdoor access to hide their network traffic. To detect these nation-state attackers requires endpoint visibility, as well as visibility into TLS connections and effective network signatures.",
    "jcr:baseVersion": "f43c9e57-47ea-4344-ad99-4447c362b8af",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:matthew-dunwoody",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-threat-research:threat-research\/threat-intelligence",
      "fireeye-blog-tags:apt",
      "fireeye-doctypes:blog",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:apt29"
    ],
    "jcr:uuid": "e93aadc7-df56-44ac-819b-e4c21409b4d8",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Mar 27 2017 08:00:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynn.thorne@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
        "text": "\u003Cp\u003EMandiant has observed Russian nation-state attackers APT29 employing domain fronting techniques for stealthy backdoor access to victim environments for at least two years. There has been considerable discussion about domain fronting following the release of a \u003Ca href=\u0022http:\/\/www.icir.org\/vern\/papers\/meek-PETS-2015.pdf\u0022\u003Epaper detailing these techniques\u003C\/a\u003E. Domain fronting provides outbound network connections that are indistinguishable from legitimate requests for popular websites.\u003C\/p\u003E\n\u003Cp\u003EAPT29 has used The Onion Router (TOR) and the TOR domain fronting plugin meek to create a hidden, encrypted network tunnel that appeared to connect to Google services over TLS. This tunnel provided the attacker remote access to the host system using the Terminal Services (TS), NetBIOS, and Server Message Block (SMB) services, while appearing to be traffic to legitimate websites. The attackers also leveraged a common Windows exploit to access a privileged command shell without authenticating.\u003C\/p\u003E\n\u003Cp\u003EWe first discussed APT29\u2019s use of these techniques as part of our \u201cNo Easy Breach\u201d talk at DerbyCon 6.0. For additional details on how we first identified this backdoor, and the epic investigation it was part of, see the \u003Ca href=\u0022https:\/\/www.slideshare.net\/MatthewDunwoody1\/no-easy-breach-derby-con-2016\u0022\u003Eslides\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/www.youtube.com\/watch?v=Ldzr0bfGtHc\u0022\u003Epresentation\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch5\u003EDomain Fronting Overview\u003C\/h5\u003E\n\u003Cp\u003E\u003Ca href=\u0022https:\/\/www.torproject.org\/about\/overview.html.en\u0022\u003EThe Onion Router (TOR)\u003C\/a\u003E is a network of proxy nodes that attempts to provide anonymity to users accessing the Internet. TOR transfers internet traffic through a series of proxy points on the Internet, with each node knowing only the previous and next node in the path. This proxy network, combined with pervasive encryption, makes tracking the source of TOR Internet activity extremely difficult. A TOR client can also use the TOR network to host services that are not accessible from the open Internet. These services are commonly used to host \u201cdark web\u201d sites such as the defunct Silk Road.\u003C\/p\u003E\n\u003Cp\u003ETypically network analysts can identify normal TOR traffic through signature analysis or the identification of communication with TOR infrastructure. \u003Ca href=\u0022https:\/\/trac.torproject.org\/projects\/tor\/wiki\/doc\/AChildsGardenOfPluggableTransports#meek\u0022\u003EMeek\u003C\/a\u003E is a publicly available obfuscation plugin for TOR and an implementation of the domain fronting technique. To hide TOR traffic, meek takes advantage of the way that Google and other Internet content delivery networks (CDNs) route traffic. CDNs often route traffic from IP addresses associated with one service to servers associated with another service hosted on the same network. By hosting a meek reflection server in one of these CDNs, meek can hide TOR traffic in legitimate HTTPS connections to well-known services.\u003C\/p\u003E\n\u003Cp\u003EMeek obfuscates traffic in several stages. First, it encodes TOR traffic into HTTP specifying the host name of the reflection server (for example, the default server meek-reflect.appspot.com). It then wraps that HTTP traffic in a legitimate TLS connection to a server hosted in the same CDN cloud as the reflection server (in this example, Google). When the CDN server receives the connection, it decrypts the TLS traffic, identifies the hostname specified in the HTTP header and redirects the traffic to the reflection server. The reflection server then reconstructs the original TOR traffic from the HTTP stream and sends the traffic to the TOR network, which routes it to its destination. This process creates an outbound network connection that appears to contain normal HTTPS POST requests for \u003Cspan class=\u0022code\u0022\u003Egoogle.com\u003C\/span\u003E on a Google-owned IP address, while discretely passing the traffic through the reflection server to the TOR network. Meek can also use the TLS service and cipher suites used by Firefox to further obfuscate traffic. Differentiating this traffic from legitimate connections is extremely difficult, and encryption of both on the initial TLS connection and the TOR traffic makes meaningful analysis of the traffic impossible. Note: Google suspended the reflection server meek-reflect.appspot.com, but other servers, in the Google cloud or other supported CDNs, can fulfill the same function.\u003C\/p\u003E\n\u003Cp\u003EFigure 1 displays the traffic flow when using meek.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT%2020%20Domain%20Fronting%20Dunwoody\/Fig1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Meek traffic flow\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EBackdoor Overview\u003C\/h5\u003E\n\u003Cp\u003EMandiant discovered that APT29 enabled a TOR hidden service that forwarded traffic from the TOR client to local ports 139, 445 and 3389 (NetBIOS, SMB and TS, respectively). This provided the attackers full remote access to the system from outside of the local network using the hidden TOR (.onion) address of the system.\u003C\/p\u003E\n\u003Cp\u003EThe attackers created the following files and directories during the installation and execution of the backdoor:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\googleService.exe\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\GoogleUpdate.exe\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\core\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\data\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\data\\00\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\data\\00\\hostname\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\data\\00\\private_key\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\debug.log\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\lock\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\cached-certs\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\cached-microdescs\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\cached-microdescs.new\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\cached-microdescs-consensus\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\state\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\start.ps1\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\install.bat\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003EgoogleService.exe\u003C\/span\u003E is the primary TOR executable, responsible for establishing and maintaining encrypted proxy connections. \u003Cspan class=\u0022code\u0022\u003EGoogleUpdate.exe\u003C\/span\u003E is the meek-client plugin, which obfuscates the TOR connection. These files are publicly available and have the following hashes:\u003C\/p\u003E\n\u003Cp\u003EFilename\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA256\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EgoogleService.exe\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; fe744a5b2d07de396a8b3fe97155fc64e350b76d88db36c619cd941279987dc5\u003Cbr\u003E\n GoogleUpdate.exe\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2f39dee2ee608e39917cc022d9aae399959e967a2dd70d83b81785a98bd9ed36\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files (x86)\\Google\\core\u003C\/span\u003E contains configuration information for the TOR service \u003Cspan class=\u0022code\u0022\u003EgoogleService.exe\u003C\/span\u003E. The service was configured to:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ECommunicate on ports 1, 80 and 443\u003C\/li\u003E\n\u003Cli\u003EBridge traffic using the meek plugin to \u003Cspan class=\u0022code\u0022\u003Ehttps:\/\/meek-reflect.appspot.com\u003C\/span\u003E and obfuscate HTTPS and DNS requests to appear destined for \u003Cspan class=\u0022code\u0022\u003Ewww.google.com\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003EForward traffic from ports 62304, 62305 and 62306 to ports 3389, 139 and 445, respectively\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EFigure 2 displays the contents of the TOR configuration file \u003Cspan class=\u0022type-XS\u0022\u003Ecore.\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT%2020%20Domain%20Fronting%20Dunwoody\/Fig2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Contents of TOR configuration file \u201cC:\\Program Files(x86)\\Google\\core\u201d\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files (x86)\\Google\\data\\00\\hostname\u003C\/span\u003E\u201d file contained a single line with the TOR hostname for the system. This hostname was a pseudorandomly-generated 16 character alpha-numeric name, with the top-level domain (TLD) \u003Cspan class=\u0022code\u0022\u003E.onion\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\data\\00\\private_key\u003C\/span\u003E file contained the TOR client RSA private key. Figure 3 displays the redacted contents of a sample \u003Cspan class=\u0022code\u0022\u003Eprivate_key\u003C\/span\u003E file.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT%2020%20Domain%20Fronting%20Dunwoody\/Fig3.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Redacted contents of sample private_key\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe attackers used the scripts \u003Cspan class=\u0022code\u0022\u003Estart.ps1\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003Einstall.bat \u003C\/span\u003Eto install the TOR service. After installation, the attackers deleted these scripts from the system. Additional files in the directory \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\u003C\/span\u003E contained cached data and logs from the operation of TOR.\u003C\/p\u003E\n\u003Cp\u003EAdditional information on increasing visibility into PowerShell activity through enhanced logging is available \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2016\/02\/greater_visibilityt.html\u0022\u003Ehere\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch5\u003EInstallation and Persistence\u003C\/h5\u003E\n\u003Cp\u003EThe attacker executed the PowerShell script \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files(x86)\\Google\\start.ps1\u003C\/span\u003E to install the TOR services and implement the \u201cSticky Keys\u201d exploit. This script was deleted after execution, and was not recovered.\u003C\/p\u003E\n\u003Cp\u003EBy replacing the \u201cSticky Keys\u201d binary, \u003Cspan class=\u0022code\u0022\u003EC:\\Windows\\System32\\sethc.exe\u003C\/span\u003E, with the Windows Command Processor \u003Cspan class=\u0022code\u0022\u003Ecmd.exe\u003C\/span\u003E, the attackers then accessed a privileged Windows console session without authenticating to the system. \u201cSticky Keys\u201d is an accessibility feature that allows users to activate Windows modifier keys without pressing more than one key at a time. Pressing the shift key five times activates \u201cSticky Keys\u201d and executes \u003Cspan class=\u0022code\u0022\u003Esethc.exe\u003C\/span\u003E, which, when replaced with \u003Cspan class=\u0022code\u0022\u003Ecmd.exe\u003C\/span\u003E, opens a System-level command shell. From this shell, the attackers can execute arbitrary Windows commands, including adding or modifying accounts on the system, even from the logon screen (pre-authentication). By tunneling RDP traffic to the system, the attackers could gain both persistent access and privilege escalation using this simple and well-known exploit.\u003C\/p\u003E\n\u003Cp\u003EThe installation script \u003Cspan class=\u0022code\u0022\u003Estart.ps1\u003C\/span\u003E created a Windows service named \u003Cspan class=\u0022code\u0022\u003EGoogle Update\u003C\/span\u003E to maintain persistence after a system reboot. Table 1 contains registry details for the \u201cGoogle Update\u201d service.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT%2020%20Domain%20Fronting%20Dunwoody\/Tab1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Registry details for the TOR Google Update Windows service\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe script also modified the Terminal Server registry values \u003Cspan class=\u0022code\u0022\u003EfSingleSessionPerUser\u003C\/span\u003E to allow multiple simultaneous Windows sessions using the same account, and \u003Cspan class=\u0022code\u0022\u003EfDenyTSConnections\u003C\/span\u003E to allow Terminal Services connections. Table 2 shows the modified values for these registry keys.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT%2020%20Domain%20Fronting%20Dunwoody\/Tab2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Registry modifications performed by start.ps1\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EConclusion\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EAPT29 adopted domain fronting long before these techniques were widely known. By employing a publicly available implementation, they were able to hide their network traffic, with minimal research or development, and with tools that are difficult to attribute. Detecting this activity on the network requires visibility into TLS connections and effective network signatures. However, when dealing with advanced threat groups who rapidly develop capabilities and invest in hiding network traffic, effective endpoint visibility is vital. Monitoring for potentially interesting events and attacker methodologies, like lateral movement and new persistence creation, can allow defenders to identify these stealthy methodologies.\u003C\/p\u003E\n",
        "jcr:lastModified": "Sun Mar 26 2017 19:27:29 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
      "jcr:lastModified": "Sun Mar 26 2017 19:35:14 GMT-0400",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
      "text": "\u003Cp\u003EAPT29 used domain fronting techniques for backdoor access to hide their network traffic. To detect these nation-state attackers requires endpoint visibility, as well as visibility into TLS connections and effective network signatures.\u003Cbr\u003E\n\u003C\/p\u003E\n",
      "jcr:lastModified": "Sun Mar 26 2017 19:35:39 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
