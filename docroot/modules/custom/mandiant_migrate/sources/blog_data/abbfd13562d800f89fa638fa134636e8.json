{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Dec 24 2020 20:09:15 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "SUNBURST Additional Technical Details",
    "jcr:versionHistory": "a678f37a-ea85-4fbc-9e3b-a7d05202ec4d",
    "author": "Stephen Eckels",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "a53ac5b5-b7c5-4f23-bc2e-97c2fa870c9f"
    ],
    "jcr:created": "Wed Jan 06 2021 20:57:49 GMT+0000",
    "cq:lastModified": "Wed Jan 06 2021 20:57:36 GMT+0000",
    "jcr:baseVersion": "a53ac5b5-b7c5-4f23-bc2e-97c2fa870c9f",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:stephen-eckels",
      "fireeye-blog-authors:cap-jay-smith",
      "fireeye-blog-authors:cap-william-ballenthin",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:backdoor",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:analysis"
    ],
    "jcr:uuid": "db62c898-4ec2-4881-a63b-a0b2801a5cfb",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Dec 24 2020 15:15:00 GMT-0500",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EFireEye has discovered additional details about the SUNBURST backdoor since our initial publication on Dec. 13, 2020. Before diving into the technical depth of this malware, we recommend readers familiarize themselves with our blog post about the \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2020\/12\/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\u0022\u003ESolarWinds supply chain compromise\u003C\/a\u003E,\u0026nbsp;which revealed a global intrusion campaign by a sophisticated threat actor we are currently tracking as UNC2452.\u003C\/p\u003E\n\u003Cp\u003ESUNBURST is a trojanized version of a digitally signed SolarWinds Orion plugin called \u003Cspan class=\u0022code\u0022\u003ESolarWinds.Orion.Core.BusinessLayer.dll\u003C\/span\u003E. The plugin contains a backdoor that communicates via HTTP to third party servers. After an initial dormant period of up to two weeks, SUNBURST may retrieve and execute commands that instruct the backdoor to transfer files, execute files, profile the system, reboot the system, and disable system services. The malware\u0027s network traffic attempts to blend in with legitimate SolarWinds activity by imitating the Orion Improvement Program (OIP) protocol and persistent state data is stored within legitimate plugin configuration files. The backdoor uses multiple obfuscated blocklists to identify processes, services, and drivers associated with forensic and anti-virus tools.\u003C\/p\u003E\n\u003Cp\u003EIn this post, the following topics are covered in greater detail:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAnti-Analysis Environment Checks and Blocklists\u003C\/li\u003E\n\u003Cli\u003EDomain Generation Algorithm and Variations\u003C\/li\u003E\n\u003Cli\u003ECommand and Control (C2) behaviors for DNS A and CNAME records\u003C\/li\u003E\n\u003Cli\u003EMalware modes of operation\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EAnti-Analysis Environment Checks\u003C\/h4\u003E\n\u003Cp\u003EBefore reaching out to its C2 server, SUNBURST performs numerous checks to ensure no analysis tools are present. It checks process names, file write timestamps, and Active Directory (AD) domains before proceeding. We believe that these checks helped SUNBURST evade detection by anti-virus software and forensic investigators for seven months after its introduction to the SolarWinds Orion supply chain.\u003C\/p\u003E\n\u003Cp\u003EFirst, the backdoor verifies that the lowercase name of the current process is \u003Cspan class=\u0022code\u0022\u003Esolarwinds.businesslayerhost\u003C\/span\u003E. UNC2452 avoided including this string directly in the source code by computing a hash of the string and comparing the result to the 64-bit number \u003Cspan class=\u0022code\u0022\u003E17291806236368054941\u003C\/span\u003E. The hash value is calculated as a standard FNV-1A 64-bit hash with an additional XOR by the 64-bit number \u003Cspan class=\u0022code\u0022\u003E6605813339339102567\u003C\/span\u003E. The additional XOR operation forces malware analysts to develop custom tools to brute force the hash preimage.\u003C\/p\u003E\n\u003Cp\u003ENext, the backdoor only executes if the filesystem last write time of the .NET assembly SolarWinds.Orion.Core.BusinessLayer.dll is at least 12 to 14 days prior to the current time. The exact threshold is selected randomly from this interval. In other words, SUNBURST lays low for almost two weeks before raising its head. If the timestamp check fails, the backdoor will execute again at a random later time when it is invoked by a legitimate recurring background task. Once the threshold is met, the sample creates the named pipe \u003Cspan class=\u0022code\u0022\u003E583da945-62af-10e8-4902-a8f205c72b2e\u003C\/span\u003E to ensure only one instance of the backdoor is running. If the named pipe already exists, the malware exits.\u003C\/p\u003E\n\u003Cp\u003ESUNBURST stores its configuration in the legitimate \u003Cspan class=\u0022code\u0022\u003ESolarWinds.Orion.Core.BusinessLayer.dll.config\u003C\/span\u003E file. It repurposes two existing settings in the \u003Cspan class=\u0022code\u0022\u003EappSettings\u003C\/span\u003E section:\u0026nbsp; \u003Cspan class=\u0022code\u0022\u003EReportWatcherRetry\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003EReportWatcherPostpone\u003C\/span\u003E. During initialization, the backdoor determines if the \u003Cspan class=\u0022code\u0022\u003EReportWatcherRetry\u003C\/span\u003E setting is the value \u003Cspan class=\u0022code\u0022\u003E3\u003C\/span\u003E. This value indicates the malware has been deactivated and will no longer perform any network activity. As we describe later, UNC2452 can command the backdoor to disable itself. This feature may be utilized when the operator determines the victim is not of interest or that they\u2019ve completed their mission. When investigating a system compromised by SUNBURST, review this setting to determine if the backdoor has been disabled. Note, the presence of this value does not offer proof the actor did not further compromise the environment before disabling SUNBURST.\u003C\/p\u003E\n\u003Cp\u003EThe backdoor also determines if the system is joined to an Active Directory (AD) domain and, if so, retrieves the domain name. Execution ceases if the system is not joined to an AD domain. SUNBURST checks the AD domain name against a blocklist and halts execution if it contains one of the following values:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eswdev.local\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022223\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eemea.sales\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022137\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Epci.local\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022115\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eapac.lab\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eswdev.dmz\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022223\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ecork.lab\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022137\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esaas.swi\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022115\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Edmz.local\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Elab.local\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022223\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Edev.local\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022137\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Elab.rio\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022115\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Elab.brno\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022148\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Elab.na\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022223\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Etest\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022137\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esolarwinds\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022115\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EWe suspect these hard-coded AD domains may be SolarWinds internal domains that UNC2452 wanted to avoid.\u003C\/p\u003E\n\u003Cp\u003EFinally, SUNBURST verifies the system has internet connectivity by ensuring it can resolve the DNS name \u003Cspan class=\u0022code\u0022\u003Eapi.solarwinds.com\u003C\/span\u003E. Otherwise, execution stops and retries at a random later time.\u003C\/p\u003E\n\u003Ch4\u003EAnti-Analysis Blocklists\u003C\/h4\u003E\n\u003Cp\u003ESUNBURST\u0027s behavior is affected by the presence of malware analysis and security software. To disguise the strings used to detect these security tools, UNC2452 calculated and embedded a hash value for each string. While it is trivial for the backdoor to check for the existence of a hashed process name, it is computationally expensive to determine what string a hash value corresponds to (the \u201cpreimage\u201d). However, thanks to some hard work by members of the information security community, the hashes have been successfully brute-forced. The list of hashes and their corresponding strings can be viewed at this \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/sunburst_countermeasures\/blob\/main\/fnv1a_xor_hashes.txt\u0022\u003EFireEye GitHub page\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003ESUNBURST uses the aforementioned FNV-1A plus XOR algorithm to compute the hash of each process name, service name, and driver filename on the system.\u003C\/p\u003E\n\u003Cp\u003EIf a blocklisted process or driver name is found, SUNBURST pauses and tries again later. The backdoor continues past this check only when there are no processes nor drivers from the blocklist present.\u003C\/p\u003E\n\u003Cp\u003EIf a blocklisted service is found, SUNBURST attempts to disable the blocklisted service by manipulating the service configuration in the Windows Registry. It sets the registry value \u003Cspan class=\u0022code\u0022\u003EHKLM\\SYSTEM\\CurrentControlSet\\services\\\u0026lt;service_name\u0026gt;\\Start\u003C\/span\u003E to the value \u003Cspan class=\u0022code\u0022\u003E4\u003C\/span\u003E, which corresponds to \u003Cspan class=\u0022code\u0022\u003ESERVICE_DISABLED\u003C\/span\u003E. As a result, the blocklisted service is disabled \u003Ci\u003Eon the next power cycle\u003C\/i\u003E. This means the presence of a blocklisted service on a compromised host does not make a system immune to SUNBURST.\u003C\/p\u003E\n\u003Cp\u003EAfter the registry modification is made, SUNBURST updates the \u003Cspan class=\u0022code\u0022\u003EReportWatcherPostpone\u003C\/span\u003E configuration value to reflect the service it disabled. Then, the backdoor pauses and retries the process and service blocklist checks at a later time.\u003C\/p\u003E\n\u003Cp\u003ESubsequent service blocklist checks skip services already present in the \u003Cspan class=\u0022code\u0022\u003EReportWatcherPostpone\u003C\/span\u003E configuration key. SUNBURST will not treat the services it has disabled as members of the blocklist anymore. Therefore, during an incident response, forensic teams should consider recovering and decoding this configuration key to parse out which services SUNBURST attempted to disable.\u003C\/p\u003E\n\u003Ch4\u003EDomain Generation Algorithm\u003C\/h4\u003E\n\u003Cp\u003EIn this section we describe how SUNBURST uses an intermediary command and control (C2) coordinator to retrieve its final C2 server. The C2 coordinator instructs the backdoor to continue or halt beaconing. It also redirects SUNBURST to its final C2 server via DNS CNAME records. We believe this enables UNC2452 to compartmentalize their operations, limiting the network infrastructure shared among victims.\u003C\/p\u003E\n\u003Cp\u003EThe C2 coordinator is implemented as the authoritative DNS server for the \u003Cspan class=\u0022code\u0022\u003Eavsvmcloud[.]com\u003C\/span\u003E domain. To communicate with the C2 coordinator, SUNBURST uses a Domain Generation Algorithm (DGA) to construct subdomains of \u003Cspan class=\u0022code\u0022\u003Eavsvmcloud[.]com\u003C\/span\u003E and resolves the fully qualified domain names (FQDN) using the system DNS client. The backdoor interprets the DNS responses in an unusual way to receive orders from the C2 coordinator.\u003C\/p\u003E\n\u003Cp\u003EThe DGA generates subdomains with the following DNS suffixes to create the FQDN:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E.appsync-api.eu-west-1[.]avsvmcloud[.]com\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E.appsync-api.us-west-2[.]avsvmcloud[.]com\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E.appsync-api.us-east-1[.]avsvmcloud[.]com\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E.appsync-api.us-east-2[.]avsvmcloud[.]com\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EA method named \u003Cspan class=\u0022code\u0022\u003EUpdate\u003C\/span\u003E is responsible for initializing cryptographic helpers for the generation of these random-looking C2 subdomains. Subdomains are generated by concatenating an encoded user ID with an encoding of the system\u0027s domain name. The C2 coordinator can recover the victim domain name from the encoded data and likely uses this to route SUNBURST to its final C2 server.\u003C\/p\u003E\n\u003Cp\u003EA user ID is generated based on three values:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EMAC address of the first available, non-loopback network interface\u003C\/li\u003E\n\u003Cli\u003EDomain name\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid\u003C\/span\u003E value\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003ESUNBURST takes the MD5 hash of these combined values and encodes it using a custom XOR scheme. We believe this value is used by UNC2452 to track unique victims.\u003C\/p\u003E\n\u003Cp\u003ESUNBURST uses four different forms of subdomains to signify the operating mode of the backdoor. Each form contains slightly different information. However, in two of the forms, investigators can recover the domain names of victim organizations. We recommend reviewing DNS logs to confirm the presence of a victim\u2019s domain in SUNBURST C2 coordinator traffic.\u003C\/p\u003E\n\u003Cp\u003EWhen SUNBURST is in its initial mode, it embeds the domain of the victim organization in its DGA-generated domain prefix. Once the malware transitions to an \u201cactive\u201d mode, the malware uses the other two forms of subdomains. These do not include the AD domain, but instead include encodings of either the list of running and stopped services or a timestamp.\u003C\/p\u003E\n\u003Cp\u003EThe open-source community has done a fantastic job reverse engineering many of the subdomain forms. While we are not aware of any public decoder scripts that reverse all four possible encodings, most decoders focus on recovering the most useful information: the user ID and domain name embedded in the subdomains. We recommend that incident responders for victim organizations with access to DNS logs use these tools to confirm their AD domains are not embedded within SUNBURST generated DNS subdomains. Note that this does not indicate follow-on activity.\u003C\/p\u003E\n\u003Cp\u003EThe following sources may be referenced for decoding such domains:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/securelist.com\/sunburst-connecting-the-dots-in-the-dns-requests\/99862\/\u0022\u003Ehttps:\/\/securelist.com\/sunburst-connecting-the-dots-in-the-dns-requests\/99862\/\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/github.com\/RedDrip7\/SunBurst_DGA_Decode\/blob\/main\/decode.py\u0022\u003Ehttps:\/\/github.com\/RedDrip7\/SunBurst_DGA_Decode\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/blog.cloudflare.com\/a-quirk-in-the-sunburst-dga-algorithm\/\u0022\u003Ehttps:\/\/blog.cloudflare.com\/a-quirk-in-the-sunburst-dga-algorithm\/\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sunburst-more\/fig1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Diagram of actor operations and usage of SUNBURST\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ECommand and Control\u003C\/h4\u003E\n\u003Cp\u003ESUNBURST uses a two-part C2 protocol that involves both DNS and HTTP. In \u201cpassive\u201d mode, the backdoor communicates with its C2 coordinator via DNS and receives high-level updates to its state. For example, the C2 coordinator may tell the backdoor to go to sleep or spring into action. When the backdoor is in \u201cactive\u201d mode, it communicates via HTTP to its final C2 server and receives detailed commands such as \u201cspawn a process\u201d or \u201ctransfer a file\u201d.\u003C\/p\u003E\n\u003Ch4\u003EDNS C2 and the C2 Coordinator Protocol\u003C\/h4\u003E\n\u003Cp\u003EWhen communicating with the C2 coordinator, the backdoor continuously generates domains via its DGA. The backdoor delays execution for random intervals between generating domains. In some cases, this delay is up to 9 hours.\u003C\/p\u003E\n\u003Cp\u003EIf the C2 coordinator responds with a DNS A record, SUNBURST checks the resolved address against a hard-coded list of IP address blocks. If the address falls within a block, the backdoor transitions into an associated mode. The backdoor starts in the \u201cpassive\u201d mode where it does nothing but check blocklists, sleep, and beacon via DNS until a transition is seen. Other modes are \u201cactive\u201d, in which the malware communicates via HTTP, and \u201cdisabled\u201d, in which the malware is permanently disabled. These modes and transitions are defined in the Modes of Operation section.\u003C\/p\u003E\n\u003Cp\u003EThe C2 coordinator may also respond with a DNS CNAME response. In this case, the malware uses the pointed-to domain from the CNAME response for HTTPS C2 communications. SUNBURST starts a thread to handle command execution and further C2 HTTP(S) callouts. As an investigator, if you see CNAME resolutions for subdomains of avsvmcloud[.]com, it\u2018s possible that UNC2452 initiated follow-on C2 within the environment.\u003C\/p\u003E\n\u003Cp\u003ENote, the malware must receive a DNS A record response pointing to one of the following subnets immediately prior to receiving a DNS CNAME response. Otherwise, the CNAME resolution will be ignored and treated as an error. In addition, for these subnets, the least-significant bytes from the A record IP address are parsed to obtain configuration data such as the proxy method to use, the URI scheme to use, and a delay value used in the HTTP thread.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E18.130.0.0\/16\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E99.79.0.0\/16\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E184.72.0.0\/15\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003ESubsequent DNS A record responses in the following subnet ranges cause the DGA beaconing to continue.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E8.18.144.0\/23\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E18.130.0.0\/16\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E71.152.53.0\/24\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E99.79.0.0\/16\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E87.238.80.0\/21\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E199.201.117.0\/24\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E184.72.0.0\/15\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022156\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EOtherwise, subsequent DNS A record responses in the following subnet ranges cause SUNBURST to terminate and update the configuration key \u003Cspan class=\u0022code\u0022\u003EReportWatcherRetry\u003C\/span\u003E to a value that prevents further execution. This is the killswitch.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E10.0.0.0\/8\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Efc00:: - fe00::\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E96.31.172.0\/24\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E172.16.0.0\/12\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Efec0:: - ffc0::\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E131.228.12.0\/22\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E192.168.0.0\/16\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eff00:: - ff00::\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E144.86.226.0\/24\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E224.0.0.0\/3\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E20.140.0.0\/15\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EWhile in \u201cactive\u201d mode, the DGA subdomain encoding does not include victim machine domain name information. Instead, the DGA subdomains encode a timestamp or the list of stopped\/running services. To transition back to \u201cpassive\u201d mode, the malware operator may set the DNS server to resolve A records within the following IP ranges:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022623\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022173\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E41.84.159.0\/24\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022164\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E74.114.24.0\/21\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022132\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E154.118.140.0\/24\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022155\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E217.163.7.0\/24\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EIf the malware is transitioned from the \u201cactive\u201d mode back to \u201cpassive\u201d, the C2 coordinator must repeat the activation process if the operator wants to re-activate the sample.\u003C\/p\u003E\n\u003Ch4\u003EHTTP(S) C2\u003C\/h4\u003E\n\u003Cp\u003EAfter receiving a CNAME DNS response with a new host to communicate with, SUNBURST starts a new thread to execute the method \u003Cspan class=\u0022code\u0022\u003EHttpHelper.Initialize\u003C\/span\u003E. This method is responsible for the C2 communications and dispatching. The HTTP thread begins by delaying for a configurable amount of time that is controlled by the \u003Cspan class=\u0022code\u0022\u003ESetTime\u003C\/span\u003E command. The HTTP thread delays for a minimum of one minute between callouts. The malware uses HTTP GET or POST requests. The sample disables certificate verification so it is possible to decrypt HTTPS traffic if SSL man-in-the-middle is performed.\u003C\/p\u003E\n\u003Cp\u003EThe malware constructs HTTP GET or POST request URIs from random selections of substrings. The scheme used depends on the A record received just prior to the CNAME DNS response. When sending a GET request, the malware adds an \u0026quot;If-None-Match\u0026quot; HTTP header that includes the encoded user ID. This likely allows the C2 server to determine which SUNBURST installation generated the request, further enabling multiplexing of C2 streams on a single server.\u003C\/p\u003E\n\u003Cp\u003EIn observed traffic, the C2 server employs steganography to hide data within HTTP response bodies and attempts to appear as benign XML related to .NET assemblies. Command data is spread across many GUID and hexadecimal strings. Commands are extracted from HTTP response bodies by searching for hexadecimal strings using the following regular expression: \u003Cspan class=\u0022code\u0022\u003E\u0026quot;\\{[0-9a-f-]{36}\\}\u0026quot;|\u0026quot;[0-9a-f]{32}\u0026quot;|\u0026quot;[0-9a-f]{16}\u0026quot;\u003C\/span\u003E. Matched substrings in the response are filtered for non-hex characters, joined together, and hex-decoded. Depending on the mode of operation, the malware may skip the steganography and send the encoded response in an HTTP response body.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sunburst-more\/fig2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: C2 response embeds commands in XML GUIDs\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the received C2 response, the first DWORD value indicates the actual size of the message. This value is followed immediately by the message with optional junk bytes added. The extracted message is single-byte XOR decoded using the first byte of the message. The result is then DEFLATE decompressed. The first character of the decompressed data is an ASCII integer that maps to a command ID, with optional additional command arguments delimited by space characters. The supported commands are shown in the following table.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommand\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EID\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EOperation\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EIdle\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo operation\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EExit\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETerminate the current thread.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ESetTime\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESets the delay time between main event loop executions Delay is in seconds, and varies random between [.9 * \u0026lt;delay\u0026gt;, 1.1 * \u0026lt;delay\u0026gt;]\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EIf the delay is \u0026lt; 300 it is doubled on the next execution through the loop, this means it should settle onto an interval of around [5, 10] minutes\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003Eo There is a second, unrelated delay routine that delays for a random interval between [16hrs, 83hrs]\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ECollectSystemDescription\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EProfile the local system including hostname, username, OS version, MAC addresses, IP address, DHCP configuration, and domain information.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EUploadSystemDescription\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPerform an\u0026nbsp;HTTP request to the specified URL, parse the results and send the response to the C2 server.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ERunTask\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStarts a new process with the given file path and arguments\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EGetProcessByDescription\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReturns a process listing.\u0026nbsp;If no\u0026nbsp;arguments\u0026nbsp;are provided, returns\u0026nbsp;just the\u0026nbsp;PID\u0026nbsp;and process\u0026nbsp;name.\u0026nbsp; If\u0026nbsp;an\u0026nbsp;argument is provided, it also returns the parent PID and username\u0026nbsp;and domain for the process\u0026nbsp;owner.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EKillTask\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETerminate the given process, by PID.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EGetFileSystemEntries\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGiven a path, and a match pattern recursively list files and directories.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EWriteFile\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGiven a file path and a Base64-encoded string write the contents of the Base64 string to the given file path. Write using append mode. Delay for [1s, 2s] after writing is done.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EFileExists\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E10\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETests whether the given file path exists.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EDeleteFile\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E11\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDeletes the specified file path.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EGetFileHash\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E12\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECompute the MD5 of a file at a given path and return the result as a hex string. If an argument is provided, it is the expected MD5 hash of the file and returns an error if the calculated MD5 differs.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EReadRegistryValue\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E13\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EArbitrary registry read from one of the supported hives.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ESetRegistryValue\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E14\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EArbitrary\u0026nbsp;registry\u0026nbsp;write from one of the supported hives.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EDeleteRegistryValue\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E15\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EArbitrary\u0026nbsp;registry\u0026nbsp;delete from one of the supported hives.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EGetRegistrySubKeyAndValueNames\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E16\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReturns listing of subkeys and value names beneath the given registry path.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022216\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EReboot\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002254\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E17\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022414\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAttempts to immediately trigger a system reboot.\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003ESUNBURST sends messages back to the C2 server using a protocol that consists of UTF-8 strings and an appended 4-byte error DWORD and 8-byte userID. These are bare DEFLATE compressed and single-byte XOR encoded with the XOR key prepended to the message. Message payloads of length 10,000 or less are turned into JSON documents that resemble the Orion Improvement Program (OIP) messages used legitimately by SolarWinds. Messages larger than 10,000 bytes are sent as-is in the HTTP request body.\u003C\/p\u003E\n\u003Cp\u003EThe fake OIP document contains the following fields:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EuserId\u003C\/span\u003E \u2013 a unique identifier for the victim machine\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EsessionID\u003C\/span\u003E \u2013 stores a new random GUID for each HTTP thread\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Esteps\u003C\/span\u003E \u2013 an array of objects that contain the following keys: \u003Cspan class=\u0022code\u0022\u003ETimestamp\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003EIndex\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003EEventType\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003EEventName\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003EDurationMs\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003ESucceeded\u003C\/span\u003E, and \u003Cspan class=\u0022code\u0022\u003EMessage\u003C\/span\u003E.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe JSON key \u003Cspan class=\u0022code\u0022\u003EEventType\u003C\/span\u003E is hard-coded to the value \u003Cspan class=\u0022code\u0022\u003EOrion\u003C\/span\u003E and the \u003Cspan class=\u0022code\u0022\u003EEventName\u003C\/span\u003E is hard-coded to \u003Cspan class=\u0022code\u0022\u003EEventManager\u003C\/span\u003E. The encoded message to send to the C2 server is split up into random ranges, Base64-encoded, and stored in the \u003Cspan class=\u0022code\u0022\u003EMessage\u003C\/span\u003E field of the objects in the \u003Cspan class=\u0022code\u0022\u003Esteps\u003C\/span\u003E array. Not all objects in the \u003Cspan class=\u0022code\u0022\u003Esteps\u003C\/span\u003E array contribute to the malware response. The integer in the \u003Cspan class=\u0022code\u0022\u003ETimestamp\u003C\/span\u003E field must have the \u003Cspan class=\u0022code\u0022\u003E0x2\u003C\/span\u003E bit set to indicate the contents of the \u003Cspan class=\u0022code\u0022\u003EMessage\u003C\/span\u003E field are used in the malware response. \u003Cspan class=\u0022code\u0022\u003Esteps\u003C\/span\u003E objects whose \u003Cspan class=\u0022code\u0022\u003E0x2\u003C\/span\u003E bit is clear in the \u003Cspan class=\u0022code\u0022\u003ETimestamp\u003C\/span\u003E field contain random data and are discarded when assembling the malware response. This may be an attempt to hinder analysis in the absence of the malware sample.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sunburst-more\/fig3.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: HTTP callout masquerades as OIP protocol\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EModes of Operation\u003C\/h4\u003E\n\u003Cp\u003EAs detailed in the DGA section, the malware has multiple modes of operation configured by the IP block that A records resolve to as well as depending on if CNAME records exist. These modes of operation are stored in internal enumerations. These mappings and values are described next.\u003C\/p\u003E\n\u003Ch5\u003EInternal Modes\u003C\/h5\u003E\n\u003Cp\u003EThe following modes govern internal operations of the malware:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022623\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMode Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022182\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EValue\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ETruncate\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022182\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDisabled; the malware killswitch has been activated and the sample may never run again without external modification to the XML configuration on-disk.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ENew\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022182\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPassive mode; DGA subdomains encode the system\u2019s domain name\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EAppend\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022182\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022234\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EActive mode; C2 beaconing will occur on next CNAME resolve or is already actively occurring. DGA domains encode either the \u003Cspan class=\u0022code\u0022\u003EuserID\u003C\/span\u003E or the list of services\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe mode values are written into the backdoor configuration key \u003Cspan class=\u0022code\u0022\u003EReportWatcherRetry\u003C\/span\u003E. Investigators may consider recovering the malware configuration and inspecting this configuration value to determine the last running mode of the malware.\u003C\/p\u003E\n\u003Cp\u003EThe following transitions govern how IP block ranges are translated into running modes:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ETransition Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EAtm\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransition to Truncate\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EIpx\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransition from Append to New\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EImpLink\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransition to Truncate\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ENetBios\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETransition to Append, either start or continue C2 beaconing\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EUnknown\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENot an IPv4 or IPv6 address, exit and retry DGA later\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe following diagram describes how the SUNBURST\u2019s DGA DNS responses act as mode transitions to control the malware before HTTP-based C2 beaconing has even begun:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sunburst-more\/diagram.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EAdditionally, here is an annotated network log showing how a sequence of DNS resolutions can transition the malware mode:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sunburst-more\/annotated-network-log.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003ETo end this discussion of modes and transitions, a small note about the choices of these IP blocks. In cases such as the ImpLink IP blocks that activate the killswitch, it\u2019s likely that the ranges were specifically chosen by the attacker to avoid being discovered by security researchers. In other cases, such as the NetBios and \u0026quot;special\u0026quot; NetBios IP blocks, the companies these blocks resolve to is likely irrelevant or at least beyond what can be definitively said without speculation.\u003C\/p\u003E\n\u003Ch4\u003EMalware Flow Diagram\u003C\/h4\u003E\n\u003Cp\u003EThe following diagram provides a full picture of the malware\u0027s execution. Internally, SUNBURST uses a set of modes and transitions as described earlier. The names of these modes and transitions have no meaning. The malware authors purposely chose them as a form of obfuscation. When diagraming the malware\u0027s execution, these names were reused for clarity.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sunburst-more\/fig4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Malware logic and decision states\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EQ\u0026amp;A\u003C\/h4\u003E\n\u003Cp\u003E\u003Ci\u003EIs a system running blocklisted processes, services, or drivers safe from compromise?\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003ESometimes, but not always. SUNBURST unconditionally exits if blocklisted processes or drivers are found and will not run until they are no longer detected. On the other hand, services are disabled by setting a registry value that controls startup initialization and are not explicitly stopped. As a result, a blocklisted service may still be running when the malware performs its service checks later. For this reason, it is possible for a victim system to be infected while a blocklisted service is running. Additionally, SUNBURST only attempts to disable a service once and updates its configuration to mark the service as disabled. Once the configuration is updated, the service is not treated as a blocklisted entry during subsequent execution.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EDoes observing one DGA encoding over another provide any information during incident response?\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EShort answer: it provides a hint for where to look but isn\u2019t a be-all tell-all alone. Noticing the DGA encoding change in network logs is a hint that the malware may have moved from New to Append or Append to New. This puts the malware in a mode where if a CNAME record is seen soon after, then HTTP C2 can begin. Incident response should focus on trying to identify CNAME records being successfully resolved instead of focusing on DGA encodings entirely. Identifying CNAME records is easier than tracking the malware mode through logs and a stronger signal.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EWhat is the \u0026quot;killswitch\u0026quot;?\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye discovered that certain DNS responses cause the malware to disable itself and stop further network activity. With the support and help of GoDaddy\u2019s Abuse Team and the Microsoft Threat Intelligence Center, the domain used for resolving DGA domains was reconfigured to point to a sinkhole server under Microsoft\u2019s control. The IP of this sinkhole server was specially chosen to fall into the range used by the malware to transition from its current mode (New or Append) into Truncate mode where it will be permanently inactive. In other words, SUNBURST infections should now be inoculated due to the killswitch.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EWhen C2 communication occurs, is a CNAME record required?\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003ECNAME records are required for HTTP C2 beaconing to occur and are provided by the C2 coordinator to specify the final C2 server. C2 activity must occur over a domain name provided via a CNAME record. It cannot occur directly via a raw IP. To initialize C2 beaconing, the backdoor first looks for an A record response from one of its special NetBios subnets and subsequently expects to receive a CNAME record.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EIf a DGA domain is decoded to a company domain name, is that company compromised?\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen the backdoor is in \u201cpassive\u201d mode it uses the DGA encoding which embeds victim AD domain names. This means that any system where the backdoor is present may have started trying to contact DNS servers where an attacker could then activate the backdoor to begin active C2 communications. In most cases this \u003Ci\u003Edid not\u003C\/i\u003E occur and backdoors for non-targets were disabled by the operator. Therefore, it cannot be assumed that an organization experienced follow-on activity if their domain is decoded from any DNS logs. Specifically, it\u2019s only an indicator that the backdoor code was present and capable of being activated.\u003C\/p\u003E\n\u003Ch4\u003EPublic Contributions\u003C\/h4\u003E\n\u003Cp\u003EWe have seen substantial community contributions to our \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/sunburst_countermeasures\u0022\u003Epublic SUNBURST GitHub repository\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EWe would like to publicly thank all contributors to this repository. Specifically, all FNV hashes embedded within SUNBURST have been brute-forced. This is a huge amount of compute power that members of the community provided free-of-charge to help others. We want to thank everyone who contributed hashes and specifically callout the Hashcat community, which organized to systematically break each hash. This was essential for breaking the final few hashes whose preimage were of considerable length.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EMatthew Williams, Michael Sikorski, Alex Berry and Robert Wallace.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EFor additional information on UNC2452, register for our webinar, \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.brighttalk.com\/webcast\/7451\/462719\u0022\u003EUNC2452: What We Know So Far\u003C\/a\u003E, on Tuesday, Jan. 12, at 8 a.m. PT\/11 a.m. ET.\u003C\/i\u003E\u003C\/p\u003E\n",
        "jcr:lastModified": "Wed Jan 06 2021 20:57:36 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye has discovered additional details about the SUNBURST backdoor used in a global intrusion campaign by a sophisticated actor we are tracking as UNC2452.\u003C\/p\u003E\n",
      "jcr:lastModified": "Thu Dec 24 2020 20:04:39 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Dec 24 2020 20:08:54 GMT+0000",
      "imageRotate": "0"
    }
  }
}
