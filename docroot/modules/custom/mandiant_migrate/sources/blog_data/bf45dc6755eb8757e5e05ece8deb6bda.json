{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Tue Sep 03 2019 16:25:23 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "SharPersist: Windows Persistence Toolkit in C#",
    "jcr:versionHistory": "b51794df-26c4-41ab-9bb5-ed060ef0e7c6",
    "author": "Brett Hawkins",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "f866f36f-7a5d-4185-a4a0-dd7d881e52d0"
    ],
    "jcr:created": "Tue Oct 22 2019 15:28:19 GMT+0000",
    "cq:lastModified": "Tue Oct 22 2019 15:27:53 GMT+0000",
    "jcr:baseVersion": "f866f36f-7a5d-4185-a4a0-dd7d881e52d0",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:brett-hawkins",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:windows",
      "fireeye-blog-tags:persistence",
      "fireeye-blog-tags:toolkit",
      "fireeye-blog-tags:powershell",
      "fireeye-blog-tags:red-team"
    ],
    "jcr:uuid": "6228ecce-c64b-4489-8e37-64ab5102e8fe",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Sep 03 2019 12:30:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EBackground\u003C\/h4\u003E\n\u003Cp\u003EPowerShell has been used by the offensive community for several years now but recent advances in the defensive security industry are causing offensive toolkits to migrate from PowerShell to reflective C# to evade modern security products. Some of these advancements include Script Block Logging, Antimalware Scripting Interface (AMSI), and the development of signatures for malicious PowerShell activity by third-party security vendors. Several public C# toolkits such as \u003Ca href=\u0022https:\/\/github.com\/GhostPack\/Seatbelt\u0022\u003ESeatbelt\u003C\/a\u003E, \u003Ca href=\u0022https:\/\/github.com\/GhostPack\/SharpUp\u0022\u003ESharpUp\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/github.com\/tevora-threat\/SharpView\u0022\u003ESharpView\u003C\/a\u003E have been released to assist with tasks in various phases of the attack lifecycle. One phase of the attack lifecycle that has been missing a C# toolkit is persistence. This post will talk about a new Windows Persistence Toolkit created by FireEye Mandiant\u2019s Red Team called \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/SharPersist\u0022\u003ESharPersist\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EWindows Persistence\u003C\/h4\u003E\n\u003Cp\u003EDuring a Red Team engagement, a lot of time and effort is spent gaining initial access to an organization, so it is vital that the access is maintained in a reliable manner. Therefore, persistence is a key component in the attack lifecycle, shown in Figure 1.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: FireEye Attack Lifecycle Diagram\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce an attacker establishes persistence on a system, the attacker will have continual access to the system after any power loss, reboots, or network interference. This allows an attacker to lay dormant on a network for extended periods of time, whether it be weeks, months, or even years. There are two key components of establishing persistence: the persistence implant and the persistence trigger, shown in Figure 2. The persistence implant is the malicious payload, such as an executable (EXE), HTML Application (HTA), dynamic link library (DLL), or some other form of code execution. The persistence trigger is what will cause the payload to execute, such as a scheduled task or Windows service. There are several known persistence triggers that can be used on Windows, such as Windows services, scheduled tasks, registry, and startup folder, and there continues to be more discovered. For a more thorough list, see the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/tactics\/TA0003\/\u0022\u003EMITRE ATT\u0026amp;CK persistence page\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Persistence equation\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ESharPersist Overview\u003C\/h4\u003E\n\u003Cp\u003ESharPersist was created in order to assist with establishing persistence on Windows operating systems using a multitude of different techniques. It is a command line tool written in C# which can be reflectively loaded with Cobalt Strike\u2019s \u201cexecute-assembly\u201d functionality or any other framework that supports the reflective loading of .NET assemblies. SharPersist was designed to be modular to allow new persistence techniques to be added in the future. There are also several items related to tradecraft that have been built-in to the tool and its supported persistence techniques, such as file time stomping and running applications minimized or hidden.\u003C\/p\u003E\n\u003Cp\u003ESharPersist and all associated usage documentation can be found at the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/SharPersist\u0022\u003ESharPersist FireEye GitHub page\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003ESharPersist Persistence Techniques\u003C\/h4\u003E\n\u003Cp\u003EThere are several persistence techniques that are supported in SharPersist at the time of this blog post. A full list of these techniques and their required privileges is shown in Figure 3.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022\u003E\u003Cp\u003E\u003Cb\u003ETechnique\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022\u003E\u003Cp\u003E\u003Cb\u003ETechnique Switch Name (-t)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022\u003E\u003Cp\u003E\u003Cb\u003EAdmin Privileges Required?\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022\u003E\u003Cp\u003E\u003Cb\u003ETouches Registry?\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022\u003E\u003Cp\u003E\u003Cb\u003EAdds\/Modifies Files on Disk?\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EKeePass\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBackdoor KeePass configuration file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ekeepass\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENew Scheduled Task\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreates new scheduled task\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eschtask\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENew Windows Service\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreates new Windows service\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eservice\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERegistry\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERegistry key\/value creation\/modification\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ereg\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EScheduled Task Backdoor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBackdoors existing scheduled task with additional action\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eschtaskbackdoor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStartup Folder\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreates LNK file in user startup folder\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Estartupfolder\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002288\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETortoise SVN\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022145\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreates Tortoise SVN hook script\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etortoisesvn\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Table of supported persistence techniques\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ESharPersist Examples\u003C\/h4\u003E\n\u003Cp\u003EOn the \u003Ca href=\u0022https:\/\/github.com\/fireeye\/SharPersist\u0022\u003ESharPersist GitHub\u003C\/a\u003E, there is full documentation on usage and examples for each persistence technique. A few of the techniques will be highlighted below.\u003C\/p\u003E\n\u003Ch5\u003ERegistry Persistence\u003C\/h5\u003E\n\u003Cp\u003EThe first technique that will be highlighted is the registry persistence. A full listing of the supported registry keys in SharPersist is shown in Figure 4.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022693\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022\u003E\u003Cp\u003E\u003Cb\u003ERegistry Key Code (-k)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022\u003E\u003Cp\u003E\u003Cb\u003ERegistry Key\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022\u003E\u003Cp\u003E\u003Cb\u003ERegistry Value\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022\u003E\u003Cp\u003E\u003Cb\u003EAdmin Privileges Required?\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022\u003E\u003Cp\u003E\u003Cb\u003ESupports Env Optional Add-On (-o env)?\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehklmrun\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUser supplied\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehklmrunonce\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUser supplied\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehklmrunonceex\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUser supplied\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euserinit\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUserinit\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehkcurun\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUser supplied\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehkcurunonce\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUser supplied\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elogonscript\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKCU\\Environment\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUserInitMprLogonScript\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002298\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Estickynotes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022331\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERESTART_STICKY_NOTES\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Supported registry keys table\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the following example, we will be performing a validation of our arguments and then will add registry persistence. Performing a validation before adding the persistence is a best practice, as it will make sure that you have the correct arguments, and other safety checks before actually adding the respective persistence technique. The example shown in Figure 5 creates a registry value named \u201cTest\u201d with the value \u201ccmd.exe \/c calc.exe\u201d in the \u201cHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u201d registry key.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture5.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Adding registry persistence\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the persistence needs to be removed, it can be removed using the \u201c-m remove\u201d argument, as shown in Figure 6. We are removing the \u201cTest\u201d registry value that was created previously, and then we are listing all registry values in \u201cHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u201d to validate that it was removed.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Removing registry persistence\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EStartup Folder Persistence\u003C\/h5\u003E\n\u003Cp\u003EThe second persistence technique that will be highlighted is the startup folder persistence technique. In this example, we are creating an LNK file called \u201cTest.lnk\u201d that will be placed in the current user\u2019s startup folder and will execute \u201ccmd.exe \/c calc.exe\u201d, shown in Figure 7.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture7.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Performing dry-run and adding startup folder persistence\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe startup folder persistence can then be removed, again using the \u201c-m remove\u201d argument, as shown in Figure 8. This will remove the LNK file from the current user\u2019s startup folder.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture8.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Removing startup folder persistence\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EScheduled Task Backdoor Persistence\u003C\/h5\u003E\n\u003Cp\u003EThe last technique highlighted here is the scheduled task backdoor persistence. Scheduled tasks can be configured to execute multiple actions at a time, and this technique will backdoor an existing scheduled task by adding an additional action. The first thing we need to do is look for a scheduled task to backdoor. In this case, we will be looking for scheduled tasks that run at logon, as shown in Figure 9.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture9.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Listing scheduled tasks that run at logon\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce we have a scheduled task that we want to backdoor, we can perform a dry run to ensure the command will successfully work and then actually execute the command as shown in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture10.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Performing dry run and adding scheduled task backdoor persistence\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAs you can see in Figure 11, the scheduled task is now backdoored with our malicious action.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture11.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Listing backdoored scheduled task\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EA backdoored scheduled task action used for persistence can be removed as shown in Figure 12.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/sharpersist\/Picture12.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Removing backdoored scheduled task action\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EUsing reflective C# to assist in various phases of the attack lifecycle is a necessity in the offensive community and persistence is no exception. Windows provides multiple techniques for persistence and there will continue to be more discovered and used by security professionals and adversaries alike.\u003C\/p\u003E\n\u003Cp\u003EThis tool is intended to aid security professionals in the persistence phase of the attack lifecycle. By releasing \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/SharPersist\u0022\u003ESharPersist\u003C\/a\u003E, we at FireEye Mandiant hope to bring awareness to the various persistence techniques that are available in Windows and the ability to use these persistence techniques with C# rather than PowerShell.\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Sep 03 2019 15:56:49 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EA new Windows Persistence Toolkit created by FireEye Mandiant\u2019s Red Team called SharPersist.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Sep 03 2019 15:40:19 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Oct 22 2019 15:27:53 GMT+0000",
      "imageRotate": "0"
    }
  }
}
