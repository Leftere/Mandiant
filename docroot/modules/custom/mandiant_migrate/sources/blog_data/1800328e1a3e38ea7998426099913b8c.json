{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Apr 27 2021 17:00:02 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Abusing Replication: Stealing AD FS Secrets Over the Network",
    "jcr:versionHistory": "52456101-3343-44eb-bf43-212968ca8678",
    "author": "Douglas Bienstock",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "d5149282-0b16-4619-8a17-d8452e2a721e"
    ],
    "jcr:created": "Tue Apr 27 2021 17:00:02 GMT+0000",
    "cq:lastModified": "Tue Apr 27 2021 16:54:09 GMT+0000",
    "jcr:baseVersion": "d5149282-0b16-4619-8a17-d8452e2a721e",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:douglas-bienstock",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:ad-fs",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:microsoft",
      "fireeye-blog-tags:bypass"
    ],
    "jcr:uuid": "fb005473-2a68-49cf-b179-b3eff781f6e5",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Apr 27 2021 13:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EOrganizations are increasingly adopting cloud-based services such as Microsoft 365 to host applications and data. Sophisticated threat actors are catching on and Mandiant has observed an increased focus on long-term persistent access to Microsoft 365 as one of their primary objectives. The focus on developing novel and hard to detect methods to achieve this goal was highlighted with the recent detection of \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2021\/01\/remediation-and-hardening-strategies-for-microsoft-365-to-defend-against-unc2452.html\u0022\u003EUNC2452 and their access to Microsoft 365\u003C\/a\u003E. One of this group\u0027s key TTPs was to steal the Token Signing Certificate from an organization\u2019s AD FS server to enable them to bypass MFA and access cloud services as any user, at any time. While defenders previously associated the defense of this certificate, and thus the entire ecosystem, with careful access control and detection efforts around the AD FS server and service account, this is no longer sufficient. In this blog post we will show how a threat actor, with the right privilege, can extract the encrypted Token Signing Certificate from anywhere on the internal network. Once extracted, a threat actor can easily decrypt it and begin accessing cloud services.\u003C\/p\u003E\n\u003Ch4\u003EActive Directory Federation Services\u003C\/h4\u003E\n\u003Cp\u003EActive Directory Federation Services (AD FS) is a feature for Windows Servers that \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows-server\/identity\/ad-fs\/ad-fs-overview\u0022\u003Eenables federated identity and access management\u003C\/a\u003E. It is often used by organizations to provide single sign-on functionality to access enterprise applications such as Microsoft 365. In technical terms, AD FS functions as an \u003Cb\u003EIdentity Provider \u003C\/b\u003E(IdP) and Microsoft 365 is a \u003Cb\u003EService Provider \u003C\/b\u003E(SP). We\u2019ll use Microsoft 365 as an example going forward, but this technique could apply to any service that is set up to trust AD FS. AD FS verifies a user\u2019s identity and issues assertions that describe the user. Microsoft 365 \u0026nbsp;trusts AD FS to verify user identities and provide it with assertions. To Microsoft 365, it doesn\u2019t matter how AD FS performed the verification, it just needs the assertions.\u003C\/p\u003E\n\u003Cp\u003EIn the typical deployment (Figure 1), AD FS will verify a user\u2019s identity using Active Directory. At a minimum, an AD FS deployment consists of two servers in an enterprise\u2019s on-premises network: the primary AD FS server, and an AD FS Web Application Proxy (WAP). The proxy is placed in the DMZ and has no functionality besides proxying sign-on attempts from the Internet to the AD FS server. The primary AD FS server receives proxied requests, verifies a user\u2019s identity, and issues assertions that are packaged into SAML security tokens for the user.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/adfs-replication\/fig1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Typical AD FS deployment (source: \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows-server\/identity\/ad-fs\/deployment\/best-practices-securing-ad-fs\u0022\u003EMicrosoft\u003C\/a\u003E)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https:\/\/tools.ietf.org\/html\/rfc7522\u0022\u003ESAML token\u003C\/a\u003E issued by AD FS proves a user\u2019s identity to Microsoft 365 and can also be used to make authorization decisions. The SAML token is an XML document with two main components:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cb\u003EAssertions\u003C\/b\u003E: Assertions are XML elements that describe the user\u2019s identity. An assertion could be a user SID, group membership SIDs, or other elements like the user\u2019s department name. A single SAML token can have multiple assertions attached to it.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EDigital Signature\u003C\/b\u003E: The assertions in the SAML token are digitally signed using a public\/private keypair that resides on the AD FS server. This is called the Token Signing Certificate.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003E\u003Cb\u003EThe Token Signing Certificate is the bedrock of security in AD FS.\u003C\/b\u003E Microsoft 365 uses the digital signature to validate that the SAML token is authentic, valid, and comes from an AD FS server that it trusts. To enable this verification, an administrator shares the public component of the Token Signing Certificate with Microsoft 365. This is then used to cryptographically verify the digital signature in the SAML token and prove authenticity as well as integrity of the token. In other words, if a threat actor got hold of a Token Signing Certificate, they could generate arbitrary SAML tokens to access any federated application, as any user, and even bypass MFA.\u003C\/p\u003E\n\u003Ch4\u003EGolden SAML\u003C\/h4\u003E\n\u003Cp\u003EGolden SAML was coined in 2017 by CyberArk to describe the technique of \u003Ca href=\u0022https:\/\/www.cyberark.com\/resources\/threat-research-blog\/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps\u0022\u003Eforging SAML tokens to access SPs\u003C\/a\u003E given a valid Token Signing Certificate. At \u003Ca href=\u0022https:\/\/www.youtube.com\/watch?v=5dj4vOqqGZw\u0022\u003ETROOPERS 19\u003C\/a\u003E, I detailed how a threat actor could extract the Token Signing Certificate from an AD FS server, as well as some mitigation strategies for defenders.\u003C\/p\u003E\n\u003Cp\u003EIn a default AD FS configuration, the Token Signing Certificate is stored within a Windows Internal Database (WID) instance that is running on the AD FS server. WID is more or less MS SQL Express, except the database can only be accessed locally over a special named pipe connection. In AD FS, the database is further locked down to only the AD FS service account. The Token Signing Certificate is stored in an encrypted state in the \u003Cspan class=\u0022code\u0022\u003EIdentityServerPolicy.ServiceStateSummary\u003C\/span\u003E table. Figure 2 contains a single row with a column that stores all the settings that AD FS will need on service start as an XML document.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;SigningToken\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;IsChainIncluded\u0026gt;false\u0026lt;\/IsChainIncluded\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;IsChainIncludedSpecified\u0026gt;false\u0026lt;\/IsChainIncludedSpecified\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;FindValue\u0026gt;99FABAEE46A09CD9B34B9510AB10E2B0C0ACB99B\u0026lt;\/FindValue\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;RawCertificate\u0026gt;\u0026lt;\/RawCertificate\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;EncryptedPfx\u0026gt;\u0026lt;\/EncryptedPfx\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;StoreNameValue\u0026gt;My\u0026lt;\/StoreNameValue\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;StoreLocationValue\u0026gt;CurrentUser\u0026lt;\/StoreLocationValue\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;X509FindTypeValue\u0026gt;FindByThumbprint\u0026lt;\/X509FindTypeValue\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026lt;\/SigningToken\u0026gt;\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Example Token Signing Certificate stored in the AD FS database\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe Token Signing Certificate as it is stored in the AD FS database is encrypted using symmetric key encryption. Windows uses a technology called Distributed Key Management (DKM) to store the secret value used to derive the symmetric key in an Active Directory container. The AD FS service account can read the attributes of this container, derive the symmetric key, and then decrypt the Token Signing Certificate.\u003C\/p\u003E\n\u003Ch4\u003EAD FS Replication\u003C\/h4\u003E\n\u003Cp\u003EAD FS also supports a farm configuration for high availability and load balancing in larger enterprise networks. The individual AD FS servers in a farm can be configured to use unique Token Signing Certificates; however, the default is to have the servers share the same Token Signing Certificate. \u0026nbsp;In order to stay in sync with each other, the farm will have a primary node and secondary nodes. The secondary nodes make use of a replication service to acquire configuration settings and certificates from the primary AD FS server. To facilitate this, AD FS makes use of Windows Communication Foundation (WCF).\u003C\/p\u003E\n\u003Cp\u003EWCF is a framework that allows developers to \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/dotnet\/framework\/wcf\/whats-wcf\u0022\u003Ebuild service-oriented applications\u003C\/a\u003E. A WCF application has two components: the service that will receive and process messages, and the client that sends messages to a service and receives back responses. The AD FS servers run a WCF service that is called the \u003Cspan class=\u0022code\u0022\u003EPolicy Store Transfer Service\u003C\/span\u003E internally.\u003C\/p\u003E\n\u003Cp\u003ETo send a message to this service, the client will connect to the URL \u003Cspan class=\u0022code\u0022\u003Ehttp:\/\/\u0026lt;adfs server name\u0026gt;:80\/adfs\/services\/policystoretransfer\u003C\/span\u003E. Note that even though the channel is over HTTP, the actual data being exchanged is encrypted during transit. It is also key to understand that although there is a single primary AD FS server, all nodes in an AD FS farm run this WCF service and can be used for replication.\u003C\/p\u003E\n\u003Cp\u003EUpon receipt of a message, the WCF service enforces an authorization check to ensure the calling identity is permitted to receive the requested information. The permission check is done by evaluating an authorization policy that is also stored in the \u003Cspan class=\u0022code\u0022\u003EIdentityServerPolicy.ServiceStateSummary\u003C\/span\u003E table of the AD FS database. The policy permits identities whose primary SID matches the AD FS Service account \u003Ci\u003Eor\u003C\/i\u003E to any identity that is member of the AD FS server\u2019s local administrators group. If the identity of the client passes the authorization check, then the WCF service will send back a message containing the requested information.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp; \u0026nbsp;\u0026lt;AuthorizationPolicy\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;@RuleName = \u201cPermit Service Account\u201dexists([Type ==\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u201chttp:\/\/schemas.microsoft.com\/ws\/2008\/06\/identity\/claims\/\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; primarysid\u201d, Value == \u201cS-1-5-21-3508695881-2242692613\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; -376241919-1107\u201d]) =\u0026gt; issue(Type = \u201chttp:\/\/schemas\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; .microsoft.com\/authorization\/claims\/permit\u201d, Value = \u201c\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; true\u201d);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;@RuleName = \u201cPermit Local Administrators\u201dexists([Type ==\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;\u201chttp:\/\/schemas.microsoft.com\/ws\/2008\/06\/identity\/claims\/group\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;sid\u201d, Value == \u201cS-1-5-32-544\u201d])=\u0026gt; issue(Type = \u0026amp;quot\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;;http:\/\/schemas.microsoft.com\/authorization\/claims\/permit\u201d, Value\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; = \u201ctrue\u201d);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;\u0026lt;\/AuthorizationPolicy\u0026gt;\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Default Authorization Policy for AD FS server\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ERoom for Abuse\u003C\/h4\u003E\n\u003Cp\u003EA threat actor can abuse the Policy Store Transfer Service to acquire the encrypted Token Signing Certificate over the network, similar to the DCSync technique for Active Directory. It is important to note that the data is still encrypted and requires the DKM key stored in Active Directory to decrypt. This technique, however, requires a significant change to how defenders have secured AD FS servers and monitored them for theft of the Token Signing Certificate.\u003C\/p\u003E\n\u003Cp\u003EFirst, previous techniques required code execution on an AD FS server to extract the data or at least an SMB connection to transfer the backing database files. With a strong defense in depth program using secure credential management, EDR, and network segmentation, an enterprise can make it very difficult for a threat actor to access an AD FS server and the Token Signing Certificate. Abusing the AD FS Replication service, however, requires only access to the AD FS server over the standard HTTP port. The default installation of AD FS will even create a Windows Firewall rule to allow HTTP traffic from any system. Additionally, a threat actor does not need the credentials for the AD FS service account and can instead use any account that is a local administrator on an AD FS server. Lastly, there is no Event Log message that is recorded when a replication event occurs on an AD FS server. Altogether, this makes the technique both much easier to execute and much harder to detect.\u003C\/p\u003E\n\u003Cp\u003EThe authorization policy itself also presents an opportunity for abuse. Because the authorization policy is stored as XML text in the configuration database, a threat actor with enough access could modify it to be more permissive. A threat actor could modify the Authorization Policy to include a group SID such as domain users, \u003Cspan class=\u0022code\u0022\u003ES-1-5-21-X-513\u003C\/span\u003E. Similarly, they could add an ACE to the DKM key container in Active Directory. This would allow the threat actor to easily obtain the Token Signing Certificate and decrypt it using any domain user credentials. This would give them persistent ability to perform a Golden SAML attack with only access to the network as a requirement.\u003C\/p\u003E\n\u003Cp\u003EMandiant has not yet observed this technique used in the wild; however, it is trivial to write a POC for and we are aware of one public tool that will soon support it. Figure 4 shows the output of POC code written in .NET to extract the Token Signing Certificate from a remote AD FS server.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/adfs-replication\/fig4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: POC code output\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EMitigations\u003C\/h4\u003E\n\u003Cp\u003EThe best mitigation against this technique is to use the Windows Firewall to restrict access to port 80 TCP to only the AD FS servers in the farm. If an organization has only a single AD FS server, then port 80 TCP can be blocked completely. This block can be put in place because all traffic to and from AD FS servers and proxies for user authentication is over port 443 TCP. \u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ETo limit inbound communications, modify the existing firewall rule that AD FS inserts on installation.\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ESet-NetFirewallRule -DisplayName \u0026quot;AD FS HTTP Services (TCP-In)\u0026quot; -RemoteAddress \u0026lt;ADFS1 IP address\u0026gt;,\u0026lt;ADFS2 IP Address\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIf no rule exists, the scriptlet in Figure 5 should be applied to all ADFS servers to create one.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003ENew-NetFirewallRule -DisplayName \u0026quot;Allow ADFS Servers TCP 80\u0026quot; -Direction Inbound -Action Allow\u0026nbsp; -Protocol TCP -LocalPort 80 -RemoteAddress \u0026lt;ADFS1 IPAddress \u0026gt;,\u0026lt;ADFS2 IPAddress\u0026gt;\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Windows Firewall - Allow ADFS Server - TCP 80\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOrganizations that are monitoring the internal network can alert on HTTP POST requests to the address that hosts the Policy Store Transfer service. If there is an AD FS farm, then the IP addresses of the AD FS servers will need to be whitelisted against the rule. Figure 6 shows a sample Snort rule to detect this activity.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003Ealert tcp any any -\u0026gt; any 80 (msg:\u0026quot;AD FS Replication\u0026quot;; flow:established, to_server; content:\u0026quot;POST\u0026quot;; http_method; content:\u0026quot;adfs\/services\/policystoretransfer\u0026quot;; http_uri; threshold:type limit,track by_src,count 1,seconds 3600; priority:3; sid:7000000; rev:1;)\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Sample snort rule\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EMandiant would like to acknowledge the great work of Dr. Nestori Syynimaa (@DrAzureAD). Dr. Syynimaa independently thought to research the replication of configuration information between AD FS servers and has published his findings on his \u003Ca href=\u0022https:\/\/o365blog.com\/\u0022\u003Eblog\u003C\/a\u003E. Mandiant would also like to thank Microsoft for their collaboration on mitigations and detections for this technique. Lastly, special thanks to Mike Burns of the Mandiant Security Transformation services team for his feedback on mitigations and detections.\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Apr 27 2021 15:56:38 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe show how a threat actor, with the right privilege, can extract the encrypted Token Signing Certificate from anywhere on the internal network.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Apr 27 2021 00:52:32 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Apr 27 2021 16:54:09 GMT+0000",
      "imageRotate": "0"
    }
  }
}
