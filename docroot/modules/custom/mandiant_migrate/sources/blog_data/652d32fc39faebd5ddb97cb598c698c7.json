{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Mar 28 2019 21:00:24 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Commando VM: The First of Its Kind Windows Offensive Distribution",
    "jcr:versionHistory": "30b8ea95-8dfb-43fb-bb30-718d81d19175",
    "author": "Jacob Barteaux",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "6f7472a6-b845-4a06-9830-e294b721c987"
    ],
    "jcr:created": "Tue Oct 22 2019 15:36:57 GMT+0000",
    "cq:lastModified": "Tue Oct 22 2019 15:36:25 GMT+0000",
    "jcr:baseVersion": "6f7472a6-b845-4a06-9830-e294b721c987",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:jacob-barteaux",
      "fireeye-blog-authors:blaine-stancill",
      "fireeye-blog-authors:nhan-huynh",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:penetration-testing",
      "fireeye-blog-tags:tools",
      "fireeye-blog-tags:windows",
      "fireeye-blog-tags:FLARE",
      "fireeye-blog-tags:red-team"
    ],
    "jcr:uuid": "146851c9-753a-4d26-9ae0-f18e1401965e",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Mar 28 2019 21:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/CVM%20logo.png\u0022\u003E\u003Cbr\u003E\nFor penetration testers looking for a stable and supported Linux testing platform, the industry agrees that Kali is the go-to platform. However, if you\u2019d prefer to use Windows as an operating system, you may have noticed that a worthy platform didn\u2019t exist. As security researchers, every one of us has probably spent hours customizing a Windows working environment at least once and we all use the same tools, utilities, and techniques during customer engagements. Therefore, maintaining a custom environment while keeping all our tool sets up-to-date can be a monotonous chore for all. Recognizing that, we have created a Windows distribution focused on supporting penetration testers and red teamers.\u003C\/p\u003E\n\u003Cp\u003EBorn from our popular \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2018\/11\/flare-vm-update.html\u0022\u003EFLARE VM\u003C\/a\u003E\u0026nbsp;that focuses on reverse engineering and malware analysis, the Complete Mandiant Offensive VM (\u201cCommando VM\u201d) comes with automated scripts to help each of you build your own penetration testing environment and ease the process of VM provisioning and deployment. This blog post aims to discuss the features of Commando VM, installation instructions, and an example use case of the platform. Head over to the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\u0022\u003EGithub to find Commando VM\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EAbout Commando VM\u003C\/h4\u003E\n\u003Cp\u003EPenetration testers commonly use their own variants of Windows machines when assessing Active Directory environments. Commando VM was designed specifically to be the go-to platform for performing these internal penetration tests. The benefits of using a Windows machine include native support for Windows and Active Directory, using your VM as a staging area for C2 frameworks, browsing shares more easily (and interactively), and using tools such as \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.harmj0y.net\/blog\/redteaming\/powerview-2-0\/\u0022\u003EPowerView\u003C\/a\u003E\u0026nbsp;and \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/wald0.com\/?p=68\u0022\u003EBloodHound\u003C\/a\u003E without having to worry about placing output files on client assets.\u003C\/p\u003E\n\u003Cp\u003ECommando VM uses \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/boxstarter.org\u0022\u003EBoxstarter\u003C\/a\u003E, \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/chocolatey.org\u0022\u003EChocolatey\u003C\/a\u003E, and \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/myget.org\u0022\u003EMyGet\u003C\/a\u003E\u0026nbsp;packages to install all of the software, and delivers many tools and utilities to support penetration testing. This list includes more than 140 tools, including:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/nmap.org\u0022\u003ENmap\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.wireshark.org\u0022\u003EWireshark\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/cobbr\/Covenant\u0022\u003ECovenant\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.python.org\u0022\u003EPython\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/golang.org\u0022\u003EGo\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/support.microsoft.com\/en-us\/help\/2693643\/remote-server-administration-tools-rsat-for-windows-operating-systems\u0022\u003ERemote Server Administration Tools\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/docs.microsoft.com\/en-us\/sysinternals\/\u0022\u003ESysinternals\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/gentilkiwi\/mimikatz\u0022\u003EMimikatz\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/portswigger.net\u0022\u003EBurp-Suite\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/x64dbg.com\/\u0022\u003Ex64dbg\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/hashcat.net\/\u0022\u003EHashcat\u003C\/a\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EWith such versatility, Commando VM aims to be the de facto Windows machine for every penetration tester and red teamer. For the blue teamers reading this, don\u2019t worry, we\u2019ve got full blue team support as well! The versatile tool sets included in Commando VM provide blue teams with the tools necessary to audit their networks and improve their detection capabilities. With a library of offensive tools, it makes it easy for blue teams to keep up with offensive tooling and attack trends.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Full blue team support\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EInstallation\u003C\/h4\u003E\n\u003Cp\u003ELike FLARE VM, we recommend you use Commando VM in a virtual machine. This eases deployment and provides the ability to revert to a clean state prior to each engagement. We assume you have experience setting up and configuring your own virtualized environment. Start by creating a new virtual machine (VM) with these minimum specifications:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E60 GB of disk space\u003C\/li\u003E\n\u003Cli\u003E2 GB memory\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003ENext, perform a fresh installation of Windows. Commando VM is designed to be installed on Windows 7 Service Pack 1, or Windows 10, with Windows 10 allowing more features to be installed.\u003C\/p\u003E\n\u003Cp\u003EOnce the Windows installation has completed, we recommend you install your specific VM guest tools (e.g., VMware Tools) to allow additional features such as copy\/paste and screen resizing. From this point, all installation steps should be performed within your VM.\u003C\/p\u003E\n\u003Col style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EMake sure Windows is completely updated with the latest patches using the Windows Update utility. Note: you may have to check for updates again after a restart.\u003C\/li\u003E\n\u003Cli\u003EWe recommend taking a snapshot of your VM at this point to have a clean instance of Windows before the install.\u003C\/li\u003E\n\u003Cli\u003ENavigate to the following URL and download the compressed Commando VM repository onto your VM:\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\u0022\u003Ehttps:\/\/github.com\/fireeye\/commando-vm\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EFollow these steps to complete the installation of Commando VM:\u003Col\u003E\n\u003Cli\u003EDecompress the Commando VM repository to a directory of your choosing.\u003C\/li\u003E\n\u003Cli\u003EStart a new session of PowerShell with elevated privileges. Commando VM attempts to install additional software and modify system settings; therefore, escalated privileges are required for installation.\u003C\/li\u003E\n\u003Cli\u003EWithin PowerShell, change directory to the location where you have decompressed the Commando VM repository.\u003C\/li\u003E\n\u003Cli\u003EChange PowerShell\u2019s execution policy to unrestricted by executing the following command and answering \u201c\u003Cb\u003EY\u003C\/b\u003E\u201d when prompted by PowerShell:\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003ESet-ExecutionPolicy unrestricted\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EExecute the \u003Cspan class=\u0022code\u0022\u003Einstall.ps1\u003C\/span\u003E installation script. You will be prompted to enter the current user\u2019s password. Commando VM needs the current user\u2019s password to automatically login after a reboot. Optionally, you can specify the current user\u2019s password by passing the \u201c-password \u0026lt;current_user_password\u0026gt;\u201d at the command line.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Install script running\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe rest of the installation process is fully automated. Depending upon your Internet speed the entire installation may take between 2 to 3 hours to finish. The VM will reboot multiple times due to the numerous software installation requirements. Once the installation completes, the PowerShell prompt remains open waiting for you to hit any key before exiting. After completing the installation, you will be presented with the following desktop environment:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture3a.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Desktop environment after install\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAt this point it is recommended to reboot the machine to ensure the final configuration changes take effect. After rebooting you will have successfully installed Commando VM! We recommend you power off the VM and then take another snapshot to save a clean VM state to use in future engagements.\u003C\/p\u003E\n\u003Ch4\u003EProof of Concept\u003C\/h4\u003E\n\u003Cp\u003ECommando VM is built with the primary focus of supporting internal engagements. To showcase Commando VMs capabilities, we constructed an example Active Directory deployment. This test environment may be contrived; however, it represents misconfigurations commonly observed by Mandiant\u2019s Red Team in real environments.\u003C\/p\u003E\n\u003Cp\u003EWe get started with Commando VM by running network scans with \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/nmap.org\u0022\u003ENmap\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Nmap scan using Commando VM\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ELooking for low hanging fruit, we find a host machine running an interesting web server on TCP port 8080, a port commonly used for administrative purposes. Using \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.mozilla.org\/\u0022\u003EFirefox\u003C\/a\u003E, we can connect to the server via HTTP over TCP port 8080.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Jenkins server running on host\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ELet\u2019s fire up Burp Suite\u2019s \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/portswigger.net\u0022\u003EIntruder\u003C\/a\u003E\u0026nbsp;and try brute-forcing the login. We navigate to our Wordlists directory in the Desktop folder and select an arbitrary password file from within \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.owasp.org\/index.php\/OWASP_SecLists_Project\u0022\u003ESecLists\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Figure6a.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: SecLists password file\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter configuring Burp\u2019s Intruder and analyzing the responses, we see that the password \u201cadmin\u201d grants us access to the Jenkins console. Classic.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Successful brute-force of the Jenkins server\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIt\u2019s well known that Jenkins servers come installed with a Script Console and run as NT AUTHORITY\\SYSTEM on Windows systems by default. We can take advantage of this and gain privileged command execution.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Jenkins Script Console\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENow that we have command execution, we have many options for the next step. For now, we will investigate the box and look for sensitive files. Through browsing user directories, we find a password file and a private SSH key.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: File containing password\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ELet\u2019s try and validate these credentials against the Domain Controller using \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/Raikia\/CredNinja\u0022\u003ECredNinja\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Valid credentials for a domain user\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EExcellent, now that we know the credentials are valid, we can run CredNinja again to see what hosts the user might have local administrative permissions on.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11:\u0026nbsp;Running CredNinja to identify local administrative permissions\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIt looks like we only have administrative permissions over the previous Jenkins host, 192.168.38.104. Not to worry though, now that we have valid domain credentials, we can begin reconnaissance activities against the domain. By executing \u003Cspan class=\u0022code\u0022\u003Erunas \/netonly \/user:windomain.local\\niso.sepersky cmd.exe\u003C\/span\u003E and entering the password, we will have an authenticated command prompt up and running.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture12.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: cmd.exe running as WINDOMAIN\\niso.sepersky\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 12 shows that we can successfully list the contents of the SYSVOL file share on the domain controller, confirming our domain access. Now we start up PowerShell and start share hunting with PowerView.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture13.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: PowerView\u0027s Invoke-ShareFinder output\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe are also curious about what groups and permissions are available to the user account compromised. Let\u2019s use the \u003Cspan class=\u0022code\u0022\u003EGet-DomainUser\u003C\/span\u003E module of the post-exploitation framework \u003Cspan class=\u0022code\u0022\u003EPowerView\u003C\/span\u003E to retrieve user details from Active Directory. Note that Commando VM uses the \u201cdev\u201d branch of \u003Cspan class=\u0022code\u0022\u003EPowerView\u003C\/span\u003E by default.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture14.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Get-DomainUser win\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe also want to check for further access using the SSH key we found earlier. Looking at our port scans we identify one host with TCP port 22 open. Let\u2019s use \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/mobaxterm.mobatek.net\u0022\u003EMobaXterm\u003C\/a\u003E\u0026nbsp;and see if we can SSH into that server.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture15.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: SSH with MobaXterm\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe access the SSH server and also find an easy path to rooting the server. However, we weren\u2019t able to escalate domain privileges with this access. Let\u2019s get back to share hunting, starting with that hidden Software share we saw earlier. Using File Explorer, it\u2019s easy to browse shares within the domain.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture16.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: Browsing shares in windomain.local\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUsing the output from PowerView\u2019s Invoke-ShareFinder command, we begin digging through shares and hunting for sensitive information. After going through many files, we finally find a config.ini file with hardcoded credentials.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture17.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 17:\u0026nbsp;Identifying cleartext credentials in configuration file\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUsing CredNinja, we validate these credentials against the domain controller and discover that we have local administrative privileges!\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture18.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 18: Validating WINDOMAIN\\svcaccount credentials\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ELet\u2019s check group memberships for this user.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/Picture19.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 19: Viewing group membership of WINDOMAIN\\svcaccount\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ELucky us, we\u2019re a member of the \u201cDomain Admins\u201d group!\u003C\/p\u003E\n\u003Ch4\u003EFinal Thoughts\u003C\/h4\u003E\n\u003Cp\u003EAll of the tools used in the demo are installed on the VM by default, as well as many more. For a complete list of tools, and for the install script, please see the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\u0022\u003ECommando VM Github repo\u003C\/a\u003E. We are looking forward to addressing user feedback, adding more tools and features, and creating many enhancements. We believe this distribution will become the standard tool for penetration testers and look forward to continued improvement and development of the Windows attack platform.\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Apr 02 2019 19:05:04 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe introduce Commando VM, a tool for penetration testers who use Windows.\u003C\/p\u003E\n",
      "jcr:lastModified": "Thu Mar 28 2019 15:58:38 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Oct 22 2019 15:36:25 GMT+0000",
      "imageRotate": "0"
    }
  }
}
