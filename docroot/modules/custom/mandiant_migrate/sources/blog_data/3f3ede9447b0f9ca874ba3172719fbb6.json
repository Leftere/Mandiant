{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Nov 19 2020 19:09:16 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Purgalicious VBA: Macro Obfuscation With VBA Purging",
    "jcr:versionHistory": "eb453b10-9121-442d-b0a9-22c3ef133bb2",
    "author": "Andrew Oliveau",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "02e5e8aa-9fa0-4d5b-8ee7-9acd17956dca"
    ],
    "jcr:created": "Thu Nov 19 2020 19:09:16 GMT+0000",
    "cq:lastModified": "Thu Nov 19 2020 19:09:09 GMT+0000",
    "jcr:baseVersion": "02e5e8aa-9fa0-4d5b-8ee7-9acd17956dca",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:andrew-oliveau",
      "fireeye-blog-authors:alyssa-rahman",
      "fireeye-blog-authors:brett-hawkins",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:obfuscation",
      "fireeye-blog-tags:mandiant",
      "fireeye-blog-tags:detection"
    ],
    "jcr:uuid": "e1909a14-7ab2-4f33-8933-c9489c84b644",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Nov 19 2020 14:00:00 GMT-0500",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "text": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "adam.greenberg@fireeye.com",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "jcr:created": "Wed Nov 18 2020 20:48:03 GMT+0000",
        "text": "\u003Cp\u003EMalicious Office documents remain a favorite technique for every type of threat actor, from red teamers to FIN groups to APTs. In this blog post, we will discuss \u0026quot;VBA Purging\u0026quot;, a technique we have increasingly observed in the wild and that was first \u003Ca href=\u0022https:\/\/blog.nviso.eu\/2020\/02\/25\/evidence-of-vba-purging-found-in-malicious-documents\/\u0022\u003Epublicly documented by Didier Stevens in February 2020\u003C\/a\u003E. We will explain how VBA purging works with Microsoft Office documents in Compound File Binary Format (CFBF), share some detection and hunting opportunities, and introduce a new tool created by Mandiant\u2019s Red Team: \u003Ca href=\u0022https:\/\/github.com\/fireeye\/OfficePurge\u0022\u003EOfficePurge\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EMS-OVBA File Format\u003C\/h4\u003E\n\u003Cp\u003EBefore diving into VBA Purging, it is important to understand certain components of \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/openspecs\/office_file_formats\/ms-ovba\/575462ba-bf67-4190-9fac-c275523c75fc\u0022\u003EMicrosoft\u2019s specifications on VBA macros\u003C\/a\u003E (MS-OVBA). We focus on MS-OVBAs in Microsoft Office 97 documents that use the CFBF file format, instead of the modern Open Office XML (OOXML) format used by Microsoft Excel \u201c.xlsx\u201d and Microsoft Word \u201c.docx\u201d documents.\u003C\/p\u003E\n\u003Cp\u003EMS-OVBA\u2019s file structure \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/openspecs\/office_file_formats\/ms-ovba\/005bffd7-cd96-4f25-b75f-54433a646b88\u0022\u003Estores all VBA data in a hierarchy\u003C\/a\u003E, which consists of structured storage that contain different types of streams. VBA code in an Office document is stored in various module streams that consists of two parts: the \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E (also known as P-code), and the \u003Cspan class=\u0022code\u0022\u003ECompressedSourceCode\u003C\/span\u003E. The \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E section is an array of bytes that contains compiled VBA code. The \u003Cspan class=\u0022code\u0022\u003ECompressedSourceCode\u003C\/span\u003E section contains VBA source code that is compressed with Microsoft\u2019s proprietary algorithm. The boundary between the two sections is determined by a \u003Cspan class=\u0022code\u0022\u003EMODULEOFFSET\u003C\/span\u003E, which is stored in the \u003Cspan class=\u0022code\u0022\u003Edir\u003C\/span\u003E stream. A diagram of a module stream is shown in Figure 1.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/purgalicious\/figure1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Module stream diagram\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen a VBA macro is added to a document, the VBA engine saves a compiled version in the \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E section of the relevant module stream to increase performance. However, an Office application will only access the \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E if its version and architecture match what was used to compile the original VBA code. This version and implementation information is stored in the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT and __SRP_#\u003C\/span\u003E streams. If the versions do not match, the compressed source code is decompressed, compiled, and run instead.\u003C\/p\u003E\n\u003Ch4\u003EVBA Purging vs VBA Stomping\u003C\/h4\u003E\n\u003Cp\u003EIn 2018, research by the Walmart security team brought a technique known as \u201c\u003Ca href=\u0022https:\/\/vbastomp.com\/\u0022\u003EVBA Stomping\u003C\/a\u003E\u201d\u0026nbsp;to wider public awareness. Originally identified by \u003Ca href=\u0022https:\/\/github.com\/bontchev\/pcodedmp\u0022\u003EDr. Vesselin Bontchev in 2016\u003C\/a\u003E, this technique allows attackers to remove compressed VBA code from Office documents and still execute malicious macros without many of the VBA keywords that AV engines had come to rely on for detection. For an example of VBA stomping in-the-wild, check out \u201c\u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2020\/01\/stomp-2-dis-brilliance-in-the-visual-basics.html\u0022\u003ESTOMP 2 Dis: Brilliance in the (Visual) Basics\u003C\/a\u003E\u201d.\u003C\/p\u003E\n\u003Cp\u003EVBA stomping takes advantage of how module streams are interpreted and exchanges malicious \u003Cspan class=\u0022code\u0022\u003ECompressedSourceCode\u003C\/span\u003E with non-malicious VBA source code, leaving the \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E untouched. However, the success of this technique is Office-version dependent, implying that an attacker would have to do additional recon on their target and be aware of their victims\u2019 deployed Office versions.\u003C\/p\u003E\n\u003Cp\u003EVBA purging modifies the module streams in the opposite way. Instead of changing the \u003Cspan class=\u0022code\u0022\u003ECompressedSourceCode\u003C\/span\u003E, VBA purging completely removes the \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E data from the module stream and the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT stream\u003C\/span\u003E, changes the value of the \u003Cspan class=\u0022code\u0022\u003EMODULEOFFSET\u003C\/span\u003E to 0, and removes all SRP streams (this is necessary because the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003ESRP\u003C\/span\u003E streams contain version-dependent \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E data that will result in a runtime error when there is no \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E in the module stream).\u0026nbsp;This removes strings usually found in \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E that many AV engines and YARA rules depend on for detection. Once removed, attackers are able to use more standard methodologies and execute suspicious functions (i.e. \u003Cspan class=\u0022code\u0022\u003ECreateObject\u003C\/span\u003E) without being detected.\u003C\/p\u003E\n\u003Cp\u003EFigure 2 shows the OLE streams for a normal and a purged document, extracted using \u003Ca href=\u0022https:\/\/blog.didierstevens.com\/programs\/oledump-py\/\u0022\u003Eoledump\u003C\/a\u003E. In the original document, the Module1 \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E is 1291 bytes, while it is 0 bytes in the VBA purged document. The purged document has no \u003Cspan class=\u0022code\u0022\u003ESRP\u003C\/span\u003E streams and the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream has been reduced to 7 bytes.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/purgalicious\/figure2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Analyzing VBA purged document with oledump\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ETesting the Effectiveness of VBA Purging\u003C\/h4\u003E\n\u003Cp\u003EMandiant\u2019s Red Team created a command line, C# tool called \u003Ca href=\u0022https:\/\/github.com\/fireeye\/OfficePurge\u0022\u003EOfficePurge\u003C\/a\u003E to test this technique. OfficePurge supports Microsoft Office Word, Excel and Publisher documents that follow the CFBF file format. In the following examples, we used OfficePurge and a VBA payload from the public toolkit \u003Ca href=\u0022https:\/\/github.com\/trustedsec\/unicorn\u0022\u003EUnicorn\u003C\/a\u003E\u0026nbsp;to test the effectiveness of VBA purging a Microsoft Office Word document that contained a Base64 encoded PowerShell payload (Figure 3).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/purgalicious\/figure3.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Macro payload generated with Unicorn\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe strings output (Figure 4) for the original Word document shows Unicorn\u2019s Base64 encoded PowerShell payload, which is detected by many security products. On the other hand, the output for the VBA purged document does not fully show the Base64 encoded payload because the \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E is removed. The \u003Cspan class=\u0022code\u0022\u003ECompressedSourceCode\u003C\/span\u003E still contains the Base64 encoded payload, but Microsoft\u2019s custom compression algorithm splits the strings, making it harder for static analysis to detect it.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/purgalicious\/figure4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Strings output with a purged and non-purged document\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBoth documents were submitted to online sandboxes to test detection capabilities of various products. VirusTotal\u2019s detection rate of the original document \u003Ca href=\u0022https:\/\/www.virustotal.com\/gui\/file\/f4431f02fe1e624fdb7bf2243bb72f1899d7eccb1ed7b2b42ed86e001e8bff28\/detection\u0022\u003E(36\/60)\u003C\/a\u003E dropped by 67% after it was VBA purged \u003Ca href=\u0022https:\/\/www.virustotal.com\/gui\/file\/98bd119f928e8db4ed45f5426f2c35c5f6d6ccc38af029e7ab4b9cfcc1447c53\/detection\u0022\u003E(12\/61)\u003C\/a\u003E. VirusTotal also categorized the non-purged document as \u201ccreate-ole\u201d, \u201cdoc\u201d, and \u201cmacros\u201d, whereas the purged document was only categorized as \u201cdoc\u201d.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/purgalicious\/figure5.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: VirusTotal detection results for non-purged Word document\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/purgalicious\/figure6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: VirusTotal detection results for purged Word document\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDetection and Hunting Opportunities\u003C\/h4\u003E\n\u003Cp\u003EWith OfficePurge, we have the ability to quickly erase compiled VBA code and reduce security product detections in public sandboxes, but why stop there? Using this test data, our next step is to build conditional detection logic in formats such as YARA rules, which can identify VBA purged documents and allow us to hunt for previously undetected malicious documents. Under the \u201csample-data\u201d folder in the OfficePurge GitHub repo, we have added original and purged documents for each supported file type with a macro that will spawn calc.exe. SHA256 hashes are included at the end of this post.\u003C\/p\u003E\n\u003Cp\u003EAs mentioned before, this technique involves removing \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E data from the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream. MSDN \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/openspecs\/office_file_formats\/ms-ovba\/43531f35-2801-4cac-b6da-88dc975056da\u0022\u003Edocumentation\u003C\/a\u003E\u0026nbsp;shows that the minimum length for the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream is 7 bytes to fit the required fields in the stream header. The following YARA rule searches for CFBF files with a 7 byte \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream:\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003Erule FEYE_OLE_VBAPurged_1 {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author = \u0026quot;Alyssa Rahman (@ramen0x3f)\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; description = \u0026quot;This file has a _VBA_PROJECT stream that has been cleared. This is evidence of VBA purging, a technique where the p-code (PerformanceCache data) is removed from Office files that have an embedded macro.\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $vba_proj = { 5F 00 56 00 42 00 41 00 5F 00 50 00 52 00 4F 00 4A 00 45 00 43 00 54 00 00 00 00 00 00 00 00 00 }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; uint32(0) == 0xe011cfd0 and ( uint32(@vba_proj[1] + 0x78) == 0x07 )\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003ESearching with this logic on VirusTotal reveals a large number of malicious documents, meaning this is very prevalent in the wild and in use by attackers. This rule should identify most publicly documented examples of VBA purging, such as \u003Ca href=\u0022https:\/\/www.virustotal.com\/gui\/file\/038e0a602ddf37976cde6f57007fcf5c3f5f235cc025637b40303db38c3b4ec2\u0022\u003E9fd864e578d8bb985cf71a24089f5e2f\u003C\/a\u003E\u0026nbsp;(\u003Ca href=\u0022https:\/\/www.hornetsecurity.com\/en\/threat-research\/vba-purging-malspam-campaigns\/\u0022\u003EHornetSecurity\u003C\/a\u003E). However, it may also identify some false positives. As previously identified by \u003Ca href=\u0022https:\/\/cybersafenv.org\/maldoc-vba-purging-example-sun-jul-12th\/\u0022\u003EDidier Stevens\u003C\/a\u003E, some public libraries such as EPPlus may generate benign documents without \u003Cspan class=\u0022code\u0022\u003EPerformanceCache\u003C\/span\u003E data and appear to be purged.\u003C\/p\u003E\n\u003Cp\u003EAnother important limitation of this rule is that the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream data doesn\u2019t have to be completely removed. So while the stream size is 7 in all publicly documented examples of this technique, it doesn\u2019t have to be exactly 7.\u003C\/p\u003E\n\u003Cp\u003EOne solution to this is to compare the compressed and compiled versions of a document\u2019s macros and look for unexpected variations. Another potential option is a YARA rule that searches the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream for keywords or bytes, which should appear if the p-code is valid.\u003C\/p\u003E\n\u003Cp\u003EBut let\u2019s take the easy path first and look for anomalies within OfficePurge. There\u2019s a section within the code that overwrites the \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream with a static header:\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E\/\/ Remove performance cache in _VBA_PROJECT stream. Replace the entire stream with _VBA_PROJECT header.\u003Cbr\u003E\n byte[] data = Utils.HexToByte(\u0026quot;CC-61-FF-FF-00-00-00\u0026quot;);\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EA little bit of Googling shows this header was built based on \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/openspecs\/office_file_formats\/ms-ovba\/ef7087ac-3974-4452-aab2-7dba2214d239\u0022\u003EMicrosoft\u2019s specifications\u003C\/a\u003E.\u0026nbsp;But if we compare a purged and unpurged document, it looks like that header actually varies from specifications in practice (Figure 7).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/purgalicious\/figure7.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Comparison of purged and unpurged document\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis header isn\u2019t necessarily proof that a document is malicious or was created with OfficePurge, but it could be a good indicator that the document was created programmatically versus with Office products. With anomalies such as this, we can start building a rule similar to the following, which will search for documents with a \u201csmall\u201d \u003Cspan class=\u0022code\u0022\u003E_VBA_PROJECT\u003C\/span\u003E stream and this suspicious stream header:\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003Erule FEYE_OLE_VBAPurged_2 {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author = \u0026quot;Michael Bailey (@mykill), Jonell Baltazar, Alyssa Rahman (@ramen0x3f), Joseph Reyes\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; description = \u0026quot;This file has a suspicious _VBA_PROJECT header and a small _VBA_PROJECT stream. This may be evidence of the VBA purging tool OfficePurge or a tool-generated document.\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $vba_proj = { 5F 00 56 00 42 00 41 00 5F 00 50 00 52 00 4F 00 4A 00 45 00 43 00 54 00 00 00 00 00 00 00 00 00 }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $cc61 = {CC 61 FF FF 00 00 00}\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; uint32(0) == 0xe011cfd0 and ( uint32(@vba_proj[1] + 0x78) \u0026gt;= 0x07 ) and ( uint32(@vba_proj[1] + 0x78) \u0026lt; 0xff ) and $cc61\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003ESearching with the two rules shared here reveals a wide range of threat actors and malware types leveraging VBA purging, or at least some type of automated document generation. On VirusTotal, you\u2019re likely to see a number of Emotet payloads caught by this rule, which is understandable given how heavily it relies on malicious email attachments. Another top offender we observed was AgentTesla.\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ESince these rules both turn up benign documents as well, they aren\u2019t ready for a production environment; however, they could be useful as \u201cweak signals\u201d for more manual threat hunting. Many static detection engines may struggle for accuracy when identifying the VBA purging technique. Dynamic analysis techniques, such as those used by FireEye\u2019s MVX engine, will still detonate the malicious document properly and be detected even if the VBA is purged.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EFor as long as companies use Office documents, attackers will be trying to smuggle malicious macros into them. VBA purging represents a recent example of how threat actors continually invent new ways to evade defenders. The artifacts discussed in this blog post should serve as a starting point for detecting VBA purging, and hopefully the tooling and indicators we have shared will help you hunt for additional anomalies in malicious Office documents. Check out \u003Ca href=\u0022https:\/\/github.com\/fireeye\/OfficePurge\u0022\u003EOfficePurge\u003C\/a\u003E today!\u003C\/p\u003E\n\u003Ch4\u003EIndicators of Compromise\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFile Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESHA256 Hash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etest.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUnicorn macro payload in Word document without VBA purging\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef4431f02fe1e624fdb7bf2243bb72f1899d7eccb1ed7b2b42ed86e001e8bff28\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etest2.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUnicorn macro payload in Word document with VBA purging\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E98bd119f928e8db4ed45f5426f2c35c5f6d6ccc38af029e7ab4b9cfcc1447c53\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eexcel_calc.xls\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESample document in OfficePurge\u2019s \u201csample-data folder\u201d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ede6583d338a8061bb1fc82687c8f5bff9a36ba1e2a87172e696ffaeca32567af\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eexcel_calc_PURGED.xls\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESample document in OfficePurge\u2019s \u201csample-data folder\u201d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E914a6cf78fe98e80b1dee87347adbc8f8b37a1dfe672aa5196885daa447e9e73\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Epublisher_calc.pub\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESample document in OfficePurge\u2019s \u201csample-data folder\u201d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4bce7c675edde20a3357bc1d0f25b53838ab0b13824ab7a5bbc09b995b7c832f\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Epublisher_calc_PURGED.pub\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESample document in OfficePurge\u2019s \u201csample-data folder\u201d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E36bdfaaf3ea228844507b1129b6927e1e69a2cd5e8af99d507121b1485d85e1e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eword_calc.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESample document in OfficePurge\u2019s \u201csample-data folder\u201d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E23fa4b77c578470c1635fe20868591f07662b998716c51fbb53d78189c06154f\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002284\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eword_calc_PURGED.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESample document in OfficePurge\u2019s \u201csample-data folder\u201d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022378\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea7eac98b3477fc97ccfe94f1419a859061ca944dc95372265e922992bd551529\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n",
        "jcr:lastModified": "Wed Nov 18 2020 21:36:54 GMT+0000",
        "sling:resourceType": "fireeye-www\/fdc\/components\/text\/text",
        "textIsRich": "true"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe explain how VBA purging works, share some detection and hunting opportunities, and introduce a new tool: OfficePurge.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Nov 18 2020 21:32:19 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Nov 19 2020 19:09:09 GMT+0000",
      "imageRotate": "0"
    }
  }
}
