{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed May 04 2016 09:04:15 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "The FLARE On Challenge Solutions: Part 1 of 2",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "7c103167-d1ed-4902-af96-d9135711f137",
    "author": "Richard Wartell",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "focusKeyword": "flareon",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "4ba2ab4f-29f0-439e-9701-9b984490c3cd"
    ],
    "jcr:created": "Fri Jun 03 2016 19:48:30 GMT-0400",
    "cq:lastReplicated": "Fri Jun 03 2016 19:48:30 GMT-0400",
    "cq:lastModified": "Tue Dec 30 2014 12:48:42 GMT-0500",
    "cq:distribute": true,
    "jcr:baseVersion": "4ba2ab4f-29f0-439e-9701-9b984490c3cd",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-tags:exploits",
      "fireeye-blog-authors:cap-mike-sikorski",
      "fireeye-blog-tags:technical",
      "fireeye-blog-authors:cap-richard-wartell"
    ],
    "jcr:uuid": "8181b247-a76d-4aa3-a579-1822775399d6",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Nov 17 2014 16:14:00 GMT-0800",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynda.hall@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
        "text": "\u003Cp\u003EIn July, the FireEye Labs Advanced Reverse Engineering (FLARE) team created and released the first\u0026nbsp;\u003Ca href=\u0022http:\/\/www.flare-on.com\/\u0022\u003EFLARE On Challenge\u003C\/a\u003E\u0026nbsp;to the community. A total of 7,140 people participated and showed off their skills, and 226 people completed the challenge. Everyone who finished the challenge received a challenge coin to commemorate their success.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: center;\u0022\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/Flr1.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/Flr1.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: center;\u0022\u003E\u003Cb\u003EThe coveted challenge coin\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EWe are releasing the challenge solutions to help those who didn\u2019t finish improve their skills. There are many different ways to complete each challenge, so we waited to see what solutions people devised. We found the following solutions posted online and recommend taking a look at these as well to see how the later challenges can be solved in different ways.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022http:\/\/parsiya.net\/blog\/2014-10-07-my-adventure-with-fireeye-flare-challenge\/\u0022\u003E\u003Cimg\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022http:\/\/parsiya.net\/blog\/2014-10-07-my-adventure-with-fireeye-flare-challenge\/\u0022\u003E\u0026nbsp;\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022http:\/\/parsiya.net\/blog\/2014-10-07-my-adventure-with-fireeye-flare-challenge\/\u0022\u003E\u003C\/a\u003E\u003Ca href=\u0022http:\/\/www.ghettoforensics.com\/2014\/09\/a-walkthrough-for-flare-re-challenges.html\u0022\u003Ehttp:\/\/www.ghettoforensics.com\/2014\/09\/a-walkthrough-for-flare-re-challenges.html\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https:\/\/www.codeandsec.com\/Detailed-Solutions-to-FireEye-FLARE-Challenge\u0022\u003Ehttps:\/\/www.codeandsec.com\/Detailed-Solutions-to-FireEye-FLARE-Challenge\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003EIn this initial issue of the blog series, we focus on the first five challenges, which were easier. We hope that by starting with easier solutions, people who have never reversed before can still benefit. Below is a write up of how to solve the first five challenges, written as if we\u2019d never seen them before. The goal of each challenge is to find a key in the form of an email address that allows you unlock the next challenge. The archive of challenges have been posted to the\u0026nbsp;\u003Ca href=\u0022http:\/\/www.flare-on.com\/\u0022\u003Echallenge website\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EStay tuned for Part 2 where we show two different and interesting ways of solving Challenge 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EChallenge 1: Bob Doge\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThe first challenge starts out pretty easy. When we drop the binary into CFF Explorer (or equivalent PE tool), it informs us that we\u2019re dealing with a PE 32-bit .NET Assembly, so we can run it in an x86 Windows VM and see what happens. A decode button appears to have two functions: transforming Bob Ross into Bob Doge, and converting the top label into some unprintable strings. We drop the binary into ILSpy (or equivalent .NET decompiler) to get an idea what this decode button is doing. The decompiled code is shown in the top of Figure 1.\u003C\/p\u003E\n\u003Cp style=\u0022text-align: center;\u0022\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr2.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr2.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp style=\u0022text-align: center;\u0022\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr3.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr3.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 1: Decode button code in ILSpy (top) and re-implemented in Python (bottom)\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThe button changes the image to Bob Doge, and encodes a resource string twice and sets the label text to the result. If we save out the resource that is being manipulated, we can play around with it. The Python code in the right side of Figure 1 is the decode button re-implement to help us figure out what we are dealing with. When this Python code is run, the following is printed out showing the solution to Challenge 1 as \u201cText 1\u201d in the output.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr4.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr4.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 2: Challenge 1 result\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EChallenge 2: Javascrap\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThe next challenge (to the bane of some of our players) is not a Windows PE file. Instead we have a version of the website www.flare-on.com. There has to be something special about this version of the website. So we look at page source of\u0026nbsp;\u003Ci\u003Ehome.html\u003C\/i\u003E. If we compare this version with the live challenge website, one line in particular stands out:\u003C\/p\u003E\n\u003Cp\u003E\u0026lt;?php include \u0026quot;img\/flare-on.png\u0026quot; ?\u0026gt;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EWhy would a PNG image be loaded as a PHP script? When we open this image with an image viewer, the banner comes up so it is definitely an image. Since we know that the image is being loaded as a PHP script, we search for\u0026nbsp;\u003Ci\u003Ephp\u003C\/i\u003E\u0026nbsp;inside of the image file and find the following:\u003C\/p\u003E\n\u003Cp\u003E19C0 AE 42 60 82 3C 3F 70 68 70 20 24 74 65 72 6D 73 .B`.\u0026lt;?php $terms\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;19D0 3D 61 72 72 61 79 28 22 4D 22 2C 20 22 5A 22 2C =array(\u0026quot;M\u0026quot;, \u0026quot;Z\u0026quot;,\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;19E0 20 22 5D 22 2C 20 22 70 22 2C 20 22 5C 5C 22 2C \u0026quot;]\u0026quot;, \u0026quot;p\u0026quot;, \u0026quot;\\\\\u0026quot;,\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;19F0 20 22 77 22 2C 20 22 66 22 2C 20 22 31 22 2C 20 \u0026quot;w\u0026quot;, \u0026quot;f\u0026quot;, \u0026quot;1\u0026quot;,\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;1A00 22 76 22 2C 20 22 3C 22 2C 20 22 61 22 2C 20 22 \u0026quot;v\u0026quot;, \u0026quot;\u0026lt;\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;1A10 51 22 2C 20 22 7A 22 2C 20 22 20 22 2C 20 22 73 Q\u0026quot;, \u0026quot;z\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;s\u003C\/p\u003E\n\u003Cp\u003E...\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EPulling this out of the image leaves us with:\u003C\/p\u003E\n\u003Cp\u003E\u0026lt;?php\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;$terms=array(\u0026quot;M\u0026quot;, \u0026quot;Z\u0026quot;, \u0026quot;]\u0026quot;, \u0026quot;p\u0026quot;, \u0026quot;\\\\\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;f\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;v\u0026quot;,...\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;$order=array(59, 71, 73, 13, 35, 10, 20, 81, 76, 10, 28, 63, 12,...\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;$do_me=\u0026quot;\u0026quot;;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;for($i=0;$i\u0026lt;count($order);$i++)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;$do_me=$do_me.$terms[$order[$i]];\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;eval($do_me);\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;?\u0026gt;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ESo we have an array of characters, and then an array of indexes into the array of characters being used to build a string that gets evaluated. If we replace that\u0026nbsp;\u003Ci\u003Eeval\u003C\/i\u003E\u0026nbsp;with a call to\u0026nbsp;\u003Ci\u003Eecho\u003C\/i\u003E, we can see the following strings in the display:\u003C\/p\u003E\n\u003Cp\u003E$_= \u0027aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4Njh...\u003C\/p\u003E\n\u003Cp\u003E$__=\u0027JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\u0027;\u003C\/p\u003E\n\u003Cp\u003E$___=\u0026quot;\\x62\\141\\x73\\145\\x36\\64\\x5f\\144\\x65\\143\\x6f\\144\\x65\u0026quot;;\u003C\/p\u003E\n\u003Cp\u003Eeval($___($__));\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThis reveals more obfuscation! Applying the same trick again results in the following lines of code:\u003C\/p\u003E\n\u003Cp\u003E$code=base64_decode($_);\u003C\/p\u003E\n\u003Cp\u003Eeval($code);\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ESo from this, we decide we should base64 decode the $_ string and, lo and behold, we have our key.\u003C\/p\u003E\n\u003Cp\u003EIf(isset($_POST[\\97\\49\\49\\68\\x4F\\84\\116\\x68\\97\\x74\\x74\\x44\\x4F\\x54...\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;eval(base64_decode($_POST[\u201c\\97\\49\\x31\\68\\x4F\\x54\\116\\104\\x61\\116...\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;}\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThis is a string that is made out of mixing hexadecimal and ordinals. By writing a quick decoder for this conversion we get\u0026nbsp;\u003Ci\u003Ea11DOTthatDOTjava5crapATflareDASHonDOTcom\u003C\/i\u003E. We then replace \u201cDOT\u201d, \u201cAT\u201d, and \u201cDASH\u201d with the corresponding character and get the key:\u0026nbsp;\u003Ci\u003Ea11.that.java5crap@flare-on.com\u003C\/i\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EChallenge 3: Shellolololol\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EChallenge 3 is an x86 PE file. We drop the binary into IDA Pro to see what it shows us:\u003C\/p\u003E\n\u003Cp\u003Epush\u0026nbsp;\u0026nbsp; eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;call\u0026nbsp;\u0026nbsp; __getmainargs\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;add\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; esp, 14h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, [ebp+var_24]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;push\u0026nbsp;\u0026nbsp; eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, [ebp+var_20]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;push\u0026nbsp;\u0026nbsp; eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, [ebp+var_1C]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;push\u0026nbsp;\u0026nbsp; eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;call\u0026nbsp;\u0026nbsp; sub_401000\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;add\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; esp, 0Ch\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [ebp+Code], eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, [ebp+Code]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;push\u0026nbsp;\u0026nbsp; eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;call\u0026nbsp;\u0026nbsp; exit\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThe function\u0026nbsp;\u003Ci\u003Esub_401000\u003C\/i\u003E\u0026nbsp;looks interesting to us since all of the other functions called before it have symbols associated with them, and 0\u00d7401000 is the beginning of the code section, commonly where the beginning of any user-written code exists.\u003C\/p\u003E\n\u003Cp\u003Epush\u0026nbsp;\u0026nbsp; ebp\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ebp, esp\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;sub\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; esp, 204h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;nop\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 0E8h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [ebp+var_201], al\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 0\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [ebp+var_200], al\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 0\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [ebp+var_1FF], al\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 0\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [ebp+var_1FE], al\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 0\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [ebp+var_1FD], al\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 8Bh\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EAfter just a cursory look, we see single bytes being moved onto the stack one at a time. After we get past all of the bytes being moved onto the stack, we see the following:\u003C\/p\u003E\n\u003Cp\u003Elea\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, [ebp+var_201]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;call\u0026nbsp;\u0026nbsp; eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 0\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;jmp\u0026nbsp;\u0026nbsp; $+5\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThe binary is calling the location of the first byte it moved onto the stack, so we\u2019ll need to deal with a buffer of shellcode. At this point static analysis is much more work than dynamic, so we drop this into a debugger.\u003C\/p\u003E\n\u003Cp\u003EWe set a breakpoint at the\u0026nbsp;\u003Ci\u003Ecall eax\u003C\/i\u003E\u0026nbsp;above and let the code run to catch the program before it calls into the shellcode. Now we can dump the stack memory to a file and analyze it in IDA Pro as shown in Figure 3. All of the following analysis could be done in the debugger, but we decided to show the steps in IDA Pro.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr5.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr5.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 3: 0\u00d766 decoding loop\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 3 shows a loop decoding everything after the\u0026nbsp;\u003Ci\u003Ejmp\u003C\/i\u003E\u0026nbsp;instruction by XORing each byte with 0\u00d766. We decided to write a script to do the decoding for us rather than running it and dumping it in the debugger again.\u003C\/p\u003E\n\u003Cp\u003Eimport idaapi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;loc = 0x1DA0\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;for i in range(0x1DF):\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;idaapi.patch_byte(loc+i, idaapi.get_byte(loc+i) ^ 0x66)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EWhen we run this script we get the following decoded string:\u003C\/p\u003E\n\u003Cp\u003E00001DA0 aAndSoItBegins db \u0027and so it begins\u0027,0\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EAdditional code that has also been decoded, showing another decoding loop:\u003C\/p\u003E\n\u003Cp\u003E00001DB0\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; \u0027su\u0027\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DB5\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; \u0027ruas\u0027\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DBA\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; \u0027apon\u0027\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DBF\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ebx, esp\u003C\/p\u003E\n\u003Cp\u003E00001DC1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; call\u0026nbsp;\u0026nbsp; $+5\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DC6\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; esi, [esp]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DC9\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;add\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; esi, 2Dh ; \u0027-\u0027\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DCC \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx, esi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DCE\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;add\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx, 18Ch\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DD4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, ebx\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DD6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;add\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 0Ah\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DD9\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DD9 loc_1DD9:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DD9 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;cmp\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, ebx\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DDB\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;jnz\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; short loc_1DE2\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DDD \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ebx, esp\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DDF\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;add\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ebx, 4\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DE2\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DE2 loc_1DE2:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DE2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;cmp\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; esi, ecx\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DE4\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;jz\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; short loc_1DEE\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DE6\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dl, [ebx]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DE8\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [esi], dl\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DEA\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; inc\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ebx\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DEB\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; inc\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; esi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00001DEC\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; jmp\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; short loc_1DD9\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThis time the encoding is a multi-byte XOR, so we write another script:\u003C\/p\u003E\n\u003Cp\u003Eimport idaapi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;loc = 0x1DF3\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;key = \u201cnopasaurus\u201d\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;for i in range(0x18C):\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;idaapi.patch_byte(loc+i,idaapi.get_byte(loc+i)^ord(key[i%len(key)]))\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EScripts like this are often needed when reversing malware to decode strings used by the program. After this script executes it seems we\u2019ve gotten further because we have another string that has been decoded:\u003C\/p\u003E\n\u003Cp\u003E00001DF3 aGetReadyToGetN db \u0027get ready to get nop\u0027,27h,\u0027ed so damn \u0026nbsp;\u0026nbsp;\u0026nbsp;hard in the paint\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EAnd following this we now have more code as shown in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr6.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr6.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 4: GlOb decoding loop\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EWhat a surprise: another deccoding loop. By now, we\u2019ve gotten pretty decent at writing these scripts, so here\u2019s another one:\u003C\/p\u003E\n\u003Cp\u003Eimport idaapi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;loc = 0x1E47\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;key = \u201cbOlG\u201d\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;for i in range(0x138):\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;idaapi.patch_byte(loc+i,idaapi.get_byte(loc+i)^ord(key[i%len(key)]))\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EAfter this one executes we have more code to look at. This is the last decoding step using the key of \u201c\u003Ci\u003Eomg is it almost over?!?\u003C\/i\u003E\u201d This time the script looks like:\u003C\/p\u003E\n\u003Cp\u003Eimport idaapi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;loc = 0x1EA9\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;key = \u201comg is it almost over?!?\u201d\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;for i in range(0xD6):\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;idaapi.patch_byte(loc+i,idaapi.get_byte(loc+i)^ord(key[i%len(key)]))\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EAnd we have our next key.\u003C\/p\u003E\n\u003Cp\u003E00001EA9 aSuch_5h3110101 db \u0027such.5h311010101@flare-on.com\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EWe could have come to the same conclusion by stepping through the whole binary in a debugger. But we wanted to have a bit of fun in IDA Pro scripting!\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EChallenge 4: Sploitastic\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EChallenge 4 requires that we examine a PDF. Let\u2019s see what happens when we open this in an unpatched version of Adobe Reader that is highly exploitable, like 9.0 as shown in Figure 5.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr7.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr7.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 5: Malicious PDF\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EIt looks like the malicious PDF popped open a message box, so we set a breakpoint on\u0026nbsp;\u003Ci\u003EMessageBoxA\u003C\/i\u003E\u0026nbsp;and\u0026nbsp;\u003Ci\u003EMessageBoxW\u003C\/i\u003E. Figure 6 shows the arguments on the stack when this breakpoint hits.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr8.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr8.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 6: MessageBoxA arguments\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EFrom the strings that are on the stack, we know that we are in the correct call to\u0026nbsp;\u003Ci\u003EMessageBoxA\u003C\/i\u003E. So if we trace back to the address that made this call, we find the following shellcode block:\u003C\/p\u003E\n\u003Cp\u003E00000000 E8 00 00 00 00 8B 14 24 81 72 0B 16 A3 FB 32 68 .......$.r....2h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000010 79 CE BE 32 81 72 17 AE 45 CF 48 68 C1 2B E1 2B y..2.r..E.Hh.+.+\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000020 81 72 23 10 36 9F D2 68 71 44 FA FF 81 72 2F F7 .r#.6..hqD...r\/.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000030 A9 A9 0C 68 84 E9 CF 60 81 72 3B BE 93 A9 43 68 ...h...`.r;...Ch\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000040 D2 A3 98 37 81 72 47 82 8A 62 3B 68 EF A4 11 4B ...7.rG..b;h...K\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000050 81 72 53 D6 47 C0 CC 68 BE 69 A4 FF 81 72 5F A3 .rS.G..h.i...r_.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000060 CA 54 31 68 D4 AB 65 52 8B CC 57 53 51 57 8B F1 .T1h..eR..WSQW..\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000070 89 F7 83 C7 1E 39 FE 7D 0B 81 36 42 45 45 46 83 .....9.}..6BEEF.\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000080 C6 04 EB F1 FF D0 68 65 73 73 01 8B DF 88 5C 24 ......hess....\\$\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000090 03 68 50 72 6F 63 68 45 78 69 74 54 FF 74 24 40 .hProchExitT.t$@\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EExamining this in IDA shows the following:\u003C\/p\u003E\n\u003Cp\u003E00000359\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; call\u0026nbsp;\u0026nbsp; $+5\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;0000035E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; edx, [esp]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000361\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+0Bh], 32FBA316h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000368\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;push\u0026nbsp;\u0026nbsp; 32BECE79h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;0000036D\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+17h], 48CF45AEh\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000374\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; 2BE12BC1h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000379\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+23h], 0D29F3610h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000380\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; 0FFFA4471h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000385\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+2Fh], 0CA9A9F7h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;0000038C\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; 60CFE984h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000391\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+3Bh], 43A993BEh\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;00000398\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; 3798A3D2h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;0000039D\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+47h], 3B628A82h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003A4\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; 4B11A4EFh\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003A9\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+53h], 0CCC047D6h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003B0\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; 0FFA469BEh\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003B5\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; xor\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [edx+5Fh], 3154CAA3h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003BC\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; 5265ABD4h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003C1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx, esp\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003C3\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; edi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003C4\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; ebx\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003C5\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;push\u0026nbsp;\u0026nbsp; ecx\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;000003C6\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; edi\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ESo it looks like we have strings that are being encoded on the stack in some way. Since our breakpoint hit after this code has already run, we can go back and force the debugger to execute this code again to see what is revealed on the stack.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr9.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr9.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 7: Breakpoint to reveal the key\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EAnd there it is in Figure 7 as referenced by ESP. So we\u2019ve found the next key.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EChallenge 5: 5get_it\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EChallenge 5 is a Windows PE DLL, so we drop it into IDA Pro and started jumping around the functions to see if anything interesting pops out. After bouncing around a bit, we stumble upon this huge function starting at\u0026nbsp;\u003Ci\u003E0\u00d710001240\u003C\/i\u003E. This function takes no arguments and appears to build a giant stack string. Since it takes no arguments, we tried setting eip to the entry of the function in a debugger and running it, which reveals the image shown in Figure 8.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr10.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr10.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 8: Challenge 5 message box\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EInteresting, but it doesn\u2019t seem to contain the key. Checking the cross references to this function leads us to the function shown in Figure 9.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr11.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr11.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 9: Subroutine that calls the message box function\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThat doesn\u2019t tell us much by itself. We see this function checks a global variable to determine whether to open a\u0026nbsp;\u003Ci\u003EMessageBox\u003C\/i\u003E, and then the letter \u201cm\u201d is returned. Cross references to this function show a function whose graph is shown in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr12.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr12.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 10: \u201cif\u201d statement control function\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThis function is huge and contains some sort of if\/else statement. At the top of it we see the following bit of code.\u003C\/p\u003E\n\u003Cp\u003E10009ECD\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; movsx\u0026nbsp;\u0026nbsp; edx, [ebp+var_4]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009ED1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; cmp\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; edx, 0DEh\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009ED7\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; jg\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; loc_1000A3A4\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009EDD\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; movsx\u0026nbsp;\u0026nbsp; eax, [ebp+var_4]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009EE1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp; eax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009EE2\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; call\u0026nbsp;\u0026nbsp; ds:GetAsyncKeyState\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009EE8\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; movsx\u0026nbsp;\u0026nbsp; ecx, ax\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009EEB\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; cmp\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx, 0FFFF8001h\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;10009EF1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; jnz\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; loc_1000A39F\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EAn if\/else statement based on\u0026nbsp;\u003Ci\u003EGetAsyncKeyState\u003C\/i\u003E\u0026nbsp;sounds like we are dealing with a keylogger. It appears that pressing the \u201cm\u201d key causes a specific global variable to be set, which later causes the program to pop up a message box. So what is this global variable,\u0026nbsp;\u003Ci\u003Edword_100194FC\u003C\/i\u003E, and what sets it? Cross references to this are shown in Figure 11.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr13.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr13.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 11: Cross references to dword_100184FC\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThe global variable is initialized to zero, and then some other function sets it to one. The function that sets it is\u003Ci\u003E\u0026nbsp;sub_10009B60\u003C\/i\u003E\u0026nbsp;and is shown in Figure 12.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr14.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr14.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EFigure 12: \u201co\u201d keystroke function\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThis appears to be the function that handles the keystrokes for the \u201co\u201d key. The last condition checks if\u0026nbsp;\u003Ci\u003Edword_100194F8\u003C\/i\u003E\u0026nbsp;is set, and if so then set\u0026nbsp;\u003Ci\u003Edword_100194FC\u003C\/i\u003E\u0026nbsp;to 1. Those global variables are in sequence, so from here we play on a hunch and look at the memory addresses of the global variables and start naming them as follows:\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr15.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr15.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003EAs we start doing this, a pattern starts to emerge:\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr16.png\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/global\/en\/blog\/threat-research\/flareon\/flr16.png\u0022\u003E\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003EWe notice that the pattern \u201cdotcom\u201d emerge so we can do this for the rest of the global variables (which are a series of global variables controlling a state machine based on key strokes) and we get the final key:\u0026nbsp;\u003Ci\u003El0gging.Ur.5tr0ke5@flare-on.com.\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Dec 30 2014 12:48:42 GMT-0500",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "matthew.sawicki@FireEye.com",
      "text": "\u003Cp\u003EIn July, the FireEye Labs Advanced Reverse Engineering (FLARE) team created and released the first\u0026nbsp;FLARE On Challenge\u0026nbsp;to the community. A total of 7,140 people participated and showed off their skills, and 226 people completed the challenge. Everyone who finished the challenge received a challenge coin to commemorate their success.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Nov 17 2014 19:16:48 GMT-0500",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
