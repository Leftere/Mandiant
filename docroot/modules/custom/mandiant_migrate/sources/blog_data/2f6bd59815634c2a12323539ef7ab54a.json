{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon Jun 12 2017 10:56:57 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Behind the CARBANAK Backdoor",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "d6b66ff0-3594-4406-97d9-7043d286c90d",
    "author": "James T. Bennett",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "ec525b08-c5b4-46ba-b087-2c15eea5bf78"
    ],
    "jcr:created": "Tue May 14 2019 17:47:13 GMT-0400",
    "cq:lastReplicated": "Tue May 14 2019 17:47:09 GMT-0400",
    "cq:lastModified": "Tue May 14 2019 17:15:29 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "ec525b08-c5b4-46ba-b087-2c15eea5bf78",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-threat-research:threat-research",
      "fireeye-doctypes:blog",
      "fireeye-blog-authors:cap-barry-vengerik",
      "fireeye-blog-authors:cap-james-t-bennett",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:carbanak",
      "fireeye-blog-tags:fin7",
      "fireeye-blog-tags:FLARE"
    ],
    "jcr:uuid": "f87f7178-e001-4662-8ca7-603ba749a14c",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Jun 12 2017 11:00:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynda.hall@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
        "text": "\u003Cp\u003EIn this blog, we will take a closer look at the powerful, versatile backdoor known as CARBANAK (aka \u003Ci\u003EAnunak\u003C\/i\u003E). Specifically, we will focus on the operational details of its use over the past few years, including its configuration, the minor variations observed from sample to sample, and its evolution. With these details, we will then draw some conclusions about the operators of CARBANAK. For some additional background on the CARBANAK backdoor, see the papers by Kaspersky and Group-IB and Fox-It.\u003C\/p\u003E\n\u003Ch4\u003ETechnical Analysis\u003C\/h4\u003E\n\u003Cp\u003EBefore we dive into the meat of this blog, a brief technical analysis of the backdoor is necessary to provide some context. CARBANAK is a full-featured backdoor with data-stealing capabilities and a plugin architecture. Some of its capabilities include key logging, desktop video capture, VNC, HTTP form grabbing, file system management, file transfer, TCP tunneling, HTTP proxy, OS destruction, POS and Outlook data theft and reverse shell. Most of these data-stealing capabilities were present in the oldest variants of CARBANAK that we have seen and some were added over time.\u003C\/p\u003E\n\u003Ch5\u003EMonitoring Threads\u003C\/h5\u003E\n\u003Cp\u003EThe backdoor may optionally start one or more threads that perform continuous monitoring for various purposes, as described in Table 1. \u0026nbsp;\u003C\/p\u003E\n\u003Ctable cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EThread Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022415\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EKey logger\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022415\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELogs key strokes for configured processes and sends them to the command and control (C2) server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EForm grabber\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022415\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMonitors HTTP traffic for form data and sends it to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOS monitor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022415\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMonitors for changes to logs stored in C:\\NSB\\Coalition\\Logs and nsb.pos.client.log and sends parsed data to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPST monitor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022415\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESearches recursively for newly created Outlook personal storage table (PST) files within user directories and sends them to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHTTP proxy monitor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022415\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMonitors HTTP traffic for requests sent to HTTP proxies, saves the proxy address and credentials for future use\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Monitoring threads\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ECommands\u003C\/h5\u003E\n\u003Cp\u003EIn addition to its file management capabilities, this data-stealing backdoor supports 34 commands that can be received from the C2 server. After decryption, these 34 commands are plain text with parameters that are space delimited much like a command line. The command and parameter names are hashed before being compared by the binary, making it difficult to recover the original names of commands and parameters. Table 2 lists these commands.\u003C\/p\u003E\n\u003Ctable width=\u0022505\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommand Hash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommand Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0AA37987\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Eloadconfig\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERuns each command specified in the configuration file (see the Configuration section).\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x007AA8A5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Estate\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUpdates the state value (see the Configuration section).\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x007CFABF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Evideo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDesktop video recording\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x06E533C4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Edownload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownloads executable and injects into new process\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x00684509\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Eammyy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAmmyy Admin tool\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x07C6A8A5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Eupdate\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUpdates self\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0B22A5A7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAdd\/Update klgconfig (analysis incomplete)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0B77F949\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Ehttpproxy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStarts HTTP proxy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x07203363\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Ekillos\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERenders computer unbootable by wiping the MBR\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x078B9664\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Ereboot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReboots the operating system\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x07BC54BC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etunnel\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreates a network tunnel\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x07B40571\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eadminka\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAdds new C2 server or proxy address for pseudo-HTTP protocol\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x079C9CC2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eserver\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAdds new C2 server for custom binary protocol\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0007C9C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euser\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECreates or deletes Windows user account\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x000078B0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Erdp\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EEnables concurrent RDP (analysis incomplete)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x079BAC85\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Esecure\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EAdds Notification Package (analysis incomplete)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x00006ABC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Edel\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EDeletes file or service\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0A89AF94\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Estartcmd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EAdds command to the configuration file (see the Configuration section)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x079C53BD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Erunmem\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EDownloads executable and injects directly into new process\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0F4C3903\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Elogonpasswords\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ESend Windows accounts details to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0BC205E4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Escreenshot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ETakes a screenshot of the desktop and sends it to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x007A2BC0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Esleep\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EBackdoor sleeps until specified date\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0006BC6C\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Edupl\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EUnknown\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x04ACAFC3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EUpload files to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x00007D43\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Evnc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ERuns VNC plugin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x09C4D055\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Erunfile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ERuns specified executable file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x02032914\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Ekillbot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EUninstalls backdoor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x08069613\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Elistprocess\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EReturns list of running processes to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x073BE023\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Eplugins\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EChange C2 protocol used by plugins\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0B0603B4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EDownload and execute shellcode from specified address\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x0B079F93\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Ekillprocess\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ETerminates the first process found specified by name\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x00006A34\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Ecmd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EInitiates a reverse shell to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x09C573C7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Erunplug\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EPlugin control\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E0x08CB69DE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002295\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003Eautorun\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022320\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EUpdates backdoor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Supported Commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EConfiguration\u003C\/h5\u003E\n\u003Cp\u003EA configuration file resides in a file under the backdoor\u2019s installation directory with the .bin extension. It contains commands in the same form as those listed in Table 2 that are automatically executed by the backdoor when it is started. These commands are also executed when the loadconfig command is issued. This file can be likened to a startup script for the backdoor. The state command sets a global variable containing a series of Boolean values represented as ASCII values \u20180\u2019 or \u20181\u2019 and also adds itself to the configuration file. Some of these values indicate which C2 protocol to use, whether the backdoor has been installed, and whether the PST monitoring thread is running or not. Other than the state command, all commands in the configuration file are identified by their hash\u2019s decimal value instead of their plain text name. Certain commands, when executed, add themselves to the configuration so they will persist across (or be part of) reboots. The loadconfig and state commands are executed during initialization, effectively creating the configuration file if it does not exist and writing the state command to it.\u003C\/p\u003E\n\u003Cp\u003EFigure 1 and Figure 2 illustrate some sample, decoded configuration files we have come across in our investigations.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Carbanak\/Fig1.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Configuration file that adds new C2 server and forces the data-stealing backdoor to use it\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Carbanak\/Fig2.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Configuration file that adds TCP tunnels and records desktop video\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ECommand and Control\u003C\/h4\u003E\n\u003Cp\u003ECARBANAK communicates to its C2 servers via pseudo-HTTP or a custom binary protocol.\u003C\/p\u003E\n\u003Ch5\u003EPseudo-HTTP Protocol\u003C\/h5\u003E\n\u003Cp\u003EMessages for the pseudo-HTTP protocol are delimited with the \u2018|\u2019 character. A message starts with a host ID composed by concatenating a hash value generated from the computer\u2019s hostname and MAC address to a string likely used as a campaign code. Once the message has been formatted, it is sandwiched between an additional two fields of randomly generated strings of upper and lower case alphabet characters. An example of a command polling message and a response to the listprocess command are given in Figure 3 and Figure 4, respectively.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Carbanak\/Fig3.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Example command polling message\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Carbanak\/Fig4.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Example command response message\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EMessages are encrypted using Microsoft\u2019s implementation of RC2 in CBC mode with PKCS#5 padding. The encrypted message is then Base64 encoded, replacing all the \u2018\/\u2019 and \u2018+\u2019 characters with the \u2018.\u2019 and \u2018-\u2019 characters, respectively. The eight-byte initialization vector (IV) is a randomly generated string consisting of upper and lower case alphabet characters. It is prepended to the encrypted and encoded message.\u003C\/p\u003E\n\u003Cp\u003EThe encoded payload is then made to look like a URI by having a random number of \u2018\/\u2019 characters inserted at random locations within the encoded payload. The malware then appends a script extension (php, bml, or cgi) with a random number of random parameters or a file extension from the following list with no parameters: gif, jpg, png, htm, html, php.\u003C\/p\u003E\n\u003Cp\u003EThis URI is then used in a GET or POST request. The body of the POST request may contain files contained in the cabinet format. A sample GET request is shown in Figure 5.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Carbanak\/Fig5.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Sample pseudo-HTTP beacon\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe pseudo-HTTP protocol uses any proxies discovered by the HTTP proxy monitoring thread or added by the adminka command. The backdoor also searches for proxy configurations to use in the registry at HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings and for each profile in the Mozilla Firefox configuration file at %AppData%\\Mozilla\\Firefox\\\u0026lt;ProfileName\u0026gt;\\prefs.js.\u003C\/p\u003E\n\u003Ch5\u003ECustom Binary Protocol\u003C\/h5\u003E\n\u003Cp\u003EFigure 6 describes the structure of the malware\u2019s custom binary protocol. If a message is larger than 150 bytes, it is compressed with an unidentified algorithm. If a message is larger than 4096 bytes, it is broken into compressed chunks. This protocol has undergone several changes over the years, each version building upon the previous version in some way. These changes were likely introduced to render existing network signatures ineffective and to make signature creation more difficult.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Carbanak\/Fig6.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Binary protocol message format\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003E\u003Ci\u003EVersion 1\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EIn the earliest version of the binary protocol, we have discovered that the message bodies that are stored in the \u0026lt;chunkData\u0026gt; field are simply XORed with the host ID. The initial message is not encrypted and contains the host ID.\u003C\/p\u003E\n\u003Ch5\u003E\u003Ci\u003EVersion 2\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003ERather than using the host ID as the key, this version uses a random XOR key between 32 and 64 bytes in length that is generated for each session. This key is sent in the initial message.\u003C\/p\u003E\n\u003Ch5\u003E\u003Ci\u003EVersion 3\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EVersion 3 adds encryption to the headers. The first 19 bytes of the message headers (up to the \u0026lt;hdrXORKey2\u0026gt; field) are XORed with a five-byte key that is randomly generated per message and stored in the \u0026lt;hdrXORKey2\u0026gt; field. If the \u0026lt;flag\u0026gt; field of the message header is greater than one, the XOR key used to encrypt message bodies is iterated in reverse when encrypting and decrypting messages.\u003C\/p\u003E\n\u003Ch5\u003E\u003Ci\u003EVersion 4\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EThis version adds a bit more complexity to the header encryption scheme. The headers are XOR encrypted with \u0026lt;hdrXORKey1\u0026gt; and \u0026lt;hdrXORKey2\u0026gt; combined and reversed.\u003C\/p\u003E\n\u003Ch5\u003E\u003Ci\u003EVersion 5\u003C\/i\u003E\u003C\/h5\u003E\n\u003Cp\u003EVersion 5 is the most sophisticated of the binary protocols we have seen. A 256-bit AES session key is generated and used to encrypt both message headers and bodies separately. Initially, the key is sent to the C2 server with the entire message and headers encrypted with the RSA key exchange algorithm. All subsequent messages are encrypted with AES in CBC mode. The use of public key cryptography makes decryption of the session key infeasible without the C2 server\u2019s private key.\u003C\/p\u003E\n\u003Ch4\u003EThe Roundup\u003C\/h4\u003E\n\u003Cp\u003EWe have rounded up 220 samples of the CARBANAK backdoor and compiled a table that highlights some interesting details that we were able to extract. It should be noted that in most of these cases the backdoor was embedded as a packed payload in another executable or in a weaponized document file of some kind. The MD5 hash is for the original executable file that eventually launches CARBANAK, but the details of each sample were extracted from memory during execution. This data provides us with a unique insight into the operational aspect of CARBANAK and can be \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/dam\/fireeye-www\/blog\/pdfs\/carbanak-report.xlsx\u0022\u003Edownloaded here\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch5\u003EProtocol Evolution\u003C\/h5\u003E\n\u003Cp\u003EAs described earlier, CARBANAK\u2019s binary protocol has undergone several significant changes over the years. Figure 7 illustrates a rough timeline of this evolution based on the compile times of samples we have in our collection. This may not be entirely accurate because our visibility is not complete, but it gives us a general idea as to when the changes occurred. It has been observed that some builds of this data-stealing backdoor use outdated versions of the protocol. This may suggest multiple groups of operators compiling their own builds of this data-stealing backdoor independently.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Carbanak\/Fig7.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Timeline of binary protocol versions\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E*It is likely that we are missing an earlier build that utilized version 3.\u003C\/p\u003E\n\u003Ch5\u003EBuild Tool\u003C\/h5\u003E\n\u003Cp\u003EMost of CARBANAK\u2019s strings are encrypted in order to make analysis more difficult. We have observed that the key and the cipher texts for all the encrypted strings are changed for each sample that we have encountered, even amongst samples with the same compile time. The RC2 key used for the HTTP protocol has also been observed to change among samples with the same compile time. These observations paired with the use of campaign codes that must be configured denote the likely existence of a build tool.\u003C\/p\u003E\n\u003Ch5\u003ERapid Builds\u003C\/h5\u003E\n\u003Cp\u003EDespite the likelihood of a build tool, we have found 57 unique compile times in our sample set, with some of the compile times being quite close in proximity. For example, on May 20, 2014, two builds were compiled approximately four hours apart and were configured to use the same C2 servers. Again, on July 30, 2015, two builds were compiled approximately 12 hours apart.\u003C\/p\u003E\n\u003Cp\u003EWhat changes in the code can we see in such short time intervals that would not be present in a build tool? In one case, one build was programmed to execute the runmem command for a file named wi.exe while the other was not. This command downloads an executable from the C2 and directly runs it in memory. In another case, one build was programmed to check for the existence of the domain blizko.net in the trusted sites list for Internet Explorer while the other was not. Blizko is an online money transfer service. We have also seen that different monitoring threads from Table 1 are enabled from build to build. These minor changes suggest that the code is quickly modified and compiled to adapt to the needs of the operator for particular targets.\u003C\/p\u003E\n\u003Ch5\u003ECampaign Code and Compile Time Correlation\u003C\/h5\u003E\n\u003Cp\u003EIn some cases, there is a close proximity of the compile time of a CARBANAK sample to the month specified in a particular campaign code. Figure 8 shows some of the relationships that can be observed in our data set.\u003C\/p\u003E\n\u003Ctable width=\u0022181\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECampaign Code\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECompile Date\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAug\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7\/30\/15\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edec\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E12\/8\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejulyc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7\/2\/16\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejun\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5\/9\/15\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejune\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5\/25\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejune\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6\/7\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejunevnc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6\/20\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejuspam\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7\/13\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejuupd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7\/13\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Emay\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5\/20\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Emay\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5\/19\/15\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Endjun\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6\/7\/16\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESeP\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9\/12\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Espamaug\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8\/1\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002291\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Espaug\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8\/1\/14\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Campaign code to compile time relationships\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ERecent Updates\u003C\/h5\u003E\n\u003Cp\u003ERecently, 64 bit variants of the backdoor have been discovered. We shared details about such variants in a recent \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/05\/fin7-shim-databases-persistence.html\u0022\u003Eblog post\u003C\/a\u003E. Some of these variants are programmed to sleep until a configured activation date when they will become active.\u003C\/p\u003E\n\u003Ch4\u003EHistory\u003C\/h4\u003E\n\u003Ch5\u003EThe \u201cCarbanak Group\u201d\u003C\/h5\u003E\n\u003Cp\u003EMuch of the publicly released reporting surrounding the CARBANAK malware refers to a corresponding \u201cCarbanak Group\u201d, who appears to be behind the malicious activity associated with this data-stealing backdoor. FireEye iSIGHT Intelligence has tracked several separate overarching campaigns employing the CARBANAK tool and other associated backdoors, such as DRIFTPIN (aka \u003Ci\u003EToshliph\u003C\/i\u003E). With the data available at this time, it is unclear how interconnected these campaigns are \u2013 if they are all directly orchestrated by the same criminal group, or if these campaigns were perpetrated by loosely affiliated actors sharing malware and techniques.\u003C\/p\u003E\n\u003Ch5\u003EFIN7\u003C\/h5\u003E\n\u003Cp\u003EIn all Mandiant investigations to date where the CARBANAK backdoor has been discovered, the activity has been attributed to the FIN7 threat group. FIN7 has been extremely active against the U.S. restaurant and hospitality industries since mid-2015.\u003C\/p\u003E\n\u003Cp\u003EFIN7 uses CARBANAK as a post-exploitation tool in later phases of an intrusion to cement their foothold in a network and maintain access, frequently using the video command to monitor users and learn about the victim network, as well as the tunnel command to proxy connections into isolated portions of the victim environment. FIN7 has consistently utilized legally purchased code signing certificates to sign their CARBANAK payloads. Finally, FIN7 has leveraged several new techniques that we have not observed in other CARBANAK related activity.\u003C\/p\u003E\n\u003Cp\u003EWe have covered recent FIN7 activity in previous public blog posts:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/03\/fin7_spear_phishing.html\u0022\u003EFIN7 Spear Phishing Campaign Targets Personnel Involved in SEC Filings\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/fin7-phishing-lnk.html\u0022\u003EFIN7 Evolution and the Phishing LNK\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/05\/fin7-shim-databases-persistence.html\u0022\u003ETo SDB, Or Not To SDB: FIN7 Leveraging Shim Databases for Persistence\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe FireEye iSIGHT Intelligence MySIGHT Portal contains additional information on our investigations and observations into FIN7 activity.\u003C\/p\u003E\n\u003Ch5\u003EWidespread Bank Targeting Throughout the U.S., Middle East and Asia\u003C\/h5\u003E\n\u003Cp\u003EProofpoint initially reported on a \u003Ca href=\u0022https:\/\/www.proofpoint.com\/us\/threat-insight\/post\/carbanak-cybercrime-group-targets-executives-of-financial-organizations-in-middle-east\u0022\u003Ewidespread campaign targeting banks and financial organizations\u003C\/a\u003E throughout the U.S. and Middle East in early 2016. We identified several additional organizations in these regions, as well as in Southeast Asia and Southwest Asia being targeted by the same attackers.\u003C\/p\u003E\n\u003Cp\u003EThis cluster of activity persisted from late 2014 into early 2016. Most notably, the infrastructure utilized in this campaign overlapped with LAZIOK, NETWIRE and other malware targeting similar financial entities in these regions.\u003C\/p\u003E\n\u003Ch5\u003EDRIFTPIN\u003C\/h5\u003E\n\u003Cp\u003EDRIFTPIN (aka \u003Ci\u003ESpy.Agent.ORM\u003C\/i\u003E, and \u003Ci\u003EToshliph\u003C\/i\u003E) has been previously associated with CARBANAK in various campaigns. We have seen it deployed in initial spear phishing by FIN7 in the first half of 2016. \u0026nbsp;Also, in late 2015, \u003Ca href=\u0022https:\/\/www.welivesecurity.com\/2015\/09\/08\/carbanak-gang-is-back-and-packing-new-guns\/\u0022\u003EESET reported on CARBANAK associated attacks\u003C\/a\u003E, detailing a spear phishing campaign targeting Russian and Eastern European banks using DRIFTPIN as the malicious payload. Cyphort Labs also revealed that variants of DRIFTPIN associated with this cluster of activity had been deployed \u003Ca href=\u0022https:\/\/www.cyphort.com\/unicredit-compromised\/\u0022\u003Evia the RIG exploit kit placed on two compromised Ukrainian banks\u2019 websites.\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye iSIGHT Intelligence observed this wave of spear phishing aimed at a large array of targets, including U.S. financial institutions and companies associated with Bitcoin trading and mining activities. This cluster of activity continues to be active now to this day, targeting similar entities. Additional details on this latest activity are available on the FireEye iSIGHT Intelligence MySIGHT Portal.\u003C\/p\u003E\n\u003Ch5\u003EEarlier CARBANAK Activity\u003C\/h5\u003E\n\u003Cp\u003EIn December 2014, Group-IB and Fox-IT released a report about an organized criminal group using \u003Ca href=\u0022https:\/\/www.fox-it.com\/en\/files\/2014\/12\/Anunak_APT-against-financial-institutions2.pdf\u0022\u003Emalware called \u0026quot;Anunak\u0026quot;\u003C\/a\u003E that has targeted Eastern European banks, U.S. and European point-of-sale systems and other entities. \u003Ca href=\u0022https:\/\/securelist.com\/blog\/research\/68732\/the-great-bank-robbery-the-carbanak-apt\/\u0022\u003EKaspersky released a similar report\u003C\/a\u003E about the same group under the name \u0026quot;Carbanak\u0026quot; in February 2015. The name \u201cCarbanak\u201d was coined by Kaspersky in this report \u2013 the malware authors refer to the backdoor as Anunak.\u003C\/p\u003E\n\u003Cp\u003EThis activity was further linked to the 2014 exploitation of ATMs in Ukraine. Additionally, some of this early activity shares a similarity with current FIN7 operations \u2013 the use of Power Admin PAExec for lateral movement.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EThe details that can be extracted from CARBANAK provide us with a unique insight into the operational details behind this data-stealing malware. Several inferences can be made when looking at such data in bulk as we discussed above and are summarized as follows:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EBased upon the information we have observed, we believe that at least some of the operators of CARBANAK either have access to the source code directly with knowledge on how to modify it or have a close relationship to the developer(s).\u003C\/li\u003E\n\u003Cli\u003ESome of the operators may be compiling their own builds of the backdoor independently.\u003C\/li\u003E\n\u003Cli\u003EA build tool is likely being used by these attackers that allows the operator to configure details such as C2 addresses, C2 encryption keys, and a campaign code. This build tool encrypts the binary\u2019s strings with a fresh key for each build.\u003C\/li\u003E\n\u003Cli\u003EVarying campaign codes indicate that independent or loosely affiliated criminal actors are employing CARBANAK in a wide-range of intrusions that target a variety of industries but are especially directed at financial institutions across the globe, as well as the restaurant and hospitality sectors within the U.S.\u003C\/li\u003E\n\u003C\/ol\u003E\n",
        "jcr:lastModified": "Tue May 14 2019 17:15:29 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EIn this blog we take a closer look at the powerful, versatile backdoor known as CARBANAK (aka\u0026nbsp;\u003Ci\u003EAnunak\u003C\/i\u003E).\u003C\/p\u003E\n",
      "jcr:lastModified": "Fri Jun 09 2017 17:14:05 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Wed May 08 2019 18:31:20 GMT-0400",
      "imageRotate": "0"
    }
  }
}
