{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon Apr 03 2017 08:06:08 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Dissecting One of APT29\u2019s Fileless WMI and PowerShell Backdoors (POSHSPY)",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "b4324c76-dfa2-4f5f-8bdb-129ba874f7eb",
    "author": "Matthew Dunwoody ",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "9aeacd04-cc20-4181-9423-6cd5a6428bdf"
    ],
    "jcr:created": "Mon Apr 03 2017 08:08:01 GMT-0400",
    "cq:lastReplicated": "Mon Apr 03 2017 08:08:01 GMT-0400",
    "cq:lastModified": "Mon Apr 03 2017 08:07:43 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "9aeacd04-cc20-4181-9423-6cd5a6428bdf",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-tags:apt29",
      "fireeye-blog-authors:matthew-dunwoody",
      "fireeye-blog-tags:backdoor",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:powershell-attacks",
      "fireeye-blog-tags:apt",
      "fireeye-doctypes:blog",
      "fireeye-blog-threat-research:threat-research\/malware-research",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware"
    ],
    "jcr:uuid": "bd3b0c91-4ce1-4acf-8271-cb8da73e6c0b",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Apr 03 2017 08:00:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EMandiant has observed APT29 using a stealthy backdoor that we call POSHSPY. POSHSPY leverages two of the tools the group frequently uses: PowerShell and Windows Management Instrumentation (WMI). In the investigations Mandiant has conducted, it appeared that APT29 deployed POSHSPY as a secondary backdoor for use if they lost access to their primary backdoors.\u003C\/p\u003E\n\u003Cp\u003EPOSHSPY makes the most of using built-in Windows features \u2013 so-called \u201cliving off the land\u201d \u2013 to make an especially stealthy backdoor. POSHSPY\u0027s use of WMI to both store and persist the backdoor code makes it nearly invisible to anyone not familiar with the intricacies of WMI. Its use of a PowerShell payload means that only legitimate system processes are utilized and that the malicious code execution can only be identified through \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2016\/02\/greater_visibilityt.html\u0022\u003Eenhanced logging\u003C\/a\u003E or in memory. The backdoor\u0027s infrequent beaconing, traffic obfuscation, extensive encryption and use of geographically local, legitimate websites for command and control (C2) make identification of its network traffic difficult. Every aspect of POSHSPY is efficient and covert.\u003C\/p\u003E\n\u003Cp\u003EMandiant initially identified an early variant of the POSHSPY backdoor deployed as PowerShell scripts during an incident response engagement in 2015. Later in that same engagement, the attacker updated the deployment of the backdoor to use WMI for storage and persistence. Mandiant has since identified POSHSPY in several other environments compromised by APT29 over the past two years.\u003C\/p\u003E\n\u003Cp\u003EWe first discussed APT29\u2019s use of this backdoor as part of our \u201cNo Easy Breach\u201d talk. For additional details on how we first identified this backdoor, and the epic investigation it was part of, see the \u003Ca href=\u0022https:\/\/www.slideshare.net\/MatthewDunwoody1\/no-easy-breach-derby-con-2016\u0022\u003Eslides\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/www.youtube.com\/watch?v=Ldzr0bfGtHc\u0022\u003Epresentation\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EWindows Management Instrumentation\u003C\/h4\u003E\n\u003Cp\u003EWMI is an administrative framework that is built into every version of Windows since 2000. WMI provides many administrative capabilities on local and remote systems, including querying system information, starting and stopping processes, and setting conditional triggers. WMI can be accessed using a variety of tools, including the Windows WMI Command-line (wmic.exe), or through APIs accessible to programming and scripting languages such as PowerShell. Windows system WMI data is stored in the WMI common information model (CIM) repository, which consists of several files in the \u003Cspan class=\u0022code\u0022\u003ESystem32\\wbem\\Repository\u003C\/span\u003E directory.\u003C\/p\u003E\n\u003Cp\u003EWMI classes are the primary structure within WMI. WMI classes can contain methods (code) and properties (data). Users with sufficient system-level privileges can define custom classes or extend the functionality of the many default classes.\u003C\/p\u003E\n\u003Cp\u003EWMI permanent event subscriptions can be used to trigger actions when specified conditions are met. Attackers often use this functionality to persist the execution of backdoors at system start up. Subscriptions consist of three core WMI classes: a Filter, a Consumer, and a FilterToConsumerBinding. WMI Consumers specify an action to be performed, including executing a command, running a script, adding an entry to a log, or sending an email. WMI Filters define conditions that will trigger a Consumer, including system startup, the execution of a program, the passing of a specified time and many others. A FilterToConsumerBinding associates Consumers to Filters. Creating a WMI permanent event subscription requires administrative privileges on a system.\u003C\/p\u003E\n\u003Cp\u003EWe have observed APT29 use WMI to persist a backdoor and also store the PowerShell backdoor code. To store the code, APT29 created a new WMI class and added a text property to it in order to store a string value. APT29 wrote the encrypted and base64-encoded PowerShell backdoor code into that property.\u003C\/p\u003E\n\u003Cp\u003EAPT29 then created a WMI event subscription in order to execute the backdoor. The subscription was configured to run a PowerShell command that read, decrypted, and executed the backdoor code directly from the new WMI property. This allowed them to install a persistent backdoor without leaving any artifacts on the system\u2019s hard drive, outside of the WMI repository. This \u201cfileless\u201d backdoor methodology made the identification of the backdoor much more difficult using standard host analysis techniques.\u003C\/p\u003E\n\u003Ch4\u003EPOSHSPY WMI Component\u003C\/h4\u003E\n\u003Cp\u003EThe WMI component of the POSHSPY backdoor leverages a Filter to execute the PowerShell component of the backdoor on a regular basis. In one instance, APT29 created a Filter named \u003Cspan class=\u0022code\u0022\u003EBfeOnServiceStartTypeChange\u003C\/span\u003E (Figure 1), which they configured to execute every Monday, Tuesday, Thursday, Friday, and Saturday at 11:33 am local time.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: \u201cBfeOnServiceStartTypeChange\u201d WMI Query Language (WQL) filter condition\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cspan class=\u0022code\u0022\u003EBfeOnServiceStartTypeChange\u003C\/span\u003E Filter was bound to the CommandLineEventConsumer \u003Cspan class=\u0022code\u0022\u003EWindowsParentalControlsMigration\u003C\/span\u003E. The \u003Cspan class=\u0022code\u0022\u003EWindowsParentalControlsMigration\u003C\/span\u003E consumer was configured to silently execute a base64-encoded PowerShell command. Upon execution, this command extracted, decrypted, and executed the PowerShell backdoor payload stored in the \u003Cspan class=\u0022code\u0022\u003EHiveUploadTask\u003C\/span\u003E text property of the \u003Cspan class=\u0022code\u0022\u003ERacTask\u003C\/span\u003E class. The PowerShell command contained the payload storage location and encryption keys. Figure 2 displays the command, called the \u201cCommandLineTemplate\u201d, executed by the \u003Cspan class=\u0022code\u0022\u003EWindowsParentalControlsMigration\u003C\/span\u003E consumer.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: WindowsParentalControlsMigration CommandLineTemplate\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 3 contains the decoded PowerShell command from the \u201cCommandLineTemplate.\u201d\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig3c.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig3d.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Decoded CommandLineTemplate PowerShell code\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPOSHSPY PowerShell Component\u003C\/h4\u003E\n\u003Cp\u003EThe full code for a POSHSPY sample is available \u003Ca href=\u0022https:\/\/github.com\/matthewdunwoody\/POSHSPY\/blob\/master\/poshspy_redacted.txt\u0022\u003Ehere\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EThe POSHSPY backdoor is designed to download and execute additional PowerShell code and Windows binaries. The backdoor contains several notable capabilities, including:\u003C\/p\u003E\n\u003Cp\u003E1. Downloading and executing PowerShell code as an EncodedCommand\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig4.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E2. Writing executables to a randomly-selected directory under \u003Cspan class=\u0022code\u0022\u003EProgram Files\u003C\/span\u003E, and naming the EXE to match the chosen directory name, or, if that fails, writing the executable to a system-generated temporary file name, using the EXE extension\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig5.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E3. Modifying the Standard Information timestamps (created, modified, accessed) of every downloaded executable to match a randomly selected file from the System32 directory that was created prior to 2013\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig6.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E4. Encrypting communications using AES and RSA public key cryptography\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig7.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E5. Deriving C2 URLs from a Domain Generation Algorithm (DGA) using lists of domain names, subdomains, top-level domains (TLDs), Uniform Resource Identifiers (URIs), file names, and file extensions\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig8.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E6. Using a custom User Agent string or the system\u0027s User Agent string derived from urlmon.dll\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig9.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E7. Using either custom cookie names and values or randomly-generated cookie names and values for each network connection\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig10.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E8. Uploading data in 2048-byte chunks\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig11.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E9. Appending a file signature header to all encrypted data, prior to upload or download, by randomly selecting from the file types:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EICO\u003C\/li\u003E\n\u003Cli\u003EGIF\u003C\/li\u003E\n\u003Cli\u003EJPG\u003C\/li\u003E\n\u003Cli\u003EPNG\u003C\/li\u003E\n\u003Cli\u003EMP3\u003C\/li\u003E\n\u003Cli\u003EBMP\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/POSHSPY\/Fig12.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https:\/\/github.com\/matthewdunwoody\/POSHSPY\/blob\/master\/poshspy_redacted.txt\u0022\u003Esample\u003C\/a\u003E in this example used 11 legitimate domains owned by an organization located near the victim. When combined with the other options in the DGA, 550 unique C2 URLs could be generated. Infrequent beaconing, use of DGA and compromised infrastructure for C2, and appended file headers used to bypass content inspection made this backdoor difficult to identify using typical network monitoring techniques.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EPOSHSPY is an excellent example of the skill and craftiness of APT29. By \u201cliving off the land\u201d they were able to make an extremely discrete backdoor that they can deploy alongside their more conventional and noisier backdoor families, in order to help ensure persistence even after remediation. As stealthy as POSHSPY can be, it comes to light quickly if you know where to look. Enabling and monitoring \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2016\/02\/greater_visibilityt.html\u0022\u003Eenhanced PowerShell logging\u003C\/a\u003E can capture malicious code as it executes and legitimate WMI persistence is so rare that malicious persistence quickly stands out when enumerating it across an environment. This is one of several sneaky backdoor families that we have identified, including an off-the-shelf \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/03\/apt29_domain_frontin.html\u0022\u003Edomain fronting backdoor\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2015\/07\/hammertoss_stealthy.html\u0022\u003EHAMMERTOSS\u003C\/a\u003E. When responding to an APT29 breach, it is vital to increase visibility, fully scope the incident before responding and thoroughly analyze accessed systems that don\u0027t contain known malware.\u003C\/p\u003E\n\u003Ch4\u003EAdditional Reading\u003C\/h4\u003E\n\u003Cp\u003EThis \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2016\/02\/greater_visibilityt.html\u0022\u003EPowerShell logging blog post\u003C\/a\u003E contains more information on improving PowerShell visibility in your environment.\u003C\/p\u003E\n\u003Cp\u003EThis \u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/global\/en\/current-threats\/pdfs\/wp-windows-management-instrumentation.pdf\u0022\u003Eexcellent whitepaper\u003C\/a\u003E by William Ballenthin, Matt Graeber and Claudiu Teodorescu contains additional information on WMI offense, defense and forensics.\u003C\/p\u003E\n\u003Cp\u003EThis \u003Ca href=\u0022https:\/\/files.sans.org\/summit\/Digital_Forensics_and_Incident_Response_Summit_2015\/PDFs\/TheresSomethingAboutWMIDevonKerr.pdf\u0022\u003Epresentation\u003C\/a\u003E by Christopher Glyer and Devon Kerr contains additional information on attacker use of WMI in past Mandiant investigations.\u003C\/p\u003E\n\u003Cp\u003EThe FireEye FLARE team released a \u003Ca href=\u0022https:\/\/github.com\/fireeye\/flare-wmi\/tree\/master\/python-cim\u0022\u003EWMI repository-parsing tool\u003C\/a\u003E that allows investigators to extract embedded data from the WMI repository and identify WMI persistence.\u0026nbsp;\u003C\/p\u003E\n",
        "jcr:lastModified": "Fri Mar 31 2017 16:19:42 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Mon Apr 03 2017 08:07:43 GMT-0400",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EMandiant has observed APT29 using a stealthy backdoor that we call POSHSPY, which leverages two of the tools the group frequently uses: PowerShell and Windows Management Instrumentation.\u003C\/p\u003E\n",
      "jcr:lastModified": "Fri Mar 31 2017 16:21:17 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
