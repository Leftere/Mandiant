{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Thu Aug 29 2019 22:00:11 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Definitive Dossier of Devilish Debug Details \u2013 Part One: PDB Paths and Malware",
    "jcr:versionHistory": "bc3f7ccb-abf0-42f8-a683-ae6a82cde91b",
    "author": "Steve Miller",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "02ab8efc-22ec-4f3a-9ba2-dd759fffb81d"
    ],
    "jcr:created": "Thu Aug 29 2019 22:00:11 GMT+0000",
    "cq:lastModified": "Thu Aug 29 2019 21:40:13 GMT+0000",
    "jcr:baseVersion": "02ab8efc-22ec-4f3a-9ba2-dd759fffb81d",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-steve-miller",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:pdb"
    ],
    "jcr:uuid": "a0039687-1d24-4914-9b65-578c168c7aee",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Aug 29 2019 18:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EHave you ever wondered what goes through the mind of a malware author? How they build their tools? How they organize their development projects? What kind of computers and software they use? We took a stab and answering some of those questions by exploring malware debug information.\u003C\/p\u003E\n\u003Cp\u003EWe find that malware developers give descriptive names to their folders and code projects, often describing the capabilities of the malware in development. These descriptive names thus show up in a \u003Ci\u003EPDB path\u003C\/i\u003E when a malware project is compiled with symbol debugging information. Everyone loves an origin story, and debugging information gives us insight into the malware development environment, a small, but important keyhole into where and how a piece of malware was born. We can use our newfound insight to detect malicious activity based in part on PDB paths and other debug details.\u003C\/p\u003E\n\u003Cp\u003EWelcome to part one of a multi-part, \u003Ca href=\u0022https:\/\/twitter.com\/search?q=%23dailypdb\u0022\u003Etweet-inspired\u003C\/a\u003E series about PDB paths, their relation to malware, and how they may be useful in both defensive and offensive operations.\u003C\/p\u003E\n\u003Ch4\u003EHuman-Computer Conventions\u003C\/h4\u003E\n\u003Cp\u003EDigital storage systems have revolutionized our world but in order to make use of our stored data and retrieve it in an efficient manner, we must organize it sensibly. Users structure directories carefully and give files and folders unique and descriptive names. Often users name folders and files based on their content. Computers force users to label and annotate their data based on the data type, role, and purpose. This human-computer convention means that most digital content has some descriptive surface area, or descriptive \u201cfeatures\u201d that are present in many files, including malware files.\u003C\/p\u003E\n\u003Cp\u003EFireEye approaches detection and hunting from many angles, but on FireEye\u2019s Advanced Practices team, we often like to flex on \u201cweak signals.\u201d We like to search for features of malware that are not evil in isolation but uncommon or unique enough to be useful. We create conditional rules that when met are \u201cweak signals\u201d telling us that a subset of data, such as a file object or a process, has some odd or novel features. These features are often incidental outcomes of adversary methods, or modus operandi, that each represent deliberate choices made by malware developers or intrusion operators. Not all these features were meant to be in there, and they were certainly not intended for defenders to notice. This is especially true for PDB paths, which can be described as an outcome of the compilation process, a toolmark left in malware that describes the development environment.\u003C\/p\u003E\n\u003Ch4\u003EPDBs\u003C\/h4\u003E\n\u003Cp\u003EA program database (PDB) file, often referred to as a \u201csymbol file,\u201d is generated upon compilation to store debugging information about an individual build of a program. A PDB may store symbols, addresses, names of functions and resources and other information that may assist with debugging the program to find the exact source of an exception or error.\u003C\/p\u003E\n\u003Cp\u003EMalware is software, and malware developers are software developers. Like any software developers, malware authors often have to debug their code and sometimes end up creating PDBs as part of their development process. If they do not spend time debugging their malware, they \u003Ca href=\u0022https:\/\/twitter.com\/stvemillertime\/status\/1118334333402501120\u0022\u003Erisk their malware not functioning correctly\u003C\/a\u003E on victim hosts, or not being able to successfully communicate with their malware remotely.\u003C\/p\u003E\n\u003Ch4\u003EHow PDB Paths are Made (the birds and the PDBs?)\u003C\/h4\u003E\n\u003Cp\u003EBut how are PDBs created and connected to programs? Let\u2019s examine the formation of one PDB path through the eyes of a malware developer and blogger, the soon-to-be-infamous \u201csmiller.\u201d\u003C\/p\u003E\n\u003Cp\u003ESmiller has a lot of programming projects and organizes them in an aptly labeled folder structure on his computer. This project is for a shellcode loader embedded in an HTML Application (HTA) file, and the developer stores it quite logically in the folder:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\smiller\\projects\\super_evil_stuff\\shellcode\\\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: The simple \u201cTest\u201d project code file \u201cProgram.cs\u201d which embeds a piece of shellcode and a launcher executable within an HTML Application (HTA) file\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: The malicious Visual Studio solution HtaDotnet and corresponding \u201cTest\u201d project folder as seen through Windows Explorer. The names of the folders and files are suggestive of their functionalities\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe malware author then compiles their \u201cTest\u201d project Visual Studio in a default \u201cDebug\u201d configuration (Figure 3) and writes out Test.exe and Test.pdb to a subfolder (Figure 4).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture3.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: The Visual Studio output of a default compiling configuration\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Test.exe and Test.pdb are written to a default subfolder of the code project folder\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the Test.pdb file (Figure 5) there are references to the original path for the source code files along with other binary information for use in debugging.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture5.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Test.pdb contains binary debug information and references to the original source code files for use in debugging\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EDuring the compilation, the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/cpp\/build\/reference\/linker-options?view=vs-2019\u0022\u003E\u003Ci\u003Elinker\u003C\/i\u003E\u003C\/a\u003E program associates the PDB file with the built executable by adding an entry into the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/api\/winnt\/ns-winnt-image_debug_directory\u0022\u003EIMAGE_DEBUG_DIRECTORY\u003C\/a\u003E specifying the type of the debug information. In this case, the debug type is CodeView and so the PDB path is embedded under IMAGE_DEBUG_TYPE_CODEVIEW portion of the file. This enables a debugger to locate the correct PDB file Test.pdb while debugging Test.exe.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Test.exe as shown in the PEview utility, which easily parses out the PDB path from the IMAGE_DEBUG_TYPE_CODEVIEW section of the executable file\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPDB Path in CodeView Debug Information\u003C\/h4\u003E\n\u003Ch5\u003ECodeView Structure\u003C\/h5\u003E\n\u003Cp\u003EThe exact format of the debug information may vary depending on compiler and linker and the modernity of one\u2019s software development tools. CodeView debug information is stored under \u003Ca href=\u0022https:\/\/github.com\/dotnet\/corefx\/blob\/master\/src\/System.Reflection.Metadata\/specs\/PE-COFF.md\u0022\u003EIMAGE_DEBUG_TYPE_CODEVIEW in the following structure:\u003C\/a\u003E\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022511\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022102\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EType\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022409\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EDescription\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022102\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDWORD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022409\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026quot;RSDS\u0026quot; header\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022102\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGUID\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022409\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E16-byte Globally Unique Identifier\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022102\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDWORD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022409\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026quot;age\u0026quot; (incrementing # of revisions)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022102\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBYTE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022409\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPDB path, null terminated\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Structure of CodeView debug directory information\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EFull Versus Partial PDB Path\u003C\/h5\u003E\n\u003Cp\u003EThere are generally two buckets of CodeView PDB paths, those that are \u003Ci\u003Efully qualified\u003C\/i\u003E directory paths and those that are \u003Ci\u003Epartially qualified\u003C\/i\u003E, that specify the name of the PDB file only. In both cases, the name of the PDB file with the .pdb extension is included to ensure the debugger locates the correct PDB for the program.\u003C\/p\u003E\n\u003Cp\u003EA \u003Ci\u003Epartially qualified\u003C\/i\u003E PDB path would list only the PDB file name, such as:\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cspan class=\u0022code\u0022\u003ETest.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EA \u003Ci\u003Efully qualified\u003C\/i\u003E PDB path usually begins with a volume drive letter and a directory path to the PDB file name such as:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\smiller\\projects\\super_evil_stuff\\shellcode\\Test\\obj\\Debug\\Test.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ETypically, native Windows executables use a \u003Ci\u003Epartially qualified\u003C\/i\u003E PDB path because many of the debug PDB files are publicly available on the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows-hardware\/drivers\/debugger\/microsoft-public-symbols\u0022\u003EMicrosoft public symbol server\u003C\/a\u003E, so the fully qualified path is unnecessary in the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows-hardware\/drivers\/debugger\/symbol-path\u0022\u003Esymbol path\u003C\/a\u003E (the PDB path). For the purposes of this research, we will be mostly looking at fully qualified PDB paths.\u003C\/p\u003E\n\u003Ch4\u003ESurveying PDB Paths in Malware\u003C\/h4\u003E\n\u003Cp\u003EIn \u003Ca href=\u0022https:\/\/securelist.com\/operation-shadowhammer-a-high-profile-supply-chain-attack\/90380\/\u0022\u003EOperation Shadowhammer\u003C\/a\u003E, which has a \u003Ca href=\u0022https:\/\/content.fireeye.com\/apt-41\/rpt-apt41\u0022\u003Emyriad of connections to APT41\u003C\/a\u003E, one sample had a simple, yet descriptive PDB path: \u201c\u003Cspan class=\u0022code\u0022\u003ED:\\C++\\AsusShellCode\\Release\\AsusShellCode.pdb\u003C\/span\u003E\u201d\u003C\/p\u003E\n\u003Cp\u003EThe naming makes perfect sense. The malware was intended to masquerade as Asus Corporation software, and the role of the malware was shellcode. The malware developer named the project after the function and role of the malware itself.\u003C\/p\u003E\n\u003Cp\u003EIf we accept that the nature of digital data forces developers into these naming conventions, we figured that these \u003Ci\u003Econventions\u003C\/i\u003E would hold true across other threat actors, malware families, and intrusion operations. FireEye\u2019s Advanced Practices team loves to take seemingly innocuous features of an intrusion set and determine what about these things is good, bad and ugly. What is normal, and what is abnormal? What is globally prevalent and what is rare? What are malware authors doing that is different from what non-malware developers are doing? What assumptions can we make and measure?\u003C\/p\u003E\n\u003Cp\u003ELetting our curiosity take the wheel, we adapted the CodeView debug information structure into a regular expression (Figure 8) and developed Yara rules (Figure 9) to survey our data sets. This helped us identify commonalities and enabled us to see which threat actors and malware families may be \u201cdetectable\u201d based only on features within PDB path strings.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture8.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: A Perl-compatible regular expression (PCRE) adaptation of the PDB7 debug information in an executable to include a specific keyword\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture9.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Template Yara rule to search for executables with PDB files matching a keyword\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPDB Path Showcase: Malware Naming Conventions\u003C\/h4\u003E\n\u003Cp\u003EWe surveyed 10+ million samples in our incident response and malware corpus, and we found plenty of common PDB path keywords that seemed to transcend different sources, victims, affected regions, impacted industries, and actor motivations. To help articulate the broad reach of malware developer commonalities, we detail a handful of the stronger keywords along with example PDB paths, with represented malware families and threat groups where at least one sample has the applicable keyword.\u003C\/p\u003E\n\u003Cp\u003EPlease note that the example paths and represented malware families and groups are a selection from the total data set, and not necessarily correlated, clustered or otherwise related to each other. This is intended to illustrate the wide presence of PDB paths with keywords and how malware developers, irrespective of origin, targets and motivations often end up using some of the same words in their naming. We believe that this commonality increases the surface area of malware and introduces new opportunities for detection and hunting.\u003C\/p\u003E\n\u003Ch5\u003EPDB Path Keyword Prevalence\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022612\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EKeyword\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EFamilies and Groups Observed\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EExample PDB Path\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eanti\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERUNBACK, HANDSTAMP, LOKIBOT, NETWIRE, DARKMOON, PHOTO, RAWHIDE, DUCKFAT, HIGHNOON, DEEPOCEAN, SOGU, CANNONFODDER\u003Cbr\u003E\nAPT10, APT24, APT41, UNC589, UNC824, UNC969, UNC765\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EH:\\RbDoor\\Anti_winmm\\AppInit\\AppInit\\Release\\AppInit.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eattack\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMINIASP, SANNY, DIRTCHEAP, ORCUSRAT\u003Cbr\u003E\nAPT1, UNC776, UNC251. UNC1131\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EE:\\C\\Attack\\mini_asp-0615\\attack\\MiniAsp3\\Release\\MiniAsp.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebackdoor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPACMAN, SOUNDWAVE, PHOTO, WINERACK, DUALGUN\u003C\/p\u003E\n\u003Cp\u003EAPT41, APT34, APT37, UNC52, UNC1131, APT40\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EY:\\Hack\\backdoor\\3-exe-attack\\temp\\UAC_Elevated\\win32\\UAC_Elevated.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebind\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESCREENBIND, SEEGAP, CABLECAR, UPDATESEE, SEEDOOR, TURNEDUP, CABROCK, YABROD, FOXHOLE\u003C\/p\u003E\n\u003Cp\u003EUNC373, UNC510, UNC875, APT36, APT33, APT5, UNC822\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Documents and Settings\\ss\\\u684c\u9762\\tls\\scr\\bind\\bind\\Release\\bind.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebypass\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOSHC2, FIRESHADOW, FLOWERPOT, RYUK, HAYMAKER, UPCONTROL, PHOTO, BEACON, SOGU\u003C\/p\u003E\n\u003Cp\u003EAPT10, APT34, APT21, UNC1289, UNC1450\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Documents and Settings\\Administrator\\\u684c\u9762\\BypassUAC.VS2010\\Release\\Go.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edownloader\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESPICYBEAN, GOOSEDOWN, ANTFARM, BUGJUICE, ENFAL, SOURFACE, KASPER, ELMER, TWOBALL, KIBBLEBITS\u003C\/p\u003E\n\u003Cp\u003EAPT28, UNC1354, UNC1077, UNC27, UNC653, UNC1180, UNC1031\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EZ:\\projects\\vs 2012\\Inst DWN and DWN XP\\downloader_dll_http_mtfs\\Release\\downloader_dll_http_mtfs.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edropper\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECITADEL, FIDDLELOG, SWIFTKICK, KAYSLICE, FORMBOOK, EMOTET, SANNY, FIDDLEWOOD, DARKNEURON, URSNIF, RUNOFF\u003C\/p\u003E\n\u003Cp\u003EUNC776, UNC1095, APT29, APT36, UNC964, UNC1437, UNC849\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\Task\\DDE Attack\\Dropper_Original\\Release\\Dropper.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eexploit\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETRICKBOT, RUNBACK, PUNCHOUT, QANAT, OZONERAT\u003C\/p\u003E\n\u003Cp\u003EUNC1030, APT39, APT34, FIN6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ew:\\modules\\exploits\\littletools\\agent_wrapper\\release\\\u003Cbr\u003E\n 12345678901234567890123456789012345678\\wrapper3.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efake\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFIRESHADOW\u003C\/p\u003E\n\u003Cp\u003EUNC1172, APT39, UNC822\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\Work\\Project\\VS\\house\\Apple\\Apple_20180115\\Release\\FakeRun.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efuck\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETRICKBOT, CEREAL, KRYPTONITE, SUPERMAN\u003C\/p\u003E\n\u003Cp\u003EAPT17, UNC208, UNC276\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EE:\\CODE\\\u5de5\u7a0b\u6587\u4ef6\\20110505_LEVNOhard\\CODE\\AnyRat\\\u003Cb\u003EFuck\u003C\/b\u003EAll\u0027sUI\\bin\\FuckAll.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehack\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPHOTO, KILLDEVIL, NETWIRE, PACMAN, BADSIGN, TRESOCHO, BADGUEST, GH0ST, VIPSHELL\u003C\/p\u003E\n\u003Cp\u003EUNC1152, APT40, UNC78, UNC874, UNC52, UNC502, APT33, APT8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Users\\Alienware.DESKTOP-MKL3QDN\\Documents\\Hacker\\memorygrabber - ID\\memorygrabber\\obj\\x86\\Debug\\vshost.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehide\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFRESHAIR, DIRTYWORD, GH0ST, DARKMOON, FIELDGOAL, RAWHIDE, DLLDOOR, TRICKBOT, 008S, JAMBOX, SOGU, CANDYSHELL\u003C\/p\u003E\n\u003Cp\u003EAPT26, APT40, UNC213, APT26, UNC44, UNC53, UNC282\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ec:\\winddk\\6001.18002\\work\\\u003Cb\u003Ehide\u003C\/b\u003Eport\\i386\\HidePort.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehook\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGEARSHIFT, METASTAGE, FASTPOS, HANDSTAMP, FON, CLASSFON, WATERFAIRY, RATVERMIN\u003C\/p\u003E\n\u003Cp\u003EUNC842, UNC1197, UNC1040, UNC969\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\\u0e23\u0e32\u0e22\u0e07\u0e32\u0e19\\C++ \u0026amp; D3D \u0026amp; Hook \u0026amp; VB.NET \u0026amp; PROJECT\\Visual Studio 2010\\CodeMaster OnlyTh\\Inject_Win32_2\\Inject Win32\\Inject Win32\\Release\\OLT_PBFREE.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Einject\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESKNET, KOADIC, ISMAGENT, FULLTRUNK, ZZINJECT, ENFAL, RANSACK, GEARSHIFT, LOCKLOAD, WHIPSNAP, BEACON, CABROCK, HIGHNOON, DETECT, THREESNEAK, FOXHOLE\u003C\/p\u003E\n\u003Cp\u003EUNC606, APT10, APT34, APT41, UNC373, APT31, APT34, APT19, APT1, UNC82, UNC1168, UNC1149, UNC575\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EE:\\0xFFDebug\\My Source\\HashDump\\Release\\injectLsa.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Einstall\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFIRESHADOW, SCRAPMINT, BRIGHTCOMB, WINERACK, SLUDGENUDGE, ANCHOR, EXCHAIN, KIBBLEBITS, ENFAL, DANCEPARTY, SLIMEGRIME, DRABCUBE, EXCHAIN, DIMWIT, THREESNEAK, GOOGONE, STEW, LOWLIGHT, QUASIFOUR, CANNONFODDER, EASYCHAIR, ONETOFOUR, DEEPOCEAN, BRIGHTCREST, LUMBERJACK, EVILTOSS, BRIGHTCYAN, PEKINGDUCK, SIDEVIEW, BOSSNAIL\u003C\/p\u003E\n\u003Cp\u003EUNC869, UNC385, UNC228, APT5, UNC229, APT26, APT37, UNC432, APT18, UNC27, APT6, UNC1172, UNC593, UNC451, UNC875, UNC53\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ei:\\LIE_SHOU\\URL_CURUN-A\\installer\\Release\\jet.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ekeylog\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELIMITLESS, ZZDROP, WAVEKEY, FIDDLEKEYS, SKIDHOOK, HAWKEYE, BEACON, DIZZYLOG, SOUNDWAVE\u003C\/p\u003E\n\u003Cp\u003EAPT37, UNC82, UNC1095, APT1, APT40\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\TASK\\ProgamsByMe(2015.1~)\\MyWork\\Relative Backdoor\\KeyLogger_ScreenCap_Manager\\Release\\SoundRec.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Epayload\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOSHC2, SHAKTI, LIMITLESS, RANSACK, CATRUNNER, BREAKDANCE, DARKMOON, METERPRETER, DHARMA, GAMEFISH, RAWHIDE, LIGHTPOKE\u003C\/p\u003E\n\u003Cp\u003EUNC915, UNC632, UNC1149, APT28, UNC878\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Users\\WIN-2-ViHKwdGJ574H\\Desktop\\NSA\\Payloads\\windows service cpp\\Release\\CppWindowsService.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eshell\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESOGU, RANSACK, CARBANAK, BLACKCOFFEE, SIDEWINDER, PHOTO, SHIMSHINE, PILLOWMINT, POSHC2, PI, METASTAGE, GH0ST, VIPSHELL, GAUSS, DRABCUBE, FINDLOCK, NEDDYSHELL, MONOPOD, FIREPIPE, URSNIF, KAYSLICE, DEEPOCEAN, EIGHTONE, DAYJOB, EXCALIBUR, NICECATCH\u003C\/p\u003E\n\u003Cp\u003EUNC48, UNC1225, APT17, UNC1149, APT35, UNC251, UNC521, UNC8, UNC849, UNC1428, UNC1374, UNC53, UNC1215, UNC964, UNC1217, APT3, UNC671, UNC757, UNC753, APT10, APT34, UNC229, APT18, APT9, UNC124, UNC1559\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EE:\\windows\\dropperNew\\Debug\\testShellcode.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Esleep\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EURSNIF, CARBANAK, PILLOWMINT, SHIMSHINE, ICEDID\u003C\/p\u003E\n\u003Cp\u003EFIN7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EO:\\misc_src\\release_priv_aut_v2.2_sleep_DATE\\my\\\u003Cbr\u003E\n src\\sdb_test_dll\\x64\\Release\\sdb_test.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Espy\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDUSTYSKY, OFFTRACK, SCRAPMINT, FINSPY, LOCKLOAD, WINDOLLAR\u003C\/p\u003E\n\u003Cp\u003EFIN7, UNC583, UNC822, UNC1120\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EG:\\development\\Winspy\\ntsvc32-93-01-05\\x64\\Release\\ntsvcst32.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002278\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etrojan\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EENFAL, IMMINENTMONITOR, MSRIP, GH0ST, LITRECOLA, DIMWIT\u003C\/p\u003E\n\u003Cp\u003EUNC1373, UNC366, APT19, UNC1352, UNC27, APT1, UNC981, UNC581, UNC1559\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ee:\\work\\projects\\trojan\\client\\dll\\i386\\Client.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: A selection of common keywords in PDB paths with groups and malware families observed and examples\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPDB Path Showcase: Suspicious Developer Environment Terms\u003C\/h4\u003E\n\u003Cp\u003EThe keywords that are typically used to describe malware are strong enough to raise red flags, but there are other common terms or features in PDB paths that may signal that an executable is compiled in a non-enterprise setting. For example, any PDB path containing \u201cUsers\u201d directory can tell you that the executable was likely compiled on Windows Vista\/7\/10 and likely does not represent an \u201cofficial\u201d or \u201ccommercial\u201d development environment. The term \u201cUsers\u201d is much weaker or lower in fidelity than \u201cshellcode\u201d but as we demonstrate below, these terms are indeed present in lots of malware and can be used for weak detection signals.\u003C\/p\u003E\n\u003Ch5\u003EPDB Path Term Prevalence\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003ETerm\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EFamilies and Groups Observed\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EExample PDB Path\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUsers\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EABBEYROAD, AGENTTESLA, ANTFARM, AURORA, BEACON, BLACKDOG, BLACKREMOTE, BLACKSHADESRAT, BREAKDANCE, BROKEYOLK, BUSYFIB, CAMUBOT, CARDCAM, CATNAP, CHILDSPLAY, CITADEL, CROSSWALK, CURVEBALL, DARKCOMET, DARKMOON, DESERTFALCON, DESERTKATZ, DISPKILL, DIZZYLOG, EMOTET, FIDDLEWOOD, FIVERINGS, FLATTOP, FLUXXY, FOOTMOUSE, FORMBOOK, GOLDENCAT, GROK, GZIPDE, HAWKEYE, HIDDENTEAR, HIGHNOTE, HKDOOR, ICEDID, ICEFOG, ISMAGENT, KASPER, KOADIC, LUKEWARM, LUXNET, MOONRAT, NANOCORE, NETGRAIL, NJRAT, NUTSHELL, ONETOFOUR, ORCUSRAT, POISONIVY, POSHC2, QUASARRAT, QUICKHOARD, RADMIN, RANSACK, RAWHIDE, REMCOS, REVENGERAT, RYUK, SANDPIPE, SANDTRAP, SCREENTIME, SEEDOOR, SHADOWTECH, SILENTBYTES, SKIDHOOK, SLIMCAT, SLOWROLL, SOGU, SOREGUT, SOURCANDLE, TREASUREHUNT, TRENDCLOUD, TRESOCHO, TRICKBOT, TRIK, TROCHILUS, TURNEDUP, TWINSERVE, UPCONTROL, UPDATESEE, URSNIF, WATERFAIRY, XHUNTER, XRAT, ZEUS\u003C\/p\u003E\n\u003Cp\u003EAPT5, APT10, APT17, APT33, APT34, APT35, APT36, APT37, APT39, APT40, APT41, FIN6, UNC284, UNC347, UNC373, UNC432, UNC632, UNC718, UNC757, UNC791, UNC824, UNC875, UNC1065, UNC1124, UNC1149, UNC1152, UNC1197, UNC1289, UNC1295, UNC1340, UNC1352, UNC1354, UNC1374, UNC1406, UNC1450, UNC1486, UNC1507, UNC1516, UNC1534, UNC1545, UNC1562\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Users\\Yousef\\Desktop\\MergeFiles\\Loader v0\\Loader\\obj\\Release\\Loader.pdb\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EConsoleApplication\u003C\/p\u003E\n\u003Cp\u003EWindowsApplication\u003C\/p\u003E\n\u003Cp\u003EWindowsFormsApplication\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E(Visual Studio default project names)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECROSSWALK, DESERTKATZ, DIZZYLOG, FIREPIPE, HIGHPRIEST, HOUDINI, HTRAN, KICKBACK, LUKEWARM, MOONRAT, NIGHTOWL, NJRAT, ORCUSRAT, REDZONE, REVENGERAT, RYUK, SEEDOOR, SLOAD, SOGU, TRICKBOT, TRICKSHOW\u003C\/p\u003E\n\u003Cp\u003EAPT1, APT34, APT36, FIN6, UNC251, UNC729, UNC1078, UNC1147, UNC1172, UNC1267, UNC1277, UNC1289, UNC1295, UNC1340, UNC1470, UNC1507\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\Projects\\ByPassAV\\ConsoleApplication1\\\u003Cbr\u003E\n Release\\ConsoleApplication1.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENew Folder\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHOMEUNIX, KASPER, MOONRAT, NANOCORE, NETWIRE, OZONERAT, POISONIVY, REMCOS, SKIDHOOK, TRICKBOT, TURNEDUP, URLZONE\u003C\/p\u003E\n\u003Cp\u003EAPT18, APT33, APT36, UNC53, UNC74, UNC672, UNC718, UNC1030, UNC1289, UNC1340, UNC1559\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ec:\\Users\\USA\\Documents\\Visual Studio 2008\\Projects\\New folder (2)\\kasper\\Release\\kasper.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECopy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDESERTFALCON, KASPER, NJRAT, RYUK, SOGU\u003C\/p\u003E\n\u003Cp\u003EUNC124, UNC718, UNC757, UNC1065, UNC1215, UNC1225, UNC1289\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\dll_Mc2.1mc\\2.4\\2.4.2 xor\\zhu\\dll_Mc - Copy\\Release\\shellcode.pdb\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022146\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDesktop\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022208\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAGENTTESLA, AVEO, BEACON, BUSYFIB, CHILDSPLAY, COATHOOK, DESERTKATZ, FIVERINGS, FLATTOP, FORMBOOK, GH0ST, GOLDENCAT, HIGHNOTE, HTRAN, IMMINENTMONITOR, KASPER, KOADIC, LUXNET, MOONRAT, NANOCORE, NETWIRE, NUTSHELL, ORCUSRAT, RANSACK, RUNBACK, SEEDOOR, SKIDHOOK, SLIMCAT, SLOWROLL, SOGU, TIERNULL, TINYNUKE, TRICKBOT, TRIK, TROCHILUS, TURNEDUP, UPDATESEE, WASHBOARD, WATERFAIRY, XRAT\u003C\/p\u003E\n\u003Cp\u003EAPT5, APT17, APT26, APT33, APT34, APT35, APT36, APT41, UNC53, UNC276, UNC308, UNC373, UNC534, UNC551, UNC572, UNC672, UNC718, UNC757, UNC791, UNC824, UNC875, UNC1124, UNC1149, UNC1197, UNC1352\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022270\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Users\\Develop_MM\\Desktop\\sc_loader\\\u003Cbr\u003E\n Release\\sc_loader.pdb\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: A selection of common terms in PDB paths with groups and malware families observed and examples\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPDB Path Showcase: Exploring Anomalies\u003C\/h4\u003E\n\u003Cp\u003EOutside of keywords and terms, we discovered on a few uncommon (to us) features that may be interesting for future research and detection opportunities.\u003C\/p\u003E\n\u003Ch5\u003ENon-ASCII Characters\u003C\/h5\u003E\n\u003Cp\u003EPDB paths with any non-ASCII characters have a high ratio of malware to non-malware in our datasets. The strength of this signal is only because of a data bias in our malware corpus and in our client base. However, if this data bias is consistent, we can use the presence of non-ASCII characters in a PDB path as a signal that an executable merits further scrutiny. In organizations that operate primarily in the world of ASCII, we imagine this will be a strong signal. Below we express logic for this technique in Yara:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Erule ConventionEngine_Anomaly_NonAscii\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $pcre = \/RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,500}[^\\x00-\\x7F]{1,}[\\x00-\\xFF]{0,500}\\.pdb\\x00\/\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $pcre\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EMultiple Paths in a Single File\u003C\/h5\u003E\n\u003Cp\u003EEach compiled program should only have one PDB path. The presence of multiple PDB paths in a single object indicates that the object has subfile executables, from which you may infer that the parent object has the capability to \u201cdrop\u201d or \u201cinstall\u201d other files. While being a dropper or installer is not malicious on its own, having an alternative method of applying those classifications to file objects may be of assistance in surfacing malicious activity. In this example, we can also search for this capability using Yara:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Erule ConventionEngine_Anomaly_MultiPDB_Triple\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $anchor = \u0026quot;RSDS\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $pcre = \/RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}\\.pdb\\x00\/\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and #anchor == 3 and #pcre == 3\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EOutside of a Debug Section\u003C\/h5\u003E\n\u003Cp\u003EWhen a file is compiled the entry for the debug information is in the IMAGE_DEBUG_DIRECTORY. Similar to seeing multiple PDB paths in a single file, when we see debug information inside an executable that does not have a debug directory, we can infer that the file has subfile executables, and is likely has dropper or installer functionality. In this rule, we use \u003Ca href=\u0022https:\/\/buildmedia.readthedocs.org\/media\/pdf\/yara\/latest\/yara.pdf\u0022\u003EYara\u2019s convenient PE module\u003C\/a\u003E to check the relative virtual address (RVA) of the IMAGE_DIRECTORY_ENTRY_DEBUG entry, and if it is zero we can presume that there is no debug entry and thus the presence of a CodeView PDB path indicates that there is a subfile.\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Erule ConventionEngine_Anomaly_OutsideOfDebug\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; description = \u0026quot;Searching for PE files with PDB path keywords, terms or anomalies.\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $anchor = \u0026quot;RSDS\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $pcre = \/RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}\\.pdb\\x00\/\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp;condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $anchor and $pcre and pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_DEBUG].virtual_address == 0\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ENulled Out PDB Paths\u003C\/h5\u003E\n\u003Cp\u003EIn the typical CodeView section, we would see the \u201cRSDS\u201d header, the 16-byte GUID, a 4-byte \u201cage\u201d and then a PDB path string. However, we\u2019ve identified a significant number of malware samples where the embedded PDB path area is nulled out. In this example, we can easily see the CodeView debug structure, complete with header, GUID and age, followed by nulls to the end of the segment.\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E00147880: \u003Cb\u003E52 53 44 53\u003C\/b\u003E \u003Cb\u003E18 c8 03 4e 8c 0c 4f 46 be b2 ed\u003C\/b\u003E 9e : \u003Cb\u003ERSDS\u003C\/b\u003E...N..OF....\u003Cbr\u003E\n 00147890: \u003Cb\u003Ec1 9f a3 f4\u003C\/b\u003E \u003Cb\u003E01 00 00 00\u003C\/b\u003E 00 00 00 00 00 00 00 00 : ................\u003Cbr\u003E\n 001478a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 : ................\u003Cbr\u003E\n 001478b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 : ................\u003Cbr\u003E\n 001478c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 : ................\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThere are a few possibilities of how and why a CodeView PDB path may be nulled out, but in the case of intentional tampering, for the purposes of removing toolmarks, the easiest way would be to manually overwrite the PDB path with \\x00s. The risk of manual editing and overwriting via hex editor is that doing so is laborious and may introduce other static anomalies such as checksum errors.\u003C\/p\u003E\n\u003Cp\u003EThe next easiest way is to use a utility designed to wipe out debug artifacts from executables. One stellar example of this is \u201c\u003Ca href=\u0022http:\/\/bytepointer.com\/tools\/index.htm#peupdate\u0022\u003Epeupdate\u003C\/a\u003E\u201d which is designed not only to strip or fabricate the PDB path information, but can also recalculate the checksum, and eliminate Rich headers. \u0026nbsp;Below we demonstrate use of peupdate to clear the PDB path.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture12.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Using peupdate to clear the PDB path information from a sample of malware\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture13.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: The peupdate tampered malware as shown in the PEview utility. We see the CodeView section is still present but the PDB path value has been cleared out\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EPDB Path Anomaly Prevalence\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022648\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EAnomaly\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EFamilies and Groups Observed\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022306\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EExamples\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENon-Ascii Characters\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E008S, AGENTTESLA, BADSIGN, BAGELBYTE, BIRDSEED, BLACKCOFFEE, CANNONFODDER, CARDDROP, CEREAL, CHILDSPLAY, COATHOOK, CURVEBALL, DANCEPARTY, DIMWIT, DIZZYLOG, EARTHWORM, EIGHTONE, ELISE, ELKNOT, ENFAL, EXCHAIN, FANNYPACK, FLOWERPOT, FREELOAD, GH0ST, GINGERYUM, GLASSFLAW, GLOOXMAIL, GOLDENCAT, GOOGHARD, GOOGONE, HANDSTAMP, HELLWOOD, HIGHNOON, ICEFOG, ISHELLYAHOO, JAMBOX, JIMA, KRYPTONITE, LIGHTSERVER, LOCKLOAD, LOKIBOT, LOWLIGHT, METASTAGE, NETWIRE, PACMAN, PARITE, POISONIVY, PIEDPIPER, PINKTRIP, PLAYNICE, QUASARRAT, REDZONE, SCREENBIND, SHADOWMASK, SHORTLEASH, SIDEWINDER, SLIMEGRIME, SOGU, SUPERMAN, SWEETBASIL, TEMPFUN, TRAVELNET, TROCHILUS, URSNIF, VIPER, VIPSHELL\u003Cbr\u003E\nAPT1, APT2, APT3, APT5, APT6, APT9, APT10, APT14, APT17, APT18, APT20, APT21, APT23, APT24, APT24, APT24, APT26, APT31, APT33, APT41, UNC20, UNC27, UNC39, UNC53, UNC74, UNC78, UNC1040, UNC1078, UNC1172, UNC1486, UNC156, UNC208, UNC229, UNC237, UNC276, UNC293, UNC366, UNC373, UNC451, UNC454, UNC521, UNC542, UNC551, UNC556, UNC565, UNC584, UNC629, UNC753, UNC794, UNC798, UNC969\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022306\u0022 valign=\u0022top\u0022\u003E\u003Cspan class=\u0022code\u0022\u003EI:\\RControl\\\u5c0f\u5de5\u5177\\123\\\u5224\u65ad\u52a0\u8f7d\u7740\\Release\\\u5224\u65ad\u52a0\u8f7d\u7740.pdb\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMulti Path in Single File\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAGENTTESLA, BANKSHOT, BEACON, BIRDSEED, BLACKBELT, BRIGHTCOMB, BUGJUICE, CAMUBOT, CARDDROP, CETTRA, CHIPSHOT, COOKIECLOG, CURVEBALL, DARKMOON, DESERTFALCON, DIMWIT, ELISE, EXTRAMAYO, FIDDLELOG, FIDDLEWOOD, FLUXXY, FON, GEARSHIFT, GH0ST, HANDSTAMP, HAWKEYE, HIGHNOON, HIKIT, ICEFOG, IMMINENTMONITOR, ISMAGENT, KASPER, KAZYBOT, LIMITLESS, LOKIBOT, LUMBERJACK, MOONRAT, ORCUSRAT, PLANEDOWN, PLANEPATCH, POSEIDON, POSHC2, PUBNUBRAT, PUPYRAT, QUASARRAT, RABBITHOLE, RATVERMIN, RAWHIDE, REDTAPE, RYUK, SAKABOTA, SAMAS, SAMAS, SEEGAP, SEEKEYS, SKIDHOOK, SOGU, SWEETCANDLE, SWEETTEA, TRAVELNET, TRICKBOT, TROCHILUS, UPCONTROL, UPDATESEE, UROBUROS, WASHBOARD, WHITEWALK, WINERACK, XTREMERAT, ZXSHELL\u003C\/p\u003E\n\u003Cp\u003EAPT1, APT2, APT17, APT5, APT20, APT21, APT26, APT34, APT36, APT37, APT40, APT41, UNC27, UNC53, UNC218, UNC251, UNC432, UNC521, UNC718, UNC776, UNC875, UNC878, UNC969, UNC1031, UNC1040, UNC1065, UNC1092, UNC1095, UNC1166, UNC1183, UNC1289, UNC1374, UNC1443, UNC1450, UNC1495\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022306\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESingle Sample of TRICKBOT:\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cspan class=\u0022code\u0022\u003ED:\\MyProjects\\spreader\\Release\\spreader_x86.pdb\u003Cbr\u003E\n D:\\MyProjects\\spreader\\Release\\ssExecutor_x86.pdb\u003Cbr\u003E\n D:\\MyProjects\\spreader\\Release\\screenLocker_x86.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EOutside of Debug Section\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EABBEYROAD, AGENTTESLA, BEACON, BLACKSHADESRAT, CHIMNEYDIP, CITADEL, COOKIECLOG, COREBOT, CRACKSHOT, DAYJOB, DIRTCHEAP, DIZZYLOG, DUSTYSKY, EARTHWORM, EIGHTONE, ELISE, EXTRAMAYO, FRONTWHEEL, GELCAPSULE, GH0ST, HAWKEYE, HIGHNOON, KAYSLICE, LEADPENCIL, LOKIBOT, METASTAGE, METERPRETER, MURKYTOP, NUTSHELL, ORCUSRAT, OUTLOOKDUMP, PACMAN, POISONIVY, PLANEPATCH, PONY, PUPYRAT, RATVERMIN, SAKABOTA, SANDTRAP, SEADADDY, SEEDOOR, SHORTLEASH, SOGU, SOULBOT, TERA, TIXKEYS, UPCONTROL, WHIPSNAP, WHITEWALK, XDOOR, XTUNNEL\u003C\/p\u003E\n\u003Cp\u003EAPT5, APT6, APT9, APT10, APT17, APT22, APT24, APT26, APT27, APT29, APT30, APT34, APT35, APT36, APT37, APT40, APT41, UNC20, UNC27, UNC39, UNC53, UNC69, UNC74, UNC105, UNC124, UNC125, UNC147, UNC213, UNC215, UNC218, UNC227, UNC251, UNC276, UNC282, UNC307, UNC308, UNC347, UNC407, UNC565, UNC583, UNC587, UNC589, UNC631, UNC707, UNC718, UNC775, UNC776, UNC779, UNC842, UNC869, UNC875, UNC875, UNC924, UNC1040, UNC1080, UNC1148, UNC1152, UNC1225, UNC1251, UNC1428, UNC1450, UNC1486, UNC1575\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022306\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENulled Out PDB Paths\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHIGHNOON, SANNY, PHOTO, TERA, SOYSAUCE, VIPER, FIDDLEWOOD, BLACKDOG, FLUSHSHOW, NJRAT, LONGCUT\u003C\/p\u003E\n\u003Cp\u003EAPT41, UNC776, UNC229, UNC177, UNC1267, UNC878, UNC1511\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022306\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: A selection of anomalies in PDB paths with groups and malware families observed and examples\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPDB Path Showcase: Outliers, Oddities, Exceptions and Other Shenanigans\u003C\/h4\u003E\n\u003Cp\u003EThe internet is a weird place, and at a big enough scale, you end up seeing things that you never thought you would. Things that deviate from the norms, things that shirk the standards, things that utterly defy explanation. We expect PDB paths to look a certain way, but we\u2019ve run across several samples that did not, and we\u2019re not always sure why. Many of these samples below may be results of errors, corruption, obfuscation, or various forms of intentional manipulation. We\u2019re demonstrating them here to show that if you are attempting PDB path parsing or detection, you need to understand the variety of paths in the wild and prepare for shenanigans galore. Each of these examples are from confirmed malware samples.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EShenanigan\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u003Cu\u003EExample PDB Paths\u003C\/u\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUnicode error\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003EC^\\Users\\DELL\\Desktop\\interne.2.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ERaw Path: \u003Cspan class=\u0022code\u0022\u003E435E5C55 73657273 5C44454C 4C5C4465 736B746F 705C696E 7465726E 6598322E 706462\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003ECj\\Users\\hacker messan\\Deskto \\Server111.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ERaw Path: \u003Cspan class=\u0022code\u0022\u003E436A5C55 73657273 5C686163 6B657220 6D657373 616E5C44 65736B74 6FA05C53 65727665 72313131 2E706462\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENothing but space\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path:\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EFull Raw: \u003Cspan class=\u0022code\u0022\u003E52534453 7A7F54BF BAC9DE45 89DC995F F09D2327 0A000000 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202000\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESpaced out\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003ED:\\\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; .pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFull Raw: \u003Cspan class=\u0022code\u0022\u003E52534453 A7FBBBFE 5C41A545 896EF92F 71CD1F08 01000000 443A5C20 20202020 20202020 20202020 20202020 20202020 20202020 20202020 20202020 2E706462 00\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENothin\u2019 but null\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u0026lt;null bytes only\u0026gt;\u003C\/p\u003E\n\u003Cp\u003EFull Raw:\u0026nbsp;\u003Cspan class=\u0022code\u0022\u003E52534453 97272434 3BACFA42 B2DAEE99 FAB00902 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERandom characters\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003ELmd9knkjasdLmd9knkjasLmd9knkAaGc.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERandom path\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003EG:\\givgLxNzKzUt\\TcyaxiavDCiu\\bGGiYrco\\QNfWgtSs\\auaXaWyjgmPqd.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWord soup\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003Ec:\\Busy\\molecule\\Blue\\Valley\\Steel\\King\\enemy\\Himyard.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMixed doubles\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003EC::\\\\QQQQQQQQ\\VVVVVVVVVVVVVVVVV.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EShort\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003E1.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo .pdb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003Ea\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFull Raw: \u003Cspan class=\u0022code\u0022\u003E52534453 ED86CA3D 6C677946 822E668F F48B0F9D 01000000 6100\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELong and weird with repeated character\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003E\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aa\u00aatinjs\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaae.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFull Raw: \u003Cspan class=\u0022code\u0022\u003E52534453 DD947C2F 6B32544C 8C3ACB2E C7C39F45 01000000 AAAAAAAA AAAAAAAA AAAAAAAA AAAAAAAA AAAAAAAA 74696E6A 735C6161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 61616161 652E7064 6200\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo idea\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003En:.L\u00ed..\u00d7\u00d6\u00f2\u00d2.\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFull Raw: \u003Cspan class=\u0022code\u0022\u003E52534453 5A2D831D CB4DCF1E 4A05F51B 94992AA0 B7CFEE32 6E3AAD4C ED1A1DD7 D6F2D29E 00\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EForward slashes and no drive letter\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText Path: \u003Cspan class=\u0022code\u0022\u003E\/Users\/user\/Documents\/GitHub\/SharpWMI\/SharpWMI\/obj\/Debug\/SharpWMI.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENetwork share\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EText path:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\\\\vmware-host\\shared folders\\Decrypter\\Decrypter\\obj\\Release\\Decrypter.pdb\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002260\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENon-Latin drive letter\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022564\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWe haven\u2019t seen this yet, but it\u2019s only a matter of time until you can have an \u003Ca href=\u0022https:\/\/davidzych.com\/abusing-emoji-in-windows\/\u0022\u003Eemoji as a drive letter\u003C\/a\u003E.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: A selection of PDB paths shenanigans with examples\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EBetwixt Nerf Herders and Elite Operators\u003C\/h4\u003E\n\u003Cp\u003EThere are many differences between apex threat actors and the rest, even if all successfully perform intrusion operations. Groups that exercise good OPSEC in some campaigns may have bad OPSEC in others. APT36 has hundreds of leaked PDB paths, whereas APT30 has a minimal PDB path footprint, while APT38 is a ghost.\u003C\/p\u003E\n\u003Cp\u003EWhen PDB paths are present, the types of keywords, terms, and other string items present in PDB paths are all on a spectrum of professionalism and sophistication. On one end we\u2019re seeing \u201c\u003Cspan class=\u0022code\u0022\u003EnjRAT-FUD 0.3\u003C\/span\u003E\u201d and \u201c\u003Cspan class=\u0022code\u0022\u003E1337 h4ckbot\u003C\/span\u003E\u201d and on the other end we\u2019re seeing \u201c\u003Cspan class=\u0022code\u0022\u003Eminidionis\u003C\/span\u003E\u201d and \u201c\u003Cspan class=\u0022code\u0022\u003Emsrstd\u003C\/span\u003E\u201d.\u003C\/p\u003E\n\u003Cp\u003EThe trendy critique of string-based detection goes something like \u201cadvanced adversaries \u003Ci\u003Ewould never \u003C\/i\u003Eact so carelessly; they\u2019ll obfuscate and evade your na\u00efve and brittle signatures.\u201d In the tables above for PDB path keywords, terms and anomalies, we think we\u2019ve shown that bona fide APT\/FIN groups, state-sponsored adversaries, and the best-of-the-best attackers do sometimes slip up and give us an opportunity for detection.\u003C\/p\u003E\n\u003Cp\u003ELet\u2019s call out some specific examples from boutique malware from some of the more advanced threat groups.\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003E\u003Ci\u003EEquation Group\u003C\/i\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003ESome Equation Group samples show full PDB paths that indicate that some of the malware was compiled in debug mode on workstations or virtual machines used for development.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/securelist.com\/inside-the-equationdrug-espionage-platform\/69203\/\u0022\u003E\u003Cspan class=\u0022code\u0022\u003Ec:\\users\\rmgree5\\co\\standalonegrok_2.1.1.1\\gk_driver\\gk_sa_driver\\objfre_wnet_amd64\\amd64\\SaGk.pdb\u003C\/span\u003E\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EOther Equation Group samples have partially qualified PDB paths that represent something less obvious. These standalone PDB names may reflect a more \u003Ci\u003Etailored\u003C\/i\u003E, multi-developer environment, where it wouldn\u2019t make sense to specify a fully qualified PDB path for a single developer system. Instead, the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/cpp\/build\/reference\/pdbaltpath-use-alternate-pdb-path?view=vs-2019\u0022\u003Elinker is instructed\u003C\/a\u003E to write only the PDB file name in the built executable. Still, these PDB paths are unique to their malware samples:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Etdip.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Evolrec.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Emsrstd.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cb\u003E\u003Ci\u003ERegin\u003C\/i\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EDeeming a piece of malware a \u201cbackdoor\u201d is increasingly pass\u00e9. Calling a piece of malware an \u201cimplant\u201d is the new hotness, and the general public may be adopting this nouveau nomenclature long after purported Western governments. In this component of the Regin platform, we see a developer that was way ahead of the curve:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/securelist.com\/comparing-the-regin-module-50251-and-the-qwerty-keylogger\/68525\/\u0022\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\dev\\k1svn\\dsd\\Implants\\WarriorPride\\production2.0\\package\\E_Wzowski\\Release\\E_Qwerty.pdb\u003C\/span\u003E\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cb\u003E\u003Ci\u003EAPT29\u003C\/i\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003ELet\u2019s not forget \u003Ca href=\u0022https:\/\/twitter.com\/search?q=%23APT29\u0022\u003EAPT29\u003C\/a\u003E, whose brazen worldwide intrusion sprees often involve pieces of \u003Ca href=\u0022https:\/\/www.youtube.com\/watch?v=Ldzr0bfGtHc\u0022\u003Ecreative\u003C\/a\u003E, \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/03\/apt29_domain_frontin.html\u0022\u003Eelaborate\u003C\/a\u003E, and \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/03\/dissecting_one_ofap.html\u0022\u003Estealthy\u003C\/a\u003E malware. APT29 is amongst the better groups at staying quiet, but in thousands of pieces of malware, these normally disciplined operators did leak a few PDB paths such as:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ec:\\Users\\developer\\Desktop\\unmodified_netimplant\\minidionis\\minidionis\\obj\\Debug\\minidionis.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Projects\\nemesis-gemina\\nemesis\\bin\\carriers\\ezlzma_x86_exe.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EEven when the premier outfits don\u2019t use the glaring keywords, there may still be some string terms, anomalies and \u003Ci\u003Eunique values\u003C\/i\u003E present in PDB paths that each represent an opportunity for detection.\u003C\/p\u003E\n\u003Ch4\u003EConventionEngine\u003C\/h4\u003E\n\u003Cp\u003EWe extract and index all PDB paths from all executables so we can easily search and spelunk through our data. But not everyone has it that easy, so we cranked out a quick collection of nearly 100 Yara rules for PDB path keywords, terms and anomalies that we believe researchers and analysts can use to detect evil. We named this collection of rules \u201cConventionEngine\u201d after the industry jokes that security vendors like to talk about their elite detection \u201c\u003Ca href=\u0022https:\/\/twitter.com\/stvemillertime\/status\/1100399116876533760\u0022\u003Eengines\u003C\/a\u003E,\u201d but behind the green curtain they\u2019re all just a code spaghetti mess of scripts and signatures, which this absolutely started as.\u003C\/p\u003E\n\u003Cp\u003EInstead of tight production \u201csignatures,\u201d you can think of these as \u201cweak signals\u201d or \u201cdiscovery rules\u201d that are meant to build haystacks of varying size and fidelity for analysts to hunt through. Those rules with a low signal-to-noise ratio (SNR) could be fed to automated systems for logging or contextualization of file objects, whereas rules with a higher SNR could be fed directly to analysts for review or investigation.\u003C\/p\u003E\n\u003Cp\u003EOur adversaries are human. They err. And when they do, we can catch them. We are pleased to release \u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/blog\/pdfs\/definitive_dossier_pdb_yara_appendix.pdf\u0022 adhocenable=\u0022false\u0022\u003EConventionEngine\u003C\/a\u003E rules for anyone to use in that effort. Together these rules cover samples from over 300 named malware families, hundreds of unnamed malware families, 39 different APT and FIN threat groups, and over 200 UNC \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/03\/clustering-and-associating-attacker-activity-at-scale.html\u0022\u003E(uncategorized) groups\u003C\/a\u003E of activity.\u003C\/p\u003E\n\u003Cp\u003EWe hope you can use these rules as templates, or as starting points for further PDB path detection ideas. There\u2019s plenty of room for additional keywords, terms, and anomalies. Be advised, whether for detection or hunting or merely for context, you will need to tune and add additional logic to each of these rules to make the size of the resulting haystacks appropriate for your purposes, your operations and the technology within your organization. When judiciously implemented, we believe these rules can enrich analysis and detect things that are missed elsewhere.\u003C\/p\u003E\n\u003Ch4\u003EPDB Paths for Intelligence Teams\u003C\/h4\u003E\n\u003Ch5\u003EGettin\u0027 Lucky with APT31\u003C\/h5\u003E\n\u003Cp\u003EDuring an incident response investigation, we found an APT31 account on Github being used for staging malware files and for malware communications. The intrusion operators using this account weren\u2019t shy of putting full code packages right into the repositories and we were able to recover actual PDB files associated with multiple malware ecosystems. Using the actual PDB files, we were able to see the full directory paths of the raw malware source code, representing a considerable intelligence gain about the malware original development environment. We used what we found in the PDB itself to search for other files related to this malware author.\u003C\/p\u003E\n\u003Ch5\u003EFinding Malware Source Code Using PDBs\u003C\/h5\u003E\n\u003Cp\u003EMalware PDBs themselves are easier to find than one may think. Sure, sometimes the authors are kind enough to leave everything up on Github. But there are some other occasions too: sometimes malware source code will get inadvertently flagged by antivirus or endpoint detection and response (EDR) agents; sometimes malware source code will be left in open directories; and sometimes malware source code will get uploaded to the big malware repositories.\u003C\/p\u003E\n\u003Cp\u003EYou can find malware source code by looking for things like Visual Studio solution files, or simply with Yara rules looking for PDB files in archives that have some non-zero detection rate or other metadata that raises the likelihood that some component in the archive is indeed malicious.\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Erule PDB_Header_V2\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author=\u0026quot;@stvemillertime\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; description = \u0026quot;This looks for PDB files based on headers.\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \/\/$string = \u0026quot;Microsoft C\/C++ program database 2.00\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $hex = {4D696372 6F736F66 7420432F 432B2B20 70726F67 72616D20 64617461 62617365 20322E30 300D0A}\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $hex at 0\u003Cbr\u003E\n rule PDB_Header_V7\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author=\u0026quot;@stvemillertime\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; description = \u0026quot;This looks for PDB files based on headers.\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \/\/$string = \u0026quot;Microsoft C\/C++ MSF 7.00\u0026quot;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $hex = {4D696372 6F736F66 7420432F 432B2B20 4D534620 372E3030}\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $hex at 0\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPDB Paths for Offensive Teams\u003C\/h4\u003E\n\u003Cp\u003EFireEye has confirmed individual attribution to bona fide threat actors and red teamers based in part on leaked PDB paths in malware samples. The broader analyst community often uses PDB paths for clustering and pivoting to related malware families and while building a case for attribution, tracking, or pursuit of malware developers. Naturally, red team and offensive operators should be aware of the artifacts that are left behind during the compilation process and abstain from compiling with symbol generation enabled \u2013 basically, remember to practice good OPSEC on your implants. That said, there is an opportunity for creating artificial PDB paths should one wish to intentionally introduce this artifact.\u003C\/p\u003E\n\u003Ch5\u003EMaking PDB Paths Appear More \u201cLegitimate\u201d\u003C\/h5\u003E\n\u003Cp\u003EOne notable differentiator between malware and non-malware is that malware is typically not developed in an \u201centerprise\u201d or \u201ccommercial\u201d software development setting. The difference here is that in large development settings, software engineers are working on big projects together through productivity tools, and the software is constantly updated and rebuilt through automated \u201ccontinuous integration\u201d (CI) or \u201ccontinuous delivery\u201d (CD) suites such as Jenkins and TeamCity.\u0026nbsp; This means that when PDB paths are present in legitimate enterprise software packages, they often have toolmarks showing their compile path on a CI\/CD build server.\u003C\/p\u003E\n\u003Cp\u003EHere are some examples of PDB paths of legitimate software executables built in a CI\/CD environment:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\Jenkins\\workspace\\QA_Build_5_19_ServerEx_win32\\_buildoutput\\ServerEx\\Win32\\Release\\_symbols\\keysvc.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\bamboo-agent-home\\xml-data\\build-dir\\MC-MCSQ1-JOB1\\src\\MobilePrint\\obj\\x86\\Release\\MobilePrint.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\TeamCity\\BuildAgent\\work\\714c88d7aeacd752\\Build\\Release\\cs.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EWe do not discount the fact that some malware developers are using CI\/CD build environments. We know that some threat actors and malware authors are indeed adopting contemporary enterprise development processes, but malware PDBs like this example are extraordinarily rare:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ec:\\users\\builder\\bamboo~1\\xml-data\\build-~1\\trm-pa~1\\agent\\window~1\\rootkit\\Output\\i386\\KScan.pdb\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003ESpecifying Custom PDB Paths in Visual Studio\u003C\/h5\u003E\n\u003Cp\u003ESpecifying a custom path for a PDB file is not uncommon in the development world. An offensive or red team operator may wish to specify a fake PDB path and can do so easily using compiler linking options.\u003C\/p\u003E\n\u003Cp\u003EAs our example malware author \u201csmiller\u201d learns and hones their tradecraft, they may adopt a stealthier approach and choose to include one of those more \u201clegitimate\u201d looking PDB paths in new malware compilations.\u003C\/p\u003E\n\u003Cp\u003ETake smiller\u2019s example malware project located at the path:\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\smiller\\projects\\offensive_loaders\\shellcode\\hello\\hellol\\\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture16.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: hellol.cpp code shown in Visual Studio with debug build information\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis project compiled in Debug configuration by default places both the hellol.exe file and the hellol.pdb file under\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003ED:\\smiller\\projects\\offensive_loaders\\shellcode\\hello\\hellol\\Debug\\\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture17.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 17: hellol.exe and hellol.pdb, compiled by debug configuration default into its resident folder\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIt\u2019s easy to change the properties of this project and manually specify the generation path of the PDB file. From the Visual Studio taskbar, select \u003Cb\u003EProject \u003C\/b\u003E\u0026gt; \u003Cb\u003EProperties\u003C\/b\u003E, then in the side pane select \u003Cb\u003ELinker\u003C\/b\u003E \u0026gt; \u003Cb\u003EDebugging\u003C\/b\u003E and fill the option box for \u201c\u003Cb\u003EGenerate Program Database File.\u003C\/b\u003E\u201d This option accepts Visual Studio macros so there is plenty of flexibility for scripting and creating custom build configurations for falsifying or randomizing PDB paths.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture18.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 18: hellol project Properties showing defaults for the PDB path\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture19.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 19: hellol project Properties now showing a manually specified path for the (fake) PDB path\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen we examine the raw ConsoleApplication1.exe, we can see at the byte level that the linker has included debug information in the executable specifying our designated PDB path, which of course is not real. Or if built at the command line, you could specify \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/cpp\/build\/reference\/pdbaltpath-use-alternate-pdb-path?view=vs-2019\u0022\u003E\/PDBALTPATH\u003C\/a\u003E which can create a PDB file name that is does not rely on the file structure of the build computer.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/definitivedossier\/Picture20.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 20: Rebuilt hellol.exe as seen through the PEview utility, which shows us the fake PDB path in the IMAGE_DEBUG_TYPE_CODEVIEW directory of the executable\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAn offensive or red team operator could intentionally include a PDB path in a piece of malware, making the executable appear to be compiled on a CI\/CD server which could help the malware fly under the radar. Additionally, an operator could include a PDB path or strings associated with a known malware family or threat group to confound analysts. Why not throw in a small homage to one of your favorite malware operators or authors, such as the infamous APT33 persona \u003Ca href=\u0022https:\/\/twitter.com\/stvemillertime\/status\/1142093510281224192\u0022\u003Exman_1365_x\u003C\/a\u003E? Or perhaps throw in a \u201c\\Homework\\CS1101\\\u201d to make the activity seem more academic? For whatever reason, if there is PDB manipulation to be done, it is generally doable with common software development tools.\u003C\/p\u003E\n\u003Ch4\u003EThe Glory and the Nothing of a (Malware) Name\u003C\/h4\u003E\n\u003Cp\u003EIn the context of PDB paths and malware author naming conventions, it is important to acknowledge the interdependent (and often circular) nature of \u201coffense\u201d and \u201cdefense.\u201d Which came first, a defender calling a piece of malware a \u201ctrojan\u201d or a malware author naming their code project a \u201ctrojan\u201d? Some malware is inspired by prior work. An author names a code project \u201cMIMIKATZ\u201d, and years later there are \u003Ca href=\u0022https:\/\/github.com\/search?q=mimikatz\u0026amp;type=Repositories\u0022\u003Ehundreds of related projects\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/twitter.com\/ItsReallyNick\/status\/1075251392061890561\u0022\u003Escripts with derivative names\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EAlthough definitions may vary, we see that both the offensive and defensive sides characterize the functionality or role of a piece of malware using much of the same vernacular and inspiration. We suspect this began with \u201cvirus\u201d and that the array of granular, descriptive terms will continue to grow as public discourse advances the malware taxonomy. Who would have suspected that \u003Ci\u003Ehow \u003C\/i\u003Ewe talked about malware would ultimately lead to the possibility detecting it? After all, would a rootkit by any other name be as evil? Somewhere, a scholar is beaming with wonder at the intersection of malware and linguistics.\u003C\/p\u003E\n\u003Ch4\u003EConclusions\u003C\/h4\u003E\n\u003Cp\u003EIf by now you\u2019re thinking this is all kind of silly, don\u2019t worry, you\u2019re in good company. PDB paths are indeed a wonky attribute of a file. The mere presence of these paths in an executable is by no means evil, yet when these paths are present in pieces of malware, they usually represent acts of operational indiscretion. The idea of detecting malware based on PDB paths is kind of like detecting a robber based on what type of hat a person is wearing, if they\u2019re wearing one at all.\u003C\/p\u003E\n\u003Cp\u003EWe have been historically successful in using PDB paths mostly as an analytical pivot, to help us \u003Ca href=\u0022https:\/\/twitter.com\/stvemillertime\/status\/1059650999034503170\u0022\u003Ecluster malware families\u003C\/a\u003E and track malware developers. When we began to study PDB paths holistically, we noticed that many malware authors were using many of the same naming conventions for their folders and project files. They were naming their malware projects after the functionality of the malware itself, and they routinely label their projects with unique, descriptive language.\u003C\/p\u003E\n\u003Cp\u003EWe found that many malware authors and operators leaked PDB paths that described the functionality of the malware itself and gave us insight into the development environment. Furthermore, outside of the descriptors of the malware development files and environment, when PDB files are present, we identified anomalies that help us identify files that are more likely to be circumstantially interesting. There is room for red team and offensive operators to improve their tradecraft by falsifying PDB paths for purposes of stealth or razzle-dazzle.\u003C\/p\u003E\n\u003Cp\u003EWe remain optimistic that we can squeeze some juice from PDB paths when they are present. A survey of about 2200 named malware families (including all samples from 41 APT and 10 FIN groups and a couple million other uncategorized executables) shows that PDB paths are present in malware about five percent of the time. Imagine if you could have a detection \u201cbackup plan\u201d for five plus percent of malware, using a feature that is itself inherently non-malicious. That\u2019s kind of cool, right?\u003C\/p\u003E\n\u003Ch4\u003EFuture Work on Scaling PDB Path Classification\u003C\/h4\u003E\n\u003Cp\u003EOur ConventionEngine rule pack for PDB path keyword, term and anomaly detection has been fun and found tons of malware that would have otherwise been missed. But there are a lot of PDB paths in malware that do not have such obvious keywords, and so our manual, cherry-picking, and extraordinarily laborious approach doesn\u2019t scale.\u003C\/p\u003E\n\u003Cp\u003EStay tuned for the next part of our blog series! In \u003Cb\u003EPart Deux\u003C\/b\u003E, we explore scalable solutions for PDB path feature generalization and approaches for classification. We believe that data science approaches will better enable us to surface PDB paths with unique and interesting values and move towards a classification solution without any rules whatsoever.\u003C\/p\u003E\n\u003Ch4\u003ERecommended Reading and Resources\u003C\/h4\u003E\n\u003Ch5\u003EInspiring Research\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022http:\/\/www.hexacorn.com\/blog\/2013\/05\/08\/and-the-most-popular-windows-account-for-compiling-malware-is\/\u0022\u003Ehttp:\/\/www.hexacorn.com\/blog\/2013\/05\/08\/and-the-most-popular-windows-account-for-compiling-malware-is\/\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/securelist.com\/operation-shadowhammer-a-high-profile-supply-chain-attack\/90380\/\u0022\u003Ehttps:\/\/securelist.com\/operation-shadowhammer-a-high-profile-supply-chain-attack\/90380\/\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/content.fireeye.com\/apt-41\/rpt-apt41\u0022\u003Ehttps:\/\/content.fireeye.com\/apt-41\/rpt-apt41\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EDebugging and Symbols\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows-hardware\/drivers\/debugger\/symbols\u0022\u003Ehttps:\/\/docs.microsoft.com\/en-us\/windows-hardware\/drivers\/debugger\/symbols\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/dxtecharts\/debugging-with-symbols\u0022\u003Ehttps:\/\/docs.microsoft.com\/en-us\/windows\/win32\/dxtecharts\/debugging-with-symbols\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022http:\/\/www.debuginfo.com\/articles\/debuginfomatch.html\u0022\u003Ehttp:\/\/www.debuginfo.com\/articles\/debuginfomatch.html\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EDebug Directory and CodeView\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/api\/winnt\/ns-winnt-image_debug_directory\u0022\u003Ehttps:\/\/docs.microsoft.com\/en-us\/windows\/win32\/api\/winnt\/ns-winnt-image_debug_directory\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/github.com\/dotnet\/corefx\/blob\/master\/src\/System.Reflection.Metadata\/specs\/PE-COFF.md\u0022\u003Ehttps:\/\/github.com\/dotnet\/corefx\/blob\/master\/src\/System.Reflection.Metadata\/specs\/PE-COFF.md\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EDebugging and Visual Studio\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/cpp\/build\/reference\/debug-generate-debug-info?view=vs-2019\u0022\u003Ehttps:\/\/docs.microsoft.com\/en-us\/cpp\/build\/reference\/debug-generate-debug-info?view=vs-2019\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/visualstudio\/debugger\/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2019\u0022\u003Ehttps:\/\/docs.microsoft.com\/en-us\/visualstudio\/debugger\/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2019\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/visualstudio\/debugger\/remote-debugging?view=vs-2019\u0022\u003Ehttps:\/\/docs.microsoft.com\/en-us\/visualstudio\/debugger\/remote-debugging?view=vs-2019\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EPDB File Structure\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/github.com\/microsoft\/microsoft-pdb\u0022\u003Ehttps:\/\/github.com\/microsoft\/microsoft-pdb\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/debug\/symbol-files\u0022\u003Ehttps:\/\/docs.microsoft.com\/en-us\/windows\/win32\/debug\/symbol-files\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/github.com\/microsoft\/microsoft-pdb\/blob\/master\/docs\/ExternalResources.md\u0022\u003Ehttps:\/\/github.com\/microsoft\/microsoft-pdb\/blob\/master\/docs\/ExternalResources.md\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022http:\/\/www.godevtool.com\/Other\/pdb.htm\u0022\u003Ehttp:\/\/www.godevtool.com\/Other\/pdb.htm\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EPDB File Tools\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EPdbXtract: \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2012\/04\/exploring-symbol-type-information-pdbxtract.html\u0022\u003Ehttps:\/\/www.fireeye.com\/blog\/threat-research\/2012\/04\/exploring-symbol-type-information-pdbxtract.html\u003C\/a\u003E (\u003Ca href=\u0022https:\/\/fireeyeinc-my.sharepoint.com\/personal\/steven_miller1_fireeye_com\/Documents\/PDB%20Blog\/\u2022%09https:\/www.fireeye.com\/content\/dam\/fireeye-www\/services\/freeware\/sdl-pdbxtract.zip\u0022\u003Edirect download\u003C\/a\u003E, see demo \u003Ca href=\u0022https:\/\/www.youtube.com\/embed\/u7wTFp-mDXs\u0022\u003Eone\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/www.youtube.com\/embed\/g6gFm91Ogtw\u0022\u003Etwo\u003C\/a\u003E for deets)\u003C\/li\u003E\n\u003Cli\u003EPeupdate: \u003Ca href=\u0022http:\/\/bytepointer.com\/tools\/index.htm#peupdate\u0022\u003Ehttp:\/\/bytepointer.com\/tools\/index.htm#peupdate\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EConventionEngine Rules\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/blog\/pdfs\/definitive_dossier_pdb_yara_appendix.pdf\u0022\u003Ehttps:\/\/www.fireeye.com\/content\/dam\/fireeye-www\/blog\/pdfs\/definitive_dossier_pdb_yara_appendix.pdf\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n",
        "jcr:lastModified": "Thu Aug 29 2019 21:28:14 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EPart one of a series about PDB paths, their relation to malware, and how they may be useful in both defensive and offensive operations.\u003C\/p\u003E\n",
      "jcr:lastModified": "Thu Aug 29 2019 20:12:27 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Aug 29 2019 21:40:13 GMT+0000",
      "imageRotate": "0"
    }
  }
}
