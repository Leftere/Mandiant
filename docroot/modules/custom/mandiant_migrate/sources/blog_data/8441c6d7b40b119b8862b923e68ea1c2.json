{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Dec 07 2017 12:05:20 GMT-0500",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "New Targeted Attack in the Middle East by APT34, a Suspected Iranian Threat Group, Using CVE-2017-11882 Exploit",
    "jcr:versionHistory": "b996df7f-3083-4dd6-9fc1-8379a4aba4bd",
    "internalSearchKeywords": "iran",
    "author": "Manish Sardiwal",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "c507025f-ca06-42c3-a626-c253b3ed2a22"
    ],
    "jcr:created": "Wed Jan 08 2020 18:58:36 GMT+0000",
    "cq:lastModified": "Wed Jan 08 2020 18:58:29 GMT+0000",
    "jcr:baseVersion": "c507025f-ca06-42c3-a626-c253b3ed2a22",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:vincent-cannon",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-authors:nalani-fraser",
      "fireeye-blog-authors:yogesh-londhe",
      "fireeye-blog-tags:apt",
      "fireeye-blog-authors:manish-sardiwal",
      "fireeye-blog-authors:nick-richard",
      "fireeye-blog-tags:middle-east",
      "fireeye-blog-authors:jacqueline-oleary"
    ],
    "jcr:uuid": "29d94184-ac74-4774-b234-257f850baeec",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Dec 07 2017 09:00:00 GMT-0800",
    "cq:lastModifiedBy": "matthew.sawicki@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003ELess than a week after Microsoft issued a patch for \u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-11882\u0022\u003ECVE-2017-11882\u003C\/a\u003E on Nov. 14, 2017, FireEye observed an attacker using an exploit for the Microsoft Office vulnerability to target a government organization in the Middle East. We assess this activity was carried out by a suspected Iranian cyber espionage threat group, whom we refer to as APT34, using a custom PowerShell backdoor to achieve its objectives.\u003C\/p\u003E\n\u003Cp\u003EWe believe APT34 is involved in a long-term cyber espionage operation largely focused on reconnaissance efforts to benefit Iranian nation-state interests and has been operational since at least 2014. This threat group has conducted broad targeting across a variety of industries, including financial, government, energy, chemical, and telecommunications, and has largely focused its operations within the Middle East. We assess that APT34 works on behalf of the Iranian government based on infrastructure details that contain references to Iran, use of Iranian infrastructure, and targeting that aligns with nation-state interests.\u003C\/p\u003E\n\u003Cp\u003EAPT34 uses a mix of public and non-public tools, often conducting spear phishing operations using compromised accounts, sometimes coupled with social engineering tactics. In May 2016, we\u0026nbsp;published\u0026nbsp;a blog detailing a \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2016\/05\/targeted_attacksaga.html\u0022\u003Espear phishing campaign\u003C\/a\u003E targeting banks in the Middle East region that used macro-enabled attachments to distribute POWBAT malware. We now attribute that campaign to APT34. In July 2017, we observed APT34 targeting a Middle East organization using a PowerShell-based backdoor that we call POWRUNER and a downloader with domain generation algorithm functionality that we call BONDUPDATER, based on strings within the malware. The backdoor was delivered via a malicious .rtf file that exploited \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/cve-2017-0199-hta-handler.html\u0022\u003ECVE-2017-0199\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EIn this latest campaign, APT34 leveraged the recent Microsoft Office vulnerability CVE-2017-11882 to deploy POWRUNER and BONDUPDATER.\u003C\/p\u003E\n\u003Cp\u003EThe full report on APT34 is available to our\u0026nbsp;\u003Ca href=\u0022https:\/\/www.fireeye.com\/products\/isight-cyber-threat-intelligence-subscriptions.html\u0022\u003EMySIGHT customer community\u003C\/a\u003E.\u0026nbsp;APT34 loosely aligns with \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/researchcenter.paloaltonetworks.com\/2016\/10\/unit42-oilrig-malware-campaign-updates-toolset-and-expands-targets\/\u0022\u003Epublic reporting related to the group \u0026quot;OilRig\u0026quot;\u003C\/a\u003E. As individual organizations may track adversaries using varied data sets, it is possible that our classifications of activity may not wholly align.\u003C\/p\u003E\n\u003Ch4\u003ECVE-2017-11882: Microsoft Office Stack Memory Corruption Vulnerability\u003C\/h4\u003E\n\u003Cp\u003ECVE-2017-11882 affects several versions of Microsoft Office and, when exploited, allows a remote user to run arbitrary code in the context of the current user as a result of improperly handling objects in memory. The vulnerability was patched by Microsoft on Nov. 14, 2017. A full proof of concept (POC) was publicly released a week later by the reporter of the vulnerability.\u003C\/p\u003E\n\u003Cp\u003EThe vulnerability exists in the old Equation Editor (EQNEDT32.EXE), a component of Microsoft Office that is used to insert and evaluate mathematical formulas. The Equation Editor is embedded in Office documents using object linking and embedding (OLE) technology. It is created as a separate process instead of child process of Office applications. If a crafted formula is passed to the Equation Editor, it does not check the data length properly while copying the data, which results in stack memory corruption. As the EQNEDT32.exe is compiled using an older compiler and does not support address space layout randomization (ASLR), a technique that guards against the exploitation of memory corruption vulnerabilities, the attacker can easily alter the flow of program execution.\u003C\/p\u003E\n\u003Ch4\u003EAnalysis\u003C\/h4\u003E\n\u003Cp\u003EAPT34 sent a malicious .rtf file (MD5: a0e6933f4e0497269620f44a083b2ed4) as an attachment in a malicious spear phishing email sent to the victim organization. The malicious file exploits CVE-2017-11882, which corrupts the memory on the stack and then proceeds to push the malicious data to the stack. The malware then overwrites the function address with the address of an existing instruction from EQNEDT32.EXE. The overwritten instruction (displayed in Figure 1) is used to call the \u201cWinExec\u201d function from kernel32.dll, as depicted in the instruction at 00430c12, which calls the \u201cWinExec\u201d function.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Disassembly of overwritten function address\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter exploitation, the \u2018WinExec\u2019 function is successfully called to create a child process, \u201cmshta.exe\u201d, in the context of current logged on user. The process \u201cmshta.exe\u201d downloads a malicious script from hxxp:\/\/mumbai-m[.]site\/b.txt and executes it, as seen in Figure 2.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Attacker data copied to corrupt stack buffer\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EExecution Workflow\u003C\/h4\u003E\n\u003Cp\u003EThe malicious script goes through a series of steps to successfully execute and ultimately establish a connection to the command and control (C2) server. The full sequence of events starting with the exploit document is illustrated in Figure 3.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: CVE-2017-11882 and POWRUNER attack sequence\u003C\/span\u003E\u003C\/p\u003E\n\u003Col style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe malicious .rtf file exploits CVE-2017-11882.\u003C\/li\u003E\n\u003Cli\u003EThe malware overwrites the function address with an existing instruction from EQNEDT32.EXE.\u003C\/li\u003E\n\u003Cli\u003EThe malware creates a child process, \u201cmshta.exe,\u201d which downloads a file from: hxxp:\/\/mumbai-m[.]site\/b.txt.\u003C\/li\u003E\n\u003Cli\u003Eb.txt contains a PowerShell command to download a dropper from: hxxp:\/\/dns-update[.]club\/v.txt. The PowerShell command also renames the downloaded file from v.txt to v.vbs and executes the script.\u003C\/li\u003E\n\u003Cli\u003EThe v.vbs script drops four components (hUpdateCheckers.base, dUpdateCheckers.base, cUpdateCheckers.bat, and GoogleUpdateschecker.vbs) to the directory: C:\\ProgramData\\Windows\\Microsoft\\java\\\u003C\/li\u003E\n\u003Cli\u003Ev.vbs uses CertUtil.exe, a legitimate Microsoft command-line program installed as part of Certificate Services, to decode the base64-encoded files hUpdateCheckers.base and dUpdateCheckers.base, and drop hUpdateCheckers.ps1 and dUpdateCheckers.ps1 to the staging directory.\u003C\/li\u003E\n\u003Cli\u003EcUpdateCheckers.bat is launched and creates a scheduled task for GoogleUpdateschecker.vbs persistence.\u003C\/li\u003E\n\u003Cli\u003EGoogleUpdateschecker.vbs is executed after sleeping for five seconds.\u003C\/li\u003E\n\u003Cli\u003EcUpdateCheckers.bat and *.base are deleted from the staging directory.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EFigure 4 contains an excerpt of the v.vbs script pertaining to the Execution Workflow section.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Execution Workflow Section of v.vbs\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter successful execution of the steps mentioned in the Execution Workflow section, the Task Scheduler will launch GoogleUpdateschecker.vbs every minute, which in turn executes the dUpdateCheckers.ps1 and hUpdateCheckers.ps1 scripts. These PowerShell scripts are final stage payloads \u2013 they include a downloader with domain generation algorithm (DGA) functionality and the backdoor component, which connect to the C2 server to receive commands and perform additional malicious activities.\u0026nbsp;\u003C\/p\u003E\n\u003Ch4\u003EhUpdateCheckers.ps1 (POWRUNER)\u003C\/h4\u003E\n\u003Cp\u003EThe backdoor component, POWRUNER, is a PowerShell script that sends and receives commands to and from the C2 server. POWRUNER is executed every minute by the Task Scheduler. Figure 5 contains an excerpt of the POWRUNER backdoor.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: POWRUNER PowerShell script hUpdateCheckers.ps1\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EPOWRUNER begins by sending a random GET request to the C2 server and waits for a response. The server will respond with either \u201cnot_now\u201d or a random 11-digit number. If the response is a random number, POWRUNER will send another random GET request to the server and store the response in a string. POWRUNER will then check the last digit of the stored random number response, interpret the value as a command, and perform an action based on that command. The command values and the associated actions are described in Table 1.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDescription\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAction\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EServer response string contains batch commands\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExecute batch commands and send results back to server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EServer response string is a file path\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECheck for file path and upload (PUT) the file to server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EServer response string is a file path\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECheck for file path and download (GET) the file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: POWRUNER commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter successfully executing the command, POWRUNER sends the results back to the C2 server and stops execution.\u003C\/p\u003E\n\u003Cp\u003EThe C2 server can also send a PowerShell command to capture and store a screenshot of a victim\u2019s system. POWRUNER will send the captured screenshot image file to the C2 server if the \u201cfileupload\u201d command is issued. Figure 6 shows the PowerShell \u201cGet-Screenshot\u201d function sent by the C2 server.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Powershell Screenshot Functionality\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EdUpdateCheckers.ps1 (BONDUPDATER)\u003C\/h4\u003E\n\u003Cp\u003EOne of the recent advancements by APT34 is the use of DGA to generate subdomains. The BONDUPDATER script, which was named based on the hard-coded string \u201cB007\u201d, uses a custom DGA algorithm to generate subdomains for communication with the C2 server.\u003C\/p\u003E\n\u003Ch4\u003EDGA Implementation\u003C\/h4\u003E\n\u003Cp\u003EFigure 7 provides a breakdown of how an example domain (456341921300006B0C8B2CE9C9B007.mumbai-m[.]site) is generated using BONDUPDATER\u2019s custom DGA.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Breakdown of subdomain created by BONDUPDATER\u003C\/span\u003E\u003C\/p\u003E\n\u003Col style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThis is a randomly generated number created using the following expression: $rnd = -join (Get-Random -InputObject (10..99) -Count (%{ Get-Random -InputObject (1..6)}));\u003C\/li\u003E\n\u003Cli\u003EThis value is either 0 or 1. It is initially set to 0. If the first resolved domain IP address starts with 24.125.X.X, then it is set to 1.\u003C\/li\u003E\n\u003Cli\u003EInitially set to 000, then incremented by 3 after every DNS request\u003C\/li\u003E\n\u003Cli\u003EFirst 12 characters of system UUID.\u003C\/li\u003E\n\u003Cli\u003E\u201cB007\u201d hardcoded string.\u003C\/li\u003E\n\u003Cli\u003EHardcoded domain \u201cmumbai-m[.]site\u201d\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EBONDUPDATER will attempt to resolve the resulting DGA domain and will take the following actions based on the IP address resolution:\u003C\/p\u003E\n\u003Col style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003ECreate a temporary file in %temp% location\u003Cul\u003E\n\u003Cli\u003EThe file created will have the last two octets of the resolved IP addresses as its filename.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EBONDUPDATER will evaluate the last character of the file name and perform the corresponding action found in Table 2.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECharacter\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDescription\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile contains batch commands, it executes the batch commands\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERename the temporary file as .ps1 extension\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERename the temporary file as .vbs extension\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: BONDUPDATER Actions\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 8 is a screenshot of BONDUPDATER\u2019s DGA implementation.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Domain Generation Algorithm\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ESome examples of the generated subdomains observed at time of execution include:\u003C\/p\u003E\n\u003Cp\u003E143610035BAF04425847B007.mumbai-m[.]site\u003C\/p\u003E\n\u003Cp\u003E835710065BAF04425847B007.mumbai-m[.]site\u003C\/p\u003E\n\u003Cp\u003E376110095BAF04425847B007.mumbai-m[.]site\u003C\/p\u003E\n\u003Ch4\u003ENetwork Communication\u003C\/h4\u003E\n\u003Cp\u003EFigure 9 shows example network communications between a POWRUNER backdoor client and server.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Example Network Communication\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the example, the POWRUNER client sends a random GET request to the C2 server and the C2 server sends the random number (99999999990) as a response. As the response is a random number that ends with \u20180\u2019, POWRUNER sends another random GET request to receive \u0026nbsp;an additional command string. The C2 server sends back Base64 encoded response.\u003C\/p\u003E\n\u003Cp\u003EIf the server had sent the string \u201cnot_now\u201d as response, as shown in Figure 10, POWRUNER would have ceased any further requests and terminated its execution.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Example \u0026quot;not now\u0026quot; server response\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EBatch Commands\u003C\/h4\u003E\n\u003Cp\u003EPOWRUNER may also receive batch commands from the C2 server to collect host information from the system. This may include information about the currently logged in user, the hostname, network configuration data, active connections, process information, local and domain administrator accounts, an enumeration of user directories, and other data. An example batch command is provided in Figure 11.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Batch commands sent by POWRUNER C2 server\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAdditional Use of POWRUNER \/ BONDUPDATER\u003C\/h4\u003E\n\u003Cp\u003EAPT34 has used POWRUNER and BONDUPDATER to target Middle East organizations as early as July 2017. In July 2017, a FireEye Web MPS appliance detected and blocked a request to retrieve and install an APT34 POWRUNER \/ BONDUPDATER downloader file. During the same month, FireEye observed APT34 target a separate Middle East organization using a malicious .rtf file (MD5: 63D66D99E46FB93676A4F475A65566D8)\u003Cb\u003E \u003C\/b\u003Ethat exploited CVE-2017-0199. This file issued a GET request to download a malicious file from:\u003C\/p\u003E\n\u003Cp\u003Ehxxp:\/\/94.23.172.164\/dupdatechecker.doc.\u003C\/p\u003E\n\u003Cp\u003EAs shown in Figure 12, the script within the dupatechecker.doc file attempts to download another file named dupatechecker.exe from the same server. The file also contains a comment by the malware author that appears to be an apparent taunt to security researchers.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/apt34-middle-east\/Fig12.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Contents of dupdatechecker.doc script\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe dupatechecker.exe file (MD5: C9F16F0BE8C77F0170B9B6CE876ED7FB) drops both BONDUPDATER and POWRUNER. These files connect to proxychecker[.]pro for C2.\u003C\/p\u003E\n\u003Ch4\u003EOutlook and Implications\u003C\/h4\u003E\n\u003Cp\u003ERecent activity by APT34 demonstrates that they are capable group with potential access to their own development resources. During the past few months, APT34 has been able to quickly incorporate exploits for at least two publicly vulnerabilities (CVE-2017-0199 and CVE-2017-11882)\u003Cb\u003E \u003C\/b\u003Eto target organizations in the Middle East. We assess that APT34\u2019s efforts to continuously update their malware, including the incorporation of DGA for C2, demonstrate the group\u2019s commitment to pursing strategies to deter detection. We expect APT34 will continue to evolve their malware and tactics as they continue to pursue access to entities in the Middle East region.\u003C\/p\u003E\n\u003Ch4\u003EIOCs\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFilename \/ Domain \/ IP Address\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5 Hash or Description\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECVE-2017-11882 exploit document\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EA0E6933F4E0497269620F44A083B2ED4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eb.txt\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9267D057C065EA7448ACA1511C6F29C7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ev.txt\/v.vbs\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EB2D13A336A3EB7BD27612BE7D4E334DF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdUpdateCheckers.base\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4A7290A279E6F2329EDD0615178A11FF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EhUpdateCheckers.base\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E841CE6475F271F86D0B5188E4F8BC6DB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EcUpdateCheckers.bat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E52CA9A7424B3CC34099AD218623A0979\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdUpdateCheckers.ps1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBBDE33F5709CB1452AB941C08ACC775E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EhUpdateCheckers.ps1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E247B2A9FCBA6E9EC29ED818948939702\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGoogleUpdateschecker.vbs\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC87B0B711F60132235D7440ADD0360B0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/mumbai-m[.]site\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOWRUNER C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/dns-update[.]club\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalware Staging Server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECVE-2017-0199 exploit document\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E63D66D99E46FB93676A4F475A65566D8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E94.23.172.164:80\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalware Staging Server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edupdatechecker.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ED85818E82A6E64CA185EDFDDBA2D1B76\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edupdatechecker.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC9F16F0BE8C77F0170B9B6CE876ED7FB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eproxycheker[.]pro\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E46.105.221.247\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHas resolved mumbai-m[.]site \u0026amp; hpserver[.]online\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E148.251.55.110\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHas resolved mumbai-m[.]site and dns-update[.]club\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E185.15.247.147\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHas resolved dns-update[.]club\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E145.239.33.100\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHas resolved dns-update[.]club\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E82.102.14.219\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHas resolved ns2.dns-update[.]club \u0026amp; hpserver[.]online \u0026amp; anyportals[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ev7-hpserver.online.hta\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EE6AC6F18256C4DDE5BF06A9191562F82\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdUpdateCheckers.base\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3C63BFF9EC0A340E0727E5683466F435\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EhUpdateCheckers.base\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEEB0FF0D8841C2EBE643FE328B6D9EF5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EcUpdateCheckers.bat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFB464C365B94B03826E67EABE4BF9165\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdUpdateCheckers.ps1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E635ED85BFCAAB7208A8B5C730D3D0A8C\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EhUpdateCheckers.ps1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E13B338C47C52DE3ED0B68E1CB7876AD2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Egoogleupdateschecker.vbs\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDBFEA6154D4F9D7209C1875B2D5D70D5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehpserver[.]online\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ev7-anyportals.hta\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEAF3448808481FB1FDBB675BC5EA24DE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdUpdateCheckers.base\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E42449DD79EA7D2B5B6482B6F0D493498\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EhUpdateCheckers.base\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EA3FCB4D23C3153DD42AC124B112F1BAE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EdUpdateCheckers.ps1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEE1C482C41738AAA5964730DCBAB5DFF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EhUpdateCheckers.ps1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EE516C3A3247AF2F2323291A670086A8F\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eanyportals[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022290\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n",
        "jcr:lastModified": "Tue Jan 23 2018 12:01:41 GMT-0500",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "matthew.sawicki@fireeye.com",
      "jcr:lastModified": "Wed Jan 08 2020 18:58:29 GMT+0000",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye has observed APT34 using an exploit for a recently patched Microsoft Office vulnerability to target a government organization in the Middle East.\u003C\/p\u003E\n",
      "jcr:lastModified": "Thu Dec 07 2017 11:59:51 GMT-0500",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
