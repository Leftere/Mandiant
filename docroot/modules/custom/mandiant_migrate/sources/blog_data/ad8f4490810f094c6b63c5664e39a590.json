{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Thu Aug 22 2019 03:35:03 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Commando VM 2.0: Customization, Containers, and Kali, Oh My!",
    "jcr:versionHistory": "e28d70c5-7bd5-4b23-b134-373fc334493a",
    "author": "Jacob Barteaux",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "e1b6a459-4da2-4313-977e-96b3991758a9"
    ],
    "jcr:created": "Tue Oct 22 2019 15:29:36 GMT+0000",
    "cq:lastModified": "Tue Oct 22 2019 15:29:19 GMT+0000",
    "jcr:baseVersion": "e1b6a459-4da2-4313-977e-96b3991758a9",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:jacob-barteaux",
      "fireeye-blog-authors:blaine-stancill",
      "fireeye-blog-authors:nhan-huynh",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:FLARE",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:penetration-testing",
      "fireeye-blog-tags:tools",
      "fireeye-blog-tags:windows",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:red-team"
    ],
    "jcr:uuid": "eab7761f-8980-46c8-a991-a8d628a8f02c",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Aug 07 2019 15:15:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EThe Complete Mandiant Offensive Virtual Machine (\u201c\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\u0022\u003ECommando VM\u003C\/a\u003E\u201d) swept the penetration testing community by storm when it debuted in early 2019 at Black Hat Asia Arsenal. Our \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/03\/commando-vm-windows-offensive-distribution.html\u0022\u003E1.0 release\u003C\/a\u003E made headway featuring more than 140 tools. Well now we are back again for another spectacular release, this time at Black Hat USA Arsenal 2019! In this 2.0 release we\u2019ve listened to the community and implemented some new must have features: Kali Linux, Docker containers, and package customization.\u003C\/p\u003E\n\u003Ch4\u003EAbout Commando VM\u003C\/h4\u003E\n\u003Cp\u003EPenetration testers commonly use their own variants of Windows machines when assessing Active Directory environments. We specifically designed Commando VM to be the go-to platform for performing internal penetration tests. The benefits of using Commando VM include native support for Windows and Active Directory, using your VM as a staging area for command and control (C2) frameworks, more easily (and interactively) browsing network shares, and using tools such as \u003Ca href=\u0022https:\/\/www.harmj0y.net\/blog\/redteaming\/powerview-2-0\/\u0022\u003EPowerView\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/wald0.com\/?p=68\u0022\u003EBloodHound\u003C\/a\u003E without any worry about placing output files on client assets.\u003C\/p\u003E\n\u003Cp\u003ECommando VM uses \u003Ca href=\u0022https:\/\/boxstarter.org\/\u0022\u003EBoxstarter\u003C\/a\u003E, \u003Ca href=\u0022https:\/\/chocolatey.org\/\u0022\u003EChocolatey\u003C\/a\u003E, and \u003Ca href=\u0022https:\/\/myget.org\/\u0022\u003EMyGet\u003C\/a\u003E packages to install software and delivers many tools and utilities to support penetration testing. With over 170 tools and growing, Commando VM aims to be the de facto Windows machine for every penetration tester and red teamer.\u003C\/p\u003E\n\u003Ch4\u003ERecent Updates\u003C\/h4\u003E\n\u003Cp\u003ESince its initial release at Black Hat Asia Arsenal in March 2019, Commando VM has received three additional updates, including new tools and\/or bug fixes. We closed 61 issues on GitHub and added 26 new tools. Version 2.0 brings three major new features, more tools, bug fixes, and much more!\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CommandoVM\/CVM%20logo.png\u0022\u003E\u003C\/p\u003E\n\u003Ch4\u003EKali Linux\u003C\/h4\u003E\n\u003Cp\u003EIn 2016 Microsoft released the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/wsl\/about\u0022\u003EWindows Subsystem for Linux\u003C\/a\u003E (WSL). Since then, pentesters have been trying to leverage this capability to squeeze more productivity out of their Window systems. The fewer Virtual Machines you need to run, the better. With WSL you can install Linux distributions from the Windows Store and run common Linux commands in a terminal such as starting up an SSH, MySQL or Apache server, automating mundane tasks with common scripting languages, and utilizing many other Linux applications within the same Windows system.\u003C\/p\u003E\n\u003Cp\u003EIn January 2018, Offensive Security announced support for \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.kali.org\/tutorials\/kali-on-the-windows-subsystem-for-linux\/\u0022\u003EKali Linux in WSL\u003C\/a\u003E. With our 2.0 release, Commando VM officially supports Kali Linux on WSL. To get the most out of Kali, we\u0027ve also included \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/sourceforge.net\/projects\/vcxsrv\/\u0022\u003EVcXsrv\u003C\/a\u003E, an X Server that allows us to display the entire Linux GUI on the Windows Desktop (Figure 1). Displaying the Linux GUI and passing windows to Windows had been \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.kali.org\/news\/kali-linux-in-the-windows-app-store\/\u0022\u003Epreviously documented by Offensive Security\u003C\/a\u003E\u0026nbsp;and other \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/blog.ropnop.com\/configuring-a-pretty-and-usable-terminal-emulator-for-wsl\/\u0022\u003Eprofessionals\u003C\/a\u003E, and we have combined these to include the GUI as well as shortcuts to take advantage of popular programs such as \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/launchpad.net\/terminator\u0022\u003ETerminator\u003C\/a\u003E\u0026nbsp;(Figure 2) and \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.owasp.org\/index.php\/Category:OWASP_DirBuster_Project\u0022\u003EDirBuster\u003C\/a\u003E\u0026nbsp;(Figure 3).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Kali XFCE on WSL with VcXsrv\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Terminator on Commando VM \u2013 Kali WSL with VcXsrv\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: DirBuster on Commando VM \u2013 Kali WSL with VcXsrv\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDocker\u003C\/h4\u003E\n\u003Cp\u003EDocker is becoming increasingly popular within the penetration testing community. Multiple blog posts\u0026nbsp;exist detailing \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/blog.ropnop.com\/docker-for-pentesters\/\u0022\u003Einteresting functionality\u003C\/a\u003E using \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.vdalabs.com\/2019\/04\/09\/docker-for-hackers-from-apt-install-docker-ce-to-pwn-in-10-minutes-or-less\/\u0022\u003EDocker for pentesting\u003C\/a\u003E. Based on its popularity \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\/wiki\/Commando-VM-Roadmap\u0022\u003EDocker has been on our roadmap\u003C\/a\u003E\u0026nbsp;since the 1.0 release in March 2019, and we now support it with our release of Commando VM 2.0. We pull tools such as \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/OWASP\/Amass\u0022\u003EAmass\u003C\/a\u003E\u0026nbsp;and \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/smicallef\/spiderfoot\u0022\u003ESpiderFoot\u003C\/a\u003E and provide scripts to launch the containers for each tool. Figure 4 shows an example of SpiderFoot running within Docker.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Impacket container running on Docker\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFor command line docker containers, such as Amass, we created a PowerShell script to automatically run Amass commands through docker. This script is also added to the PATH, so users can call \u003Cspan class=\u0022code\u0022\u003Eamass\u003C\/span\u003E from anywhere. This script is shown in Figure 5. We encourage users to come up with their own scripts to do more creative things with Docker.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Fig5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Amass.ps1 script\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis script is also executed when the shortcut is opened.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Amass Docker container executed via PowerShell script\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ECustomization\u003C\/h4\u003E\n\u003Cp\u003ENot everyone needs all of the tools all of the time. Some tools can extend the installation process by hours, take up many gigabytes of hard drive space, or come with unsuitable licenses and user agreements. On the other hand, maybe you would like to install additional reversing tools available within our popular \u003Ca href=\u0022https:\/\/github.com\/fireeye\/flare-vm\u0022\u003EFLARE VM\u003C\/a\u003E; or you would prefer one of the many alternative text editors or browsers available from the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/chocolatey.org\/packages\u0022\u003E\u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Echocolatey\u003C\/span\u003E\u003C\/b\u003E community feed\u003C\/a\u003E. Either way, we would like to provide the option to selectively install only the packages you desire. Through customization you and your organization can also share or distribute the profile to make sure your entire team has the same VM environment. To provide for these scenarios, the last big change for Commando 2.0 is the support for installation customization. We recommend using our \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\/blob\/master\/commandovm.win10.installer.fireeye\/tools\/packages.json\u0022\u003Edefault profile\u003C\/a\u003E, and removing or adding tools to it as you see fit. Please read the following section to see how.\u003C\/p\u003E\n\u003Ch4\u003EHow to Create a Custom Install\u003C\/h4\u003E\n\u003Cp\u003EBefore we start, please note that after customizing your own edition of Commando VM, the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Ecup all\u003C\/span\u003E\u003C\/b\u003E command will only upgrade packages pre-installed within your customized distribution. New packages released by our team in the future will not be installed or upgraded automatically with \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Ecup all\u003C\/span\u003E\u003C\/b\u003E. When needed, these new packages can always be installed manually using the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Ecinst\u003C\/span\u003E\u003C\/b\u003E or \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Echoco install\u003C\/span\u003E\u003C\/b\u003E command, or by adding them to your profile before a new install.\u003C\/p\u003E\n\u003Ch4\u003ESimple Instructions\u003C\/h4\u003E\n\u003Col style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EDownload the zip from \u003Ca href=\u0022https:\/\/github.com\/fireeye\/commando-vm\u0022\u003Ehttps:\/\/github.com\/fireeye\/commando-vm\u003C\/a\u003E into your Downloads folder.\u003C\/li\u003E\n\u003Cli\u003EDecompress the zip and edit the ${Env:UserProfile}\\Downloads\\commando-vm-master\\commando-vm-master\\profile.json file by removing tools or adding tools in the \u201cpackages\u201d section. Tools are available from our \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\/blob\/master\/packages.csv\u0022\u003Epackage list\u003C\/a\u003E\u0026nbsp;or from the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/chocolatey.org\/packages\u0022\u003Echocolatey repository\u003C\/a\u003E.\u003C\/li\u003E\n\u003Cli\u003EOpen an administrative PowerShell window and enable script execution.\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003ESet-ExecutionPolicy Unrestricted -f\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EChange to the unzipped project directory.\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ecd ${Env:UserProfile}\\Downloads\\commando-vm-master\\commando-vm-master\\\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EExecute the install with the -profile_file argument.\u003Cul\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E.\\install.ps1 -profile_file .\\profile.json\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Ch4\u003EDetailed Instructions\u003C\/h4\u003E\n\u003Cp\u003ETo start customizing your own distribution, you need the following three items* from our public \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\u0022\u003EGitHub repository\u003C\/a\u003E:\u003C\/p\u003E\n\u003Col style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EOur \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\/blob\/master\/install.ps1\u0022\u003E\u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Einstall.ps1\u003C\/span\u003E\u003C\/b\u003E script\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003EOur \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\/blob\/master\/sample_profile.ps1\u0022\u003Esample \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Eprofile.json\u003C\/span\u003E\u003C\/b\u003E\u003C\/a\u003E\u003C\/li\u003E\n\u003Cli\u003EAn installation template. We recommend using \u003Cb\u003E\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\/tree\/master\/commandovm.win10.installer.fireeye\u0022\u003E\u003Cspan class=\u0022code\u0022\u003Ecommandovm.win10.install.fireeye\u003C\/span\u003E\u003C\/a\u003E\u003C\/b\u003E.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003E*Note: If you download the project ZIP from GitHub it will contain all three items.\u003C\/p\u003E\n\u003Cp\u003EThe install script will now support an optional \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003E-profile_file\u003C\/span\u003E\u003C\/b\u003E argument, which specifies a JSON profile. Without the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003E-profile_file\u003C\/span\u003E\u003C\/b\u003E argument, running \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003E.\\install.ps1\u003C\/span\u003E \u003C\/b\u003Ewill install the default Commando VM distribution. To customize your edition of Commando VM, you need to create a profile in JSON format, and then pass that to the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003E-profile_file\u003C\/span\u003E\u003C\/b\u003E argument. Let us explore the sample \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Eprofile.json\u003C\/span\u003E\u003C\/b\u003E profile (Figure 7).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Fig7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: profile.json profile\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis JSON profile starts with the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Eenv\u003C\/span\u003E\u003C\/b\u003E dictionary which specifies many environment variables used by the installer. These environment variables can, and should, be left to their default values. Here is a list of the supported environment variables:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E\u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003EVM_COMMON_DIR\u003C\/span\u003E\u003C\/b\u003E specifies where the shared libraries should be installed on the VM. After a successful install, you will find a \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003EFireEyeVM.Common\u003C\/span\u003E\u003C\/b\u003E directory within this location. This contains a PowerShell module that is shared by our packages.\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003ETOOL_LIST_DIR\u003C\/span\u003E\u003C\/b\u003E and \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003ETOOL_LIST_SHORTCUT\u003C\/span\u003E \u003C\/b\u003Especify which directory contains the list of all installed packages within the Start Menu and the name of the desktop shortcut, respectively.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003ERAW_TOOLS_DIR\u003C\/span\u003E\u003C\/b\u003E environment variable specifies the location where some tools will be installed. Chocolatey defaults to installing tools in \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003E%ProgramData%\\Chocolatey\\lib\u003C\/span\u003E\u003C\/b\u003E. This environment variable by default points to \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003E%SystemDrive%\\Tools\u003C\/span\u003E\u003C\/b\u003E, allowing you to more easily access some tools on the command line.\u003C\/li\u003E\n\u003Cli\u003EAnd, finally, \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003ETEMPLATE_DIR\u003C\/span\u003E\u003C\/b\u003E specifies a template package directory \u003Ci\u003Erelative to where \u003C\/i\u003E\u003Cb\u003E\u003Ci\u003E\u003Cspan class=\u0022code\u0022\u003Einstall.ps1\u003C\/span\u003E\u003C\/i\u003E\u003C\/b\u003E\u003Ci\u003E is on disk\u003C\/i\u003E. We strongly recommend using the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Ecommandovm.win10.installer.fireeye\u003C\/span\u003E\u003C\/b\u003E package available on our GitHub repository as the template. If your VM is running Windows 7, please switch to the appropriate \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Ecommandovm.win7.installer.fireeye\u003C\/span\u003E\u003C\/b\u003E package. If you are feeling \u201chacky\u201d and adventurous, feel free to customize the installer further by modifying the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Echocolateyinstall.ps1\u003C\/span\u003E\u003C\/b\u003E and \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Echocolateyuninstall.ps1\u003C\/span\u003E\u003C\/b\u003E scripts within the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Etools\u003C\/span\u003E\u003C\/b\u003E directory of the template. Note that a proper template will be a folder containing at least 5 things: (1) a properly formatted \u003Cspan class=\u0022code\u0022\u003Enuspec\u003C\/span\u003E file, (2) a \u201ctools\u201d folder that contains (3) a \u003Cspan class=\u0022code\u0022\u003Echocolateyinstall.ps1\u003C\/span\u003E file, (4) a \u003Cspan class=\u0022code\u0022\u003Echocolateyuninstall.ps1\u003C\/span\u003E file, and (5) a \u003Cspan class=\u0022code\u0022\u003Eprofile.json\u003C\/span\u003E file. If you use our template, the only thing you need to change is the packages.json file. The easiest way to do this is just download and extract the commando-vm zip file from GitHub.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EWith the packages variables set, you can now specify which packages to install on your own distribution. Some packages accept additional installation arguments. You can see an example of this by looking at the \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Eopenvpn.fireeye\u003C\/span\u003E\u003C\/b\u003E entry. For a complete list of packages available from our feed, please see our \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/commando-vm\/blob\/master\/packages.csv\u0022\u003Epackage list\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EOnce you finish modifying your profile, you are ready for installation. Run \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Epowershell.exe\u003C\/span\u003E\u003C\/b\u003E with elevated privileges and execute the following commands to install your own edition of Commando VM, assuming you saved your version of the profile named: \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Emyprofile.json\u003C\/span\u003E\u003C\/b\u003E (Figure 8).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/commandovm2\/Fig8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Example myprofile.json\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cb\u003E\u003Cspan class=\u0022code\u0022\u003Emyprofile.json\u003C\/span\u003E\u003C\/b\u003E file can then be shared and distributed throughout your entire organization to ensure everyone has the same VM environment when installing Commando VM.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003ECommando VM was originally designed to be the de facto Windows machine for every penetration tester and red teamer. Now, with the addition of Kali Linux support, Docker and installation customization, we hope it will be the one\u003Cb\u003E \u003C\/b\u003Emachine for all penetration testers and red teamers. For a complete list of tools, and for the installation script, please see the \u003Ca href=\u0022https:\/\/github.com\/fireeye\/commando-vm\u0022\u003ECommando VM GitHub repository\u003C\/a\u003E. We look forward to addressing user feedback, adding more tools and features, and creating many more enhancements for this Windows attack platform.\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Aug 08 2019 12:06:19 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003ECommando VM 2.0 brings three major new features, more tools, bug fixes, and much more!\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Aug 05 2019 20:08:03 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Oct 22 2019 15:29:19 GMT+0000",
      "imageRotate": "0"
    }
  }
}
