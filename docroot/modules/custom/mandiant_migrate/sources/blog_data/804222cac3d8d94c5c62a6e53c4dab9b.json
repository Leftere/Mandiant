{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Jun 28 2016 05:00:00 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "The Latest Android Overlay Malware Spreading via SMS Phishing in Europe",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "fd006537-860a-4668-98f5-61f48326ec48",
    "author": "Wu Zhou",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "a41a30db-65de-4b0b-aaf7-8f191abf046a"
    ],
    "jcr:created": "Thu Aug 11 2016 16:07:38 GMT-0400",
    "cq:lastReplicated": "Thu Aug 11 2016 16:07:37 GMT-0400",
    "cq:lastModified": "Thu Aug 11 2016 16:07:29 GMT-0400",
    "cq:distribute": true,
    "jcr:description": "Recent malware campaigns in Europe  are using similar overlay techniques to trick unsuspecting users into providing their banking credentials.",
    "jcr:baseVersion": "a41a30db-65de-4b0b-aaf7-8f191abf046a",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-tags:europe",
      "fireeye-blog-authors:linhai-song",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-authors:wu-zhou",
      "fireeye-blog-authors:cap-jens-monrad",
      "fireeye-blog-tags:android-devices",
      "fireeye-blog-threat-research:threat-research\/malware-research",
      "fireeye-blog-authors:junyuan-zeng",
      "fireeye-blog-tags:phishing",
      "fireeye-blog-authors:cap-jsu"
    ],
    "jcr:uuid": "1bfd9ff9-91f6-46e3-bfcd-6c88e2270767",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Jun 28 2016 02:00:00 GMT-0700",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynda.hall@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
        "text": "\u003Ch5\u003EIntroduction\u003C\/h5\u003E\n\u003Cp\u003EIn April 2016, while investigating a Smishing campaign dubbed \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2016\/04\/rumms-android-malware.html\u0022\u003ERuMMS\u003C\/a\u003E that involved the targeting of Android users in Russia, we also noticed three similar Smishing campaigns reportedly spreading in \u003Ca href=\u0022http:\/\/b0n1.blogspot.com\/2016\/02\/recent-mazarbot-targeting-mobilepay-can.html\u0022\u003EDenmark\u003C\/a\u003E (February 2016), in \u003Ca href=\u0022http:\/\/b0n1.blogspot.com\/2016\/02\/android-mazarbot-stealing-credit-card.html\u0022\u003EItaly\u003C\/a\u003E (February 2016), and in both Denmark and Italy (April 2016).\u003C\/p\u003E\n\u003Cp\u003EUnlike the RuMMS campaign, these three campaigns in Europe used view overlay techniques (the same \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2015\/12\/slembunk_an_evolvin.html\u0022\u003Etechnique\u003C\/a\u003E we described being used by \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2016\/01\/slembunk-part-two.html\u0022\u003ESlemBunk\u003C\/a\u003E malware) to present nearly identical credential input UIs as seen in benign apps, subsequently tricking unwary users into providing their banking credentials.\u003C\/p\u003E\n\u003Cp\u003EFigure 1 shows the process of how these overlay malware spread via Smishing and infect Android users.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1. Overview\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThreat actors typically first setup the command and control (C2) servers and malware hosting sites, then put the malware apps on the hosting sites and send victims SMS messages with an embedded link that leads to the malware app. After landing on the user\u2019s device, the malware launches a process to monitor which app is running in the foreground on the compromised device. When the user launches a benign app into the foreground that the malware is programmed to target (such as a banking app), the malware overlays a phishing view on top of the benign app. The unwary user, assuming that they are using the benign app, will enter the required account credentials, which are then sent to remote C2 servers controlled by threat actors.\u003C\/p\u003E\n\u003Cp\u003EThrough our close monitoring of overlay malware spreading via Smishing messages, we recently observed that these types of attacks did not stop despite publicity from security researchers. Instead, our systematic study revealed some interesting and simultaneously worrying findings:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFrom February 2016 to June 2016, we observed 55 malicious binaries used in a series of Smishing campaigns targeting different countries in Europe. All the malware samples use the same view overlay technique to phish banking credentials, and all share the same C2 communication protocol. Besides the three publicly disclosed campaigns in \u003Cb\u003EDenmark\u003C\/b\u003E and \u003Cb\u003EItaly\u003C\/b\u003E, we observed the same threats targeting \u003Cb\u003EGermany\u003C\/b\u003E in March 2016 and \u003Cb\u003EAustria\u003C\/b\u003E from April 2016 to May 2016. In June 2016, we still see new samples emerging and being used to target users in Denmark; a few other European countries could be impacted as well.\u003C\/li\u003E\n\u003Cli\u003EThe key functions of these samples have been the same; however, over time, we noticed that the samples keep evolving in a few different directions. For example, later campaigns usually \u003Cb\u003Etargeted more benign apps\u003C\/b\u003E than earlier campaigns, focusing on messaging apps, for example, as opposed to banking apps. Also, the malicious apps used in later campaigns are often harder to analyze because \u003Cb\u003Eobfuscation techniques\u003C\/b\u003E were adopted to evade detection. In addition, some new functionality was added; in particular, we noticed that more recent samples leveraged reflection to bypass the SMS writing restriction enforced by the App Ops service (introduced in Android 4.3). All of this suggests that threat actors are \u003Cb\u003Eactively improving their code\u003C\/b\u003E.\u003C\/li\u003E\n\u003Cli\u003EUnlike the RuMMS campaign, which mainly used shared hosting services to distribute the malware, the Europe Smishing campaigns show \u003Cb\u003Emore diversity\u003C\/b\u003E in the associated infrastructure, including the use of self-registered domains, compromised websites, and URL shortening services. Since February 2016, we observed that 27 \u003Cb\u003EBit.ly\u003C\/b\u003E links have been used. In June 2016, we noticed that another three URL shorteners, including \u003Cb\u003Etr.im\u003C\/b\u003E, \u003Cb\u003Ejar.mar\u003C\/b\u003E and \u003Cb\u003Eis.gd,\u003C\/b\u003E were adopted in the latest campaign. This suggests that threat actors are trying to \u003Cb\u003Ediversify the URL shorteners to avoid detection.\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003EIn total, we identified \u003Cb\u003E12 C2 servers\u003C\/b\u003E hosted in \u003Cb\u003Efive different countries\u003C\/b\u003E that were involved in these campaigns. Among them, the IP address 85.93.5.109 has been used by 24 malicious apps in two campaigns and 85.93.5.139 has been used by eight malicious apps. We also observed that \u003Cb\u003Efour C2 servers are within the same 85.93.5.0\/24 network segment\u003C\/b\u003E. All this suggests that the threat actors have \u003Cb\u003Econtrol over considerable network resources\u003C\/b\u003E.\u003C\/li\u003E\n\u003Cli\u003EURL shortening services usually provide \u003Cb\u003Elink analytics services\u003C\/b\u003E, which enables us to collect data on how many users (from which countries) clicked particular short links and when it happened. Using these services, we found there have been at least \u003Cb\u003E161,349 \u003C\/b\u003Eclicks on the 30 short links redirecting to the overlay malware, each of which can lead to the infection of one Android device. The date information indicated that \u003Cb\u003Emost of the clicks occurred in the first few days after the links were created\u003C\/b\u003E.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003E\u003Cb\u003EFive Europe Smishing Campaigns\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EFrom February 2016 to April 2016, security researchers reported on three campaigns involving Android overlay malware being distributed via SMS phishing messages. As described in the reports, those campaigns started with SMS phishing messages being sent to a user\u2019s phone. An example SMS message in the latest campaign is shown in Figure 1. The message roughly translates to, \u201cWe could not deliver your order. Please check your shipping information here hxxp:\/\/bit[.]ly\/1ZfcNeV\u201d. Users in Denmark and Italy were reported to be the primary targets of these three campaigns.\u003C\/p\u003E\n\u003Cp\u003EOur recent investigation revealed that these activities keep developing, with other European countries, including \u003Cb\u003EGermany\u003C\/b\u003E and \u003Cb\u003EAustria\u003C\/b\u003E, being impacted as well. We group these activities into five campaigns, as shown in Table 1.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Tab1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Tab1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1. Overview of the five Europe Smishing campaigns ordered in the beginning dates\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E(*: First publicized by FireEye researchers)\u003C\/p\u003E\n\u003Cp\u003EShortened links were commonly used in the five campaigns. In total, we identified 30 short links. Some URL shorteners provide analytics, through which anyone can see how many people clicked the link and the countries those clicks came from. For example, Figure 2 shows that there were 135 clicks from Germany on one of the \u003Cb\u003EWhats-Germany\u003C\/b\u003E samples, and 1,633 clicks from Austria on one of the \u003Cb\u003EPost-Austria\u003C\/b\u003E samples.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2. Analytics pages on one Whats-Germany sample and one post-Austria sample\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003ECode Evolution\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EIn the aforementioned Smishing campaigns, we observed that the malware code has been evolving over time. The malware author(s) seems to be working diligently to improve the code by adding new target apps, obfuscating the code to evade detection, and trying to bypass App Ops restrictions.\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EAdding New Target Apps\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EAll five campaigns attempt to steal credentials from various targeted apps. When the malicious app is started, a background service is triggered to periodically monitor the apps running in the foreground. When the service detects that the foreground app is one of its targeted apps, it overlays a carefully designed phishing view on top of the target app.\u003C\/p\u003E\n\u003Cp\u003EAnalysis of the malware code shows that this task is executed by a method in the main service, named \u003Ci\u003EinitInjTask\u003C\/i\u003E in most cases. Figure 3 shows the code of \u003Ci\u003EinitInjTask\u003C\/i\u003E in one of the earliest samples of the \u003Cb\u003EMPay-Denmark\u003C\/b\u003E campaign, in which only a localized app named \u003Ca href=\u0022http:\/\/mobilepay.dk\/da-dk\/Pages\/The-story-in-English.aspx\u0022\u003EMobilePay\u003C\/a\u003E was targeted.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig3.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3. \u003Ci\u003EMobileBank\u003C\/i\u003E class to be started to overlay app named \u201cdk.danskebank.mobilepay\u201d\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E(code extracted from app with a MD5 of 49dac3b35afb2e8d3605c72d0d83f631)\u003C\/p\u003E\n\u003Cp\u003EFigure 4 shows the code of \u003Ci\u003EinitInjTask\u003C\/i\u003E in one \u003Cb\u003EWhats-Italy \u003C\/b\u003Esample, in which the target was changed to a more widely used app: WhatsApp Messenger.\u003C\/p\u003E\n\u003Ch4\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig4.png\u0022\u003E\u003C\/h4\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4. \u003Ci\u003ECards\u003C\/i\u003E class to be started to overlay app named \u201ccom.whatsapp\u201d\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E(code extracted from app with a MD5 of 97c2d04aa0f3c3b446fc228c1dbc4837)\u003C\/p\u003E\n\u003Cp\u003EFigure 5 shows the code of \u003Ci\u003EinitInjTask\u003C\/i\u003E in one \u003Cb\u003EWhats-Germany \u003C\/b\u003Esample, in which two apps \u2013 WhatsApp and the Google Play Store \u2013 were targeted.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig5.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5. \u003Ci\u003ECards\u003C\/i\u003E class to be started to overlay apps WhatsApp and Play Store\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E(code extracted from app with a MD5 of 9e9d9a3717eed4d558a3f5eddb260901)\u003C\/p\u003E\n\u003Cp\u003EFigure 6 shows the code of \u003Ci\u003EinitInjTask\u003C\/i\u003E in one \u003Cb\u003EPost-Austria \u003C\/b\u003Esample (in this case, the malicious app was obfuscated; the code was extracted from the dropped jar file). In total, eight worldwide popular apps \u2013 including Uber and Tencent\u2019s WeChat \u2013 were on its radar.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig6.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-S\u0022\u003EFigure 6. \u003Ci\u003Ecqkwjqjtoz\u003C\/i\u003E class to be started to overlay apps 8 popular apps\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E(code extracted from app with a MD5 of d70296d3dc4937dedd44f93bb3b74034)\u003C\/p\u003E\n\u003Cp\u003EThe code examples demonstrate changes in the malware over time. Early samples targeted single apps (a localized banking app and WhatsApp) while later samples included a broader range of apps, suggesting that the threat actors continue to both improve their malware and broaden their targeting, presumably for greater financial gain.\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003ECode Obfuscation\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EIn earlier campaigns, including MPay-Denmark, Whats-Italy and Whats-Germany, most of the malicious apps were not obfuscated and experienced reverse engineers can work readily with the disassembled code.\u003C\/p\u003E\n\u003Cp\u003EFigure 7 shows the manifest file and code structures for these earlier samples. With these two pieces of information, we see that three receivers are registered for various purposes: to handle incoming SMS messages; to request device-admin privileges; and to start the app at booting time and handle two application-specific events. There are also two services designed to be running in the background and four activities meant to interact with users. With this basic information at hand, adept malware analysts can readily figure out the role played by each part of the code and further understand how these pieces work together to achieve the malware\u2019s goal.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig7.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7. Code structure and manifest file of earlier un-obfuscated code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ESince April 2016, we observed that all the samples in our dataset had adopted obfuscation techniques. With the obfuscation, the manifest file became harder to read and the code structure looked totally different.\u003C\/p\u003E\n\u003Cp\u003EFigure 8 presents one sample in the \u003Cb\u003EPostDanmark\u003C\/b\u003E campaign. The code structure on the left shows that there are five classes named \u201c\u003Ci\u003Ea\u003C\/i\u003E\u201d, \u201c\u003Ci\u003Eb\u003C\/i\u003E\u201d, \u201c\u003Ci\u003Ec\u003C\/i\u003E\u201d, \u201c\u003Ci\u003Ed\u003C\/i\u003E\u201d and \u201c\u003Ci\u003Emrtbeig\u003C\/i\u003E\u201d with a same package name of \u201c\u003Ci\u003Ecom.atrdectn.ioitsrc\u003C\/i\u003E\u201d. At the right side, the manifest file shows there are four receivers, seven services and four activities declared, with a different package name of \u201c\u003Ci\u003Ecom.lpygioep.tjzcverotl\u003C\/i\u003E\u201d. So where is the code of these declared classes? What are the purposes of these classes named at left? Here the code is much more complex to analyze.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig8.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8. Code structure and manifest file of later obfuscated code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EDeeper investigation showed that these classes defined on the left side compose the real payload and overlay the phishing view on top of the eight popular benign apps. Their code is in fact hidden in the asset file named \u003Ci\u003Emptxip.dat\u003C\/i\u003E, which was encoded in a special manner beforehand.\u003C\/p\u003E\n\u003Cp\u003EThe classes at the left side are actually unpacking code to decode the asset file, to load the real payload at runtime, and leverage reflection to execute the malicious code in the payload. This process is usually much more complex, and involves a round of static analysis first to understand what is in the code, then dynamic analysis to recover the real payload, and then both analyses to understand the real payload. Antivirus vendors often have difficulty identifying such threats. As of June 8, 2016, only 6 out of 54 anti-virus tools labeled these samples as malicious.\u003C\/p\u003E\n\u003Ch5\u003EBypassing App Ops Restriction\u003C\/h5\u003E\n\u003Cp\u003EAndroid uses app permissions to restrict the set of sensitive actions a particular app can take. With earlier versions of the Android operating system, when an app is installed, the user is prompted to agree to the permissions the app requests. If the user declines, then the app isn\u2019t installed \u2013 it is an all or nothing situation. App Ops is a service framework introduced in Android 4.3 that allows the permissions of individual apps to be changed at runtime. With App Ops, users can disallow some permission requests at runtime. Interestingly, we observed that, starting from the \u003Cb\u003EWhats-Italy\u003C\/b\u003E campaign, the overlay malware began to adopt some code to bypass these runtime restrictions.\u003C\/p\u003E\n\u003Cp\u003EFigure 10 shows a code snippet in the class \u003Ci\u003EMainService\u003C\/i\u003E, called by the launcher activity at app start time. It checks whether the build version of the device is 19 (Android 4.4) and whether the WRITE_SMS ops are disabled. If both conditions are true, the malware will call the method \u003Ci\u003EsetWriteEnabled\u003C\/i\u003E of class \u003Ci\u003ESmsWriteOpUtil \u003C\/i\u003E(at line 93) to re-enable the permission of writing SMS.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig9.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9. Code to check and re-enable the permission of writing SMS\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 10 shows the major code of \u003Ci\u003ESmsWriteOpUtil \u003C\/i\u003Eto re-enable the SMS writing permission. At line 60, a handle to the system service App Ops is fetched. At line 61, reflection is used to get access to the particular class. At line 64 and 65, the reflection methods \u003Ci\u003EgetMethod\u003C\/i\u003E and \u003Ci\u003Einvoke\u003C\/i\u003E are used to call a method named \u003Ci\u003EsetMode\u003C\/i\u003E. These API methods are usually designed for use by other framework code or pre-installed apps. However, in this case threat actors use reflection to bypass the App Ops restriction.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig10.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10. Code using reflection to call App Ops service and to enable writing SMS\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EHosting Sites\u003C\/h5\u003E\n\u003Cp\u003ETo execute Smishing campaigns, threat actors first have to determine where to host their malware. Shared hosting services were used heavily in the RuMMS campaign, but the threat actors in these five campaigns varied it up a bit by using self-registered domains, URL shorteners, and compromised websites.\u003C\/p\u003E\n\u003Ch5\u003ESelf-Registered Domains\u003C\/h5\u003E\n\u003Cp\u003EIn our investigation, we noticed that some of the URL domains were registered a few days before malware was hosted on the sites. Also, we found no other services were provided on these domains. These facts lead us to believe that those sites were registered specifically for the Smishing campaigns.\u003C\/p\u003E\n\u003Cp\u003ETo lure victim users to clicks these links, the domain names were often carefully crafted for a particular campaign. For example, in the earlier MPay-Denmark campaign, threat actors used the Danish postal service provider as a theme and the Smishing messages came as: \u201cYou received an MMS from XXX. Follow hxxp:\/\/mms4you[.]us\/mms.apk to view the message.\u201d Thus, many of the domains included the words \u201cmms\u201d and\/or \u201cyou\u201d, such as \u003Ci\u003Emmsforyou.pw\u003C\/i\u003E, \u003Ci\u003Emmsservice.pw\u003C\/i\u003E and \u003Ci\u003Emmstildig.net\u003C\/i\u003E (\u201ctil dig\u201d is \u201cfor you\u201d in Danish).\u003C\/p\u003E\n\u003Cp\u003EIn the later \u003Cb\u003EPostDanmark\u003C\/b\u003E campaign, the Smishing messages came as: \u201cYour package is available for pick up. Follow hxxp:\/\/postdanmark[.]org\/post.apk to see all the information on your package:\u201d Thus, many URL domains had the words \u201cpost\u201d and\/or \u201cdanmark\u201d present, such as \u003Ci\u003Epostdanmark.net\u003C\/i\u003E, \u003Ci\u003Epostdanmark.online\u003C\/i\u003E, \u003Ci\u003Epostdanmark.menu\u003C\/i\u003E and \u003Ci\u003Epostdanmarks.com\u003C\/i\u003E. Note that the official website for Post Danmark is \u201cwww.postdanmark.dk\u201d, so all these phishing URLs were actually mimicking the official website for Post Danmark.\u003C\/p\u003E\n\u003Ch5\u003EShortened URLs\u003C\/h5\u003E\n\u003Cp\u003EA small screen size makes shortened URLs perfect for mobile devices. Threat actors seem to understand this, and will leverage it for their own gain. While monitoring these five Smishing campaigns in Europe, we observed shortened URLs being used frequently. In total, we observed four different URL shorteners were used at least once, including \u003Cb\u003Ebit.ly\u003C\/b\u003E, \u003Cb\u003Etr.im\u003C\/b\u003E, \u003Cb\u003Eis.gd\u003C\/b\u003E and \u003Cb\u003Ejar.ma\u003C\/b\u003E.\u003C\/p\u003E\n\u003Cp\u003EOf the four, \u003Cb\u003Ebit.ly\u003C\/b\u003E has been the most commonly used URL shortener. In total, we identified \u003Cb\u003E27\u003C\/b\u003E bit.ly links were used from February 2016 to June 2016. The other three URL shorteners were not observed until June 2016, and only one was used for each service. Diversifying URL shorteners suggests that the threat actors are trying to avoid detection.\u003C\/p\u003E\n\u003Ch5\u003ECompromised Websites\u003C\/h5\u003E\n\u003Cp\u003EIt is costly to use self-registered domains to host malware. More capable threat actors might choose to use compromised websites for the same purpose. Despite the risk of the victim site detecting the compromise and removing the malware, this method can be effective: the compromise is often not noticed until some time later, and the number of victim clicks is usually highest at the start of a campaign and decays a few days after the malware goes online.\u003C\/p\u003E\n\u003Cp\u003EWhile monitoring the five Smishing campaigns, we observed compromised websites were used frequently. For example, the analytics page for the shortened URL \u003Cu\u003Ehxxps:\/\/bitly[.]com\/1qRey7a+\u003C\/u\u003E shows that on April 13, 2016, website kgiexport.com was hosting an Android app with the file named \u003Ci\u003Epost.apk\u003C\/i\u003E.\u003C\/p\u003E\n\u003Ch5\u003EHow Many Clicks?\u003C\/h5\u003E\n\u003Cp\u003ETwo of the four URL shorteners, \u003Cb\u003Ebit.ly\u003C\/b\u003E and \u003Cb\u003Etr.im\u003C\/b\u003E, provide analytics pages for each short URL created. Figure 2 showed analytics pages provided by bit.ly. Figure 13 shows a screenshot of the analytics page provided by tr.im. From these pages, we can collect data on how many people clicked the shortened URL at particular dates, and also the countries these clicks came from.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Fig11.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11. Analytics page provided by tr.im\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ETable 2 shows relevant information on the 28 short URLs we monitored.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Tab2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2. Click counts on each short URL\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn total, the 28 short links were clicked 161,349 times. Of these clicks, 130,636 were from the PostDanmark campaign, which shows that phishing messages claiming to be from the post office can be effective. We also noticed the number of clicks decayed a few days after these short links were created. For example, there were 96,631 clicks (67.06%) on the first day after short links were created, and there were 30,749 clicks (21.33%) on the second day after short links were created. These clicks come primarily from two countries: Denmark (88.66%) and Austria (5.30%). A handful of other countries might be impacted as well, including Germany, Luxembourg, Spain, Sweden, Norway, United Kingdom, Netherlands, Italy, Greece, and Turkey.\u0026nbsp;\u003Cbr\u003E\n\u003C\/p\u003E\n\u003Ch5\u003EC2 Server\u003C\/h5\u003E\n\u003Cp\u003EAll of the malicious apps we analyzed contacted a hard-coded C2 server for sending device relevant information and getting back instructions. The URL used is in the form of http:\/\/$C2.$SERVER.$IP\/?action=command. In total, we found \u003Cb\u003E12 C2 servers\u003C\/b\u003E hosted in five different countries were involved in these campaigns. Table 3 shows relevant information for each C2 server used in these campaigns.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Tab3.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3. C2 Server Relevant Information\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn particular, IP address 85.93.5.109 has been used by 24 malicious apps in the \u003Cb\u003EPostDanmark\u003C\/b\u003E and \u003Cb\u003Epost-Austria\u003C\/b\u003E campaigns. IP address 85.93.5.139 has been used by eight malicious apps in the \u003Cb\u003EPostDanmark\u003C\/b\u003E campaign. Note that the first four C2 servers are within the same 85.93.5.0\/24 network segment. In total, we found 38 malicious samples contacting these four C2 servers from March 2016 to June 2016.\u003C\/p\u003E\n\u003Ch5\u003EPart of Something Bigger?\u003C\/h5\u003E\n\u003Cp\u003EWhile monitoring the registration records for these self-registered domains, we found something interesting: in March 2016, a single email address (l[REDACTED]a@gmail.com) registered three domains, including \u003Ci\u003Epostdanmark.org\u003C\/i\u003E, \u003Ci\u003Epostdanmark.menu \u003C\/i\u003Eand\u003Ci\u003E mmstildig.info\u003C\/i\u003E, for two of the five campaigns. Using reverse lookup, we found another four similar domains were also registered by the same email address in March 2016. Table 4 shows the relevant information for these domains.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Latest%20Android%20Overlay%20Wu%20Zhou\/Tab4.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 4. Domains registered by the suspected threat actor (l[REDACTED]a@gmail.com)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe first three domains were used to host overlay malware for the MPay-Denmark and PostDanmark campaigns. We found no evidence that the latter four domains were used for similar campaigns, but the same registrant email address and the similar naming convention implies that they may have been created for a similar purpose.\u003C\/p\u003E\n\u003Ch5\u003EConclusion\u003C\/h5\u003E\n\u003Cp\u003ESmishing (SMS phishing) offers a unique vector to infect mobile users. The latest Smishing campaigns spreading in Europe show that Smishing is still a popular means for threat actors to distribute their malware. In addition, threat actors have been using diversified host schemes and different C2 servers, and have been continuously refining their malicious code to keep infecting more users and evade detection.\u003C\/p\u003E\n\u003Cp\u003ETo protect against these threats, FireEye suggests that users not install apps from outside official app stores, and take caution before clicking any links where the origin is unclear.\u003C\/p\u003E\n\u003Cp\u003ETo detect and defend against such attacks, we advise our customers to deploy our mobile security solution, FireEye MTP\/MSM. This helps our clients gain visibility into threats in their user base, and also enables them to proactively hunt down devices that have been compromised. In addition, we advise our customers with NX appliances to ensure that Wi-Fi traffic is scanned by NX appliances to extend coverage to include mobile devices.\u003C\/p\u003E\n\u003Ch5\u003EAppendix: Samples\u003C\/h5\u003E\n\u003Cp\u003Edf53b59e354462cd0e704b7b21a750f7\u003Cbr\u003E\n6eb92667ebbbcb2c7ddf6230462222fd\u003Cbr\u003E\n3841abcef2b1b37aa7e2d47c535ca80e\u003Cbr\u003E\n265d37013e1ea39b868515cce157dfeb\u003Cbr\u003E\n49dac3b35afb2e8d3605c72d0d83f631\u003Cbr\u003E\nffe98d97e7d827aa19abb968a528f3fe\u003Cbr\u003E\nf4b8d64af0a53472901b50621f19d6bf\u003Cbr\u003E\ne1d79608b649c22004ad7cc1cd049528\u003Cbr\u003E\nef5c9b15755719597481c501f6b603ce\u003Cbr\u003E\n6a300ded487671ef39388b8d28927a83\u003Cbr\u003E\nd33b718737de5aa685672a2004e0fa3c\u003Cbr\u003E\nd83d833092a4fa5ecc436d4246c2f7ce\u003Cbr\u003E\n97c2d04aa0f3c3b446fc228c1dbc4837\u003Cbr\u003E\n82b1006a5f45a6d2baf69544414ada81\u003Cbr\u003E\n9e9d9a3717eed4d558a3f5eddb260901\u003Cbr\u003E\n82d89319fabd998328cc6d4efc4db863\u003Cbr\u003E\n228a4b723bf3d8adc53a69dd0f36c746\u003Cbr\u003E\ne911df33f1d156b3309a4ac220c52070\u003Cbr\u003E\n2b90fca41272bec8b8ffefbb2456c001\u003Cbr\u003E\n40449a2ec48c3e630b2eb8c8089828cf\u003Cbr\u003E\n8d0a03981daa93210e184e7fff02883c\u003Cbr\u003E\nfbdde37d41d12f21c049c570c9bda3de\u003Cbr\u003E\na18818cb3fb6f189560991cef6d1f929\u003Cbr\u003E\nbf7b72dbb2a9155dabc4eda31d273b92\u003Cbr\u003E\n9762441d52bdec725eff6f2f65e721e9\u003Cbr\u003E\ndba6b4bbf61e054fb978acaf70c3d849\u003Cbr\u003E\n93922ee5fbd149f31b0161deca76df77\u003Cbr\u003E\n035d1f3b7fb532a33de7a8445f9fa325\u003Cbr\u003E\n3f2017a5acb3e57801e2771341287001\u003Cbr\u003E\n06e74df867e9cb5c1bafc98165c6c248\u003Cbr\u003E\n20f4cd2baa09e0bd5e12dab50c0898cd\u003Cbr\u003E\naf7a8d32865e8caf51a99c52834d4422\u003Cbr\u003E\n82d89319fabd998328cc6d4efc4db863\u003Cbr\u003E\nbee3746684b072867a5b202bfc5527dd\u003Cbr\u003E\na18818cb3fb6f189560991cef6d1f929\u003Cbr\u003E\n8959513f65bcca6f16faef59ad2d152f\u003Cbr\u003E\ncfa92cbcb0674429cc9ce216cc008902\u003Cbr\u003E\nd73d54f6f86c58030477cc9a96eedb85\u003Cbr\u003E\n2f4d81ef1b10bf72d0dba0fdf354527f\u003Cbr\u003E\n701d57504444344b8d5e79bcabcd3dca\u003Cbr\u003E\nfcb4ef63f1d8a3a044ac6f8a7c262546\u003Cbr\u003E\n05131969af2ae6cbfddf789512f02aa2\u003Cbr\u003E\n6e93a7f7911b3e9b522be4b8f950cca4\u003Cbr\u003E\n542f8f77e101d4e8e5d1ef34a3f0df1c\u003Cbr\u003E\nd0a6ba40e05047dc2cff12935c4cf4fb\u003Cbr\u003E\n23988abad7c7b2ecdda23ae7194b7a0d\u003Cbr\u003E\n2c055d7b5199604cd5cf3441073b36b3\u003Cbr\u003E\na72aa534973eeaf0782a246d502107a3\u003Cbr\u003E\nf1c8a3337cbd56e01e478774f5d55278\u003Cbr\u003E\nda222d4b7993a62665b9eaef10c1846f\u003Cbr\u003E\n152f626eb92676f940ada4b7077acf16\u003Cbr\u003E\n7a99b60349703aed3ab28f498320f247\u003Cbr\u003E\n1b9e1cd2c7f8e227b2ae5fb5bc735536\u003Cbr\u003E\nd84ff5a7e7c0c33dcfa237299869bc34\u003Cbr\u003E\nd70296d3dc4937dedd44f93bb3b74034\u003Cbr\u003E\n88b23b6a5c1b72aeff2fc42e05c173a7\u003Cbr\u003E\n036258e2c51e21c140b5838ce9bfb4f8\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Aug 11 2016 16:07:19 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
      "text": "\u003Cp\u003ERecent malware campaigns in Europe\u0026nbsp; are using similar overlay techniques to trick unsuspecting users into providing their banking credentials.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Jun 27 2016 15:53:34 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
