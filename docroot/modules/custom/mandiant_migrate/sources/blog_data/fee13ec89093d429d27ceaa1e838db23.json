{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon Apr 22 2019 13:01:43 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "CARBANAK Week Part One: A Rare Occurrence",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "83782fa4-c826-4c96-b4d0-d29be8d2c993",
    "author": "Michael Bailey",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "ed5495ab-e6bd-41d0-8917-184d38c06466"
    ],
    "jcr:created": "Fri Jun 14 2019 15:42:35 GMT-0400",
    "cq:lastReplicated": "Fri Jun 14 2019 15:42:34 GMT-0400",
    "cq:lastModified": "Fri Jun 14 2019 15:42:27 GMT-0400",
    "jcr:baseVersion": "ed5495ab-e6bd-41d0-8917-184d38c06466",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:michael-bailey",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:carbanak",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-authors:cap-james-t-bennett",
      "fireeye-blog-tags:FLARE"
    ],
    "jcr:uuid": "eed1343e-1bbb-45f6-8de6-3ac0557a3320",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Apr 22 2019 13:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Blog-Carbanak-header-v2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EIt is very unusual for FLARE to analyze a prolifically-used, privately-developed backdoor only to later have the source code and operator tools fall into our laps. Yet this is the extraordinary circumstance that sets the stage for CARBANAK Week, a four-part blog series that commences with this post.\u003C\/p\u003E\n\u003Cp\u003ECARBANAK is one of the most full-featured backdoors around. It was used to perpetrate millions of dollars in financial crimes, largely by the group we track as \u003Ca href=\u0022https:\/\/feye.io\/fin7\u0022\u003EFIN7\u003C\/a\u003E. In 2017, Tom Bennett and Barry Vengerik published \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/06\/behind-the-carbanak-backdoor.html\u0022\u003EBehind the CARBANAK Backdoor\u003C\/a\u003E, which was the product of a deep and broad analysis of CARBANAK samples and FIN7 activity across several years. On the heels of that publication, our colleague Nick Carr uncovered a pair of RAR archives containing CARBANAK source code, builders, and other tools (both available in VirusTotal: \u003Ca href=\u0022https:\/\/www.virustotal.com\/#\/file\/783b2eefdb90eb78cfda475073422ee86476aca65d67ff2c9cf6a6f9067ba5fa\/detection\u0022\u003Ekb3r1p\u003C\/a\u003E and \u003Ca href=\u0022https:\/\/www.virustotal.com\/#\/file\/4116ec1eb75cf336a3fdde253c28f712668d0a325a74c41445c7fa87c4e9b7a5\/detection\u0022\u003Eapwmie\u003C\/a\u003E).\u003C\/p\u003E\n\u003Cp\u003EFLARE malware analysis requests are typically limited to a few dozen files at most. But the CARBANAK source code was 20MB comprising 755 files, with 39 binaries and 100,000 lines of code. Our goal was to find threat intelligence we missed in our previous analyses. How does an analyst respond to a request with such breadth and open-ended scope? And what did we find?\u003C\/p\u003E\n\u003Cp\u003EMy friend Tom Bennett and I spoke about this briefly in our 2018 FireEye Cyber Defense Summit talk, \u003Ca href=\u0022https:\/\/www.fireeye.com\/content\/fireeye-summit\/en_US\/learn\/tracks.html#technical-4\u0022\u003EHello, Carbanak!\u003C\/a\u003E In this blog series, we will expound at length and share a written retrospective on the inferences drawn in our previous public analysis based on binary code reverse engineering. In this first part, I\u2019ll discuss Russian language concerns, translated graphical user interfaces of CARBANAK tools, and anti-analysis tactics as seen from a source code perspective. We will also explain an interesting twist where analyzing the source code surprisingly proved to be just as difficult as analyzing the binary, if not more. There\u2019s a lot here; buckle up!\u003C\/p\u003E\n\u003Ch4\u003EFile Encoding and Language Considerations\u003C\/h4\u003E\n\u003Cp\u003EThe objective of this analysis was to discover threat intelligence gaps and better protect our customers. To begin, I wanted to assemble a cross-reference of source code files and concepts of specific interest.\u003C\/p\u003E\n\u003Cp\u003EReading the source code entailed two steps: displaying the files in the correct encoding, and learning enough Russian to be dangerous. Figure 1 shows CARBANAK source code in a text editor that is unaware of the correct encoding.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: File without proper decoding\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ETwo good file encoding guesses are UTF-8 and code page 1251 (Cyrillic). The files were mostly code page 1251 as shown in Figure 2.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Code Page 1251 (Cyrillic) source code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 2 is a C++ header file defining error values involved in backdoor command execution. Most identifiers were in English, but some were not particularly descriptive. Ergo, the second and more difficult step was learning some Russian to benefit from the context offered by the source code comments.\u003C\/p\u003E\n\u003Cp\u003EFLARE has fluent Russian speakers, but I took it upon myself to minimize my use of other analysts\u2019 time. To this end, I wrote a script to tear through files and create a prioritized vocabulary list. The script, which is available in the \u003Ca href=\u0022https:\/\/github.com\/fireeye\/vocab_scraper\u0022\u003EFireEye vocab_scraper GitHub repository\u003C\/a\u003E, walks source directories finding all character sequences outside the printable lower ASCII range: decimal values 32 (the space character) through 126 (the tilde character \u201c~\u201d) inclusive. The script adds each word to a Python \u003Cspan class=\u0022code\u0022\u003Edefaultdict_\u003C\/span\u003E and increments its count. Finally, the script orders this dictionary by frequency of occurrence and dumps it to a file.\u003C\/p\u003E\n\u003Cp\u003EThe result was a 3,400+ word vocabulary list, partially shown in Figure 3.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Top 19 Cyrillic character sequences from the CARBANAK source code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EI spent several hours on Russian language learning websites to study the pronunciation of Cyrillic characters and Russian words. Then, I looked up the top 600+ words and created a small dictionary. I added Russian language input to an analysis VM and used Microsoft\u2019s on-screen keyboard (\u003Cspan class=\u0022code\u0022\u003Eosk.exe\u003C\/span\u003E) to navigate the Cyrillic keyboard layout and look up definitions.\u003C\/p\u003E\n\u003Cp\u003EOne helpful effect of learning to pronounce Cyrillic characters was my newfound recognition of English loan words (words that are borrowed from English and transliterated to Cyrillic). My small vocabulary allowed me to read many comments without looking anything up. Table 1 shows a short sampling of some of the English loan words I encountered.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECyrillic\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EEnglish Phonetic\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EEnglish\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EOccurrences\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ERank\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u0424\u0430\u0439\u043b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ef ah y L\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Efile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E224\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u0441\u0435\u0440\u0432\u0435\u0440\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Es e r v e r\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eserver\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E145\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E13\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u0430\u0434\u0440\u0435\u0441\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ea d r e s\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eaddress\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E52\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E134\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u043a\u043e\u043c\u0430\u043d\u0434\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ek o m a n d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ecommand\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E110+\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E27\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u0431\u043e\u0442\u0430\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eb o t a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ebot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E130\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E32\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u043f\u043b\u0430\u0433\u0438\u043d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ep l ah g ee n\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eplugin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E116\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E39\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u0441\u0435\u0440\u0432\u0438\u0441\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Es e r v ee s\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eservice\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E70\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E46\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ep r o ts e s s\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eprocess\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E130ish\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E63\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Sampling of English loan words in the CARBANAK source code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAside from source code comments, understanding how to read and type in Cyrillic came in handy for translating the CARBANAK graphical user interfaces I found in the source code dump. Figure 4 shows a Command and Control (C2) user interface for CARBANAK that I translated.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Translated C2 graphical user interface\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThese user interfaces included video management and playback applications as shown in Figure 5 and Figure 6 respectively. Tom will share some interesting work he did with these in a subsequent part of this blog series.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Translated video management application user interface\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Translated video playback application user interface\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 7 shows the backdoor builder that was contained within the RAR archive of operator tools.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Translated backdoor builder application user interface\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe operator RAR archive also contained an operator\u2019s manual explaining the semantics of all the backdoor commands. Figure 8 shows the first few commands in this manual, both in Russian and English (translated).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Operator manual (left: original Russian; right: translated to English)\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDown the Rabbit Hole: When Having Source Code Does Not Help\u003C\/h4\u003E\n\u003Cp\u003EIn simpler backdoors, a single function evaluates the command ID received from the C2 server and dispatches control to the correct function to carry out the command. For example, a backdoor might ask its C2 server for a command and receive a response bearing the command ID \u003Cspan class=\u0022code\u0022\u003E0x67\u003C\/span\u003E. The dispatch function in the backdoor will check the command ID against several different values, including \u003Cspan class=\u0022code\u0022\u003E0x67\u003C\/span\u003E, which as an example might call a function to shovel a reverse shell to the C2 server. Figure 9 shows a control flow graph of such a function as viewed in IDA Pro. Each block of code checks against a command ID and either passes control to the appropriate command handling code, or moves on to check for the next command ID.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: A control flow graph of a simple command handling function\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn this regard, CARBANAK is an entirely different beast. It utilizes a Windows mechanism called \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/ipc\/named-pipes\u0022\u003Enamed pipes\u003C\/a\u003E as a means of communication and coordination across all the threads, processes, and plugins under the backdoor\u2019s control. When the CARBANAK tasking component receives a command, it forwards the command over a named pipe where it travels through several different functions that process the message, possibly writing it to one or more additional named pipes, until it arrives at its destination where the specified command is finally handled. Command handlers may even specify their own named pipe to request more data from the C2 server. When the C2 server returns the data, CARBANAK writes the result to this auxiliary named pipe and a callback function is triggered to handle the response data asynchronously. CARBANAK\u2019s named pipe-based tasking component is flexible enough to control both inherent command handlers and plugins. It also allows for the possibility of a local client to dispatch commands to CARBANAK without the use of a network. In fact, not only did we write such a client to aid in analysis and testing, but such a client, named \u003Cspan class=\u0022code\u0022\u003Ebotcmd.exe\u003C\/span\u003E, was also present in the source dump.\u003C\/p\u003E\n\u003Ch4\u003ETom\u2019s Perspective\u003C\/h4\u003E\n\u003Cp\u003EAnalyzing this command-handling mechanism within CARBANAK from a binary perspective was certainly challenging. It required maintaining tabs for many different views into the disassembly, and a sort of textual map of command ids and named pipe names to describe the journey of an inbound command through the various pipes and functions before arriving at its destination. Figure 10 shows the control flow graphs for seven of the named pipe message handling functions. While it was difficult to analyze this from a binary reverse engineering perspective, having compiled code combined with the features that a good disassembler such as IDA Pro provides made it less harrowing than Mike\u2019s experience. The binary perspective saved me from having to search across several source files and deal with ambiguous function names. The disassembler features allowed me to easily follow cross-references for functions and global variables and to open multiple, related views into the code.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Control flow graphs for the named pipe message handling functions\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EMike\u2019s Perspective\u003C\/h4\u003E\n\u003Cp\u003EHaving source code sounds like cheat-mode for malware analysis. Indeed, source code contains much information that is lost through the compilation and linking process. Even so, CARBANAK\u2019s tasking component (for handling commands sent by the C2 server) serves as a counter-example. Depending on the C2 protocol used and the command being processed, control flow may take divergent paths through different functions only to converge again later and accomplish the same command. Analysis required bouncing around between almost 20 functions in 5 files, often backtracking to recover information about function pointers and parameters that were passed in from as many as 18 layers back. Analysis also entailed resolving matters of C++ class inheritance, scope ambiguity, overloaded functions, and control flow termination upon named pipe usage. The overall effect was that this was difficult to analyze, even in source code.\u003C\/p\u003E\n\u003Cp\u003EI only embarked on this top-to-bottom journey once, to search for any surprises. The effort gave me an appreciation for the baroque machinery the authors constructed either for the sake of obfuscation or flexibility. I felt like this was done at least in part to obscure relationships and hinder timely analysis.\u003C\/p\u003E\n\u003Ch4\u003EAnti-Analysis Mechanisms in Source Code\u003C\/h4\u003E\n\u003Cp\u003ECARBANAK\u2019s executable code is filled with logic that pushes hexadecimal numbers to the same function, followed by an indirect call against the returned value. This is easily recognizable as obfuscated function import resolution, wherein CARBANAK uses a simple string hash known as PJW (named after its author, P.J. Weinberger) to locate Windows API functions without disclosing their names. A Python implementation of the PJW hash is shown in Figure 11 for reference.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022671\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Edef pjw_hash(s):\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; ctr = 0\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; for i in range(len(s)):\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; ctr = 0xffffffff \u0026amp; ((ctr \u0026lt;\u0026lt; 4) + ord(s[i]))\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if ctr \u0026amp; 0xf0000000:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; ctr = (((ctr \u0026amp; 0xf0000000) \u0026gt;\u0026gt; 24) ^ ctr) \u0026amp; 0x0fffffff\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; return ctr\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: PJW hash\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis is used several hundred times in CARBANAK samples and impedes understanding of the malware\u2019s functionality. Fortunately, reversers can use the \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2012\/11\/precalculated-string-hashes-reverse-engineering-shellcode.html\u0022\u003Eflare-ida scripts\u003C\/a\u003E to annotate the obfuscated imports, as shown in Figure 12.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture13.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Obfuscated import resolution annotated with FLARE\u0027s shellcode hash search\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe CARBANAK authors achieved this obfuscated import resolution throughout their backdoor with relative ease using C preprocessor macros and a pre-compilation source code scanning step to calculate function hashes. Figure 13 shows the definition of the relevant \u003Cspan class=\u0022code\u0022\u003EAPI\u003C\/span\u003E macro and associated machinery.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture14.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: API macro for import resolution\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cspan class=\u0022code\u0022\u003EAPI\u003C\/span\u003E macro allows the author to type \u003Cspan class=\u0022code\u0022\u003EAPI(SHLWAPI, PathFindFileNameA)(\u2026)\u003C\/span\u003E and have it replaced with \u003Cspan class=\u0022code\u0022\u003EGetApiAddrFunc(SHLWAPI, hashPathFindFileNameA)(\u2026)\u003C\/span\u003E. \u003Cspan class=\u0022code\u0022\u003ESHLWAPI\u003C\/span\u003E is a symbolic macro defined to be the constant 3, and \u003Cspan class=\u0022code\u0022\u003EhashPathFindFileNameA\u003C\/span\u003E is the string hash value \u003Cspan class=\u0022code\u0022\u003E0xE3685D1\u003C\/span\u003E as observed in the disassembly. But how was the hash defined?\u003C\/p\u003E\n\u003Cp\u003EThe CARBANAK source code has a utility (unimaginatively named \u003Cspan class=\u0022code\u0022\u003Etool\u003C\/span\u003E) that scans source code for invocations of the \u003Cspan class=\u0022code\u0022\u003EAPI\u003C\/span\u003E macro to build a header file defining string hashes for all the Windows API function names encountered in the entire codebase. Figure 14 shows the source code for this utility along with its output file, \u003Cspan class=\u0022code\u0022\u003Eapi_funcs_hash.h\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/CarbanakWeek1\/Picture15.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Source code and output from string hash utility\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen I reverse engineer obfuscated malware, I can\u2019t help but try to theorize about how authors implement their obfuscations. The CARBANAK source code gives another data point into how malware authors wield the powerful C preprocessor along with custom code scanning and code generation tools to obfuscate without imposing an undue burden on developers. This might provide future perspective in terms of what to expect from malware authors in the future and may help identify units of potential code reuse in future projects as well as rate their significance. It would be trivial to apply this to new projects, but with the source code being on VirusTotal, this level of code sharing may not represent shared authorship. Also, the source code is accessibly instructive in why malware would push an integer as well as a hash to resolve functions: because the integer is an index into an array of module handles that are opened in advance and associated with these pre-defined integers.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EThe CARBANAK source code is illustrative of how these malware authors addressed some of the practical concerns of obfuscation. Both the tasking code and the Windows API resolution system represent significant investments in throwing malware analysts off the scent of this backdoor. Check out \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/04\/carbanak-week-part-two-continuing-source-code-analysis.html\u0022\u003EPart Two of this series\u003C\/a\u003E for a round-up of antivirus evasions, exploits, secrets, key material, authorship artifacts, and network-based indicators. \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/04\/carbanak-week-part-three-behind-the-backdoor.html\u0022\u003EPart Three\u003C\/a\u003E and \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2019\/04\/carbanak-week-part-four-desktop-video-player.html\u0022\u003EPart Four\u003C\/a\u003E are available now as well!\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Apr 25 2019 13:30:39 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Fri Jun 14 2019 15:42:27 GMT-0400",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe kick off CARBANAK Week with the first post in our four-part blog series.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Apr 22 2019 09:44:06 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
