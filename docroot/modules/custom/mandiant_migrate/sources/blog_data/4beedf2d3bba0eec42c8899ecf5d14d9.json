{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Wed Feb 05 2020 14:18:44 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "STOMP 2 DIS: Brilliance in the (Visual) Basics",
    "jcr:versionHistory": "558ea715-3e58-4707-a75d-48006d6374af",
    "author": "Rick Cole",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "0ab37644-806c-42c0-848e-b3922dbe62e9"
    ],
    "jcr:created": "Wed Feb 05 2020 15:44:15 GMT+0000",
    "cq:lastModified": "Wed Feb 05 2020 15:44:07 GMT+0000",
    "jcr:baseVersion": "0ab37644-806c-42c0-848e-b3922dbe62e9",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:rick-cole",
      "fireeye-blog-authors:andrew-moore",
      "fireeye-blog-authors:genevieve-stark",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:backdoor",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:phishing",
      "fireeye-blog-tags:malware",
      "fireeye-blog-authors:blaine-stancill",
      "fireeye-blog-tags:FLARE"
    ],
    "jcr:uuid": "d466a463-99bf-405b-9bad-8b394e22b88c",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Feb 05 2020 09:15:00 GMT-0500",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EThroughout January 2020, FireEye has continued to observe multiple targeted phishing campaigns designed to download and deploy a backdoor we track as MINEBRIDGE. The campaigns primarily targeted financial services organizations in the United States, though targeting is likely more widespread than those we\u2019ve initially observed in our FireEye product telemetry. At least one campaign targeted South Korean organizations, including a marketing agency.\u003C\/p\u003E\n\u003Cp\u003EIn these campaigns, the phishing documents appeared to be carefully crafted and leveraged some publicly-documented \u2014 but in our experience uncommon and misunderstood \u2014 TTPs, likely in an effort to decrease detection of the malicious documents\u2019 macros. The actor also used a self-hosted email marketing solution across multiple campaigns. Notably, the payload delivered in these campaigns leveraged a packer previously affiliated with a commonly-tracked threat actor, an overlap that we will explore later.\u003C\/p\u003E\n\u003Cp\u003EThis blog post will review the theme of these campaigns and their targets, the adversary\u2019s unique tradecraft, the MINEBRIDGE C++ backdoor, some potential attribution overlaps, and importantly \u2014 the threat actor\u2019s love of rap music.\u003C\/p\u003E\n\u003Ch4\u003ETargeting and Lure Detail\u003C\/h4\u003E\n\u003Cp\u003EWhile we first identified MINEBRIDGE samples in December, we observed our first phishing campaigns relating to this activity in early January 2020. Email addresses used to send phishing messages were associated with domains that appear to have been registered specifically for this purpose within a few weeks of the activity \u2014 and were thematically consistent with the content of the phishing messages.\u003C\/p\u003E\n\u003Cp\u003EAdditionally, the actor(s) responsible are likely using a self-hosted email marketing solution called \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.acellemail.com\/\u0022\u003EAcelle\u003C\/a\u003E. Acelle adds extended email headers to messages sent via the platform in the format of X-Acelle-\u0026lt;variable\u0026gt;. The messages observed across campaigns using these TTPs have included a \u201cCustomer-Id\u201d value matching \u201cX-Acelle-Customer-Id: 5df38b8fd5b58\u201d. While that field remained consistent across all observed campaigns, individual campaigns also shared overlapping \u201cX-Acelle-Sending-Server_Id\u201d and \u201cX-Acelle-Campaign-Id\u201d values. All of the messages also included a \u201cList-Unsubscribe\u201d header offering a link hosted at 45.153.184.84 suggesting that it is the server hosting the Acelle instance used across these campaigns. The sample table for one campaign below illustrates this data:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellpadding=\u00220\u0022 width=\u0022732\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002279\u0022\u003E\u003Cp\u003ETimestamp\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ESender\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255\u0022\u003E\u003Cp\u003ESubject\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022111\u0022\u003E\u003Cp\u003Ex-acelle-subscriber-id\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022\u003E\u003Cp\u003Ex-acelle-sending-server-id\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022107\u0022\u003E\u003Cp\u003Ex-acelle-customer-id\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022\u003E\u003Cp\u003Ex-acelle-campaign-id\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E1\/7\/20 16:15\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Einfo@rogervecpa.com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Etax return file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E25474792e6f8c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5df38b8fd5b58\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E1\/7\/20 15:59\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Einfo@rogervecpa.com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Etax return file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E22e183805a051\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5df38b8fd5b58\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E1\/7\/20\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Einfo@rogervecpa.com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Etax return file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E657e1a485ed77\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5df38b8fd5b58\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E1\/7\/20 16:05\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Einfo@rogervecpa.com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Etax return file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003Eddbbffbcb5c6c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E5df38b8fd5b58\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022105\u0022\u003E\u003Cp\u003E5e14a2664ffb4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe URLs requested by the malicious documents and serving the final MINEBRIDGE payloads delivered in each of these campaigns provide additional overlap across campaigns. In all observed cases, the domains used the same bullet-proof hosting service. The URI used to download the final payload was \u201c\/team\/invest.php\u201d or, in one case, \u201c\/team\/rumba.php\u201d. Perhaps the most fun overlap, however, was discovered when trying to identify additional artifacts of interest hosted at similar locations. In most cases a GET request to the parent directory of \u201c\/team\/\u201d on each of the identified domains served up the lyrics to rap group Onyx\u2019s \u201cBang 2 Dis\u201d masterpiece. We will refrain from sharing the specific verse hosted due to explicit content.\u003C\/p\u003E\n\u003Cp\u003EOne of the more notable characteristics of this activity was the consistency in themes used for domain registration, lure content, similarities in malicious document macro content, and targeting. Since first seeing these emails, we\u2019ve identified at least 3 distinct campaigns.\u003C\/p\u003E\n\u003Ch5\u003ECampaign #1: January 7, 2020 \u2013 Tax Theme\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EEmails associated with this campaign used the CPA themed domain rogervecpa.com registered in late November and the subject line \u201cTax Return File\u201d with IRS related text in the message body.\u003C\/li\u003E\n\u003Cli\u003EThe attached payload was crafted to look like an H\u0026amp;R Block related tax form.\u003C\/li\u003E\n\u003Cli\u003EObserved targeting included the financial sector exclusively.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture1a.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture2.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Ch5\u003ECampaign #2: January 8, 2020 \u2013 Marketing Theme\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EEmails associated with this campaign used the same CPA themed domain rogervecpa.com along with pt-cpaaccountant.com, also registered late November.\u003C\/li\u003E\n\u003Cli\u003EThe subject line and message body offered a marketing partnership opportunity to the victim.\u003C\/li\u003E\n\u003Cli\u003EThe attached payload used a generic theme enticing users to enable macro content.\u003C\/li\u003E\n\u003Cli\u003EObserved targeting focused on a South Korean marketing agency.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture3.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture4.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Ch5\u003ECampaign #3: January 28, 2020 \u2013 Recruiting Theme\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EEmails associated with this campaign were sent from several different email addresses, though all used the recruiting-themed domain agent4career.com which was registered on January 20, 2020.\u003C\/li\u003E\n\u003Cli\u003EThe subject line and message body referenced an employment candidate with experience in the financial sector.\u003C\/li\u003E\n\u003Cli\u003EThe attached payload masqueraded as the resume of the same financial services candidate referenced in the phishing email.\u003C\/li\u003E\n\u003Cli\u003EObserved targeting included the financial sector exclusively.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture5a.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture6d.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Ch4\u003EQuit Stepping All Over My Macros\u003C\/h4\u003E\n\u003Cp\u003EThe phishing documents themselves leverage numerous interesting TTPs including hiding macros from the Office GUI, and VBA stomping.\u003C\/p\u003E\n\u003Cp\u003EVBA stomping is a colloquial term applied to the manipulation of Office documents where the source code of a macro is made to mismatch the pseudo-code (hereto referred to as \u0026quot;p-code\u0026quot;) of the document. In order to avoid duplicating research and wasting the reader\u2019s time, we will instead reference the impressive work of our predecessors and peers in the industry. As an introduction to the concept, we first recommend reading \u003Ca href=\u0022https:\/\/outflank.nl\/blog\/2019\/05\/05\/evil-clippy-ms-office-maldoc-assistant\/\u0022\u003Ethe tool release blog post\u003C\/a\u003E\u0026nbsp;for \u003Ca href=\u0022https:\/\/github.com\/outflanknl\/EvilClippy\u0022\u003EEvilClippy\u003C\/a\u003E from Outflank. The security team at Walmart has also published \u003Ca href=\u0022https:\/\/vbastomp.com\/\u0022\u003Eincredible research\u003C\/a\u003E on the methodology. Vesselin Bontchev provides a useful open source utility for dumping the p-code from an Office document in \u003Ca href=\u0022https:\/\/github.com\/bontchev\/pcodedmp\u0022\u003Epcodedmp\u003C\/a\u003E. This tool can be leveraged to inspect the p-code of a document separate from its VBA source. It was adopted by the wider open source analysis toolkit \u003Ca href=\u0022https:\/\/github.com\/decalage2\/oletools\u0022\u003Eoletools\u003C\/a\u003E in order to detect the presence of stomping via \u003Ca href=\u0022https:\/\/github.com\/decalage2\/oletools\/commit\/70685875cf3166110c9bd2f124e66dc30c219ae5\u0022\u003Ecomparison of p-code mnemonics vs keyword extraction in VBA source\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EThat is a whole lot of quality reading for those interested. For the sake of brevity, the most important result of VBA stomping as relevant to this blog post is the following:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EStatic analysis tools focusing on VBA macro source extraction may be fooled into a benign assessment of a document bearing malicious p-code.\u003C\/li\u003E\n\u003Cli\u003EWhen VBA source is removed, and a document is opened in a version of Office for which the p-code was not compiled to execute, a macro will not execute correctly, resulting in potential failed dynamic analysis.\u003C\/li\u003E\n\u003Cli\u003EWhen a document is opened under a version of Office that uses a VBA version that does not match the version of Office used to create the document, VBA source code is recompiled back into p-code.\u003C\/li\u003E\n\u003Cli\u003EWhen a document is opened in Office and the GUI is used to view the macro, the embedded p-code is decompiled to be viewed.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe final two points identify some interesting complications in regard to leveraging this methodology more broadly. Versioning complexities arise that toolkits like EvilClippy leverage Office version enumeration features to address. An actor\u2019s VBA stomped document containing benign VBA source but evil p-code must know the version of Office to build the p-code for, or their sample will not detonate properly. Additionally, if an actor sends a stomped document, and a user or researcher opens the macro in the Office editor, they will see malicious code.\u003C\/p\u003E\n\u003Cp\u003EOur actor addressed the latter point of this complication by leveraging what we assess to be another feature of the EvilClippy utility, wherein viewing the macro source is made inaccessible to a user within Office by modifying the \u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/openspecs\/office_file_formats\/ms-ovba\/dfd72140-85a6-4f25-8a17-70a89c00db8c\u0022\u003EPROJECT stream\u003C\/a\u003E of the document. Let\u2019s highlight this below using a publicly available sample we attribute to our actors (SHA256: \u003Ca href=\u0022https:\/\/iris-h.services\/pages\/report\/0360632cee9f04c2bd4cdea48f1f801e8a34e862\u0022\u003E18698c5a6ff96d21e7ca634a608f01a414ef6fbbd7c1b3bf0f2085c85374516e\u003C\/a\u003E):\u003C\/p\u003E\n\u003Cp\u003EDocument PROJECT stream:\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EID=\u0026quot;{33C06E73-23C4-4174-9F9A-BA0E40E57E3F}\u0026quot;\u003Cbr\u003E\nDocument=ThisDocument\/\u0026amp;H00000000\u003Cbr\u003E\nName=\u0026quot;Project\u0026quot;\u003Cbr\u003E\nHelpContextID=\u0026quot;0\u0026quot;\u003Cbr\u003E\nVersionCompatible32=\u0026quot;393222000\u0026quot;\u003Cbr\u003E\nCMG=\u0026quot;A3A1799F59A359A359A359A3\u0026quot;\u003Cbr\u003E\nDPB=\u0026quot;87855DBBA57B887C887C88\u0026quot;\u003Cbr\u003E\nGC=\u0026quot;6B69B1A794A894A86B\u0026quot;\u003Cbr\u003E\n[Host Extender Info]\u003Cbr\u003E\n\u0026amp;H00000001={3832D640-CF90-11CF-8E43-00A0C911005A};VBE;\u0026amp;H00000000\u003Cbr\u003E\n[Workspace]\u003Cbr\u003E\nThisDocument=0, 0, 0, 0, C\u003Cbr\u003E\nModule1=26, 26, 388, 131, Z\u003C\/p\u003E\n\u003Cp\u003EThe above PROJECT stream has been modified. Within the PROJECT stream workspace, a module is referenced. However, there is no module defined. We would expect the unmodified PROJECT stream of this document prior to utilization of a tool to modify it to be as follows:\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EID=\u0026quot;{33C06E73-23C4-4174-9F9A-BA0E40E57E3F}\u0026quot;\u003Cbr\u003E\nDocument=ThisDocument\/\u0026amp;H00000000\u003Cbr\u003E\n\u003Cb\u003EModule=\u201dModule1\u201d\u003Cbr\u003E\n \u003C\/b\u003EName=\u0026quot;Project\u0026quot;\u003Cbr\u003E\nHelpContextID=\u0026quot;0\u0026quot;\u003Cbr\u003E\nVersionCompatible32=\u0026quot;393222000\u0026quot;\u003Cbr\u003E\nCMG=\u0026quot;A3A1799F59A359A359A359A3\u0026quot;\u003Cbr\u003E\nDPB=\u0026quot;87855DBBA57B887C887C88\u0026quot;\u003Cbr\u003E\nGC=\u0026quot;6B69B1A794A894A86B\u0026quot;\u003Cbr\u003E\n[Host Extender Info]\u003Cbr\u003E\n\u0026amp;H00000001={3832D640-CF90-11CF-8E43-00A0C911005A};VBE;\u0026amp;H00000000\u003Cbr\u003E\n[Workspace]\u003Cbr\u003E\nThisDocument=0, 0, 0, 0, C\u003Cbr\u003E\nModule1=26, 26, 388, 131, Z\u003C\/p\u003E\n\u003Cp\u003EIt is interesting to note that we initially identified this actor only performing this manipulation on their malicious documents\u2014avoiding any versioning complexities--without actually stomping the p-code to mismatch the VBA source. This seems like an odd decision and is possibly indicative of an actor assessing what \u201cworks\u201d for their campaigns. The above malicious document is an example of them leveraging both methodologies, as highlighted by this screenshot from the awesome publicly available web service \u003Ca href=\u0022https:\/\/iris-h.services\/\u0022\u003EIRIS-H Digital Forensics\u003C\/a\u003E:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture7.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EWe can see that the documents VBA source is a blank Sub procedure definition. A quick glance at the p-code identifies both network- based indicators and host- based indicators we can use to determine what this sample would do when executed on the proper Office version. When we attempt to open the macro in the GUI editor, Office gets angry:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture8.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EFor analysts looking to identify this methodology holistically, we recommend the following considerations:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe GUI hiding functionality results in an altered project stream wherein a module exists, but there is no module, class, or baseclass defined in the stream. This is a potential static detection.\u003C\/li\u003E\n\u003Cli\u003EWhile the macro source is no longer present, there are still static strings present in Module1 in this sample which may indicate Windows APIs leveraged. This is a potential static detection.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture9.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EUtilities like the previously mentioned oletools can do all of this detection for you. If you identify false negatives, false positives, or bugs, the open source project maintainers respond to them regularly like the superheroes that they are:\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture10.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EThe above methodology creates questions regarding potential efficiency problems for scaling any sizable campaign using it. While tools like EvilClippy provide the means to create difficult to detect malicious documents that can potentially sneak past some dynamic and static detections, their payloads have the additional burden of needing to fingerprint targets to enable successful execution. While actors with sufficient resources and creativity can no doubt account for these requirements, it is relevant to note that detections for these methodologies will likely yield more targeted activity. In fact, tertiary review of samples employing these techniques identified unrelated activity delivering both Cobalt Strike BEACON and POSHC2 payloads.\u003C\/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/matrices\/enterprise\/\u0022 title=\u0022https:\/\/attack.mitre.org\/matrices\/enterprise\/\u0022\u003E\u003C\/a\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/resources\/contribute\/\u0022 title=\u0022https:\/\/attack.mitre.org\/resources\/contribute\/\u0022\u003E\u003C\/a\u003E\u003Ca href=\u0022https:\/\/attack.mitre.org\/resources\/sightings\/\u0022 title=\u0022https:\/\/attack.mitre.org\/resources\/sightings\/\u0022\u003E\u003C\/a\u003EWe recently expanded our internal FireEye threat behavior tree to accommodate these techniques. At the time of publication, the authors were unable to directly map the methods \u2013 PROJECT stream manipulation and VBA stomping \u2013 to existing techniques in \u003Ca href=\u0022https:\/\/attack.mitre.org\/matrices\/enterprise\/\u0022\u003Ethe MITRE ATT\u0026amp;CK Matrix\u2122 for Enterprise\u003C\/a\u003E. However, our team submitted these as \u003Ca href=\u0022https:\/\/attack.mitre.org\/resources\/contribute\/\u0022\u003Econtributions\u003C\/a\u003E to the ATT\u0026amp;CK knowledge base prior to publication and will make additional data available for \u003Ca href=\u0022https:\/\/attack.mitre.org\/resources\/sightings\/\u0022\u003EATT\u0026amp;CK Sightings\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003ECrossing The Bridge of Khazad-d\u00fbm: The MINEBRIDGE Infection Chain\u003C\/h4\u003E\n\u003Cp\u003ESuccessful detonation of the previously detailed malicious document results in creation of \u201cuCWOncHvBb.dll\u201d via a call to URLDownloadToFileA to the URL hxxps:\/\/marendoger[.]com\/team\/rumba.php. The returned MINEDOOR packed MINEBRIDGE sample is saved in the executing users AppData directory (Eg: C:\\Users\\username\\AppData\\Roaming\\uCWOncHvBb.dll), and then subsequent execution of the DllRegisterServer export via invocation of \u201cregsvr32.exe \/s %AppData%\\uCWOncHvBb.dll\u201d occurs:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture11.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EThis will result in a ZIP file being retrieved from the URL hxxps:\/\/creatorz123[.]top\/~files_tv\/~all_files_m.bin using the Windows API URLDownloadToFileW. The ZIP file is written to %TEMP%, unzipped to the newly created directory %AppData%\\Windows Media Player, and then deleted:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture12.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EThe ZIP file contains legitimate files required to execute a copy of TeamViewer, listed in the file creation area of the IOC section of this post. When a file named TeamViewer.exe is identified while unzipping, it is renamed to wpvnetwks.exe:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/stomp2dis\/Picture13.png\u0022 alt=\u0022\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter completing these tasks, uCWOncHvBb.dll moves itself to %AppData%\\Windows Media Player\\msi.dll. The phishing macro then closes the handle to msi.dll, and calls CreateProcessA on wpvnetwks.exe, which results in the renamed TeamViewer instance side-loading the malicious msi.dll located alongside it. The malware ensures its persistence through reboot by creating a link file at %CISDL_STARTUP%\\Windows WMI.lnk, which points to %AppData%\\Windows Media Player\\wpnetwks.exe, resulting in its launch at user logon.\u003C\/p\u003E\n\u003Cp\u003EThe end result is a legitimate, though outdated (version 11, compiled on September 17, 2018, at 10:30:12 UTC), TeamViewer instance hijacked by a malicious sideloaded DLL (MINEBRIDGE).\u003C\/p\u003E\n\u003Cp\u003EMINEBRIDGE is a 32-bit C++ backdoor designed to be loaded by an older, unpatched instance of the legitimate remote desktop software TeamViewer by DLL load-order hijacking. The backdoor hooks Windows APIs to prevent the victim from seeing the TeamViewer application. By default, MINEBRIDGE conducts command and control (C2) communication via HTTPS POST requests to hard-coded C2 domains. The POST requests contain a GUID derived from the system\u2019s volume serial number, a TeamViewer unique id and password, username, computer name, operating system version, and beacon interval. MINEBRIDGE can also communicate with a C2 server by sending TeamViewer chat messages using a custom window procedure hook. Collectively, the two C2 methods support commands for downloading and executing payloads, downloading arbitrary files, self-deletion and updating, process listing, shutting down and rebooting the system, executing arbitrary shell commands, process elevation, turning on\/off TeamViewer\u0027s microphone, and gathering system UAC information.\u003C\/p\u003E\n\u003Cp\u003EMINEBRIDGE\u2019s default method of communication is sending HTTPS POST requests over TCP port 443. This method of communication is always active; however, the beacon-interval time may be changed via a command. Before sending any C2 beacons, the sample waits to collect the TeamViewer generated unique id (\u0026lt;tv_id\u0026gt;) and password (\u0026lt;tv_pass\u0026gt;) via SetWindowsTextW hooks.\u003C\/p\u003E\n\u003Cp\u003EThis specific sample continuously sends an HTTP POST request over TCP port 443 with the URI ~f83g7bfiunwjsd1\/g4t3_indata.php to each host listed below until a response is received.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E123faster[.]top\u003C\/li\u003E\n\u003Cli\u003Econversia91[.]top\u003C\/li\u003E\n\u003Cli\u003Efatoftheland[.]top\u003C\/li\u003E\n\u003Cli\u003Ecreatorz123[.]top\u003C\/li\u003E\n\u003Cli\u003Ecompilator333[.]top\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe POST body contains the formatted string\u0026nbsp;uuid=\u0026lt;guid\u0026gt;\u0026amp;id=\u0026lt;tv_id\u0026gt;\u0026amp;pass=\u0026lt;tv_pass\u0026gt;\u0026amp;username=\u0026lt;user_name\u0026gt;\u0026amp;pcname=\u0026lt;comp_name\u0026gt;\u0026amp;osver=\u0026lt;os_version\u0026gt;\u0026amp;timeout=\u0026lt;beacon_interval\u0026gt;\u0026nbsp;where\u0026nbsp;\u0026lt;guid\u0026gt;\u0026nbsp;is a GUID derived from the system\u0027s volume serial number and formatted using the format string\u0026nbsp;%06lX-%04lX-%04lX-%06lX. Additionally, the request uses the hard-coded HTTP User-Agent string \u0026quot;Mozilla\/5.0 (iPhone; CPU iPhone OS 11_1_1 like Mac OS X) AppleWebKit\/604.3.5 (KHTML, like Gecko) Version\/11.0 Mobile\/15B150 Safari\/604.1\u0026quot;\u003C\/p\u003E\n\u003Cp\u003EAfter a response is received, it\u0027s processed for commands. A single response may contain multiple commands. For each command executed, the sample sends an HTTPS POST request over TCP port\u0026nbsp;443\u0026nbsp;indicating success or failure. The sample responds to the commands below.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022600\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cb\u003ECommand\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Edrun\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003EDownload and execute an executable from a URL provided in the command. File saved to\u0026nbsp;\u003Ci\u003E%TEMP%\u003C\/i\u003E\\\u0026lt;32_rand_chars\u0026gt;.exe.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Erundll_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003EDownload a custom XOR-encoded and LZNT1 compressed DLL from a URL provided in the command and save to\u0026nbsp;\u003Ci\u003E%TEMP%\u003C\/i\u003E\\\u0026lt;32_rand_chars\u0026gt;. Decode, decompress, and load the DLL in memory and call its entrypoint.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Eupdate_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003EMove sample file to\u0026nbsp;\u0026lt;sample_name\u0026gt;.old\u0026nbsp;and download a new version of itself to\u0026nbsp;\u0026lt;sample_name\u0026gt;\u0026nbsp;where\u0026nbsp;\u0026lt;sample_name\u0026gt;\u0026nbsp;is the name of this sample (i.e.,\u0026nbsp;msi.dll). Relaunch the hosting TeamViewer application with command-line argument\u0026nbsp;COM1_. Delete\u0026nbsp;\u0026lt;sample_name\u0026gt;.old.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Erestart_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003ERelaunch the hosting TeamViewer application with command-line argument\u0026nbsp;COM1_.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Eterminate_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003ETerminate the hosting TeamViewer application.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Ekill_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003ECreate and execute the self-deleting batch script\u0026nbsp;tvdll.cmd\u0026nbsp;to delete all unzipped files as well as the sample file. Terminate the hosting TeamViewer application.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Epoweroff_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003EShutdown the system.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Ereboot_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003EReboot the system.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022760\u0022\u003E\u003Cp\u003Esetinterval_command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022879\u0022\u003E\u003Cp\u003EUpdate the C2 beacon-interval time.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EAfter executing all commands in the response, the sample sleeps for the designated C2 beacon-interval time. It repeats the process outlined above to send the next C2 beacon. This behavior repeats indefinitely.\u003C\/p\u003E\n\u003Cp\u003EThe self-deleting batch script\u0026nbsp;tvdll.cmd\u0026nbsp;contains the following content where\u0026nbsp;\u0026lt;renamed_TeamVeiwer\u0026gt;\u0026nbsp;is the renamed TeamViewer executable (i.e.,\u0026nbsp;wpvnetwks.exe) and\u0026nbsp;\u0026lt;sample_name\u0026gt;\u0026nbsp;is the name of this sample (i.e.,\u0026nbsp;msi.dll).\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E@echo off\u003Cbr\u003E\n ping 1.1.1.1 -n 1 -w 5000 \u0026gt; nul\u003Cbr\u003E\n goto nosleep1\u003Cbr\u003E\n :redel1\u003Cbr\u003E\n ping 1.1.1.1 -n 1 -w 750 \u0026gt; nul\u003Cbr\u003E\n :nosleep1\u003Cbr\u003E\n attrib -a -h -s -r %~d0%~p0TeamViewer_Resource_en.dll\u003Cbr\u003E\n del \/f \/q %~d0%~p0TeamViewer_Resource_en.dll\u003Cbr\u003E\n \u003Cb\u003Eif\u003C\/b\u003E\u0026nbsp;exist\u0026nbsp; \u0026quot;%~d0%~p0TeamViewer_Resource_en.dll\u0026quot; goto redel1\u003Cbr\u003E\n goto nosleep2\u003Cbr\u003E\n :redel2\u003Cbr\u003E\n ping 1.1.1.1 -n 1 -w 750 \u0026gt; nul\u003Cbr\u003E\n :nosleep2\u003Cbr\u003E\n attrib -a -h -s -r %~d0%~p0TeamViewer_StaticRes.dll\u003Cbr\u003E\n del \/f \/q %~d0%~p0TeamViewer_StaticRes.dll\u003Cbr\u003E\n \u003Cb\u003Eif\u003C\/b\u003E\u0026nbsp;exist\u0026nbsp; \u0026quot;%~d0%~p0TeamViewer_StaticRes.dll\u0026quot; goto redel2\u003Cbr\u003E\n goto nosleep3\u003Cbr\u003E\n :redel3\u003Cbr\u003E\n ping 1.1.1.1 -n 1 -w 750 \u0026gt; nul\u003Cbr\u003E\n :nosleep3\u003Cbr\u003E\n attrib -a -h -s -r %~d0%~p0TeamViewer_Desktop.exe\u003Cbr\u003E\n del \/f \/q %~d0%~p0TeamViewer_Desktop.exe\u003Cbr\u003E\n \u003Cb\u003Eif\u003C\/b\u003E\u0026nbsp;exist\u0026nbsp; \u0026quot;%~d0%~p0TeamViewer_Desktop.exe\u0026quot; goto redel3\u003Cbr\u003E\n goto nosleep4\u003Cbr\u003E\n :redel4\u003Cbr\u003E\n ping 1.1.1.1 -n 1 -w 750 \u0026gt; nul\u003Cbr\u003E\n :nosleep4\u003Cbr\u003E\n attrib -a -h -s -r %~d0%~p0TeamViewer.ini\u003Cbr\u003E\n del \/f \/q %~d0%~p0TeamViewer.ini\u003Cbr\u003E\n \u003Cb\u003Eif\u003C\/b\u003E\u0026nbsp;exist\u0026nbsp; \u0026quot;%~d0%~p0TeamViewer.ini\u0026quot; goto redel4\u003Cbr\u003E\n goto nosleep5\u003Cbr\u003E\n :redel5\u003Cbr\u003E\n ping 1.1.1.1 -n 1 -w 750 \u0026gt; nul\u003Cbr\u003E\n :nosleep5\u003Cbr\u003E\n attrib -a -h -s -r %~d0%~p0\u0026lt;sample_name\u0026gt;\u003Cbr\u003E\n del \/f \/q %~d0%~p0\u0026lt;sample_name\u0026gt;\u003Cbr\u003E\n \u003Cb\u003Eif\u003C\/b\u003E\u0026nbsp;exist\u0026nbsp; \u0026quot;%~d0%~p0\u0026lt;sample_name\u0026gt;\u0026quot; goto redel5\u003Cbr\u003E\n goto nosleep6\u003Cbr\u003E\n :redel6\u003Cbr\u003E\n ping 1.1.1.1 -n 1 -w 750 \u0026gt; nul\u003Cbr\u003E\n :nosleep6\u003Cbr\u003E\n attrib -a -h -s -r %~d0%~p0\u0026lt;renamed_TeamVeiwer\u0026gt;\u003Cbr\u003E\n del \/f \/q %~d0%~p0\u0026lt;renamed_TeamVeiwer\u0026gt;\u003Cbr\u003E\n \u003Cb\u003Eif\u003C\/b\u003E\u0026nbsp;exist\u0026nbsp; \u0026quot;%~d0%~p0\u0026lt;renamed_TeamViewer\u0026gt;\u0026quot; goto redel6\u003Cbr\u003E\n attrib -a -h -s -r %0\u003Cbr\u003E\n del \/f \/q %0\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EPossible Connection to Another Intrusion Set\u003C\/h4\u003E\n\u003Cp\u003EThe identified MINEBRIDGE samples have been packed within a loader we call MINEDOOR. Since Fall 2019, we\u2019ve observed a group publicly tracked as TA505 conducting phishing campaigns that use \u003Ca href=\u0022https:\/\/intelligence.fireeye.com\/reports\/20-00000668\u0022\u003EMINEDOOR to deliver the FRIENDSPEAK backdoor\u003C\/a\u003E. The combination of MINEDOOR and FRIENDSPEAK has also \u003Ca href=\u0022https:\/\/www.proofpoint.com\/us\/threat-insight\/post\/ta505-distributes-new-sdbbot-remote-access-trojan-get2-downloader\u0022\u003Ebeen publicly discussed using the name Get2\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EThe limited overlap in tactics, techniques, and procedures (TTPs) between campaigns delivering MINEBRIDGE and those delivering FRIENDSPEAK may suggest that MINEDOOR is not exclusive to TA505. Recent campaigns delivering FRIENDSPEAK have appeared to use spoofed sender addresses, Excel spreadsheets with embedded payloads, and campaign-specific domains that masquerade as common technology services. Meanwhile, the campaigns delivering MINEBRIDGE have used actor-controlled email addresses, malicious Word documents that download payloads from a remote server, and domains with a variety of themes sometimes registered weeks in advance of the campaign. The campaigns delivering MINEBRIDGE also appear to be significantly smaller in both volume and scope than the campaigns delivering FRIENDSPEAK. Finally, we observed campaigns delivering MINEBRIDGE on Eastern Orthodox Christmas when Russian-speaking actors are commonly inactive; we did not observe campaigns delivering FRIENDSPEAK during the week surrounding the holiday and language resources in the malware may suggest TA505 actors speak Russian.\u003C\/p\u003E\n\u003Cp\u003EIt is plausible that these campaigns represent a subset of TA505 activity. For example, they may be operations conducted on behalf of a specific client or by a specific member of the broader threat group. Both sets of campaigns used domains that were registered with Eranet and had the registrant location \u201cJL, US\u201d or \u201cFujian, CN,\u201d however this overlap is less notable because we suspect that TA505 has used domains registered by a service that reuses registrant information.\u003C\/p\u003E\n\u003Cp\u003EPost-compromise activity would likely reveal if these campaigns were conducted by TA505 or a second threat group, however, FireEye has not yet observed any instances in which a host has been successfully compromised by MINEBRIDGE. As such, FireEye currently clusters this activity separately from what the public tracks as TA505.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgments\u003C\/h4\u003E\n\u003Cp\u003EFireEye would like to thank all the dedicated authors of open source tooling and research referenced in this blog post. Further, FireEye would like to thank TeamViewer for their collaboration with us on this matter. The insecure DLL loading highlighted in this blog post was resolved in TeamViewer 11.0.214397, released on October 22, 2019, prior to the TeamViewer team receiving any information from FireEye. Additionally, TeamViewer is working to add further mitigations for the malware\u2019s functionality. FireEye will update this post with further data from TeamViewer when this becomes available.\u003C\/p\u003E\n\u003Ch4\u003EIndicators of Compromise (IOCs)\u003C\/h4\u003E\n\u003Ch5\u003ESuspicious Behaviors\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EProcess lineage: Microsoft Word launching TeamViewer\u003C\/li\u003E\n\u003Cli\u003EDirectory Creation: %APPDATA%\\Windows Media Player\u003C\/li\u003E\n\u003Cli\u003EFile Creation:\u003Cul\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\msi.dll\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\msi.dll.old\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\tvdll.cmd\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\wpvnetwks.exe\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\TeamViewer_Resource_en.dll\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\TeamViewer_StaticRes.dll\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\TeamViewer_Desktop.exe\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\\Windows Media Player\\TeamViewer.ini\u003C\/li\u003E\n\u003Cli\u003E%CSIDL_STARTUP%\\Windows WMI.lnk\u003C\/li\u003E\n\u003Cli\u003E%CSIDL_PROFILE%\\\u0026lt;dll_name\u0026gt;.xpdf\u003C\/li\u003E\n\u003Cli\u003E%TEMP%\\\u0026lt;32 random characters\u0026gt;\u003C\/li\u003E\n\u003Cli\u003E%TEMP%\\\u0026lt;32 random characters\u0026gt;.exe\u003C\/li\u003E\n\u003Cli\u003E%TEMP%\\~8426bcrtv7bdf.bin\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003ENetwork Activity:\u003Cul\u003E\n\u003Cli\u003EHTTPS Post requests to C2 URLs\u003C\/li\u003E\n\u003Cli\u003EUser-Agent String: \u0026quot;Mozilla\/5.0 (iPhone; CPU iPhone OS 11_1_1 like Mac OS X) AppleWebKit\/604.3.5 (KHTML, like Gecko) Version\/11.0 Mobile\/15B150 Safari\/604.1\u0026quot;\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EC2 Domains\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003E123faster[.]top\u003C\/li\u003E\n\u003Cli\u003Econversia91[.]top\u003C\/li\u003E\n\u003Cli\u003Efatoftheland[.]top\u003C\/li\u003E\n\u003Cli\u003Ecreatorz123[.]top\u003C\/li\u003E\n\u003Cli\u003Ecompilator333[.]top\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EDownload Domains\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003Eneurogon[.]com\u003C\/li\u003E\n\u003Cli\u003Etiparcano[.]com\u003C\/li\u003E\n\u003Cli\u003Eseigortan[.]com\u003C\/li\u003E\n\u003Cli\u003Emarendoger[.]com\u003C\/li\u003E\n\u003Cli\u003Ebadiconreg[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003ESender Domains\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003Ept-cpaaccountant[.]com\u003C\/li\u003E\n\u003Cli\u003Erogervecpa[.]com\u003C\/li\u003E\n\u003Cli\u003Eagent4career[.]com\u003C\/li\u003E\n\u003Cli\u003Ebestrecruitments[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EPhishing Documents\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESHA256\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E01067c8e41dae72ce39b28d85bf923ee\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E80e48391ed32e6c1ca13079d900d3afad62e05c08bd6e929dffdd2e3b9f69299\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1601137b84d9bebf21dcfb9ad1eaa69d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3f121c714f18dfb59074cbb665ff9e7f36b2b372cfe6d58a2a8fb1a34dd71952\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1c883a997cbf2a656869f6e69ffbd027\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ede7c7a962e78ceeee0d8359197daeb2c3ca5484dc7cf0d8663fb32003068c655\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2ed49bd499c9962e115a66665a6944f6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eb8f64a83ad770add6919d243222c62471600e64789264d116c560b7c574669ec\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3b948368fe1a296f5ed18b11194ce51c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E999d4f434bbc5d355656cc2a05982d61d6770a4c3c837dd8ec6aff8437ae405a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4148281424ff3e85b215cd867746b20c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9812123d2367b952e68fa09bd3d1b3b3db81f0d3e2b3c03a53c21f12f1f4c889\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E54f22fbc84f4d060fcbf23534a02e5f6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7b20e7e4e0b1c0e41de72c75b1866866a8f61df5a8af0ebf6e8dbd8f4e7bdc57\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5a3d8348f04345f6687552e6b7469ac1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E77a33d9a4610c4b794a61c79c93e2be87886d27402968310d93988dfd32a2ccf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E607d28ae6cf2adb87fcb7eac9f9e09ab\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef3917832c68ed3f877df4cd01635b1c14a9c7e217c93150bebf9302223f52065\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9ba3275ac0e65b9cd4d5afa0adf401b4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E18698c5a6ff96d21e7ca634a608f01a414ef6fbbd7c1b3bf0f2085c85374516e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9becd2fd73aa4b36ad9cd0c95297d40b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E30025da34f6f311efe6b7b2c3fe334f934f3f6e6024e4d95e8c808c18eb6de03\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9cce3c9516f0f15ce18f37d707931775\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebf0adb30ca230eee6401861e1669b9cfeaa64122cc29c5294c2198f2d82f760e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9faf9e0c5945876c8bad3c121c91ea15\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E88c4019e66564ad8c15b189b903276910f9d828d5e180cac30f1f341647278fc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea37e6eeb06729b6108649f21064b16ef\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee895dc605c6dcaf2c3173b5ec1a74a24390c4c274571d6e17b55955c9bd48799\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eab8dc4ba75aad317abb8ee38c8928db0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E212793a915bdd75bede8a744cd99123e2a5ac70825d7b2e1fc27104276a3aafd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eb8817253288b395cb33ffe36e0072dc9\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eba013420bd2306ecb9be8901db905b4696d93b9674bd7b10b4d0ef6f52fbd069\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecb5e5d29f844eb22fecaa45763750c27\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4ff9bfde5b5d3614e6aa753cacc68d26c12601b88e61e03e4727ee6d9fe3cdc2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecffda37453e1a1389840ed6ebaef1b0d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec9f6ba5368760bf384399c9fd6b4f33185e7d0b6ea258909d7516f41a0821056\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edc0e1e4ec757a777a4d4cc92a8d9ef33\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eac7e622e0d1d518f1b002d514c348a60f7a7e7885192e28626808a7b9228eab6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee5c7e82670372e3cf8e8cab2c1e6bc17\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eeba3c07155c47a47ee4d9b5201f47a9473255f4d7a6590b5c4e7b6e9fc533c08\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef93062f6271f20649e61a09c501c6c92\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3f4f546fba4f1e2ee4b32193abcaaa207efe8a767580ab92e546d75a7e978a0b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch5\u003EMINEBRIDGE\/MINEDOOR Samples\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESHA256\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E05432fc4145d56030f6dd6259020d16c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E182ccc7f2d703ad732ffee0e1d9ae4ae5cf6b8817cc33fd44f203d31868b1e97\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0be9911c5be7e6dfeaeca0a7277d432b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E65ead629a55e953b31668aac3bd373e229c45eb1871d8466f278f39ebcd5d26b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0dd556bf03ecb42bf87d5ea7ce8efafe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E48f6810e50d08c2631f63aae307a7724dba830430f5edd4b90b4b6a5b3c3ca85\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E15edac65d5b5ed6c27a8ac983d5b97f6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E03ff2b3067aa73ecd8830b6b0ea4f7cfa1c7476452b26227fb433265e7206525\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1e9c836f997ddcbd13de35a0264cf9f1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E23da418912119a1358c9a1a4671ba60c396fff4c4de225fe6a225330147549a7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E21aa1066f102324ccc4697193be83741\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E86d839e1d741445f194965eee60d18bd292bec73e4889089e6caf9877581db12\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E22b7ddf4983d6e6d84a4978f96bc2a82\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efc39cb08cae90c661e00718e2a0051b5de3dcb7cddde919b9ffd2d79bf923d1f\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2333fbadeea558e57ac15e51d55b041c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E57671d5154e707da0ee6139485f45a50fa9221852ebb65781d45a2660da7d0cb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2b9961f31e0015cbcb276d43b05e4434\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee41b89869c2b510c88acd1ed9fd4a6dfe89222a81c6c1241a69af3b7f812f712\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2c3cb2132951b63036124dec06fd84a8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eb6dbb902125e7bf6f6701b654cbff4abaf2e853441cf34045ac19eff5ed8ce84\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4de9d6073a63a26180a5d8dcaffb9e81\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7b1d4774176976ffcb2075889557f91a43c05fb13f3bc262bbaec4d7a0a827e6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E505ff4b9ef2b619305d7973869cd1d2b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eabb05ba50f45742025dd4ebff2310325783da00fb7bc885783e60a88c5157268\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E52d6654fe3ac78661689237a149a710b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed6a0e62fe53116c9b5bccd2a584381e2ca86e35490d809ce1900603d5e6b53eb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E53e044cd7cea2a6239d8411b8befb4b7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6e76d648d446e6a70acdd491f04c52d17f9f0e1ef34890c6628c4f48725b47c8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5624c985228288c73317f2fa1be66f32\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E99559a5f06b0279ed893d2799b735dae450a620f6cea2ea58426d8b67d598add\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E598940779363d9f4203fbfe158d6829b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1358b0ccae9dbb493228dc94eb5722c8d34c12227a438766be83df8c1c92a621\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E60bdea2c493c812428a8db21b29dd402\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E383c86deed8797e0915acf3e0c1b6a4142c2c5ecb5d482517ed2ade4df6f36fd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E681a77eba0734c0a17b02a81564ae73f\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0aaa66dc983179bffdb181079f3b786b6cd587c38c67ba68b560db0bd873278a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6b7d9268c7000c651473f33d088a16bd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6e39ffecab4ca0bd7835a2e773ebfc3f6d909a0a680f898e55f85ed00728666d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6d6f50f7bba4ae0225e9754e9053edc0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eddf33eff293ffc268dfd0a33dddef97aefe9e010ec869dc22c221d197eb85740\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6de77c1b4e8abaaf304b43162252f022\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8f50ddc1519e587597882a6bd0667653c36a8064b56ee5ff77665db2faf24710\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7004fadfa572d77e24b33d2458f023d1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecccd6b46f950caec5effdd07af339be78691974fec5f25d923932b35edb95c4a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E71988460fd87b6bff8e8fc0f442c934b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8167d41ad30f5d451791878815e479965b2f5213231f26819ecaf4fcc774ab12\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E722981703148fa78d41abbae8857f7a2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea3070ee10dd5bcd65a45b72848c926db2602e5297641452edff66e7133cdce9c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E818f7af373d1ec865d6c1b7f59dc89e5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecbe4b73c0c95c207ccde9d9bd80f541cf90cad18ba5abc3fe66a811ead1601c2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E832052b0f806f44b92f6ef150573af81\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee162a70a6e27fe23379d3a17a3a727d85a94b79416d81ec3b4ea80d329e96830\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E836125ae2bed57be93a93d18e0c600e8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0fbde653bef4642626f2996a41a15a635eb52cd31eacce133d28301b902d67df\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E86d60bce47c9bb6017e3da26cab50dcf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6c134908ad74dfa1468a1166e7d9244695f1ffeff68bfd4eec4b35820b542b8a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8919458aec3dcc90563579a76835fc54\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eaad0537924bacddd0d5872f934723e765dbb182f2804c6f594f9b051937495ec\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8d7e220af48fceee515eb5e56579a709\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3eefa7072344e044c0a6abb0030f3f26065bf6a86bb50ea38473dd7ac73904fb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E91b8ec04d8b96b90ea406c7b98cc0ad6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0520e68a4b73c3b41e566cf07be54e1f1cb59c59c303fe3390e0687f9af1a58a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E959eb0696c199cbf60ec8f12fcf0ea3c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eccb5f8734befd6ab218513e16a57679a8fb43b2732e19233ee920d379045e318\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E95ec5e8d87111f7f6b2585992e460b52\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3f8e38ccf71f122b65fdc679db13e3de3bb4b4fc04b8ab6f955d02e0bca10fae\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9606cf0f12d6a00716984b5b4fa49d7d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef4f062fd7b98365ed6db993b1da586dd43e5cdcc2f00a257086734daf88c9abb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9f7fed305c6638d0854de0f4563abd62\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6c5f72ddf0262838a921107520cdc12ba8e48dbafab4a66732a350095dd48e9f\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea11c0b9f3e7fedfe52b1fc0fc2d4f6d1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed35ac29ea6e064b13d56f6a534022f253cf76b98e10a7ea1cbfa086eefd64f4b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea47915a2684063003f09770ba92ccef2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7b16ce0d2443b2799e36e18f60fe0603df4383b1a392b0549c3f28159b1ca4d4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea917b2ec0ac08b5cde3678487971232a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8578bff803098bf5ca0d752d0a81f07659688a32cbfc946728e5ab0403f5c4ba\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ead06205879edab65ed99ed7ff796bd09\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed560f8717f4117d011f40c8880081d02d1455a41c93792e1600799d3e5ee9421\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ead910001cb57e84148ef014abc61fa73\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec9a6f7b0603779690c1d189850403f86608a3c5e1cd91e76fd31c4f119ae256b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eb1ce55fca928cf66eaa9407246399d2c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec6214ec7909ce61d6ec3f46f5a7ec595d8cc8db48965c5baee8a346632cbe16d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eb9249e9f1a92e6b3359c35a8f2a1e804\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0695e5e49a297c980b96f76bf10e5540de188d6a6a162e38f475418d72a50032\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebd6880fb97faceecf193a745655d4301\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E23840c587e4e9588b3d0795d4d76a4f3d4d5b2e665ce42dde0abcd1e0a2ba254\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebe2597a842a7603d7eb990a2135dab5e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6288d3de1f1aa05fa0a5f0c8eb9880d077f034fc79fc20f87cbfcc522aa803cb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecf5470bfe947739e0b4527d8adb8486a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6357fdb8f62948d489080b61caf135e6aaba32dcdb7dc49b0efafef178b3b54f\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed593b7847ec5d18a7dba6c7b98d9aebf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5df3a6afb1a56fa076c6db716d5a050455158941ec962546a8799fc80ccfa573\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed7ee4ffce21325dfe013b6764d0f8986\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E92e94482dee75261c8ebdcbb7ace382a097cca11bcdc675bbe2d7b3f67525f84\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ede4d7796006359d60c97a6e4977e4936\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eee8ba1c5329d928d542bfa06eec2c0a3e3b97dcc20382ddbc27bc420ceaeb677\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee0069cd3b5548f9fd8811adf4b24bf2e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6046d6aed3f4ee2564d6be540d46bcdc0bebce11a1ced4b9ddbfa1a41084411c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee1ea93fa74d160c67a9ff748e5254fe0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E92c10ef23209e09abb17e41d67301f0e3f7d9e7ddfc7c1a66140c4986d72bee7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eea15d7944c29f944814be14b25c2c2b1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5898b41ca4f4777ad04d687f93548129ccb626d2f5e6e100b0a037c3d40a7444\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef22a4abd5217fa01b56d064248ce0cc5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E858b4070f8b83aa43fd6a5189a8ed226ce767a64972db893e36550a25b20be94\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef3cb175e725af7f94533ecc3ff62fa12\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5a5385df469459cd56f6eecbf4b41b8c75aa17220c773501eaec22731f3a41bb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef6533e09a334b9f28136711ea8e9afca\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9136c36ccd0be71725e8720a6cfdbdd38d7eea3998228c69ed4b52e78ba979c4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef7daaea04b7fe4251b6b8dabb832ee3a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6abd90d718113482a5bcd36e35b4ea32c469f94fc2cfb9c1c98214efbf64c352\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efb1555210d04286c7bcb73ca57e8e430\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022535\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E36da56815dc0c274fc8aacdfffbc4d5e500025ccd1147cad513d59b69ab9557d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n",
        "jcr:lastModified": "Wed Feb 05 2020 15:44:07 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EIn this blog post we discuss multiple targeted phishing campaigns designed to download and deploy a backdoor we track as MINEBRIDGE.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Feb 04 2020 00:15:42 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Wed Feb 05 2020 15:27:20 GMT+0000",
      "imageRotate": "0"
    }
  }
}
