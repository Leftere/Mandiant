{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Apr 05 2018 11:13:48 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Fake Software Update Abuses NetSupport Remote Access Tool",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "ae558d4a-69be-4389-8610-7c7492c526dd",
    "author": "Sudhanshu Dubey",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "526c1224-2ca6-4e10-9385-7cb60779db27"
    ],
    "jcr:created": "Thu Apr 05 2018 11:13:48 GMT-0400",
    "cq:lastReplicated": "Thu Apr 05 2018 11:13:45 GMT-0400",
    "cq:lastModified": "Thu Apr 05 2018 11:13:41 GMT-0400",
    "jcr:baseVersion": "526c1224-2ca6-4e10-9385-7cb60779db27",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:sudhanshu-dubey",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:rat",
      "fireeye-blog-tags:attack",
      "fireeye-blog-tags:compromise"
    ],
    "jcr:uuid": "668ba641-99bd-496b-9e32-b4eecd8591d6",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Apr 05 2018 11:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EOver the last few months, FireEye has tracked an in-the-wild campaign that leverages compromised sites to spread fake updates. In some cases, the payload was the NetSupport Manager remote access tool (RAT). NetSupport Manager is a commercially available RAT that can be used legitimately by system administrators for remotely accessing client computers. However, malicious actors are abusing this application by installing it to the victims\u2019 systems without their knowledge to gain unauthorized access to their machines. This blog details our analysis of the JavaScript and components used in instances where the identified payload was NetSupport RAT.\u003C\/p\u003E\n\u003Ch4\u003EInfection Vector\u003C\/h4\u003E\n\u003Cp\u003EThe operator behind these campaigns uses compromised sites to spread fake updates masquerading as Adobe Flash, Chrome, and FireFox updates. When users navigate to the compromised website, the malicious JavaScript file is downloaded, mostly from a DropBox link. Before delivering the payload, the JavaScript sends basic system information to the server. After receiving further commands from the server, it then executes the final JavaScript to deliver the final payload. In our case, the JavaScript that delivers the payload is named Update.js, and it is executed from %AppData% with the help of wscript.exe. Figure 1 shows the infection flow.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Infection Flow\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EIn-Depth Analysis of JavaScript\u003C\/h4\u003E\n\u003Cp\u003EThe initial JavaScript file contains multiple layers of obfuscation. Like other malicious scripts, the first layer has obfuscation that builds and executes the second layer as a new function. The second layer of the JavaScript contains the \u003Cb\u003Edec\u003C\/b\u003E function, which is used to decrypt and execute more JavaScript code. Figure 2 shows a snapshot of the second layer.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Second Layer of Initial JavaScript File\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the second JavaScript file, the malware author uses a tricky method to make the analysis harder for reverse engineers. The author uses the \u003Cb\u003Ecaller\u003C\/b\u003E and \u003Cb\u003Ecallee\u003C\/b\u003E function code to get the key for decryption. During normal JavaScript analysis, if an analyst finds any obfuscated script, the analyst tries to de-obfuscate or beautify the script for analysis. JavaScript beautification tools generally add line breaks and tabs to make the script code look better and easier to analyze. The tools also try to rename the local variables and remove unreferenced variables and code from the script, which helps to analyze core code only.\u003C\/p\u003E\n\u003Cp\u003EBut in this case, since the malware uses the \u003Cb\u003Ecaller\u003C\/b\u003E and \u003Cb\u003Ecallee\u003C\/b\u003E function code to derive the key, if the analyst adds or removes anything from the first or second layer script, the script will not be able to retrieve the key and will terminate with an exception. The code snippet in Figure 3 shows this trick.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Anti-Analysis Trick Implemented in JavaScript (Beautified Code)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe code decrypts and executes the JavaScript code as a function. This decrypted function contains code that initiates the network connection. In the decoded function, the command and control (C2) URL and a value named \u003Cb\u003Etid\u003C\/b\u003E are hard-coded in the script and protected with some encoded function.\u003Ci\u003E\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EDuring its first communication to the server, the malware sends the \u003Cb\u003Etid\u003C\/b\u003E value and the current date of the system in encoded format, and waits for the response from the server. It decodes the server response and executes the response as a function, as shown in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Initial Server Communication and Response\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe response from the server is JavaScript code that the malware executes as a function named \u003Cb\u003Estep2.\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cb\u003Estep2\u003C\/b\u003E function uses WScript.Network and \u003Ca name=\u0022_Hlk510605055\u0022 id=\u0022_Hlk510605055\u0022\u003E\u003C\/a\u003EWindows Management Instrumentation(WMI) to collect the following system information, which it then encodes and sends to the server:\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EArchitecture, ComputerName, UserName, Processors, OS, Domain, Manufacturer, Model, BIOS_Version, AntiSpywareProduct, AntiVirusProduct, MACAddress, Keyboard, PointingDevice, DisplayControllerConfiguration, ProcessList;\u003Ci\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter sending the system information to the server, the response from the server contains two parts: \u003Cb\u003Econtent2\u003C\/b\u003E and \u003Cb\u003Econtent3\u003C\/b\u003E.\u003C\/p\u003E\n\u003Cp\u003EThe script (\u003Cb\u003Estep2\u003C\/b\u003E function) decodes both parts.\u003Cb\u003E \u003C\/b\u003EThe decoded \u003Cb\u003Econtent3\u003C\/b\u003E part contains the function named as \u003Cb\u003Estep3\u003C\/b\u003E, as shown in Figure 5.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Decrypting and Executing Response step3\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe \u003Cb\u003Estep3\u003C\/b\u003E function contains code that writes decoded \u003Cb\u003Econtent2\u003C\/b\u003E into a %temp% directory as \u003Cb\u003EUpdate.js\u003C\/b\u003E. Update.js contains code to download and execute the final payload. The \u003Cb\u003Estep3\u003C\/b\u003E function also sends the resulting data, such as \u003Cb\u003ErunFileResult\u003C\/b\u003E and\u003Cb\u003E _tempFilePath,\u003C\/b\u003E to the server, as shown in Figure 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Script to Drop and Execute Update.js\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe Update.js file also contains multi-layer obfuscation. After decoding, the JavaScript contains code to drop multiple files in %AppData%, including a 7zip standalone executable (7za.exe), password-protected archive (Loglist.rtf), and batch script (Upd.cmd). We will talk more about these components later.\u003C\/p\u003E\n\u003Cp\u003EJavaScript uses PowerShell commands to download the files from the server. It sets the attribute\u2019s execution policy to bypass and window-style to hidden to hide itself from the end user.\u003C\/p\u003E\n\u003Ch4\u003EComponents of the Attack\u003C\/h4\u003E\n\u003Cp\u003EFigure 7 shows the index of the malicious server where we have observed the malware author updating the script content.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Index of Malicious Server\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E7za.exe: 7zip standalone executable\u003C\/li\u003E\n\u003Cli\u003ELogList.rtf: Password-protected archive file\u003C\/li\u003E\n\u003Cli\u003EUpd.cmd: Batch script to install the NetSupport Client\u003C\/li\u003E\n\u003Cli\u003EDownloads.txt: List of IPs (possibly the infected systems)\u003C\/li\u003E\n\u003Cli\u003EGet.php: Downloads LogList.rtf\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EUpd.cmd\u003C\/h5\u003E\n\u003Cp\u003EThis file is a batch script that extracts the archive file and installs the remote control tool on the system. The script is obfuscated with the variable substitution method. This file was regularly updated by the malware during our analysis.\u003Ci\u003E\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EAfter de-obfuscating the script, we can see the batch commands in the script (Figure 8).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: De-Obfuscated Upd.cmd Script\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe script performs the following tasks:\u003C\/p\u003E\n\u003Col style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EExtract the archive using the 7zip executable with the password mentioned in the script.\u003C\/li\u003E\n\u003Cli\u003EAfter extraction, delete the downloaded archive file (loglist.rtf).\u003C\/li\u003E\n\u003Cli\u003EDisable Windows Error Reporting and App Compatibility.\u003C\/li\u003E\n\u003Cli\u003EAdd the remote control client executable to the firewall\u2019s allowed program list.\u003C\/li\u003E\n\u003Cli\u003ERun remote control tool (client32.exe).\u003C\/li\u003E\n\u003Cli\u003EAdd Run registry entry with the name \u201cManifestStore\u201d or downloads shortcut file to Startup folder.\u003C\/li\u003E\n\u003Cli\u003EHide the files using attributes.\u003C\/li\u003E\n\u003Cli\u003EDelete all the artifacts (7zip executable, script, archive file).\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003ENote:\u003Cb\u003E \u003C\/b\u003EWhile analyzing the script, we found some typos in the script (Figure 9). Yes, malware authors make mistakes too. This script might be in beta phase. In the later version of script, the author has removed these typos.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Registry Entry Bloopers\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EArtifact Cleaning\u003C\/h5\u003E\n\u003Cp\u003EAs mentioned, the script contains code to remove the artifacts used in the attack from the victim\u2019s system. While monitoring the server, we also observed some change in the script related to this code, as shown in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Artifact Cleaning Commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe highlighted command in one of the variants indicates that it might drop or use this file in the attack. The file could be a decoy document.\u003C\/p\u003E\n\u003Ch5\u003EPersistence Mechanism\u003C\/h5\u003E\n\u003Cp\u003EDuring our analysis, we observed two variants of this attack with different persistence mechanisms.\u003C\/p\u003E\n\u003Cp\u003EIn the first variant, the malware author uses a RUN registry entry to remain persistent in the system.\u003Ci\u003E\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EIn the second variant, the malware author uses the shortcut file (named \u003Cb\u003Edesktop.ini.lnk\u003C\/b\u003E), which is hosted on the server. It downloads the shortcut file and places it into the Startup folder, as shown in Figure 11.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/NetSupport\/Fig11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Downloading Shortcut File\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe target command for the shortcut file points to the remote application \u201cclient32.exe,\u201d which was dropped in %AppData%, to start the application on startup.\u003C\/p\u003E\n\u003Ch5\u003ELogList.rtf\u003C\/h5\u003E\n\u003Cp\u003EAlthough the file extension is .rtf, the file is actually a 7zipped archive. This archive file is password-protected and contains the NetSupport Manager RAT. The script upd.cmd contains the password to extract the archive.\u003C\/p\u003E\n\u003Cp\u003EThe major features provided by the NetSupport tool include:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003ERemote desktop\u003C\/li\u003E\n\u003Cli\u003EFile transfer\u003C\/li\u003E\n\u003Cli\u003ERemote inventory and system information\u003C\/li\u003E\n\u003Cli\u003ELaunching applications in client\u2019s machine\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003EGeolocation\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EDownloads.txt\u003C\/h5\u003E\n\u003Cp\u003EThis file contains a list of IP addresses, which could be compromised systems. It has IPs along with User-agent. The IP addresses in the file belong to various regions, mostly the U.S., Germany, and the Netherlands.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003ERATs are widely used for legitimate purposes, often by system administrators. However, since they are legitimate applications and readily available, malware authors can easily abuse them and sometimes can avoid user suspicion as well.\u003C\/p\u003E\n\u003Cp\u003EThe FireEye HX Endpoint platform successfully detects this attack at the initial phase of the attack cycle.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgement\u003C\/h4\u003E\n\u003Cp\u003EThanks to my colleagues Dileep Kumar Jallepalli, Rakesh Sharma and Kimberly Goody for their help in the analysis.\u003C\/p\u003E\n\u003Ch4\u003EIndicators of Compromise\u003C\/h4\u003E\n\u003Cp\u003ERegistry entries\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run : \u0026nbsp;ManifestStore\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EHKCU\\Software\\SeX\\KEx\u003C\/p\u003E\n\u003Cp\u003EFiles\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\client32.exe\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\client32.ini\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\HTCTL32.DLL\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\msvcr100.dll\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\nskbfltr.inf\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\NSM.ini\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\NSM.LIC\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\nsm_vpro.ini\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\pcicapi.dll\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\PCICHEK.DLL\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\PCICL32.DLL\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\remcmdstub.exe\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\ManifestStore\\TCCTL32.DLL\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E%AppData%\\systemupdate\\Whitepaper.docx\u003C\/p\u003E\n\u003Cp\u003EShortcut file\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; %AppData%\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\desktop.ini.lnk\u003C\/p\u003E\n\u003Cp\u003EFirewall program entry allowing the following application\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; %AppData%\\ManifestStore\\client32.exe\u003C\/p\u003E\n\u003Cp\u003ERunning process named \u201cclient32.exe\u201d from the path \u201c%AppData%\\ManifestStore\\client32.exe\u201d\u003C\/p\u003E\n\u003Ch5\u003EHashes\u003C\/h5\u003E\n\u003Cp\u003EThe following hashes are JavaScript files that use the same obfuscation techniques described in the blog:\u003C\/p\u003E\n\u003Cp\u003Efc87951ae927d0fe5eb14027d43b1fc3\u003C\/p\u003E\n\u003Cp\u003Ee3b0fd6c3c97355b7187c639ad9fb97a\u003C\/p\u003E\n\u003Cp\u003Ea8e8b2072cbdf41f62e870ec775cb246\u003C\/p\u003E\n\u003Cp\u003E6c5fd3258f6eb2a7beaf1c69ee121b9f\u003C\/p\u003E\n\u003Cp\u003E31e7e9db74525b255f646baf2583c419\u003C\/p\u003E\n\u003Cp\u003E065ed6e04277925dcd6e0ff72c07b65a\u003C\/p\u003E\n\u003Cp\u003E12dd86b842a4d3fe067cdb38c3ef089a\u003C\/p\u003E\n\u003Cp\u003E350ae71bc3d9f0c1d7377fb4e737d2a4\u003C\/p\u003E\n\u003Cp\u003Ec749321f56fce04ad8f4c3c31c7f33ff\u003C\/p\u003E\n\u003Cp\u003Ec7abd2c0b7fd8c19e08fe2a228b021b9\u003C\/p\u003E\n\u003Cp\u003Eb624735e02b49cfdd78df7542bf8e779\u003C\/p\u003E\n\u003Cp\u003E5a082bb45dbab012f17120135856c2fc\u003C\/p\u003E\n\u003Cp\u003Edc4bb711580e6b2fafa32353541a3f65\u003C\/p\u003E\n\u003Cp\u003Ee57e4727100be6f3d243ae08011a18ae\u003C\/p\u003E\n\u003Cp\u003E9bf55bf8c2f4072883e01254cba973e6\u003C\/p\u003E\n\u003Cp\u003E20a6aa24e5586375c77b4dc1e00716f2\u003C\/p\u003E\n\u003Cp\u003Eaa2a195d0581a78e01e62beabb03f5f0\u003C\/p\u003E\n\u003Cp\u003E99c7a56ba04c435372bea5484861cbf3\u003C\/p\u003E\n\u003Cp\u003E8c0d17d472589df4f597002d8f2ba487\u003C\/p\u003E\n\u003Cp\u003E227c634e563f256f396b4071ffda2e05\u003C\/p\u003E\n\u003Cp\u003Eef315aa749e2e33fc6df09d10ae6745d\u003C\/p\u003E\n\u003Cp\u003E341148a5ef714cf6cd98eb0801f07a01\u003C\/p\u003E\n",
        "jcr:lastModified": "Wed Apr 04 2018 15:39:43 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye is tracking an in-the-wild campaign that leverages compromised sites to spread fake updates, and sometimes NetSupport Manager remote access tool is the payload.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Apr 04 2018 16:08:57 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Apr 05 2018 11:13:41 GMT-0400",
      "imageRotate": "0"
    }
  }
}
