{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Mar 26 2019 11:22:55 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "WinRAR Zero-day Abused in Multiple Campaigns",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "00a0c536-cd2e-4763-81bf-6d6c64cc5290",
    "author": "Dileep Kumar Jallepalli",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "65a43c4b-c8cd-4713-a1de-bad3ab17946c"
    ],
    "jcr:created": "Tue Mar 26 2019 12:16:05 GMT-0400",
    "cq:lastReplicated": "Tue Mar 26 2019 12:16:05 GMT-0400",
    "cq:lastModified": "Tue Mar 26 2019 12:10:48 GMT-0400",
    "jcr:baseVersion": "65a43c4b-c8cd-4713-a1de-bad3ab17946c",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-dileep-kumar-jallepalli",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:vulnerability",
      "fireeye-blog-tags:zero-day"
    ],
    "jcr:uuid": "32175a23-773f-4244-aa8d-45805242f376",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Mar 26 2019 11:30:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EWinRAR, an over\u0026nbsp;20-year-old\u0026nbsp;file archival utility used by over\u0026nbsp;\u003Ca href=\u0022https:\/\/www.win-rar.com\/start.html\u0022\u003E500 million users\u003C\/a\u003E\u0026nbsp;worldwide, recently acknowledged a\u0026nbsp;long-standing vulnerability in its code-base.\u0026nbsp;A recently published\u0026nbsp;path traversal zero-day vulnerability, disclosed in CVE-2018-20250 by\u0026nbsp;\u003Ca href=\u0022https:\/\/research.checkpoint.com\/extracting-code-execution-from-winrar\/\u0022\u003ECheck Point Research\u003C\/a\u003E,\u0026nbsp;enables\u0026nbsp;attackers to\u0026nbsp;specify\u0026nbsp;arbitrary\u0026nbsp;destinations during file extraction\u0026nbsp;of \u2018ACE\u2019 formatted files,\u0026nbsp;regardless of user input.\u0026nbsp;Attackers can easily\u0026nbsp;achieve\u0026nbsp;persistence and code execution by creating malicious archives\u0026nbsp;that extract files to\u0026nbsp;sensitive\u0026nbsp;locations, like\u0026nbsp;the\u0026nbsp;Windows\u0026nbsp;\u201cStartup\u201d Start Menu folder.\u0026nbsp;While this\u0026nbsp;vulnerability\u0026nbsp;has been\u0026nbsp;fixed in the latest version of WinRAR (5.70), WinRAR\u0026nbsp;itself\u0026nbsp;does not\u0026nbsp;contain\u0026nbsp;auto-update features, increasing the likelihood that many existing users remain running out-of-date versions.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EFireEye has\u0026nbsp;observed multiple campaigns leveraging this vulnerability, in addition to those already discussed by\u0026nbsp;\u003Ca href=\u0022https:\/\/ti.360.net\/blog\/articles\/upgrades-in-winrar-exploit-with-social-engineering-and-encryption\/\u0022\u003E360 Threat Intelligence Center\u003C\/a\u003E.\u0026nbsp;Below we will look into some campaigns we came across\u0026nbsp;that used customized and interesting decoy documents with a variety of payloads including ones which we have not seen before and the ones that used\u0026nbsp;off-the-shelf tools like\u0026nbsp;PowerShell\u0026nbsp;Empire.\u003C\/p\u003E\n\u003Ch3\u003ECampaign 1: Impersonating an Educational Accreditation Council\u003C\/h3\u003E\n\u003Ch5\u003EInfection Vector\u003C\/h5\u003E\n\u003Cp\u003EWhen the ACE file Scan_Letter_of_Approval.rar is extracted with vulnerable WinRAR versions lower than 5.70, it creates a file named winSrvHost.vbs in the Windows Startup folder without the user\u2019s consent. The VBScript file is executed the next time Windows starts up.\u003C\/p\u003E\n\u003Ch5\u003EDecoy Document\u003C\/h5\u003E\n\u003Cp\u003ETo avoid user suspicion, the ACE file contains a decoy document, \u201cLetter of Approval.pdf\u201d, which purports to be from CSWE, the Council on Social Work Education as shown in Figure 1. This seems to be copied from \u003Ca href=\u0022https:\/\/www.cswe.org\/getattachment\/Accreditation\/Accreditation-Process\/Candidacy-Eligibility-Application-Help-Document.pdf.aspx\u0022\u003ECSWE\u003C\/a\u003E website.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Decoy document impersonating CSWE\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EVBS Backdoor\u003C\/h5\u003E\n\u003Cp\u003EThe VBS file in the Startup folder will be executed by wscript.exe when Windows starts up. The VBS code first derives an ID for the victim using custom logic based on a combination of the ComputerName, Processor_identifier and Username. It obtains these from environment strings, as shown in Figure 2.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Deriving victim ID\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EInterestingly, the backdoor communicates with the command and control (C2) server using the value of the Authorization HTTP header using the code in Figure 3.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Base64-encoded data in Authorization header\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe VBS backdoor first sends the base64-encoded data, including the victim ID and the ComputerName, using the code in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Base64-encoded victim data\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIt then extracts the base64-encoded data in the Authorization header of the HTTP response from the C2 server and decodes it. The decoded data starts with the instruction code from the C2 server, followed with additional parameters.\u003C\/p\u003E\n\u003Ch5\u003EC2 Communication\u003C\/h5\u003E\n\u003Cp\u003EThe malware reaches out to the C2 server at 185[.]162.131.92 via an HTTP request. Actual communication is via the Authorization field, as shown in Figure 5.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Communication via Authorization field\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUpon decoding the value of the Authorization field, it can be seen that the malware is sending the Victim ID and the computer name to the C2 server. The C2 server responds with the commands in the value of the Authorization HTTP header, as shown in Figure 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: C2 commands in Authorization field\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUpon decoding, the commands are found to be \u201cok ok\u201d, which we believe is the default C2 command. After some C2 communication, the C2 server responded with instructions to download the payload from hxxp:\/\/185.49.71[.]101\/i\/pwi_crs.exe, which is a Netwire RAT.\u003C\/p\u003E\n\u003Ch5\u003ECommands Supported by VBS Backdoor\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommand\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EExplanation\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDelete the VBS file and exit process\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPr\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload a file from a URL and execute it\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHw\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EGet hardware info\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eav\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELook for antivirus installed from a predefined list.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch5\u003EIndicators\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFile Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash\/IP Address\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EScan_Letter_of_Approval.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8e067e4cda99299b0bf2481cc1fd8e12\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EwinSrvHost.vbs\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3aabc9767d02c75ef44df6305bc6a41f\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELetter of Approval.pdf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edc63d5affde0db95128dac52f9d19578\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Epwi_crs.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E12def981952667740eb06ee91168e643\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E185[.]162.131.92\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENetwire C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E89[.]34.111.113\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch3\u003ECampaign 2: Attack on Israeli Military Industry\u003C\/h3\u003E\n\u003Ch5\u003EInfection Vector\u003C\/h5\u003E\n\u003Cp\u003EBased on the email uploaded to VirusTotal, the attacker seems to send a spoofed email to the victim with an ACE file named SysAid-Documentation.rar as an attachment. Based on the VirusTotal uploader and the email headers, we believe this is an attack on an Israeli military company.\u003C\/p\u003E\n\u003Ch5\u003EDecoy Files\u003C\/h5\u003E\n\u003Cp\u003EThe ACE file contains decoy files related to documentation for SysAid, a help desk service based in Israel. These files are shown as they would be displayed in WinRAR in Figure 7.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Decoy files\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EThumbs.db.lnk\u003C\/h5\u003E\n\u003Cp\u003EThis LNK file target is \u2018C:\\Users\\john\\Desktop\\100m.bat\u2019. But when we look at the icon location using a LNK parser, as shown in Figure 8, it points to an icon remotely hosted on one of the C2 servers, which can be used to steal NTLM hashes.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture7.5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: LNK parser output\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESappyCache Analysis\u003C\/h5\u003E\n\u003Cp\u003EUpon extraction, WinRAR copies a previously unknown payload we call SappyCache to the Startup folder with the file name \u2018ekrnview.exe\u2019. The payload is executed the next time Windows starts up.\u003C\/p\u003E\n\u003Cp\u003ESappyCache tries to fetch the next-stage payload using three approaches:\u003C\/p\u003E\n\u003Cp\u003E1) Decrypting a File: The malware tries to read the file at %temp%\\..\\GuiCache.db. If it is successful, it tries to decrypt it using RC4 to get the C2 URLs, as shown in Figure 9.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Decrypting file at GuiCache.db\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E2) Decrypting a Resource: If it is not successful in retrieving the C2 URL using the previous method, the malware tries to retrieve the encrypted C2 URLs from a resource section, as shown in Figure 10. If it is successful, it will decrypt the C2 URLs using RC4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Decrypting a resource\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E3) Retrieving From C2: If it is not successful in retrieving the C2 URLs using those previous two methods, the malware tries to retrieve the payload from four different hardcoded URLs mentioned in the indicators. The malware creates the HTTP request using the following information:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EComputer Name, retrieved using the GetComputerNameA function, as the HTTP parameter \u2018name\u2019 (Figure 11).\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Retrieving computer name using GetComputerNameA\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EWindows operating system name, retrieved by querying the ProductName value from the registry key SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion, as the HTTP parameter \u2018key\u2019 (Figure 12).\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Retrieving Windows OS name using ProductName value\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe module name of the malware, retrieved using the GetModuleFileNameA function, as the HTTP parameter \u2018page\u2019 (Figure 13).\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture12.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: Retrieving malware module name using using GetModuleFileNameA\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe list of processes and their module names, retrieved using the Process32First and Module32First APIs, as the HTTP parameter \u2018session_data\u2019 (Figure 14).\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture13.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Retrieving processes and modules using Process32First and Module32First\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EA fragment of the HTTP request that is built with the information gathered is shown in Figure 15.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture14.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: HTTP request fragment\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIf any of the aforementioned methods is successful, the malware tries to execute the decrypted payload. During our analysis, the C2 server did not respond with a next-level payload.\u003C\/p\u003E\n\u003Ch5\u003EIndicators\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFile Name\/Type\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash\/URL\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESysAid-Documentation.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E062801f6fdbda4dd67b77834c62e82a4\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESysAid-Documentation.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E49419d84076b13e96540fdd911f1c2f0\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eekrnview.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E96986B18A8470F4020EA78DF0B3DB7D4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThumbs.db.lnk\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E31718d7b9b3261688688bdc4e026db99\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EURL1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ewww.alahbabgroup[.]com\/bakala\/verify.php\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EURL2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E103.225.168[.]159\/admin\/verify.php\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EURL3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ewww.khuyay[.]org\/odin_backup\/public\/loggoff.php\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EURL4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E47.91.56[.]21\/verify.php\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEmail\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8c93e024fc194f520e4e72e761c0942d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch3\u003ECampaign 3: Potential Attack in Ukraine with Empire Backdoor\u003C\/h3\u003E\n\u003Ch5\u003EInfection Vector\u003C\/h5\u003E\n\u003Cp\u003EThe ACE file named zakon.rar is propagated using a malicious URL mentioned in the indicators. \u003Ca href=\u0022https:\/\/twitter.com\/360TIC\/status\/1101022904156741632\u0022\u003E360 Threat Intelligence Center has also encountered this campaign.\u003C\/a\u003E\u003C\/p\u003E\n\u003Ch5\u003EDecoy Documents\u003C\/h5\u003E\n\u003Cp\u003EThe ACE file contains a file named Ukraine.pdf, which contains a message on the law of Ukraine about public-private partnerships that purports to be a message from Viktor Yanukovych, former president of Ukraine (Figure 16 and Figure 17).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture15.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: Ukraine.pdf decoy file\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture16.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 17: Contents of decoy file\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBased on the decoy PDF name, the decoy PDF content and the VirusTotal uploader, we believe this is an attack on an individual in Ukraine.\u003C\/p\u003E\n\u003Ch5\u003EEmpire Backdoor\u003C\/h5\u003E\n\u003Cp\u003EWhen the file contents are extracted, WinRAR drops a .bat file named mssconf.bat in the Startup folder. The batch file contains commands that invoke base64-encoded PowerShell commands. After decoding, the PowerShell commands invoked are found to be the Empire backdoor, as shown in Figure 18. We did not observe any additional payloads at the time of analysis.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture17.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 18: Empire backdoor\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EIndicators\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022264\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFile Name\/URL\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022360\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash\/URL\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022264\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ezakon.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022360\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9b19753369b6ed1187159b95fc8a81cd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022264\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Emssconf.bat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022360\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E79B53B4555C1FB39BA3C7B8CE9A4287E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022264\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022360\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E31.148.220[.]53\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022264\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EURL\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022360\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehttp:\/\/tiny-share[.]com\/direct\/7dae2d144dae4447a152bef586520ef8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch3\u003ECampaign 4: Credential and Credit Card Dumps as Decoys\u003C\/h3\u003E\n\u003Ch5\u003EDecoy Documents\u003C\/h5\u003E\n\u003Cp\u003EThis campaign uses credential dumps and likely stolen credit card dumps as decoy documents to distribute different types of RATs and password stealers.\u003C\/p\u003E\n\u003Cp\u003EOne file, \u2018leaks copy.rar\u2019, used text files that contained stolen email IDs and passwords as decoys. These files are shown as they would be displayed in WinRAR in Figure 19.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture18.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 19: Text files containing stolen email credentials as decoy\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAnother file, \u2018cc.rar\u2019, used a text file containing stolen credit card details as a decoy. The file as it would be displayed in WinRAR and sample contents of the decoy file are shown in Figure 20.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture19.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 20: Text file containing stolen credit card details as decoy\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EPayloads\u003C\/h5\u003E\n\u003Cp\u003EThis campaign used payloads from different malware families. To keep the draft concise, we did not include the analysis of all of them. The decompilation of one of the payloads with hash 1BA398B0A14328B9604EEB5EBF139B40 shows keylogging capabilities (Figure 21). We later identified this sample as QuasarRAT.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture20.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 21: Keylogging capabilities\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe decompilation of all the .NET-based payload shows that much of the code is written in Chinese. The decompilation of malware with hash BCC49643833A4D8545ED4145FB6FDFD2 containing Chinese text is shown in Figure 22. We later identified this sample as Buzy.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/WinRAR\/Picture21.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 22: Code written in Chinese\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe other payloads also have similar keylogging, password stealing and standard RAT capabilities. The VirusTotal submissions show the use of different malware families in this campaign and a wide range of targeting.\u003C\/p\u003E\n\u003Ch5\u003EHashes of ACE Files\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFile Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eleaks copy.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee9815dfb90776ab449539a2be7c16de5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecc.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9b81b3174c9b699f594d725cf89ffaa4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ezabugor.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E914ac7ecf2557d5836f26a151c1b9b62\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EzabugorV.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eeca09fe8dcbc9d1c097277f2b3ef1081\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECombolist.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1f5fa51ac9517d70f136e187d45f69de\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENulled2019.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef36404fb24a640b40e2d43c72c18e66b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022252\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EIT.rar\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022371\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0f56b04a4e9a0df94c7f89c1bccf830c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch5\u003EHashes of Payloads\u003C\/h5\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile name\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022304\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EHash\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalware Family\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eexplorer.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022304\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1BA398B0A14328B9604EEB5EBF139B40\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EQuasarRAT\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eexplorer.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022304\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAAC00312A961E81C4AF4664C49B4A2B2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAzorult\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EIntelAudio.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022304\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2961C52F04B7FDF7CCF6C01AC259D767\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENetwire\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDiscord.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022304\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E97D74671D0489071BAA21F38F456EB74\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERazy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDiscord.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022304\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBCC49643833A4D8545ED4145FB6FDFD2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBuzy\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022162\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eold.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022304\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E119A0FD733BC1A013B0D4399112B8626\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022158\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EAzorult\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch5\u003EFireEye Detection\u003C\/h5\u003E\n\u003Cp\u003EFireEye detection names for the indicators in the attack:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022192\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye\u0026nbsp;Endpoint\u0026nbsp;Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EIOC:\u003C\/b\u003E WINRAR (EXPLOIT)\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EMG:\u003C\/b\u003E Generic.mg\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EAV:\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EExploit.ACE-PathTraversal.Gen\u003C\/li\u003E\n\u003Cli\u003EExploit.Agent.UZ\u003C\/li\u003E\n\u003Cli\u003EExploit.Agent.VA\u003C\/li\u003E\n\u003Cli\u003EGen:Heur.BZC.ONG.Boxter.91.1305E319\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Buzy.2604\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Razy.472302\u003C\/li\u003E\n\u003Cli\u003EGeneric.MSIL.PasswordStealerA.5CBD94BB\u003C\/li\u003E\n\u003Cli\u003ETrojan.Agent.DPAS\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.31783690\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.31804183\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022192\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Network\u0026nbsp;Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022top\u0022\u003E\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EFE_Exploit_ACE_CVE201820250_2\u003C\/li\u003E\n\u003Cli\u003EFE_Exploit_ACE_CVE201820250_1\u003C\/li\u003E\n\u003Cli\u003EBackdoor.EMPIRE\u003C\/li\u003E\n\u003Cli\u003EDownloader.EMPIRE\u003C\/li\u003E\n\u003Cli\u003ETrojan.Win.Azorult\u003C\/li\u003E\n\u003Cli\u003ETrojan.Netwire\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022192\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Email\u0026nbsp;Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022432\u0022 valign=\u0022top\u0022\u003E\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EFE_Exploit_ACE_CVE201820250_2\u003C\/li\u003E\n\u003Cli\u003EFE_Exploit_ACE_CVE201820250_1\u003C\/li\u003E\n\u003Cli\u003EFE_Backdoor_QUASARRAT_A\u003C\/li\u003E\n\u003Cli\u003EFE_Backdoor_EMPIRE\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch3\u003EConclusion\u003C\/h3\u003E\n\u003Cp\u003EWe have seen how various threat actors are abusing the recently disclosed WinRAR vulnerability using customized decoys and payloads, and by using different propagation techniques such as email and URL. Because of the huge WinRAR customer-base, lack of auto-update feature and the ease of exploitation of this vulnerability, we believe this will be used by more threat actors in the upcoming days.\u003C\/p\u003E\n\u003Cp\u003ETraditional AV solutions will have a hard time providing proactive zero-day detection for unknown malware families. FireEye\u0026nbsp;\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/blog\/products-and-services\/2018\/07\/malwareguard-fireeye-machine-learning-model-to-detect-and-prevent-malware.html\u0022\u003EMalwareGuard\u003C\/a\u003E, a component of FireEye\u0026nbsp;Endpoint\u0026nbsp;Security, detects and blocks all the PE executables mentioned in this blog post using machine learning. It\u2019s also worth noting that this vulnerability allows the malicious ACE file to write a payload to any path if WinRAR has sufficient permissions, so although the exploits that we have seen so far chose to write the payload to startup folder, a more involved threat actor can come up with a different file path to achieve code execution so that any behavior based rules looking for WinRAR writing to the startup folder can be bypassed. Enterprises should consider blocking vulnerable WinRAR versions and mandate updating WinRAR to the latest version.\u003C\/p\u003E\n\u003Cp\u003EFireEye Endpoint Security, FireEye Network Security and FireEye Email\u0026nbsp;Security detect and block these campaigns at several stages of the attack chain.\u003C\/p\u003E\n\u003Ch3\u003EAcknowledgement\u003C\/h3\u003E\n\u003Cp\u003ESpecial thanks to Jacob Thompson, Jonathan Leathery and John Miller for their valuable feedback on this blog post.\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Mar 26 2019 12:10:48 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye has\u0026nbsp;observed multiple campaigns leveraging a WinRAR vulnerability.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Mar 25 2019 23:25:47 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Mar 26 2019 11:21:52 GMT-0400",
      "imageRotate": "0"
    }
  }
}
