{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed Mar 20 2019 11:46:19 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "SilkETW: Because Free Telemetry is \u0026#8230; Free!",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "e1d1c36c-85e5-48d9-8ea5-8e2acb608d11",
    "author": "Ruben Boonen",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "f2c423a8-275e-46d8-8afe-6ddd8c7a3ccb"
    ],
    "jcr:created": "Mon Mar 25 2019 10:13:13 GMT-0400",
    "cq:lastReplicated": "Mon Mar 25 2019 10:13:08 GMT-0400",
    "cq:lastModified": "Mon Mar 25 2019 10:13:00 GMT-0400",
    "jcr:baseVersion": "f2c423a8-275e-46d8-8afe-6ddd8c7a3ccb",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:ruben-boonen",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:etw",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:tools"
    ],
    "jcr:uuid": "f476a1c3-56ae-4b9e-b617-ca3f1da4c032",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Mar 20 2019 08:45:00 GMT-0700",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "text": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "adam.greenberg@fireeye.com",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "jcr:created": "Tue Mar 19 2019 15:11:32 GMT-0400",
        "text": "\u003Cp\u003EOver time people have had an on-again, off-again interest in\u0026nbsp;\u003Ca href=\u0022https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/etw\/about-event-tracing\u0022\u003EEvent Tracing for Windows\u003C\/a\u003E\u0026nbsp;(ETW). ETW, first introduced in Windows 2000, is a lightweight Kernel level tracing facility that was originally intended for debugging, diagnostics and performance. Gradually, however, defenders realized that ETW provided metrics and data content that was not otherwise available without custom development efforts. Even so, aside from a number of big players in the industry, people have been slow to adopt ETW as a data source for detection and research. The two primary problems with ETW are: the complexities involved in event collection, and the volume of data that is generated. The task of looking through a haystack to find the proverbial needle is not necessarily appealing from an engineering perspective (How do you store the data? How do you process the data? Is the data really valuable? What were we looking for again?).\u003C\/p\u003E\n\u003Cp\u003EOur latest tool, \u003Ca href=\u0022https:\/\/github.com\/fireeye\/SilkETW\u0022\u003ESilkETW\u003C\/a\u003E, aims to put actionable ETW data in the hands of researchers, both on the defensive and offensive side of the industry. It attempts to mitigate the aforementioned issues by providing a straightforward interface for data collection, various filtering mechanics, and an output format that can be easily processed. This project was originally implemented by the FireEye Advanced Practices (AP) team to aid in the rapid analysis of novel attacker tradecraft, and to feed that analysis back into the detection engineering process.\u003C\/p\u003E\n\u003Cp\u003EAs mentioned, SilkETW is not solely a defensive tool. ETW data can be used for diagnostics, it can help in reverse engineering, vulnerability research, detection and evasion. A number of ETW use cases are outlined in the following section.\u003C\/p\u003E\n\u003Ch4\u003EBackground Reading\u003C\/h4\u003E\n\u003Cp\u003EThere are many public posts and projects that can be highlighted for background reading on ETW. I have chosen a few that provide different perspectives on the data and how it can be used.\u003C\/p\u003E\n\u003Cp\u003EAs a starting point, Bing\u0027s Production Profiler system (\u003Ca href=\u0022https:\/\/github.com\/Microsoft\/BPerf\u0022\u003EBPerf\u003C\/a\u003E) is a good case study. People sometimes wonder if you can implement instrumentation for performance and diagnostics in highly sensitive production services. Microsoft\u2019s use of ETW on Bing\u2019s front end provides an answer to this question. For more details please consult the\u0026nbsp;\u003Ca href=\u0022https:\/\/www.usenix.org\/conference\/srecon17americas\/program\/presentation\/sabharwal\u0022\u003EMicrosoft\u2019s USENIX presentation on BPerf\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EAs we already mentioned, ETW can be used to collect telemetry that augments defensive capabilities. To highlight this, please refer to Countercept\u2019s post on\u0026nbsp;\u003Ca href=\u0022https:\/\/www.countercept.com\/blog\/detecting-malicious-use-of-net-part-2\/\u0022\u003EDetecting Malicious Use of .NET \u2013 Part 2\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003ENot all ETW research is related to performance optics or defense research. ETW also has offensive capabilities, and one such example is in CyberPoint\u2019s post on\u0026nbsp;\u003Ca href=\u0022https:\/\/www.cyberpointllc.com\/srt\/posts\/srt-logging-keystrokes-with-event-tracing-for-windows-etw.html\u0022\u003ELogging Keystrokes with ETW\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EETW offers a rich environment for performing novel research, allowing users to dig through the internals of the Windows operating system. This is illustrated in a post by Matt Graeber of SpecterOps:\u0026nbsp;\u003Ca href=\u0022https:\/\/posts.specterops.io\/data-source-analysis-and-dynamic-windows-re-using-wpp-and-tracelogging-e465f8b653f7\u0022\u003EData Source Analysis and Dynamic Windows RE using WPP and TraceLogging\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EFinally, from a defense perspective, it should be understood that the .NET threat landscape is continuously evolving. It would be prudent to understand the mechanics of ETW and to evaluate if it can be leveraged to keep up with attacker tradecraft. To illustrate this I want to highlight a most excellent post by Adam Chester on\u0026nbsp;\u003Ca href=\u0022https:\/\/blog.xpnsec.com\/building-modifying-packing-devops\/\u0022\u003EBuilding, Modifying, and Packing with Azure DevOps\u003C\/a\u003E. This type of tradecraft should give defenders real pause.\u003C\/p\u003E\n\u003Ch4\u003ESilkETW\u003C\/h4\u003E\n\u003Cp\u003ESilkETW provides a simple interface to record trace data. The command line options are shown in Figure 1.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/SilkETW\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: SilkETW command line options\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENote that the output format for SilkETW is JSON. JSON is ubiquitous and can easily be analyzed locally using PowerShell, but it also integrates well with third-party infrastructure such as Elasticsearch. All events conform to the same C# structure before being serialized to JSON.\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Mar 25 2019 10:13:00 GMT-0400",
        "sling:resourceType": "fireeye-www\/fdc\/components\/text\/text",
        "textIsRich": "true"
      },
      "htmlpassthru": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "adam.greenberg@fireeye.com",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "jcr:created": "Tue Mar 19 2019 15:16:35 GMT-0400",
        "html": "\u003Cp\u003E\n\u003Cdiv style=\u0022background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .1em;padding:.2em .6em;\u0022\u003E\u003Cpre style=\u0022margin: 0; line-height: 125%\u0022\u003E\u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Estruct\u003C\/span\u003E \u003Cspan style=\u0022color: #BB0066; font-weight: bold\u0022\u003EEventRecordStruct\u003C\/span\u003E\n{\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E Guid ProviderGuid;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E List\u0026lt;String\u0026gt; YaraMatch;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Estring\u003C\/span\u003E ProviderName;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Estring\u003C\/span\u003E EventName;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E TraceEventOpcode Opcode;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Estring\u003C\/span\u003E OpcodeName;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E DateTime TimeStamp;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Eint\u003C\/span\u003E ThreadID;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Eint\u003C\/span\u003E ProcessID;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Estring\u003C\/span\u003E ProcessName;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Eint\u003C\/span\u003E PointerSize;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E \u003Cspan style=\u0022color: #333399; font-weight: bold\u0022\u003Eint\u003C\/span\u003E EventDataLength;\n    \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Epublic\u003C\/span\u003E Hashtable XmlEventData;\n}\n\u003C\/pre\u003E\u003C\/div\u003E\n\u003C\/p\u003E",
        "jcr:lastModified": "Tue Mar 19 2019 15:19:42 GMT-0400",
        "sling:resourceType": "fireeye-www\/fdc\/components\/html\/htmlpassthru"
      },
      "text_1195057239": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "adam.greenberg@fireeye.com",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "jcr:created": "Tue Mar 19 2019 15:17:33 GMT-0400",
        "text": "\u003Cp\u003EThe event type that is being recorded will dictate the content of the \u201cXmlEventData\u201d hash table. One such example of a thread-related event can be seen here:\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Mar 19 2019 15:53:26 GMT-0400",
        "sling:resourceType": "fireeye-www\/fdc\/components\/text\/text",
        "textIsRich": "true"
      },
      "htmlpassthru_1866199219": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "adam.greenberg@fireeye.com",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "jcr:created": "Tue Mar 19 2019 15:20:30 GMT-0400",
        "html": "\u003Cp\u003E\n\u003Cdiv style=\u0022background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .1em;padding:.2em .6em;\u0022\u003E\u003Cpre style=\u0022margin: 0; line-height: 125%\u0022\u003E{\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ProviderGuid\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716\u0026quot;\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;YaraMatch\u0026quot;\u003C\/span\u003E:[\n\n   ],\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ProviderName\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;Microsoft-Windows-Kernel-Process\u0026quot;\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;EventName\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;ThreadStop\/Stop\u0026quot;\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;Opcode\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022color: #0000DD; font-weight: bold\u0022\u003E2\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;OpcodeName\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;Stop\u0026quot;\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;TimeStamp\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;2019-03-03T17:58:14.2862348+00:00\u0026quot;\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ThreadID\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022color: #0000DD; font-weight: bold\u0022\u003E11996\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ProcessID\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022color: #0000DD; font-weight: bold\u0022\u003E8416\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ProcessName\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;\u0026quot;\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;PointerSize\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022color: #0000DD; font-weight: bold\u0022\u003E8\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;EventDataLength\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022color: #0000DD; font-weight: bold\u0022\u003E76\u003C\/span\u003E,\n   \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;XmlEventData\u0026quot;\u003C\/span\u003E:{\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;FormattedMessage\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;Thread 11,996 (in Process 8,416) stopped.\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;StartAddr\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0x7fffe299a110\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ThreadID\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;11,996\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;UserStackLimit\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0x3d632000\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;StackLimit\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0xfffff38632d39000\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;MSec\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;560.5709\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;TebBase\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0x91c000\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;CycleTime\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;4,266,270\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ProcessID\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;8,416\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;PID\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;8416\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;StackBase\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0xfffff38632d40000\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;SubProcessTag\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;TID\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;11996\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;ProviderName\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;Microsoft-Windows-Kernel-Process\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;PName\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;UserStackBase\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0x3d640000\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;EventName\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;ThreadStop\/Stop\u0026quot;\u003C\/span\u003E,\n      \u003Cspan style=\u0022color: #007700\u0022\u003E\u0026quot;Win32StartAddr\u0026quot;\u003C\/span\u003E:\u003Cspan style=\u0022background-color: #fff0f0\u0022\u003E\u0026quot;0x7fffe299a110\u0026quot;\u003C\/span\u003E\n   }\n}\n\u003C\/pre\u003E\u003C\/div\u003E\n\u003C\/p\u003E",
        "jcr:lastModified": "Tue Mar 19 2019 15:22:10 GMT-0400",
        "sling:resourceType": "fireeye-www\/fdc\/components\/html\/htmlpassthru"
      },
      "text_343265972": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "adam.greenberg@fireeye.com",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "jcr:created": "Tue Mar 19 2019 15:23:58 GMT-0400",
        "text": "\u003Ch4\u003EPowerShell Event Filtering\u003C\/h4\u003E\n\u003Cp\u003EThe SilkETW JSON data can be imported in PowerShell using the following simple function:\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Mar 19 2019 15:53:40 GMT-0400",
        "sling:resourceType": "fireeye-www\/fdc\/components\/text\/text",
        "textIsRich": "true"
      },
      "htmlpassthru_456592082": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "adam.greenberg@fireeye.com",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "jcr:created": "Tue Mar 19 2019 15:25:34 GMT-0400",
        "html": "\u003Cp\u003E\n\u003Cdiv style=\u0022background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .1em;padding:.2em .6em;\u0022\u003E\u003Cpre style=\u0022margin: 0; line-height: 125%\u0022\u003E\u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Efunction\u003C\/span\u003E \u003Cspan style=\u0022color: #007020\u0022\u003EGet-SilkData\u003C\/span\u003E {\n\t\u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003Eparam\u003C\/span\u003E(\u003Cspan style=\u0022color: #996633\u0022\u003E$Path\u003C\/span\u003E)\n\t\u003Cspan style=\u0022color: #996633\u0022\u003E$JSONObject\u003C\/span\u003E = \u003Cspan style=\u0022color: #FF0000; background-color: #FFAAAA\u0022\u003E@\u003C\/span\u003E()\n\t\u003Cspan style=\u0022color: #007020\u0022\u003EGet-Content\u003C\/span\u003E \u003Cspan style=\u0022color: #996633\u0022\u003E$Path\u003C\/span\u003E | \u003Cspan style=\u0022color: #008800; font-weight: bold\u0022\u003EForEach\u003C\/span\u003E-Object {\n\t\t\u003Cspan style=\u0022color: #996633\u0022\u003E$JSONObject\u003C\/span\u003E += \u003Cspan style=\u0022color: #996633\u0022\u003E$_\u003C\/span\u003E | \u003Cspan style=\u0022color: #007020\u0022\u003EConvertFrom-Json\u003C\/span\u003E\n\t}\n\t\u003Cspan style=\u0022color: #996633\u0022\u003E$JSONObject\u003C\/span\u003E\n}\n\u003C\/pre\u003E\u003C\/div\u003E\n\u003C\/p\u003E",
        "jcr:lastModified": "Tue Mar 19 2019 15:25:49 GMT-0400",
        "sling:resourceType": "fireeye-www\/fdc\/components\/html\/htmlpassthru"
      },
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EIn the following example, we will collect process event data from the Kernel provider and use image loads to identify Mimikatz execution. We can collect the required data with this command:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022601\u0022 valign=\u0022top\u0022\u003E\u003Ccode\u003ESilkETW.exe -t kernel -kk ImageLoad -ot file -p\u003Cbr\u003E\n C:\\Users\\b33f\\Desktop\\mimikatz.json\u003C\/code\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EWith data in hand it is easy to sort, grep and filter for the properties we are interested in (Figure 2).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/SilkETW\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2:\u0026nbsp;PowerShell event filtering\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EYara Integration\u003C\/h4\u003E\n\u003Cp\u003ESilkETW has a number of command line flags that allow the user to restrict the events that are captured. These include the event name, the process ID, the process name, and the opcode. To further enhance this capability, Yara support is included to filter or tag trace events. While Yara has immediate defensive connotations, the reader is reminded that Yara rules are equally useful to augment research capabilities.\u003C\/p\u003E\n\u003Cp\u003EIn the following contrived example we will use a Yara rule to detect \u003Ca href=\u0022https:\/\/github.com\/GhostPack\/Seatbelt\u0022\u003ESeatbelt\u003C\/a\u003E execution in memory through Cobalt Strike\u0027s \u003Ca href=\u0022https:\/\/blog.cobaltstrike.com\/2018\/04\/09\/cobalt-strike-3-11-the-snake-that-eats-its-tail\/\u0022\u003Eexecute-assembly\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022601\u0022 valign=\u0022top\u0022\u003E\u003Ccode\u003Erule Seatbelt_GetTokenInformation\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $s1 = \u0026quot;ManagedInteropMethodName=GetTokenInformation\u0026quot; ascii wide nocase\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $s2 = \u0026quot;TOKEN_INFORMATION_CLASS\u0026quot; ascii wide nocase\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $s3 = \/bool\\(native int,valuetype \\w+\\.\\w+\\\/\\w+,native int,int32,int32\u0026amp;\/\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; $s4 = \u0026quot;locals (int32,int64,int64,int64,int64,int32\u0026amp; pinned,bool,int32)\u0026quot; ascii wide nocase\u003Cbr\u003E\n \u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; all of ($s*)\u003C\/code\u003E\u003Ccode\u003E}\u003C\/code\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EWe can start collecting .NET ETW data with the following command (note here the \u0026quot;-yo\u0026quot; option indicating that we will only write the Yara matches to file!):\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022601\u0022 valign=\u0022top\u0022\u003E\u003Ccode\u003ESilkETW.exe -t user -pn Microsoft-Windows-DotNETRuntime -uk 0x2038 -l verbose -y\u003Cbr\u003E\n C:\\Users\\b33f\\Desktop\\yara -yo matches -ot file -p C:\\Users\\b33f\\Desktop\\yara.json\u003C\/code\u003E\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EWe can see at runtime that our Yara rule was hit (Figure 3).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/SilkETW\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Yara rule hit\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENote also that we are only capturing a subset of the \u0026quot;Microsoft-Windows-DotNETRuntime\u0026quot; events (0x2038), specifically: JitKeyword, InteropKeyword, LoaderKeyword and NGenKeyword.\u003C\/p\u003E\n\u003Ch4\u003ERoadmap\u003C\/h4\u003E\n\u003Cp\u003EAs outlined in the introduction, SilkETW is currently a research focused data-collection tool with robust yet rudimentary capabilities. Upcoming changes for SilkETW include, but are not limited to:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EOffer users the option to write trace data to disk as *.etl files.\u003C\/li\u003E\n\u003Cli\u003ECreate a separate instance of SilkETW that operates in a headless mode as a service and reads a configuration file.\u003C\/li\u003E\n\u003Cli\u003ETake input from the community on any features that would be beneficial to ETW research.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EGitHub\u003C\/h4\u003E\n\u003Cp\u003ESilkETW is currently available for \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/fireeye\/SilkETW\u0022\u003Edownload on GitHub\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgement\u003C\/h4\u003E\n\u003Cp\u003ESpecial thanks to the whole Advanced Practices team\u0026nbsp;\u2013 and Nick Carr in particular\u0026nbsp;\u2013 for their indulgence of my antics! Thanks also to Stephen Davis, Anthony Berglund and Kevin Boyd of the FireEye Labs and Data Science teams for their help on reviewing this project and their prior work on \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/09\/pywintrace-python-wrapper-for-etw.html\u0022\u003Epywintrace\u003C\/a\u003E. If you are looking for Python ETW bindings you can use programmatically, definitely check out that project.\u003C\/p\u003E\n",
        "jcr:lastModified": "Wed Mar 20 2019 10:34:13 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EOur latest tool, SilkETW, aims to put actionable ETW data in the hands of researches.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Mar 19 2019 15:51:40 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "jeff.payne@fireeye.com",
      "jcr:lastModified": "Wed Mar 20 2019 12:43:20 GMT-0400",
      "imageRotate": "0"
    }
  }
}
