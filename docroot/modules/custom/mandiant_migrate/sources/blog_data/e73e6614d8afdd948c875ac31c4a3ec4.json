{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Thu Aug 22 2019 03:35:03 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "GAME OVER: Detecting and Stopping an APT41 Operation",
    "jcr:versionHistory": "05a70ee0-dd72-4e14-8709-caa2ec73d3ef",
    "author": "Alex Pennino",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "ce7265fb-3392-4722-b53b-30c90d206581"
    ],
    "jcr:created": "Thu Aug 22 2019 05:16:02 GMT+0000",
    "cq:lastModified": "Mon Aug 19 2019 14:12:21 GMT-0400",
    "jcr:baseVersion": "ce7265fb-3392-4722-b53b-30c90d206581",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:alex-pennino",
      "fireeye-blog-authors:matt-bromiley",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:apt",
      "fireeye-blog-tags:managed-defense"
    ],
    "jcr:uuid": "afaa9e6f-57ae-4b1f-8b9f-a6cf1b48e62b",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon Aug 19 2019 13:30:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EIn August 2019, FireEye \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2019\/08\/apt41-dual-espionage-and-cyber-crime-operation.html\u0022 adhocenable=\u0022false\u0022\u003Ereleased the \u201cDouble Dragon\u201d report\u003C\/a\u003E on our newest graduated threat group, APT41. A China-nexus dual espionage and financially-focused group, APT41 targets industries such as gaming, healthcare, high-tech, higher education, telecommunications, and travel services. APT41 is known to adapt quickly to changes and detections within victim environments, often recompiling malware within hours of incident responder activity. In multiple situations, we also identified APT41 utilizing recently-disclosed vulnerabilities, often weaponzing and exploiting within a matter of days.\u003C\/p\u003E\n\u003Cp\u003EOur knowledge of this group\u2019s targets and activities are rooted in our Incident Response and Managed Defense services, where we encounter actors like APT41 on a regular basis. At each encounter, FireEye works to reverse malware, collect intelligence and hone our detection capabilities. This ultimately feeds back into our Managed Defense and Incident Response teams detecting and stopping threat actors earlier in their campaigns.\u003C\/p\u003E\n\u003Cp\u003EIn this blog post, we\u2019re going to examine a recent instance where \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/solutions\/managed-defense.html\u0022\u003EFireEye Managed Defense\u003C\/a\u003E came toe-to-toe with APT41. Our goal is to display not only how dynamic this group can be, but also how the various teams within FireEye worked to thwart attacks within hours of detection\u0026nbsp;\u2013 protecting our clients\u2019 networks and limiting the threat actor\u2019s ability to gain a foothold and\/or prevent data exposure.\u003C\/p\u003E\n\u003Ch4\u003EGET TO DA CHOPPA!\u003C\/h4\u003E\n\u003Cp\u003EIn April 2019, FireEye\u2019s Managed Defense team identified suspicious activity on a publicly-accessible web server at a U.S.-based research university. This activity, a snippet of which is provided in Figure 1, indicated that the attackers were exploiting \u003Ca href=\u0022https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2019-3396\u0022\u003ECVE-2019-3396\u003C\/a\u003E, a vulnerability in Atlassian Confluence Server that allowed for path traversal and remote code execution.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/gameover\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Snippet of PCAP showing attacker attempting CVE-2019-3396 vulnerability\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis vulnerability relies on the following actions by the attacker:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003ECustomizing the \u003Cspan class=\u0022code\u0022\u003E_template\u003C\/span\u003E field to utilize a template that allowed for command execution.\u003C\/li\u003E\n\u003Cli\u003EInserting a \u003Cspan class=\u0022code\u0022\u003Ecmd\u003C\/span\u003E field that provided the command to be executed.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThrough custom JSON POST requests, the attackers were able to run commands and force the vulnerable system to download an additional file. Figure 2 provides a list of the JSON data sent by the attacker.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/gameover\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Snippet of HTTP POST requests exploiting CVE-2019-3396\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAs shown in Figure 2, the attacker utilized a template located at \u003Cspan class=\u0022code\u0022\u003Ehxxps[:]\/\/github[.]com\/Yt1g3r\/CVE-2019-3396_EXP\/blob\/master\/cmd.vm\u003C\/span\u003E. This publicly-available template provided a vehicle for the attacker to issue arbitrary commands against the vulnerable system. Figure 3 provides the code of the file \u003Cspan class=\u0022code\u0022\u003Ecmd.vm\u003C\/span\u003E.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/gameover\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Code of cmd.vm, used by the attackers to execute code on a vulnerable Confluence system\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe HTTP POST requests in Figure 2, which originated from the IP address \u003Cspan class=\u0022code\u0022\u003E67.229.97[.]229\u003C\/span\u003E, performed system reconnaissance and utilized Windows certutil.exe to download a file located at \u003Cspan class=\u0022code\u0022\u003Ehxxp[:]\/\/67.229.97[.]229\/pass_sqzr.jsp\u003C\/span\u003E and save it as \u003Cspan class=\u0022code\u0022\u003Etest.jsp\u003C\/span\u003E (\u003Cspan class=\u0022code\u0022\u003EMD5: 84d6e4ba1f4268e50810dacc7bbc3935\u003C\/span\u003E). The file \u003Cspan class=\u0022code\u0022\u003Etest.jsp\u003C\/span\u003E was ultimately identified to be a variant of a \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2013\/08\/breaking-down-the-china-chopper-web-shell-part-i.html\u0022\u003E\u003Cb\u003EChina Chopper\u003C\/b\u003E webshell\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EA Passive Aggressive Operation\u003C\/h4\u003E\n\u003Cp\u003EShortly after placing \u003Cspan class=\u0022code\u0022\u003Etest.jsp\u003C\/span\u003E on the vulnerable system, the attackers downloaded two additional files onto the system:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003E64.dat\u003C\/span\u003E (\u003Cspan class=\u0022code\u0022\u003EMD5: 51e06382a88eb09639e1bc3565b444a6\u003C\/span\u003E)\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EIns64.exe\u003C\/span\u003E (\u003Cspan class=\u0022code\u0022\u003EMD5: e42555b218248d1a2ba92c1532ef6786\u003C\/span\u003E)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EBoth files were hosted at the same IP address utilized by the attacker, \u003Cspan class=\u0022code\u0022\u003E67[.]229[.]97[.]229\u003C\/span\u003E. The file \u003Cspan class=\u0022code\u0022\u003EIns64.exe\u003C\/span\u003E was used to deploy the HIGHNOON backdoor on the system. HIGHNOON is a backdoor that consists of multiple components, including a loader, dynamic-link library (DLL), and a rootkit. When loaded, the DLL may deploy one of two embedded drivers to conceal network traffic and communicate with its command and control server to download and launch memory-resident DLL plugins. This particular variant of HIGHNOON is tracked as HIGHNOON.PASSIVE by FireEye. (An exploration of passive backdoors and more analysis of the HIGHNOON malware family can be found in our full \u003Ca href=\u0022https:\/\/content.fireeye.com\/apt-41\/rpt-apt41\u0022\u003EAPT41 report\u003C\/a\u003E).\u003C\/p\u003E\n\u003Cp\u003EWithin the next 35 minutes, the attackers utilized both the \u003Cspan class=\u0022code\u0022\u003Etest.jsp\u003C\/span\u003E web shell and the HIGHNOON backdoor to issue commands to the system. As China Chopper relies on HTTP requests, attacker traffic to and from this web shell was easily observed via network monitoring. The attacker utilized China Chopper to perform the following:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EMovement of \u003Cspan class=\u0022code\u0022\u003E64.dat\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003EIns64.exe\u003C\/span\u003E to \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files\\Atlassian\\Confluence\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003EPerforming a directory listing of \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files\\Atlassian\\Confluence\u003C\/span\u003E\u003C\/li\u003E\n\u003Cli\u003EPerforming a directory listing of \u003Cspan class=\u0022code\u0022\u003EC:\\Users\u003C\/span\u003E\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EAdditionally, FireEye\u2019s FLARE team reverse engineered the custom protocol utilized by the HIGHNOON backdoor, allowing us to decode the attacker\u2019s traffic. Figure 4 provides a list of the various commands issued by the attacker utilizing HIGHNOON.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/gameover\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Decoded HIGHNOON commands issued by the attacker\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPlaying Their ACEHASH Card\u003C\/h4\u003E\n\u003Cp\u003EAs shown in Figure 4, the attacker utilized the HIGHNOON backdoor to execute a PowerShell command that downloaded a script from \u003Ca href=\u0022https:\/\/github.com\/PowerShellMafia\/PowerSploit\u0022\u003EPowerSploit\u003C\/a\u003E, a well-known PowerShell Post-Exploitation Framework. At the time of this blog post, the script was no longer available for downloading. The commands provided to the script \u2013 \u201c\u003Cspan class=\u0022code\u0022\u003Eprivilege::debug sekurlsa::logonpasswords exit exit\u003C\/span\u003E\u201d \u2013 indicate that the unrecovered script was likely a copy of \u003Ca href=\u0022https:\/\/raw.githubusercontent.com\/mattifestation\/PowerSploit\/master\/Exfiltration\/Invoke-Mimikatz.ps1\u0022\u003EInvoke-Mimikatz\u003C\/a\u003E, reflectively loading Mimikatz 2.0 in-memory. Per the observed HIGHNOON output, this command failed.\u003C\/p\u003E\n\u003Cp\u003EAfter performing some additional reconnaissance, the attacker utilized HIGHNOON to download two additional files into the \u003Cspan class=\u0022code\u0022\u003EC:\\Program Files\\Atlassian\\Confluence\u003C\/span\u003E directory:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003Ec64.exe\u003C\/span\u003E (\u003Cspan class=\u0022code\u0022\u003EMD5: 846cdb921841ac671c86350d494abf9c\u003C\/span\u003E)\u003C\/li\u003E\n\u003Cli\u003E\u003Cspan class=\u0022code\u0022\u003EF64.data\u003C\/span\u003E (\u003Cspan class=\u0022code\u0022\u003EMD5: a919b4454679ef60b39c82bd686ed141\u003C\/span\u003E)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThese two files are the dropper and encrypted\/compressed payload components, respectively, of a malware family known as ACEHASH. ACEHASH is a credential theft and password dumping utility that combines the functionality of multiple tools such as Mimikatz, hashdump, and Windows Credential Editor (WCE).\u003C\/p\u003E\n\u003Cp\u003EUpon placing \u003Cspan class=\u0022code\u0022\u003Ec64.exe\u003C\/span\u003E and \u003Cspan class=\u0022code\u0022\u003EF64.data\u003C\/span\u003E on the system, the attacker ran the command\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ec64.exe f64.data \u0026quot;9839D7F1A0 -m\u201d\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis specific command provided a password of \u003Cspan class=\u0022code\u0022\u003E\u201c9839D7F1A0\u201d\u003C\/span\u003E to decrypt the contents of \u003Cspan class=\u0022code\u0022\u003EF64.data\u003C\/span\u003E, and a switch of \u003Cspan class=\u0022code\u0022\u003E\u201c-m\u201d\u003C\/span\u003E, indicating the attacker wanted to replicate the functionality of Mimikatz. With the correct password provided, \u003Cspan class=\u0022code\u0022\u003Ec64.exe\u003C\/span\u003E loaded the decrypted and decompressed shellcode into memory and harvested credentials.\u003C\/p\u003E\n\u003Cp\u003EUltimately, the attacker was able to exploit a vulnerability, execute code, and download custom malware on the vulnerable Confluence system. While Mimikatz failed, via ACEHASH they were able to harvest a single credential from the system. However, as Managed Defense detected this activity rapidly via network signatures, this operation was neutralized before the attackers progressed any further.\u003C\/p\u003E\n\u003Ch4\u003EKey Takeaways From This Incident\u003C\/h4\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EAPT41 utilized multiple malware families to maintain access into this environment; impactful remediation requires full scoping of an incident.\u003Cb\u003E\u003Cu\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003EFor effective Managed Detection \u0026amp; Response services, having coverage of both Endpoint and Network is critical for detecting and responding to targeted attacks.\u003Cb\u003E\u003Cu\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003EAttackers may weaponize vulnerabilities quickly after their release, especially if they are present within a targeted environment. Patching of critical vulnerabilities ASAP is crucial to deter active attackers.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EDetecting the Techniques\u003C\/h4\u003E\n\u003Cp\u003EFireEye detects this activity across our platform, including detection for certutil usage, HIGHNOON, and China Chopper.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDetection\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESignature Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EChina Chopper\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_Webshell_JSP_CHOPPER_1\u003Cb\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_Webshell_Java_CHOPPER_1\u003Cb\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_Webshell_MSIL_CHOPPER_1\u003Cb\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHIGHNOON.PASSIVE\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Backdoor_Raw64_HIGHNOON_2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_APT_Backdoor_Win64_HIGHNOON_2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECertutil Downloader\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECERTUTIL.EXE DOWNLOADER (UTILITY)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECERTUTIL.EXE DOWNLOADER A (UTILITY)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002239%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EACEHASH\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002260%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFE_Trojan_AceHash\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EIndicators\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EType\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EIndicator\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5 Hash (if applicable)\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etest.jsp\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E84d6e4ba1f4268e50810dacc7bbc3935\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E64.dat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E51e06382a88eb09639e1bc3565b444a6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EIns64.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee42555b218248d1a2ba92c1532ef6786\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec64.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E846cdb921841ac671c86350d494abf9c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFile\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EF64.data\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ea919b4454679ef60b39c82bd686ed141\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002215%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EIP Address\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002228%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E67.229.97[.]229\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002255%\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003ELooking for more? \u003Ca href=\u0022https:\/\/www.brighttalk.com\/webcast\/7451\/366611\/double-dragon-apt41-a-dual-espionage-and-cyber-crime-operation\u0022\u003EJoin us for a webcast\u003C\/a\u003E on August 29, 2019 where we detail more of APT41\u2019s activities. You can also find a direct link to the public APT41 report \u003Ca href=\u0022https:\/\/content.fireeye.com\/apt-41\/rpt-apt41\/\u0022\u003Ehere\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003ESpecial thanks to Dan Perez, Andrew Thompson, Tyler Dean, Raymond Leong, and Willi Ballenthin for identification and reversing of the HIGHNOON.PASSIVE malware.\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Aug 19 2019 14:12:21 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe examine a recent instance where FireEye Managed Defense\u0026nbsp;came toe-to-toe with APT41.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Aug 19 2019 13:29:07 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Mon Aug 19 2019 13:31:46 GMT-0400",
      "imageRotate": "0"
    }
  }
}
