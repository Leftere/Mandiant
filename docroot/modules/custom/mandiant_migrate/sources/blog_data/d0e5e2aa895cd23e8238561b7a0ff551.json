{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Apr 29 2021 22:00:01 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "UNC2447 SOMBRAT and FIVEHANDS Ransomware: A Sophisticated Financial Threat",
    "jcr:versionHistory": "b09ed742-6204-4b69-bf62-b7757b07f57e",
    "author": "Tyler McLellan",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "508f7959-9f2d-49ea-b1e6-983cd48afa64"
    ],
    "jcr:created": "Thu Apr 29 2021 22:00:01 GMT+0000",
    "cq:lastModified": "Thu Apr 29 2021 21:50:12 GMT+0000",
    "jcr:baseVersion": "508f7959-9f2d-49ea-b1e6-983cd48afa64",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:tyler-mclellan",
      "fireeye-blog-authors:justin-moore",
      "fireeye-blog-authors:raymond-leong",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:ransomware",
      "fireeye-blog-tags:unc",
      "fireeye-blog-tags:zero-day-vulnerability"
    ],
    "jcr:uuid": "2e87c8fc-e546-4800-85ac-4ba0d253f08c",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Apr 29 2021 17:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EMandiant has observed an aggressive financially motivated group, UNC2447, exploiting one SonicWall VPN zero-day vulnerability prior to a patch being available and deploying sophisticated malware previously reported by other vendors as SOMBRAT. Mandiant has linked the use of SOMBRAT to the deployment of ransomware, which has not been previously reported publicly.\u003C\/p\u003E\n\u003Cp\u003EUNC2447 monetizes intrusions by extorting their victims first with FIVEHANDS ransomware followed by aggressively applying pressure through threats of media attention and offering victim data for sale on hacker forums. UNC2447 has been observed targeting organizations in Europe and North America and has consistently displayed advanced capabilities to evade detection and minimize post-intrusion forensics.\u003C\/p\u003E\n\u003Cp\u003EMandiant has observed evidence of UNC2447 affiliated actors previously using RAGNARLOCKER ransomware. Based on technical and temporal observations of HELLOKITTY and FIVEHANDS deployments, Mandiant suspects that HELLOKITTY may have been used by an overall affiliate program from May 2020 through December 2020, and FIVEHANDS since approximately January 2021.\u003C\/p\u003E\n\u003Ch4\u003EBackground\u003C\/h4\u003E\n\u003Cp\u003EIn November 2020, Mandiant created UNC2447, an uncategorized group observed using the novel WARPRISM PowerShell dropper to install BEACON at two Mandiant Managed Defense clients. Mandiant Managed Defence quicky neutralized these intrusions and did not observe attempts to deploy ransomware.\u003C\/p\u003E\n\u003Cp\u003EIn January and February 2021, Mandiant Consulting observed a novel rewrite of DEATHRANSOM\u2014dubbed FIVEHANDS\u2014along with SOMBRAT at multiple victims that were extorted. During one of the ransomware intrusions, the same WARPRISM and BEACON samples previously clustered under UNC2447 were observed. Mandiant was able to forensically link the use of WARPRISM, BEACON, SOMBRAT and FIVEHANDS to the same actor.\u003C\/p\u003E\n\u003Cp\u003EMandiant suspects that HELLOKITTY activity in late-2020 may be related to the overall affiliate program and that usage shifted to FIVEHANDS ransomware beginning in January 2021.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EIn April 2021, Mandiant observed a private FIVEHANDS TOR chat using a HELLOKITTY favicon (Figure 1).\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/unc2447-sombrat-fivehands\/fig1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: FIVEHANDS Hello Kitty icon\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen affiliate-based ransomware is observed by Mandiant, uncategorized clusters are assigned based on the infrastructure used, and in the case of UNC2447 were based on the SOMBRAT and Cobalt Strike BEACON infrastructure used across 5 intrusions between November 2020 and February 2021. Generally, Mandiant uses caution even with novel malware such as SOMBRAT and WARPRISM and clusters each use rigorously according to all observed activity. For more information on uncategorized threats, refer to our post, \u0026quot;\u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/products-and-services\/2020\/12\/how-mandiant-tracks-uncategorized-threat-actors.html\u0022\u003EDebUNCing Attribution: How Mandiant Tracks Uncategorized Threat Actors\u003C\/a\u003E.\u0026quot;\u003C\/p\u003E\n\u003Ch4\u003ESonicWall SMA 100 Series Appliance Vulnerability\u003C\/h4\u003E\n\u003Cp\u003ECVE-2021-20016 is a critical SQL injection vulnerability that exploits unpatched SonicWall Secure Mobile Access SMA 100 series remote access products. A remote, unauthenticated attacker could submit a specially crafted query in order to exploit the vulnerability. Successful exploitation would grant an attacker the ability to access login credentials (username, password) as well as session information that could then be used to log into a vulnerable unpatched SMA 100 series appliance. This vulnerability only impacted the SMA 100 series and was patched by SonicWall in February 2021. For more information on this vulnerability, please refer to \u003Ca href=\u0022https:\/\/psirt.global.sonicwall.com\/vuln-detail\/SNWLID-2021-0001\u0022\u003ESonicWall PSIRT advisory SNWLID-2021-0001\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EWARPRISM\u003C\/h4\u003E\n\u003Cp\u003EWARPRISM is a PowerShell dropper that has been observed by Mandiant delivering SUNCRYPT, BEACON, and MIMIKATZ. WARPRISM is used to evade endpoint detection and will load its payload directly into memory. WARPRISM may be used by multiple groups.\u003C\/p\u003E\n\u003Ch4\u003EFOXGRABBER\u003C\/h4\u003E\n\u003Cp\u003EFOXGRABBER is a command line utility used to harvest FireFox credential files from remote systems. It contains the PDB path: C:\\Users\\kolobko\\Source\\Repos\\grabff\\obj\\Debug\\grabff.pdb. FOXGRABBER has also been observed in DARKSIDE ransomware intrusions.\u003C\/p\u003E\n\u003Ch4\u003EBEACON Malleable Profiles\u003C\/h4\u003E\n\u003Cp\u003EIn the initial stages of an intrusion, UNC2447 uses the Cobalt Strike BEACON HTTPSSTAGER implant for persistence to communicate with command-and-control (C2) servers over HTTPS and has been observed using \u2018chches_APT10\u2019 and \u2018Havex\u2019 Malleable profiles.\u003C\/p\u003E\n\u003Ch4\u003EUNC2447 Toolbox\u003C\/h4\u003E\n\u003Cp\u003EDuring the recon and exfiltration stage of intrusions, UNC2447 has been observed using the following tools: ADFIND, BLOODHOUND, MIMIKATZ, PCHUNTER, RCLONE, ROUTERSCAN, S3BROWSER, ZAP and 7ZIP. UNC2447 may tamper with windows security settings, firewall rules, and antivirus protection.\u003C\/p\u003E\n\u003Ch4\u003ESOMBRAT Overview\u003C\/h4\u003E\n\u003Cp\u003ESOMBRAT was first reported by Blackberry Cylance in November 2020 as \u0026quot;\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/blogs.blackberry.com\/en\/2020\/11\/the-costaricto-campaign-cyber-espionage-outsourced\u0022\u003EThe CostaRicto Campaign: Cyber-Espionage Outsourced\u003C\/a\u003E\u0026quot; as a potential espionage-for-hire criminal group. Mandiant has now observed SOMBRAT alongside FIVEHANDS ransomware intrusions.\u003C\/p\u003E\n\u003Cp\u003EThe SOMBRAT backdoor is packaged as a 64-bit Windows executable. It communicates with a configurable command and control (C2) server via multiple protocols, including DNS, TLS-encrypted TCP, and potentially WebSockets. Although the backdoor supports dozens of commands, most of them enable the operator to manipulate an encrypted storage file and reconfigure the implant. The backdoor\u0027s primary purpose is to download and execute plugins provided via the C2 server. In contrast to the SOMBRAT version published in November 2020, Mandiant observed additional obfuscation and armoring to evade detection, this SOMBRAT variant has been hardened to discourage analysis. Program metadata typically included by the compiler has been stripped and strings have been inlined and encoded via XOR-based routines.\u003C\/p\u003E\n\u003Ch4\u003EThe SOMBRAT Launcher\u003C\/h4\u003E\n\u003Cp\u003EThis SOMBRAT backdoor variant must be deployed alongside four additional resources that serve as launchers. They are typically installed to the hardcoded directory path `C:\\ProgramData\\Microsoft`.\u0026nbsp;\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Epath: `C:\\programdata\\Microsoft\\WwanSvc.bat` - launcher for `WwanSvc.txt`\u003C\/li\u003E\n\u003Cli\u003Epath: `C:\\programdata\\Microsoft\\WwanSvc.txt` - decoder and launcher for `WwanSvc.c`\u003C\/li\u003E\n\u003Cli\u003Epath: `C:\\programdata\\Microsoft\\WwanSvc.c` - decoder and launcher for `WwanSvc.b`\u003C\/li\u003E\n\u003Cli\u003Epath: `C:\\programdata\\Microsoft\\WwanSvc.a` - XOR key\u003C\/li\u003E\n\u003Cli\u003Epath: `C:\\programdata\\Microsoft\\WwanSvc.b` - encoded SOMBRAT backdoor\u003C\/li\u003E\n\u003Cli\u003Epath: `%TEMP%\\\u0026lt;possibly unique random name\u0026gt;` - encrypted storage file\u003C\/li\u003E\n\u003Cli\u003Epath: `%TEMP%\\\u0026lt;possibly unique random name _\u0026lt;integer\u0026gt;` - encrypted storage file\u003C\/li\u003E\n\u003Cli\u003Epath: `C:\\ProgramData\\\u0026lt;possibly unique random name ` - encrypted configuration file\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EOther variations of the filenames were observed such as ntuser and wapsvc.\u003C\/p\u003E\n\u003Ch4\u003ESOMBRAT Technical Details\u003C\/h4\u003E\n\u003Cp\u003EThe SOMBRAT backdoor is written in modern C++ and implemented as a collection of \u0026quot;plugins\u0026quot; that interoperate with one another. There are five plugins distributed with this variant: `core`, `network`, `storage`, `taskman`, and `debug` (the `config` plugin described by Blackberry is not present). The core plugins communicate with the C2 server via messages sent over a common networking layer; each plugin supports its own set of messages, and the backdoor protocol can be extended by dynamically loaded plugins.\u003C\/p\u003E\n\u003Cp\u003EThe `core` plugin coordinates state tracking, such as network connectivity, and dynamic plugin loading and unloading. The `network` plugin configures the networking layer used to communicate with the C2 server, for example enabling the operator to switch between DNS and TCP protocols. The `storage` plugin exposes logical operations, such as read and write, for an encrypted file used to store plugins, resources, and arbitrary data. The `taskman` plugin enables the operator to list and kill processes on the compromised system. Finally, the `debuglog` plugin supports a single command to records debug messages.\u003C\/p\u003E\n\u003Cp\u003EGiven that the core plugins do not enable an operator directly execute arbitrary commands or reconfigure the system, the primary function of the SOMBRAT backdoor is to load plugins provided via the C2 server. These plugins may be shellcode or DLL modules to be dynamically loaded. The C2 server may instruct the backdoor to load the plugins directly or persist them into the encrypted storage file, where they may subsequently be reloaded, such as after upgrading the backdoor.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/unc2447-sombrat-fivehands\/fig2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Malware author mark \u201cNo one is perfect except me.\u201d\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ESOMBRAT evades forensic analysis by patching the process memory used to record command line arguments. It replaces the initial command line with the base filename of the program executable, removing any arguments. This means that investigators that inspect a process listing via memory forensics will see the innocuous-looking command line `powershell.exe` rather than references to the uncommon filename such as `WwanSvc.c`.\u003C\/p\u003E\n\u003Ch4\u003ESOMBRAT Network Communications\u003C\/h4\u003E\n\u003Cp\u003EThe SOMBRAT backdoor can communicate with its C2 server using both DNS and a proxy-aware, TLS-encrypted stream protocol. By default, the backdoor uses the DNS protocol; however, this can be reconfigured by the C2 server. Mandiant observed the domains feticost[.]com and celomito[.]com used for DNS C2 communications.\u003C\/p\u003E\n\u003Cp\u003EWhen the backdoor communicates via its DNS protocol, it constructs and resolves FQDNs, interpreting the DNS results to extract C2 messages. The authoritative DNS server embeds data within the IP address field of DNS A record results and within the Name Administrator field of DNS TEXT record results. By making many requests to unique subdomains of the C2 domain, the backdoor can slowly transmit information a few bytes at a time.\u003C\/p\u003E\n\u003Ch4\u003ERansomware Similarities\u003C\/h4\u003E\n\u003Cp\u003EBeginning in October 2020, Mandiant observed samples of a customized version of DEATHRANSOM. This newly modified version removed the language check feature (Figure 3 shows the language check of DEATHRANSOM).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/unc2447-sombrat-fivehands\/fig3.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\nFigure 3: Language check from \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fortinet.com\/blog\/threat-research\/death-ransom-new-strain-ransomware\u0022\u003EFortinet blog\u003C\/a\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EHELLOKITTY ransomware\u2014used to \u003Ca href=\u0022https:\/\/www.bleepingcomputer.com\/news\/security\/HELLOKITTY-ransomware-behind-cd-projekt-red-cyberattack-data-theft\/\u0022\u003Etarget Polish video game developer\u003C\/a\u003E CD Projekt Red\u2014is reportedly built from DEATHRANSOM.\u003Cul\u003E\n\u003Cli\u003EHELLOKITTY is named after a mutex named \u2018HELLOKITTYMutex,\u2019 used when the malware executable is launched (see Figure 4).\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/unc2447-sombrat-fivehands\/fig4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: HELLOKITTY mutex shown in Process Explorer\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ECEMIG (Companhia Energ\u00e9tica de Minas Gerais), a Brazilian electric power company, \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.cisoadvisor.com.br\/ataque-de-ransomware-na-cemig-derruba-sites-e-atendimento\/\u0022\u003Erevealed on Facebook\u003C\/a\u003E in late December 2020 that it was a \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.computerweekly.com\/news\/252496143\/HelloKitty-almost-certainly-behind-CD-Projekt-ransomware-attack\u0022\u003Evictim of HELLOKITTY cyber attack\u003C\/a\u003E.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIn January 2021, Mandiant observed a new ransomware deployed against a victim and assigned the name FIVEHANDS.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAnalysis of FIVEHANDS revealed high similarity to DEATHRANSOM, sharing several features, functions, and coding similarities. Absent in FIVEHANDS is a language check, similar to HELLOKITTY\u003C\/li\u003E\n\u003Cli\u003EBoth DEATHRANSOM and FIVEHANDS drops a ransom note in all non-excluded directories\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003ETechnical Comparison of FIVEHANDS, HELLOKITTY and DEATHRANSOM\u003C\/h4\u003E\n\u003Cp\u003EDEATHRANSOM is written in C while the other two families are written in C++. DEATHRANSOM uses a distinct series of do\/while loops to enumerate through network resources, logical drives, and directories. It also uses QueueUserWorkItem to implement thread pooling for its file encryption threads.\u003C\/p\u003E\n\u003Cp\u003EHELLOKITTY is written in C++, but reimplements a significant portion of DEATHRANSOM\u0027s functionality using similar loop operations and thread pooling via QueueUserWorkItem. The code structure to enumerate network resources, logical drives, and perform file encryption is very similar. Additionally, HELLOKITTY and DEATHRANSOM share very similar functions to check for the completion status of their encryption threads before exiting.\u003C\/p\u003E\n\u003Cp\u003EFIVEHANDS is written in C++ and although high level functionality is similar, the function calls and code structure to implement the majority of the functionality is written differently. Also, instead of executing threads using QueueUserWorkItem, FIVEHANDS uses IoCompletionPorts to more efficiently manage its encryption threads. FIVEHANDS also uses more functionality from the C++ standard template library (STL) than does HELLOKITTY.\u003C\/p\u003E\n\u003Ch4\u003EDeletion of Volume Shadow Copies\u003C\/h4\u003E\n\u003Cp\u003EDEATHRANSOM, HELLOKITTY, and FIVEHANDS use the same code to delete volume shadow copies via WMI by performing the query select * from Win32_ShadowCopy and then deleting each instance returned by its id.\u003C\/p\u003E\n\u003Ch4\u003EEncryption Operations\u003C\/h4\u003E\n\u003Cp\u003EEach of these three malware families utilizes a similar encryption scheme. An asymmetric public key is either hard-coded or generated. A unique symmetric key is generated for each encrypted file.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAfter each file is encrypted, the asymmetric key will encrypt the symmetric key and append it to the encrypted file. Additionally, a unique four byte magic value is appended to the end of the encrypted file. The malware checks for these magic bytes to ensure it does not encrypt a previously encrypted file again.\u003C\/li\u003E\n\u003Cli\u003EDEATHRANSOM and HELLOKITTY implement the file encryption operations using a very similar code structure and flow.\u003C\/li\u003E\n\u003Cli\u003EFIVEHANDS implements its file encryption with a differing code structure and uses different embedded encryption libraries.\u003C\/li\u003E\n\u003Cli\u003EIn addition to the symmetric key, HELLOKITTY and FIVEHANDS also encrypts file metadata with the public key and appends this to the encrypted file.\u003C\/li\u003E\n\u003Cli\u003EDEATHRANSOM generates an RSA key pair while HELLOKITTY and FIVEHANDS use an embedded RSA or NTRU public key.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EDEATHRANSOM Encryption\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003EDEATHRANSOM creates an RSA-2048 public and private key pair. Using an Elliptic-curve Diffie\u2013Hellman (ECDH) routine implemented with Curve25519, it computes a shared secret using two input values: 1) 32 random bytes from a RtlGenRandom call and 2) a hardcoded 32 byte value (attacker\u0027s public key). It also create a Curve25519 public key. The shared secret is SHA256 hashed and used as the key to Salsa20 encrypt the RSA public and private keys.\u003C\/li\u003E\n\u003Cli\u003EThe RSA public key is used to encrypt the individual symmetric keys that are used to encrypt each file. A Base64 encoded version of the encrypted RSA keys and the victim\u2019s Curve25519 public key is included in the ransom note, providing the threat actors the information needed to decrypt the victim\u0027s files.\u003C\/li\u003E\n\u003Cli\u003EFor the symmetric key, DEATHRANSOM calls RtlGenRandom to generate 32 random bytes. This is the 32 byte key used to AES encrypt each file. After the file is encrypted, the AES key is encrypted with the public RSA key and appended to the file.\u003C\/li\u003E\n\u003Cli\u003EDEATHRANSOM lastly appends the four magic bytes of AB CD EF AB at the end of the encrypted file and uses this as a check to ensure that it does not encrypt an already encrypted file.\u003C\/li\u003E\n\u003Cli\u003EThe analyzed DEATHRANSOM sample used for comparison does not change the file extension.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EHELLOKITTY Encryption\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003EHELLOKITTY contains an embedded RSA-2048 public key. This public key is SHA256 hashed and used as the victim ID within the ransom note. This RSA pubic key is also used to encrypt each file\u0027s symmetric key.\u003C\/li\u003E\n\u003Cli\u003EFor the symmetric key, HelloKitty generates a 32 byte seed value based on the CPU timestamp. A Salsa20 key is generated and encrypts a second 32 byte seed value. The encrypted result is XOR\u2019d with the first seed, resulting in a 32 byte key used to AES encrypt each file.\u003C\/li\u003E\n\u003Cli\u003EAfter each file is encrypted, the original file size, magic value of DE C0 AD BA, and AES key are encrypted with the public RSA key and appended to the file. HELLOKITTY and FIVEHANDS appends this additional metadata to the encrypted file, while DEATHRANSOM does not.\u003C\/li\u003E\n\u003Cli\u003ELastly it appends the four magic bytes DA DC CC AB to the end of the encrypted file.\u003C\/li\u003E\n\u003Cli\u003EDepending on the version, HELLOKITTY may or may not change the file extension.\u003C\/li\u003E\n\u003Cli\u003EOther samples of HELLOKITTY have used an embedded NTRU public key instead of RSA.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EFIVEHANDS Encryption\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003EFIVEHANDS uses an embedded NTRU public key. This NTRU key is SHA512 hashed and the first 32 bytes are used as the victim ID within the ransom note. This NTRU pubic key is also used to encrypt each file\u0027s symmetric key.\u003C\/li\u003E\n\u003Cli\u003EFor the symmetric key, FIVEHANDS uses an embedded generation routine to produce 16 random bytes used for an AES key to encrypt each file.\u003C\/li\u003E\n\u003Cli\u003EAfter each file is encrypted, the original file size, magic value of DE C0 AD BA, and AES key are encrypted with the public NTRU key and appended to the file.\u003C\/li\u003E\n\u003Cli\u003EThe four magic bytes DB DC CC AB are appended to the end of the encrypted file.\u003C\/li\u003E\n\u003Cli\u003EFIVEHANDS includes additional code not found in DEATHRANSOM and HELLOKITTY to use the Windows Restart Manager to close a file currently in use so that it can be unlocked and successfully encrypted.\u003C\/li\u003E\n\u003Cli\u003EThe encrypted file extension is changed to .crypt\u0026nbsp; extension\u003C\/li\u003E\n\u003Cli\u003EFIVEHANDS\u0027s encryption flow and sequence is very different from the other two, partially because it incorporates asynchronous I\/O requests and uses different embedded encryption libraries.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EFIVEHANDS Encrypted Dropper\u003C\/h4\u003E\n\u003Cp\u003EOne significant change between DEATHRANSOM and FIVEHANDS is the use of a memory-only dropper, which upon execution, expects a command line switch of -key followed by the key value necessary to perform decryption of its payload. The payload is stored and encrypted with AES-128 using an IV of \u201c85471kayecaxaubv\u201d. The decrypted FIVEHANDS payload is immediately executed after decryption. To date, Mandiant has only observed encrypted droppers with a common imphash of 8517cf209c905e801241690648f36a97.\u003C\/p\u003E\n\u003Ch4\u003ECLI arguments\u003C\/h4\u003E\n\u003Cp\u003EFIVEHANDS can receive a CLI argument for a path, this limits the ransomware\u0027s file encryption activities to the specified directory. DEATHRANSOM and HELLOKITTY do not accept CLI arguments.\u003C\/p\u003E\n\u003Ch4\u003ELocale and Mutex checks\u003C\/h4\u003E\n\u003Cp\u003EDEATHRANSOM performs language ID and keyboard layout checks. If either of these match Russian, Kazakh, Belarusian, Ukrainian or Tatar it exits. Neither HELLOKITTY or FIVEHANDS perform language ID or keyboard checks.\u003C\/p\u003E\n\u003Cp\u003EHELLOKITTY performs a mutex check while the other two do not perform mutex checks.\u003C\/p\u003E\n\u003Ch4\u003EFile Exclusions\u003C\/h4\u003E\n\u003Cp\u003EDEATHRANSOM and HELLOKITTY both exclude the same directories and files:\u003C\/p\u003E\n\u003Cp\u003Eprogramdata, $recycle.bin, program files, windows, all users, appdata, read_me.txt, autoexec.bat, desktop.ini, autorun.inf, ntuser.dat, iconcache.db, bootsect.bak, boot.ini, ntuser.dat.log, or thumbs.db.\u003C\/p\u003E\n\u003Cp\u003EThe exclusions for FIVEHANDS are more extensive and contain additional files and directories to ignore.\u003C\/p\u003E\n\u003Ch4\u003EAdditional Differences\u003C\/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003EDEATHRANSOM makes an external HTTPS connection to download a file. Neither HELLOKITTY or FIVEHANDS initiate network connections.\u003C\/li\u003E\n\u003Cli\u003EHELLOKITTY contains code to set the victims wallpaper to a ransom related image. The other samples do not have this functionality\u003C\/li\u003E\n\u003Cli\u003EDifferent versions of DEATHRANSOM and HELLOKITTY are known to change the file extension\u003C\/li\u003E\n\u003Cli\u003EDifferent versions of HELLOKITTY are known to check for specific processes to terminate.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003E\u003Cb\u003EFeature\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003E\u003Cb\u003EFIVEHANDS\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHELLOKITTY\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003E\u003Cb\u003EDEATHRANSOM\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003EProgramming Language\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EC++\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EC++\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003ESymmetric Encryption\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EAES 128\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EAES 256\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EAES 256\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003EAsymmetric Encryption\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EEmbedded NTRU Key\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EEmbedded RSA or NTRU Key\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ECurve25519 ECDH and RSA key creation\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003ESame directory and file name exclusions\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003EAccepts CLI Arguments\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003ENetwork Connections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003ELocale Check\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003EMutex Check\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EYes\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003ENo\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022165\u0022\u003E\u003Cp\u003EBytes Appended to Encrypted Files\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EDB DC CC AB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EDA DC CC AB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022153\u0022\u003E\u003Cp\u003EAB CD EF AB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Ransomware feature comparison\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EMandiant observed SOMBRAT and FIVEHANDS ransomware by the same group since January 2021. While similarities between HELLOKITTY and FIVEHANDS are notable, ransomware may be used by different groups through underground affiliate programs. Mandiant will assign an uncategorized cluster based on multiple factors including infrastructure used during intrusions and as such, not all SOMBRAT or FIVEHANDS ransomware intrusions may have been conducted by UNC2447. WARPRISM and FOXGRABBER have been used in SUNCRYPT and DARKSIDE ransomware demonstrating additional complexity and sharing between different ransomware affiliate programs.\u003C\/p\u003E\n\u003Ch4\u003EIndicators\u003C\/h4\u003E\n\u003Ch5\u003ESOMBRAT UNC2447\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E87c78d62fd35bb25e34abb8f4caace4a\u003C\/li\u003E\n\u003Cli\u003E6382d48fae675084d30ccb69b4664cbb (31dcd09eb9fa2050aadc0e6ca05957bf unxored)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003ESOMBRAT Launcher\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003Ecf1b9284d239928cce1839ea8919a7af (wwansvc.a XOR key)\u003C\/li\u003E\n\u003Cli\u003E4aa3eab3f657498f52757dc46b8d1f11 (wwansvc.c)\u003C\/li\u003E\n\u003Cli\u003E1f6495ea7606a15daa79be93070159a8 (wwansvc.bat)\u003C\/li\u003E\n\u003Cli\u003E31dcd09eb9fa2050aadc0e6ca05957bf (wwansvc.b)\u003C\/li\u003E\n\u003Cli\u003Eedf567bd19d09b0bab4a8d068af15572 (wwansvc.b)\u003C\/li\u003E\n\u003Cli\u003Ea5b26931a1519e9ceda04b4c997bb01f (wwansvc.txt)\u003C\/li\u003E\n\u003Cli\u003Ef0751bef4804fadfe2b993bf25791c49 (4aa3eab3f657498f52757dc46b8d1f11 unxored)\u003C\/li\u003E\n\u003Cli\u003E87c78d62fd35bb25e34abb8f4caace4a (edf567bd19d09b0bab4a8d068af15572 unxored)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003ESOMBRAT domains\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003ECelomito[.]com (unc2447)\u003C\/li\u003E\n\u003Cli\u003EFeticost[.]com (unc2447)\u003C\/li\u003E\n\u003Cli\u003ECosarm[.]com\u003C\/li\u003E\n\u003Cli\u003EPortalcos[.]com\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EFIVEHANDS\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E39ea2394a6e6c39c5d7722dc996daf05\u003C\/li\u003E\n\u003Cli\u003Ef568229e696c0e82abb35ec73d162d5e\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EFIVEHANDS Encrypted Dropper\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E6c849920155f48d4b4aafce0fc49eb5b\u003C\/li\u003E\n\u003Cli\u003E22d35005e926fe29379cb07b810a6075\u003C\/li\u003E\n\u003Cli\u003E57824214710bc0cdb22463571a72afd0\u003C\/li\u003E\n\u003Cli\u003E87c0b190e3b4ab9214e10a2d1c182153\u003C\/li\u003E\n\u003Cli\u003E1b0b9e4cddcbcb02affe9c8124855e58\u003C\/li\u003E\n\u003Cli\u003E46ecc24ef6d20f3eaf71ff37610d57d1\u003C\/li\u003E\n\u003Cli\u003E1a79b6d169aac719c9323bc3ee4a8361\u003C\/li\u003E\n\u003Cli\u003Ea64d79eba40229ae9aaebbd73938b985\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EHELLOKITTY\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E136bd70f7aa98f52861879d7dca03cf2\u003C\/li\u003E\n\u003Cli\u003E06ce6cd8bde756265f95fcf4eecadbe9\u003C\/li\u003E\n\u003Cli\u003Eaf568e8a6060812f040f0cb0fd6f5a7b\u003C\/li\u003E\n\u003Cli\u003Ed96adf82f061b1a6c80699364a1e3208\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EDEATHRANSOM\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003Ec50ab1df254c185506ab892dc5c8e24b\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EWARPRISM\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003Ec925822c6d5175c30ba96388b07e9e16 (unc2447)\u003C\/li\u003E\n\u003Cli\u003Ec171bcd34151cbcd48edbce13796e0ed\u003C\/li\u003E\n\u003Cli\u003Ed87fcd8d2bf450b0056a151e9a116f72\u003C\/li\u003E\n\u003Cli\u003Ef739977004981fbe4a54bc68be18ea79\u003C\/li\u003E\n\u003Cli\u003Ee18b27f75c95b4d50bfcbcd00a5bd6c5\u003C\/li\u003E\n\u003Cli\u003Edf6e6b3e53cc713276a03cce8361ae0f\u003C\/li\u003E\n\u003Cli\u003E1cd03c0d00f7bfa7ca73f7d73677d8f8\u003C\/li\u003E\n\u003Cli\u003E8071f66d64395911a7aa0d2057b9b00d\u003C\/li\u003E\n\u003Cli\u003Ec12a96e9c50db5f8b0b3b5f9f3f134f0\u003C\/li\u003E\n\u003Cli\u003Ee39184eacba2b05aaa529547abf41d2b\u003C\/li\u003E\n\u003Cli\u003E09a05a2212bd2c0fe0e2881401fbff17\u003C\/li\u003E\n\u003Cli\u003E8226d7615532f32eca8c04ac0d41a9fd\u003C\/li\u003E\n\u003Cli\u003Ea01a2ba3ae9f50a5aa8a5e3492891082\u003C\/li\u003E\n\u003Cli\u003E29e53b32d5b4aae6d9a3b3c81648653c\u003C\/li\u003E\n\u003Cli\u003Ea809068b052bc209d0ab13f6c5c8b4e7\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EBEACON UNC2447\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E64.227.24[.]12 Havex Profile January 2021\u003C\/li\u003E\n\u003Cli\u003E157.230.184[.]142\u0026nbsp; chches_ APT10 Profile November 2020-January 2021\u003C\/li\u003E\n\u003Cli\u003E74c688a22822b2ab8f18eafad2271cac\u003C\/li\u003E\n\u003Cli\u003E7d6e57cbc112ebd3d3c95d3c73451a38\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch5\u003EFOXGRABBER\u003C\/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003E4d3d3919dda002511e03310c49b7b47f\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EFireEye Detections\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022631\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022259\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Network Security\u003C\/p\u003E\n\u003Cp\u003EFireEye Email Security\u003C\/p\u003E\n\u003Cp\u003EFireEye Detection On Demand\u003C\/p\u003E\n\u003Cp\u003EFireEye Malware Analysis\u003C\/p\u003E\n\u003Cp\u003EFireEye Malware File Protect\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022372\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFIVEHANDS\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFE_Loader_Win32_Generic_162\u003C\/li\u003E\n\u003Cli\u003EFE_Ransomware_Win32_FIVEHANDS_1\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.exe\u003C\/li\u003E\n\u003Cli\u003ERansomware.Win.Generic.MVX\u003Cbr\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003ESOMBRAT\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFE_Backdoor_Win64_SOMBRAT_1\u003C\/li\u003E\n\u003Cli\u003EBackdoor.Win.SOMBRAT\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.exe\u003C\/li\u003E\n\u003Cli\u003EBackdoor.Win.SOMBRAT.MVX\u003C\/li\u003E\n\u003Cli\u003EFEC_Trojan_PS1_Generic_7\u003C\/li\u003E\n\u003Cli\u003EFEC_Trojan_PS1_Generic_8\u003C\/li\u003E\n\u003Cli\u003EFEC_Trojan_BAT_Generic_5\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EHELLOKITTY\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ERansomware.Win.Generic.MVX\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.exe\u003C\/li\u003E\n\u003Cli\u003ERansomware.Win.HELLOKITTY.MVX\u003C\/li\u003E\n\u003Cli\u003EFE_Ransomware_Win_HELLOKITTY_1\u003C\/li\u003E\n\u003Cli\u003EFE_Ransomware_Win32_HELLOKITTY_1\u003Cbr\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EDEATHRANSOM\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFE_Loader_Win32_Generic_92\u003C\/li\u003E\n\u003Cli\u003ERansomware.Win.Generic.MVX\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.exe\u003Cbr\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EBEACON\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFE_Loader_Win32_BLUESPINE_1\u003C\/li\u003E\n\u003Cli\u003EBackdoor.BEACON\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.exe\u003Cbr\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EWARPRISM\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFE_Loader_PS1_WARPRISM_1\u003C\/li\u003E\n\u003Cli\u003EFEC_Loader_PS1_WARPRISM_1\u003C\/li\u003E\n\u003Cli\u003EBackdoor.BEACON\u003C\/li\u003E\n\u003Cli\u003ETrojan.Generic\u003C\/li\u003E\n\u003Cli\u003ETrojan.Win.SYSTEMBC\u003C\/li\u003E\n\u003Cli\u003EBackdoor.Meterpreter\u003C\/li\u003E\n\u003Cli\u003ELoader.PS1.WARPRISM.MVX\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.exe\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.ps1\u003Cbr\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EFOXGRABBER\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFE_Tool_MSIL_FOXGRABBER_1\u003C\/li\u003E\n\u003Cli\u003EFE_Trojan_MSIL_Generic_109\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022259\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye EndPoint Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022372\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReal-Time (IOC)\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESOMBRAT (BACKDOOR)\u003C\/li\u003E\n\u003Cli\u003ESUSPICIOUS POWERSHELL READ BASE64 DATA (METHODOLOGY)\u003C\/li\u003E\n\u003Cli\u003EFIVEHANDS RANSOMWARE (FAMILY)\u003C\/li\u003E\n\u003Cli\u003EDEATHRANSOM RANSOMWARE (FAMILY)\u003C\/li\u003E\n\u003Cli\u003EHELLOKITTY RANSOMWARE (FAMILY)\u003C\/li\u003E\n\u003Cli\u003EBEACON (FAMILY)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EMalware Protection (AV\/MG)\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESOMBRAT\u0026nbsp;\u003Cul\u003E\n\u003Cli\u003EGeneric.mg.\u0026nbsp;87c78d62fd35bb25\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.6382d48fae675084\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.45750384\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.36367848\u003C\/li\u003E\n\u003Cli\u003EGeneric.PwShell.RefA.CB5E962A\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EFIVEHANDS\u003Cul\u003E\n\u003Cli\u003EGeneric.mg.39ea2394a6e6c39c\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.f568229e696c0e82\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.6c849920155f48d4\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.22d35005e926fe29\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.57824214710bc0cd\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.87c0b190e3b4ab92\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.1b0b9e4cddcbcb02\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.46ecc24ef6d20f3e\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.1a79b6d169aac719\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.a64d79eba40229ae\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Zusy.375932\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Zusy.366866\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.46059492\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.46059131\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.45996121\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericKD.45702783\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EWARPRISM\u0026nbsp;\u003Cul\u003E\n\u003Cli\u003EGeneric.mg.a01a2ba3ae9f50a5\u003C\/li\u003E\n\u003Cli\u003ETrojan.PowerShell.Agent.IJ\u003C\/li\u003E\n\u003Cli\u003ETrojan.Agent.EXDR\u003C\/li\u003E\n\u003Cli\u003ETrojan.PowerShell.Ransom.E\u003C\/li\u003E\n\u003Cli\u003ETrojan.Agent.EUKPTrojan.GenericKD.45856129\u003C\/li\u003E\n\u003Cli\u003EHeur.BZC.PZQ.Boxter.829.B5AEB7A6\u003C\/li\u003E\n\u003Cli\u003EHeur.BZC.PZQ.Boxter.829.B84D01A7\u003C\/li\u003E\n\u003Cli\u003EHeur.BZC.PZQ.Boxter.829.AE76D25C\u003C\/li\u003E\n\u003Cli\u003ETrojan.PowerShell.Ransom.F\u003C\/li\u003E\n\u003Cli\u003EDropped:Heur.BZC.MNT.Boxter.826.0A2B3A87\u003C\/li\u003E\n\u003Cli\u003EHeur.BZC.PZQ.Boxter.829.A15701BD\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EDEATHRANSOM\u003Cul\u003E\n\u003Cli\u003EGeneric.mg.c50ab1df254c1855\u003C\/li\u003E\n\u003Cli\u003ETrojan.Ransomware.GenericKD.35760206\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EHELLOKITTY\u003Cul\u003E\n\u003Cli\u003EGeneric.mg.136bd70f7aa98f52\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.06ce6cd8bde75626\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.af568e8a6060812f\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.d96adf82f061b1a6\u003C\/li\u003E\n\u003Cli\u003EGeneric.Malware.PfVPk!12.299C21F3\u003C\/li\u003E\n\u003Cli\u003EGen:Variant.Ransom.HelloKitty.1\u003C\/li\u003E\n\u003Cli\u003EGeneric.Malware.PfVPk!12.606CCA24\u003C\/li\u003E\n\u003Cli\u003EGeneric.Malware.PfVPk!12.1454636C\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EBEACON\u003Cul\u003E\n\u003Cli\u003EGeneric.mg.74c688a22822b2ab\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.7d6e57cbc112ebd3\u003C\/li\u003E\n\u003Cli\u003ETrojan.Agent.DDSN\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EMITRE ATT\u0026amp;CK\u003C\/h4\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ETactic\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EInitial Access\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1078 Valid Accounts\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExecution\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1047 Windows Management Instrumentation\u003C\/li\u003E\n\u003Cli\u003ET1053.005 Scheduled Task \/ Job: Scheduled Task\u003C\/li\u003E\n\u003Cli\u003ET1059.001 Command and Scripting Interpreter: PowerShell\u003C\/li\u003E\n\u003Cli\u003ET1106 Execution through API\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDefense Evasion\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1045 Software Packing\u003C\/li\u003E\n\u003Cli\u003ET1055 Process Injection\u003C\/li\u003E\n\u003Cli\u003ET1140 Deobfuscate \/ Decode Files or Information\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDiscovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1012 Query Registry\u003C\/li\u003E\n\u003Cli\u003ET1046 Network Service Scanning\u003C\/li\u003E\n\u003Cli\u003ET1057 Process Discovery\u003C\/li\u003E\n\u003Cli\u003ET1082 System Information Discovery\u003C\/li\u003E\n\u003Cli\u003ET1124 System Time Discovery\u003C\/li\u003E\n\u003Cli\u003ET1135 Network Share Discovery\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECollection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1560.003 Archive Collected Data: Archive via Custom Method\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EImpact\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1485 Data Destruction\u003C\/li\u003E\n\u003Cli\u003ET1486 Data Encrypted for Impact\u003C\/li\u003E\n\u003Cli\u003ET1490 Inhibit System Recovery\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand and Control\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1071.001 Application Layer Protocol: Web Protocols\u003C\/li\u003E\n\u003Cli\u003ET1090.002 Proxy: External Proxy\u003C\/li\u003E\n\u003Cli\u003ET1572\u0026nbsp; Protocol Tunneling\u003C\/li\u003E\n\u003Cli\u003ET1573.002 Encrypted Channel: Asymmetric Cryptography\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExfiltration\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003ET1041 Exfiltration over C2 Channel\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EThanks to Nick Richard for technical review, Genevieve Stark and Kimberly Goody for analytical contributions, and Jon Erickson, Jonathan Lepore, and Stephen Eckels for analysis incorporated into this blog post.\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Apr 29 2021 18:28:56 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EMandiant has observed financially motivated UNC2447 exploiting a SonicWall VPN zero-day vulnerability and deploying ransomware.\u003C\/p\u003E\n",
      "jcr:lastModified": "Thu Apr 29 2021 18:30:23 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Apr 29 2021 21:50:12 GMT+0000",
      "imageRotate": "0"
    }
  }
}
