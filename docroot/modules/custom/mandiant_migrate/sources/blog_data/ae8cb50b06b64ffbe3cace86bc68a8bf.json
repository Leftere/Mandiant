{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed May 04 2016 09:02:13 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "99 Problems but Two-Factor Ain\u2019t One",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "943f1a0d-03cf-4564-9eb8-718d6a4099ff",
    "author": "Austin Baker",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "f5b55676-b011-45e1-a628-429f2a30f69d"
    ],
    "jcr:created": "Fri Jun 03 2016 19:49:16 GMT-0400",
    "cq:lastReplicated": "Fri Jun 03 2016 19:49:16 GMT-0400",
    "cq:lastModified": "Wed Mar 23 2016 15:12:26 GMT-0400",
    "cq:distribute": true,
    "jcr:description": "Two-factor solutions can be highly effective defensive tools in your fight against advanced attackers when implemented securely. Your overtaxed and understaffed security team is likely already facing 99 other security problems - don\u2019t let two-factor authentication be one.",
    "jcr:baseVersion": "f5b55676-b011-45e1-a628-429f2a30f69d",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-tags:exploit",
      "fireeye-doctypes:blog",
      "fireeye-blog-authors:austin-baker",
      "fireeye-blog-threat-research:threat-research\/cyber-exploits",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:red-team-assessments",
      "fireeye-blog-tags:red-team-operations",
      "fireeye-blog-tags:red-teaming",
      "fireeye-blog-tags:penetration-testing",
      "fireeye-blog-tags:pen-test",
      "fireeye-blog-tags:penetration-test",
      "fireeye-blog-tags:mandiant-services",
      "fireeye-blog-tags:mandiant"
    ],
    "jcr:uuid": "572e1e18-2e9f-4e3e-8bf9-54d14ceecee5",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Mar 23 2016 08:00:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynn.thorne@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
        "text": "\u003Cp\u003ETwo-factor authentication is a best practice for securing remote access, but it is also a Holy Grail for a motivated red team. Hiding under the guise of a legitimate user authenticated through multiple credentials is one of the best ways to remain undetected in an environment. Many companies regard their two-factor solutions as infallible and do not take precautions to protect against attackers\u2019 attempts to bypass or backdoor them.\u003C\/p\u003E\n\u003Cp\u003E\u003Ciframe width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 src=\u0022https:\/\/www.youtube.com\/embed\/SUq9EQtHdrs?rel=0\u0022\u003E\u0026amp;amp;amp;amp;amp;amp;nbsp;\u003C\/iframe\u003E\u003C\/p\u003E\n\u003Cp\u003EThe techniques covered in this blog range from simple to advanced methods of handling two-factor authentication from the perspective of a red team, and provide insight into potential visibility gaps for security teams to address. I\u2019ll discuss techniques for bypassing two-factor authentication remotely without access to the internal environment, and how to gain access to a two-factor authenticated remote access device with information stolen from the internal environment.\u003C\/p\u003E\n\u003Ch3\u003E1) K.I.S.S - Keep It Simple, Stupid\u003C\/h3\u003E\n\u003Cp\u003ECompromising a remote access solution is a red team\u2019s foremost goal because it offers easy access and a low risk of being caught. Red teams using legitimate remote access solutions can conduct their command, control, exploitation, and exfiltration activities under the guise of properly authenticated sessions. In addition, the red team\u2019s system is not subject to the same security restrictions or controls as other corporate systems. This means that the team does not have to deal with antivirus, application whitelisting, and other intrusion detection software interfering with their activities. Two-factor authentication obviously raises the difficulty to compromise these remote access solutions, and challenges red teams to subvert the two-factor protections in place.\u003C\/p\u003E\n\u003Cp\u003EIn difficult situations like these, it\u2019s best to adopt an Occam\u2019s razor approach and use the most straightforward method to acquire the credentials we need: ask the victim to enter them for us. The perfect trap happens to be the simplest to set.\u003C\/p\u003E\n\u003Cp\u003EIn Figure 1, we have two different VPN login pages. One is a corporation\u2019s legitimate site, the other is a fake operated by a crafty red team. Can you spot the difference?\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: VPN authentication page comparison\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENo? Neither can your users. Using tools such as the Social-Engineer Toolkit (SET), anyone can effectively replicate an external page by changing the HTML\u2019s local resource locations (\u201c\/home\/image\/logo.png\u201d) to external references (\u201cmycompany.com\/home\/image\/logo.png\u201d). With a compelling phishing scenario, you can guide the victim to your visual clone VPN authentication page and get all the information you need to make your own connection: username, password, and even the token code!\u003C\/p\u003E\n\u003Cp\u003EIf the red team can move quickly enough, they can take credentials submitted to the fake VPN page and use them to authenticate to the actual VPN. As shown in Figure 2, this can be accomplished by redirecting the login submission to a PHP script that will write the username, password and other metadata (IP address, HTTP User-Agent, time of submission) to a log file that the red team can monitor and wait for a user to provide their two-factor credentials.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Credential theft PHP POST script\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the red team authenticates to the VPN, they can attempt to escalate privileges and access sensitive data before the security team can detect and respond to the phish. Internal network reconnaissance through scanning, identifying applications and systems that the victim user can access, and even LLMNR\/NBT-NS spoofing offer potential avenues to turn a VPN session into full compromise of the environment.\u003C\/p\u003E\n\u003Cp\u003EThe Mandiant Red Team leverages SpiderLabs\u2019 Responder as our LLMNR\/NBT-NS spoofing tool of choice. Responder is a powerful Python utility that sends fake responses to LLMNR\/NBT-NS requests to fool systems and services into providing password hashes and, in some cases, plaintext credentials. Running Responder on a VPN subnet for even a few minutes (as exemplified in Figure 3) can provide numerous domain accounts and password hashes. Common passwords and passwords with low complexity requirements can have their hashes cracked in seconds, giving the red team the plaintext credentials they need to continue their lateral movement and privilege escalation.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig3.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 3: Responder example\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EHow to prevent this attack\u003C\/b\u003E\u003C\/h5\u003E\n\u003Col\u003E\n\u003Cli\u003EEnsure that your VPN solution enforces a single authenticated session per user. There is limited justification for allowing multiple, concurrent sessions (with different source IP addresses) for a single user account.\u003C\/li\u003E\n\u003Cli\u003EConduct regular auditing of VPN authentication logs to identify anomalous login activity, such as flagging login events originating from TOR exit nodes.\u003C\/li\u003E\n\u003Cli\u003EWhen responding to phishing incidents, take the potential loss of credentials seriously. If there is reason to suspect credentials were lost, make sure to reset all affected credentials and review access logs for evidence of malicious activity.\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Ch3\u003E2) XSS in Sheep\u2019s Clothing\u003C\/h3\u003E\n\u003Cp\u003EVPN login pages are valuable targets because their image evokes a sense of familiarity and security with the users. If you authenticate to the VPN every day using a web page such as the one shown in Figure 1, odds are that you\u2019re not inspecting your traffic or the website code to verify your credentials are going where you think they are. The scary truth is that real-world attackers have already started capitalizing on this implicit trust and have been discovered leveraging JavaScript-based credential harvesters on corporate VPN login pages.\u003C\/p\u003E\n\u003Cp\u003ELet\u2019s discuss how this attack works. First, the red team exploits a vulnerability to write code to the authentication page (or a page that gets loaded by the authentication page), such as the vulnerability discussed in CVE-2014-3393. The red team then adds code to the authentication page to execute malicious JavaScript from a system they control and waits for unsuspecting users to load the page and authenticate. An example of such code is shown in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig4.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Malicious code snippet\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe victim user does not notice anything different. This tiny bit of code loads file \u201cstealcreds.js\u201d from \u201chttps:\/\/www.evil.com\u201d and executes its code into your legitimate user\u2019s web session (i.e. the JavaScript code runs in the context of the user\u2019s browser). By using an external resource, we minimize code introduction on the front page and allow ourselves the ability to dynamically update our payload each time a user\u2019s browser requests the resource. Figure 5 shows a snippet of code we use to compromise user credentials.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig5.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Code snippet for stealing VPN creds\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUsing an internal frame insertion and a POST-back setup to \u201chttps:\/\/www.evil.com\/pwnd.php\u201d, the red team rigs the normal VPN login page to POST user credentials every time they are entered in a session where the \u201cstealcreds.js\u201d resource is loaded. By attacking the VPN solution itself, the red team can disguise themselves as legitimate users remotely connecting to the environment through the authorized remote access solution.\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EHow to prevent this attack\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EMonitor access to your two-factor solutions and conduct regular examinations of any code served to users to ensure that no tampering has occurred. Two ways to accomplish this are to use a file integrity monitoring solution to monitor files served by networking devices and by conducting periodic scans or assessments of public infrastructure to identify changes.\u003C\/p\u003E\n\u003Ch3\u003E3) 1.5-Factor Authentication\u003C\/h3\u003E\n\u003Cp\u003EAnother popular VPN configuration is a \u201chost check\u201d process as a requirement to connect to the corporate VPN. Typically, this process verifies the host\u2019s domain and some basic configuration stats, such as whether or not antivirus signatures have been updated. Some companies view this \u201chost check\u201d process as a pseudo-second factor (hence the 1.5 factor title). The unfortunate issue with host inspections is that they rely on the host being trustworthy.\\\u003C\/p\u003E\n\u003Cp\u003EWe performed a red team assessment on a client that used a VPN device that required only a single-factor password authentication in addition to the \u201chost check\u201d process. Every piece of information examined by the \u201chost check\u201d process was provided in a web request and minimally obfuscated with Base64 encoding \u2013 fair game to anyone using a proxy. An example of the kind of data expected, complete with registry paths checked and the \u201ccorrect answers,\u201d is shown in Figure 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig6.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: \u0026quot;host checker\u201d policy from VPN authentication server\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ENot only does the \u201chost check\u201d process rely on trustworthy answers from potentially untrustworthy sources, it even provides what it\u2019s inspecting within the request! At a minimum, a red team can attempt to modify the features examined during the check. Even worse, the response to the \u201chost check\u201d was a simple POST containing whether each inspected element was \u201ccorrect\u201d or not \u2013 another easy target for red teams using web proxies such as Fiddler or Burp.\u003C\/p\u003E\n\u003Cp\u003EWe used a combination of Fiddler and Python to modify POST requests to generate a valid policy inspection report and fool the \u201chost check\u201d into approving us, as shown in Figure 7.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig7.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Python-generated policy report\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAnother common form of 1.5-factor authentication is leveraging usernames and passwords in combination with a computer certificate. Some companies choose to authenticate both the user and their device before allowing remote access. While this is a good approach, requiring single-factor credential authentication in combination with a locally installed certificate is not. It is trivial for an attacker to gain access to an end user system, export the locally installed computer certificate, and install the certificate on their own virtual system.\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EHow to prevent this attack\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EDo not use single factor or 1.5-factor authentication for any remote access. Only strong multi-factor authentication (something you know, something physical you have, or something you are) should be implemented. If you want to leverage computer certificate in conjunction with credential-based authentication, make sure you use multi-factor credential-based authentication in conjunction with a client-side certificate.\u003C\/p\u003E\n\u003Ch3\u003E4) Email is the Enemy\u003C\/h3\u003E\n\u003Cp\u003EDigital tokens often require a synchronization code that is unique to each user\u2019s token in order to function properly. The synchronization code and algorithm is what ensures the token that is displayed to the user matches the token the authentication server expects. Many companies use a simple IT-friendly process of sending users a notice via email when their request for VPN access is approved. These emails often contain the \u201cseed\u201d key and instructions for installation. Unfortunately for the security team, users often read this email and forget to delete it, leaving the literal keys in the users inbox, ripe for an attacker to steal.\u003C\/p\u003E\n\u003Cp\u003EOne of the steps in the Mandiant Red Team methodology is to search email inboxes (including.PST and .OST files on disk), for these types of sensitive and useful files. In most cases, we use a simple PowerShell script to search the user\u2019s mailbox and related files for evidence of RSA soft-token .sdtid files.\u003C\/p\u003E\n\u003Cp\u003EThe .sdtid file is essentially a password-protected certificate of authenticity you can use to set up a digital (\u201csoft\u201d) token on your local host. With the combination of both the .sdtid file and password (often located in the same email sent by your IT Help Desk, stored in a local text file, or stored in a local password manager), the red team can replicate a user\u2019s soft-token and use a simple keylogger to identify the user\u2019s PIN. After that, the red team gains two-factor authenticated access to the network at any time, day or night, masquerading as a legitimate user.\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EHow to prevent this attack\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EInnocuous things such as a soft certificate in an email can help an attacker gain access to a company. \u201cSoft\u201d tokens are often easier targets for compromise than physical devices, so keep that in mind when you decide what and how you are securing with two-factor. Train your users to securely delete sensitive information once they\u2019re done with it. Train your IT staff to not include passwords in the same emails as the .sdtid file or not to include the .sdtid in an email. For instance, require your users to authenticate to a website to download the .sdtid file.\u003C\/p\u003E\n\u003Ch3\u003E5) Leaving the Vault Key under the Doormat\u003C\/h3\u003E\n\u003Cp\u003E\u201cPassword vault\u201d is a phrase that will inspire groans from even the most hardened red team veterans. A properly configured password vault is a powerful tool to restrict and monitor the usage of credentials in an environment. It reduces exposure of passwords to traditional tools such as Mimikatz and Windows Credentials Editor (WCE). After all, dumping passwords becomes a tired game when all administrative credentials change every time they are checked in and out of the vault.\u003C\/p\u003E\n\u003Cp\u003EAdd a multi-factor-enabled RADIUS authentication server with physical tokens in front of that password vault and you\u2019ve created a real challenge for a red team. In order for a red team to get a temporarily valid password, they now need to reproduce a user password, PIN and physical token code \u2013 all at once! Even with local access via a backdoor and a keylogger, the red team likely still won\u2019t be able to enter that token code in time before the RADIUS server shuts down access because the token has already been used.\u003C\/p\u003E\n\u003Cp\u003EHowever, rather than give up at bypassing the highest level of password security that can be realistically implemented, a red team can return to the fundamental rule of security: your security chain is only as strong as its weakest link, and that weakest link is almost always the people involved in the processes. This is where we start to explore the unsecured Windows file share.\u003C\/p\u003E\n\u003Cp\u003EUnsecured Windows file shares have served our Red Team well over the years. We almost always get at least some of the data necessary for privilege escalation and sensitive data theft by combing through unsecured file shares. Unfortunately for security teams, Windows makes it incredibly easy to share files and folders in a domain and for a user or red team to discover those shares and scrape through them for valuable information. PowerView\u2019s \u201cInvoke-ShareFinder\u201d PowerShell script is a great utility that offers a fair amount of scalability in the hunt for shares of interest. This tool can help you discover valuable information, including interesting shares such as one we recently found named \u201cSecurity\u201d. As expected, this share was readable to any user with valid domain credentials.\u003C\/p\u003E\n\u003Cp\u003EIn some cases, you may find yourself looking at a document such as the one shown in Figure 8.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig8.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Sample Excel spreadsheet\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EPasswords discovered in these types of documents give red team\u2019s direct access to the authentication server, which means they can control how the authentication process works. With the password to the account used to administer the two-factor authentication solution, the red team can grant themselves \u2013 at least temporarily \u2013 access to any existing account\u2019s password vault. As the next section shows, with this level of access comes new techniques to further entrench the red team\u2019s control of critical infrastructure in an environment to maintain access and evade detection.\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EHow to prevent this attack\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003ERestrict users\u2019 abilities to create arbitrary open Windows shares by restricting local administrator permissions. There is almost no reason for real information to be stored in a location where it is accessible to \u201cEveryone\u201d (i.e. any domain user). Use Active Directory Groups to your advantage to define tight access controls where sensitive information may be. Consider implementing a Data Loss Prevention (DLP) solution that maintains encryption of sensitive files and audits their access and modification. You can even take the \u201cInvoke-ShareFinder\u201d script and do a quick self-assessment in a day or two - keep an eye out for shares on web servers or corporate data shares.\u003C\/p\u003E\n\u003Ch3\u003E6) A Two-Factor Emergency\u003C\/h3\u003E\n\u003Cp\u003EMany two-factor authentication products offer what are called \u201cEmergency Access\u201d codes, an authentication mechanism designed to allow VPN access after a user has lost their token and remote access is critical. An example screenshot depicting emergency access token code management is shown in Figure 9.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig9.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Emergency token code access management screenshot\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAs the screenshot above shows, the system offers a fixed \u201csecond factor\u201d of authentication \u2013 perfect for the red team that wants stealthy remote access to the environment. These emergency access codes are particularly dangerous because they can be configured with no expiration date, allowing for a quiet return into the environment at a later date.\u003C\/p\u003E\n\u003Cp\u003EA word of caution for eager red teams: while creating your own profile\/token using this access is tempting, there is typically more alerting and auditing around the creation of profiles than the modification of existing profiles.\u003C\/p\u003E\n\u003Cp\u003EAs every vendor solution is different, we\u2019ll leave it as an exercise to the reader to determine the proper method of implementing \u201cEmergency Access\u201d in their target environment. Keep in mind that if you\u2019re using an existing user\u2019s account, emergency access may not always be enough \u2013 the PIN is required in addition to the emergency access code. Fortunately, most vendors offer the option to quickly clear the PIN and set a new one, as depicted in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Baker%20blog%20-%20red%20team\/fig10.png\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 10: PIN management screenshot\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003E\u003Cb\u003EHow to prevent this attack\u003C\/b\u003E\u003C\/h5\u003E\n\u003Cp\u003EImplement regular two-factor application auditing. Log the user that logs in, the date of the login, where the login originated, and the changes that were made, especially if the changes involved the creation of new user profiles. Enforce policies that disallow emergency token access except in the direst of needs, and even then only allow this access for a short period. We highly recommend you perform a quick audit of all your two-factor authenticated accounts right now \u2013 you might be surprised what you find.\u003C\/p\u003E\n\u003Ch3\u003EConclusion\u003C\/h3\u003E\n\u003Cp\u003EThere are many attack paths and vectors that veteran red teams can use to bypass \u201csecure\u201d security controls. At Mandiant, our Red Team takes advantage of our front line intelligence, as well as the latest tools, tactics, and procedures we see our adversaries leverage in their own breaches.\u003C\/p\u003E\n\u003Cp\u003EUnfortunately, many companies place too much trust in security solutions such as two-factor authentication without taking the necessary steps to secure the underlying technologies. This oversight could allow attackers and red teams alike to subvert two-factor authentication implementations even when they\u2019re implemented properly.\u003C\/p\u003E\n\u003Cp\u003ESpecial thanks to Andrew Burkhardt, Evan Pe\u00f1a, and Justin Prosco for their help with the content of this blog.\u003C\/p\u003E\n",
        "jcr:lastModified": "Wed Mar 23 2016 15:12:26 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      },
      "lightbox_youtube_fea": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:createdBy": "lynda.hall@fireeye.com",
        "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
        "jcr:created": "Tue Mar 22 2016 20:50:43 GMT-0400",
        "jcr:lastModified": "Tue Mar 22 2016 20:50:43 GMT-0400",
        "sling:resourceType": "fireeye-www\/fdc\/components\/lightbox\/lightbox-youtube"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
      "text": "\u003Cp\u003ETwo-factor solutions can be highly effective defensive tools in your fight against advanced attackers when implemented securely. Your overtaxed and understaffed security team is likely already facing 99 other security problems - don\u2019t let two-factor authentication be one.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Mar 22 2016 17:32:07 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
