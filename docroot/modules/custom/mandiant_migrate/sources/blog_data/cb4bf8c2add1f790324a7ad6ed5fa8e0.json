{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Fri Sep 23 2016 10:52:38 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Hancitor (AKA Chanitor) observed using multiple attack approaches ",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "0146ebd1-c237-4d00-879e-775283c4956f",
    "author": "Ankit Anubhav ",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynn.thorne@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "6d31da73-ee9c-4711-9074-d0da6b98ac6b"
    ],
    "jcr:created": "Fri Sep 23 2016 10:52:38 GMT-0400",
    "cq:lastReplicated": "Fri Sep 23 2016 10:52:37 GMT-0400",
    "cq:lastModified": "Fri Sep 23 2016 10:51:54 GMT-0400",
    "cq:distribute": true,
    "jcr:description": "Hancitor uses several capabilities within malicious macros that support malware installation and data theft. These capabilities include leveraging uncommon APIs and obscuring malicious PowerShell commands, tactics that make it a challenge to detect. ",
    "jcr:baseVersion": "6d31da73-ee9c-4711-9074-d0da6b98ac6b",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:ankit-anubhav",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:hx",
      "fireeye-doctypes:blog",
      "fireeye-blog-threat-research:threat-research\/malware-research",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:phishing",
      "fireeye-blog-tags:email",
      "fireeye-blog-authors:cap-dileep-kumar-jallepalli"
    ],
    "jcr:uuid": "40bd8fee-28d3-44fa-9ffd-2fd6876e5f38",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Fri Sep 23 2016 10:30:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynn.thorne@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
        "text": "\u003Cp\u003EMany threat actors use multiple attack vectors to ensure success. The individuals using Hancitor malware (also known by the name Chanitor) are no exception and have taken three approaches to deliver the malware in order to ultimately steal data from their victims. These techniques include uncommon API abuse and PowerShell methods.\u003C\/p\u003E\n\u003Cp\u003EWe recently observed Hancitor attacks against some of our FireEye Exploit Guard customers. The malicious document used to deliver the Hancitor executable was observed being distributed as an attachment in email spam. Once downloaded and executed, it drops an intermediate payload that further downloads a Pony DLL and Vawtrak executable, which perform data theft and connect to a command and control (C2) server.\u003C\/p\u003E\n\u003Ch5\u003EStage 1: Email Delivery\u003C\/h5\u003E\n\u003Cp\u003EWe observed a number of phishing emails that reference an invoice, as seen in Figure 1. The attachment in these emails is a weaponized Microsoft Office document containing a malicious macro that \u2013 when enabled \u2013 leads to the download of Hancitor.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1:\u0026nbsp; Email with a malicious document attached\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EStage 2: Macro and Luring Mechanism\u003C\/h5\u003E\n\u003Cp\u003EUpon opening the attachment, a typical luring mechanism is employed instructing the victim to enable macros, as seen in Figure 2. FireEye has observed the attackers behind this campaign using three different approaches.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2:\u0026nbsp; Luring the victim to enable macros\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EFirst Approach\u003C\/h5\u003E\n\u003Cp\u003EUnlike other malicious macros, this one is not using APIs directly to run the payload. Macros can call APIs directly, but normally are not supposed to run shellcode. The macro used to deliver Hancitor calls the native Windows API, \u201cCallWindowProc\u201d, which can be used to interpret and execute shellcode, as depicted in Figure 3.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig3.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: \u0026nbsp;Code within the macro that uses the CallWindowProc API to execute shellcode\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003ESecond Approach\u003C\/h5\u003E\n\u003Cp\u003ERecently, FireEye Exploit Guard captured Hancitor samples that leverage a new API Callback function. In addition to \u201cCallWindowProc\u201d, Hancitor samples may use the function EnumResourceTypesA to interpret and execute shellcode, as seen in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig4.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4:\u0026nbsp; EnumResourceTypesA API declaration\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EThird Approach\u003C\/h5\u003E\n\u003Cp\u003EWe also observed a third approach used by a malicious document file to deliver Hancitor. Although the threat actor and command and control servers are similar to the second Hancitor delivery approach, this one uses an alternate tactic to reach its goal of data theft.\u003C\/p\u003E\n\u003Cp\u003EWith this approach, the luring message shown in the Figure 2 now serves another purpose. Not only does it lure the victim into enabling the macros, but it also is assigned an alternate text: \u201cfkwarning\u201d, as seen in Figure 5. The macro has code to check this attribute to make sure the luring message shape object is present. If this object is not found, the macro will exit without downloading additional payloads.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig5.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5:\u0026nbsp; Code to ensure that the luring message is intact and the malicious document is executed for the first time\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EEven if it finds the luring message, it will run the macro once and will delete the shape so that the macro will never be executed again, as seen in Figure 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig6.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Code to delete the shape that includes the lure message\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe malicious macro replaces the deleted image with another that displays the text \u201cnetwork error\u201d to reduce user suspicions, as shown in Figure 7. Note that text is always present in the malicious macro, but it will only be made visible by the macro when it is executing for the first time.\u003Cbr\u003E\n\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig7.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: The hidden text that becomes visible once the macro is executed for the first time\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe macro then combines fragments of code to make a PowerShell command. However, unlike in the other approaches, the malicious code is not hidden in the code or form or metadata. We observed that the malware extracts malicious code fragments from within the section_header of the embedded image and combines them into a PowerShell command on the fly, as seen in Figure 8. This technique will evade some basic static methods of detection applied to macros macro forms.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig8.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8:\u0026nbsp; PowerShell command observed in header after increasing font size\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe malware authors have taken a very simple but interesting approach to obscure the PowerShell command text. The font size is set to microscopic level 1, as seen in Figure 9. This reduces the likelihood that a casual observer will notice something unusual.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig9.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9:\u0026nbsp; Minimal font size to hide content of header\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUsing the \u201cDownloadFile\u201d method, PowerShell obtains a payload from an attacker-controlled website in a ZIP archive format. PowerShell uses the \u201ccopyhere\u201d function to unzip the payload. The \u201c.Item\u201d attribute is also set to \u201c16\u201d, which ignores all warnings, as seen in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig10.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Code to download archived payload and unzip it\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce the downloaded executable is extracted from the ZIP archive, the macro code deletes the archive using the \u201cKill\u201d function, as seen in Figure 11. After the executable is executed, it downloads Pony and Vawtrak malware variants to steal data.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig11.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11:\u0026nbsp; Code to delete the archive\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EDifferent Approaches, Same Hancitor\u003C\/h5\u003E\n\u003Cp\u003EAlthough there are differences between the second and third approaches to distributing Hancitor, the objective of the threat actor is the same, as we found the same command and control server being used in both approaches.\u003C\/p\u003E\n\u003Cp\u003EHowever, we can see a minor change in the second Hancitor approach command and control servers when compared to the first Hancitor approach command and control servers, with URLs ending with ls5\/gate.php instead of ls4\/gate.php, as seen in Figure 12.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig12.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Earlier and newer Hancitor gates\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EStage 3: First stage payload\u003C\/h5\u003E\n\u003Cp\u003EThe file copies itself to \u201c%system32%\u201d and creates a registry run key entry for persistence. Upon execution, it will communicate with an attacker-controller website to download a variant of the Pony malware, \u201cpm.dll\u201d along with a standard Vawtrak trojan.\u003C\/p\u003E\n\u003Ch5\u003EStage 4: Second stage payload Pony data exfiltration capabilities\u003C\/h5\u003E\n\u003Cp\u003EWe observed a number of data theft capabilities in the second stage Pony variant, including:\u003C\/p\u003E\n\u003Cp\u003E1) Stealing autocomplete Intelliforms data, which may include user passwords, as seen in Figure 13.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig13.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: Stealing the content of the Intelliforms registry key\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E2) The unique GUID seen in Figure 14 helps to decrypt credentials from credential store. There is a good amount of documentation on various forums on how to use this salted value to access credentials.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig14.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Credential stealing\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E3) Accessing Mozilla saved passwords from \u201csignons.txt,\u201d as seen in Figure 15.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig15.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: Accessing Mozilla saved passwords\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E4) Figure 16 shows the malware code related to theft via accessing Microsoft OMI Email configuration information. We can also see registry entries related to storing Outlook Profile, which contains information about where emails and other data is stored being accessed.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Hancitor%20Ankit\/Fig16.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: \u0026nbsp;Malware code for Outlook data theft via registry access\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch5\u003EConclusion\u003C\/h5\u003E\n\u003Cp\u003EThe malware authors responsible for Hancitor have developed several capabilities within malicious macros that support malware installation and data theft. These capabilities include leveraging uncommon APIs and obscuring malicious PowerShell commands, tactics that made detection more challenging.\u003Cbr\u003E\n\u003Cbr\u003E\nFireEye Exploit Guard provides organizations with the ability to detect malicious shellcode in the initial phase of the attack lifecycle, regardless of these evasion techniques.\u003Cbr\u003E\n\u003Cbr\u003E\nFireEye recommends that organizations block macros in Microsoft Office documents that originate from the Internet by Group Policy. In all cases, users should be cautious about enabling macros and should practice vigilance about opening email messages from untrusted sources.\u003C\/p\u003E\n",
        "jcr:lastModified": "Fri Sep 23 2016 10:51:54 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynn.thorne@fireeye.com",
      "text": "\u003Cp\u003EHancitor uses several capabilities within malicious macros that support malware installation and data theft. These capabilities include leveraging uncommon APIs and obscuring malicious PowerShell commands, tactics that make it a challenge to detect.\u003Cbr\u003E\n\u003C\/p\u003E\n",
      "jcr:lastModified": "Fri Sep 23 2016 10:50:18 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
