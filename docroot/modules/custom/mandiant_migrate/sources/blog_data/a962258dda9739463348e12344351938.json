{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Tue Apr 11 2017 13:30:42 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "2f2ca688-79fe-4c9a-946d-29dccf31c4dc",
    "author": "Genwei Jiang",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "807ceb93-0077-44c6-bba7-852217710d6d"
    ],
    "jcr:created": "Tue Apr 25 2017 16:09:22 GMT-0400",
    "cq:lastReplicated": "Tue Apr 25 2017 16:09:21 GMT-0400",
    "cq:lastModified": "Tue Apr 25 2017 16:09:13 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "807ceb93-0077-44c6-bba7-852217710d6d",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-tags:zero-day",
      "fireeye-blog-authors:rahul-mohandas",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-doctypes:blog",
      "fireeye-blog-tags:0day-exploits",
      "fireeye-blog-tags:zero-day-vulnerability",
      "fireeye-blog-tags:zero-day-exploit",
      "fireeye-blog-authors:jonathan-leathery",
      "fireeye-blog-tags:0-day",
      "fireeye-blog-tags:0day",
      "fireeye-blog-authors:alex-berry",
      "fireeye-blog-authors:lennard-galang",
      "fireeye-blog-authors:cap-genwei-jiang",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:homepage-carousel"
    ],
    "jcr:uuid": "5d3cf491-fb9f-43ab-818f-bb9aecce27b0",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Apr 11 2017 10:30:00 GMT-0700",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "lynda.hall@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EFireEye recently detected malicious Microsoft Office RTF documents that leverage CVE-2017-0199, a previously undisclosed vulnerability. This vulnerability allows a malicious actor to download and execute a Visual Basic script containing PowerShell commands when a user opens a document containing an embedded exploit. FireEye has observed Office documents exploiting CVE-2017-0199 that download and execute malware payloads from different well-known malware families.\u003C\/p\u003E\n\u003Cp\u003EFireEye shared the details of the vulnerability with Microsoft and has been coordinating public disclosure timed with the release of a patch by Microsoft to address the vulnerability, which can be found \u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0199\u0022\u003Ehere.\u003C\/a\u003E\u003C\/p\u003E\n\u003Cp\u003EThe vulnerability bypassed most mitigations prior to patch availability; however, FireEye email and network products detected the malicious documents. FireEye recommends that Microsoft Office users apply the \u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0199\u0022\u003Epatch from Microsoft\u003C\/a\u003E.\u003C\/p\u003E\n\u003Ch4\u003EAttack Scenario\u003C\/h4\u003E\n\u003Cp\u003EThe attack occurs in the following manner:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EA threat actor emails a Microsoft Word document to a targeted user with an embedded OLE2 embedded link object\u003C\/li\u003E\n\u003Cli\u003EWhen the user opens the document, winword.exe issues a HTTP request to a remote server to retrieve a malicious HTA file\u003C\/li\u003E\n\u003Cli\u003EThe file returned by the server is a fake RTF file with an embedded malicious script\u003C\/li\u003E\n\u003Cli\u003EWinword.exe looks up the file handler for application\/hta through a COM object, which causes the Microsoft HTA application (mshta.exe) to load and execute the malicious script\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EIn the two documents that FireEye observed prior to the \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/acknowledgement_ofa.html\u0022\u003Einitial blog\u003C\/a\u003E acknowledging these attacks, malicious scripts terminated the winword.exe processes, downloaded additional payloads, and loaded decoy documents. The original winword.exe process was terminated to conceal a user prompt generated by the OLE2link. Figure 1 shows this prompt.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Fig1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: User prompt hidden by the Visual Basic script\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDocument 1 - (MD5: 5ebfd13250dd0408e3de594e419f9e01)\u003C\/h4\u003E\n\u003Cp\u003EThe first malicious document identified by FireEye had three stages. An embedded OLE2 link object causes winword.exe to reach out to the following URL to download the stage one malicious HTA file:\u003C\/p\u003E\n\u003Cp\u003Ehttp[:]\/\/46.102.152[.]129\/template.doc\u003C\/p\u003E\n\u003Cp\u003EOnce downloaded, the malicious HTA file is processed by the \u201capplication\/hta\u201d handler.\u0026nbsp; The highlighted line in Figure 2 shows the first download occurring, followed by the additional malicious payloads.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Fig2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Live attack scenario\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOnce downloaded, the template file was stored in the user\u2019s temporary internet files with the name template[?].hta, where [?] is determined at run time.\u003C\/p\u003E\n\u003Ch4\u003EThe Logic Bug\u003C\/h4\u003E\n\u003Cp\u003EMshta.exe is responsible for handling the Content-Type \u201capplication\/hta,\u201d parsing the content, and executing the script. Figure 3 shows winword.exe querying registry value of CLSID for the \u201capplication\/hta\u201d handler.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Fig3.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Winword query registry value\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWinword.exe makes a request to the DCOMLaunch service, which in turn causes the svchost.exe process hosting DCOMLaunch to execute mshta.exe. Mshta.exe then executes the script embedded in the malicious HTA document. Figure 4 shows the deobfuscated VBScript from the first stage download.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Fig4.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: First document, stage one VBScript\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe script shown in Figure 4 performs the following malicious actions:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003ETerminates the winword.exe process with taskkill.exe to hide the prompt shown in Figure 1.\u003C\/li\u003E\n\u003Cli\u003EDownloads a VBScript file from http[:]\/\/www.modani[.]com\/media\/wysiwyg\/ww.vbs and saving it to %appdata%\\Microsoft\\Windows\\maintenance.vbs\u003C\/li\u003E\n\u003Cli\u003EDownloads a decoy document from http[:]\/\/www.modani[.]com\/media\/wysiwyg\/questions.doc and saving it to %temp%\\document.doc\u003C\/li\u003E\n\u003Cli\u003ECleans up the Word Resiliency keys for Word versions 15.0 and 16.0 so that Microsoft Word will restart normally\u003C\/li\u003E\n\u003Cli\u003EExecutes the malicious stage two VBScript: %appdata%\\Microsoft\\Windows\\maintenance.vbs\u003C\/li\u003E\n\u003Cli\u003EOpens the decoy document, %temp%\\document.doc, to hide the malicious activity from the user\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EOnce executed, the downloaded stage two VBScript (ww.vbs\/maintenance.vbs) performs the following actions:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EWrites an embedded obfuscated script to %TMP%\/eoobvfwiglhiliqougukgm.js\u003C\/li\u003E\n\u003Cli\u003EExecutes the script\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EThe obfuscated eoobvfwiglhiliqougukgm.js script performs the following actions when executed:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003EAttempts to delete itself from the system\u003C\/li\u003E\n\u003Cli\u003EAttempts to download http[:]\/\/www.modani[.]com\/media\/wysiwyg\/wood.exe (at most 44 times), and save the file to %TMP%\\dcihprianeeyirdeuceulx.exe\u003C\/li\u003E\n\u003Cli\u003EExecutes %TMP%\\dcihprianeeyirdeuceulx.exe\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EFigure 5 shows the process execution chain of events.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Fig5.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Process creation events\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe final payload utilized in this malware is a newer variant of the LATENTBOT malware family. Additional details of the updates to this malware follow the Document 2 walkthrough.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMD5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESize\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EName\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDescription\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5ebfd13250dd0408e3de594e419f9e01\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E37,523\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehire_form.doc\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalicious document\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efb475f0d8c8e9bf1bc360211179d8a28\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E27,429\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etemplate.doc\/template[?].hta\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalicious HTA file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E984658e34e634d56423797858a711846\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5,704\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eww.vbs\/maintenance.vbs\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EStage two VBScript\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E73bf8647920eacc7cc377b3602a7ee7a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E13,386\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Equestions.doc\/document.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDecoy document\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E11fb87888bbb4dcea4891ab856ac1c52\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5,292\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eeoobvfwiglhiliqougukgm.js\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalicious script\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003Ea1faa23a3ef8cef372f5f74aed82d2de\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E388,096\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ewood.exe\/ dcihprianeeyirdeuceulx.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFinal payload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E15e51cdbd938545c9af47806984b1667\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002253\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E414,720\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ewood.exe\/ dcihprianeeyirdeuceulx.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002273\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUpdated final payload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: First document file metadata\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EThe LATENTBOT Payload\u003C\/h4\u003E\n\u003Cp\u003EThe payload associated with the first document is an updated version of the \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2015\/12\/latentbot_trace_me.html\u0022\u003ELATENTBOT malware family\u003C\/a\u003E. LATENTBOT is a highly-obfuscated BOT that has been in the wild since 2013.\u003C\/p\u003E\n\u003Cp\u003EThe newer version of the LATENTBOT has different injection mechanisms for Windows XP (x86) and Windows 7 operating systems:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cb\u003EAttrib.exe patching\u003C\/b\u003E \u2013 The bot calls Attrib.exe, patches the entry in memory, and inserts a JMP instruction to transfer control to the mapped section. To map the section in the address space of atrrib.exe it uses ZwMapViewOfSection().\u003Cb\u003E\u003C\/b\u003E\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003ESvchost code Injection\u003C\/b\u003E \u2013 Attrib.exe starts the svchost.exe process in suspended mode, creates space, and allocates code by calling ZwMapViewOfSection().\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EControl transfer\u003C\/b\u003E \u2013 It then uses SetThreadContext() to modify the OEP of the primary thread, which will be executed in the remote process to trigger code execution.\u003C\/li\u003E\n\u003Cli\u003E\u003Cb\u003EBrowser injection\u003C\/b\u003E \u2013 A similar process is used to inject the final payload into the default web browser with the help of NtMapVIewOfSection().\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIn Windows 7 or later operating systems, the bot does not use attrib.exe. Rather, it injects code into svchost.exe followed by launching the default browser with malicious payload by leveraging NtMapViewOfSection().\u003C\/p\u003E\n\u003Cp\u003EThis variant then connects to the following command and control (C2) server:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Code1.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EUpon successful communication with the C2 server, LATENTBOT generates a beacon. One of the decrypted beacons are as follows with an updated version number of 5015:\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Code2.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003EAt the time of analysis, the C2 server was offline. The bot comes with a highly modular plugin architecture and has been associated with the \u201cPony\u201d campaigns as an infostealer.\u003C\/p\u003E\n\u003Cp\u003EAs of April 10, 2017, the malware hosted at www.modani[.]com\/media\/wysiwyg\/wood.exe has been updated and the C2 server has been moved to: 217.12.203[.]100.\u003C\/p\u003E\n\u003Ch4\u003EDocument 2 - (MD5: C10DABB05A38EDD8A9A0DDDA1C9AF10E)\u003C\/h4\u003E\n\u003Cp\u003EThe second malicious document identified by FireEye consisted of two malicious stages. The initial stage reached out to the following URL to download the stage one malicious HTA file:\u003C\/p\u003E\n\u003Cp\u003Ehttp[:]\/\/95.141.38[.]110\/mo\/dnr\/tmp\/template.doc\u003C\/p\u003E\n\u003Cp\u003EThis file is downloaded into the user\u2019s temporary internet files directory with the name template[?].hta, where [?] is determined at runtime. Once downloaded, winword.exe utilizes mshta.exe to parse the file. mshta.exe parses through file finding \u0026lt;script\u0026gt; \u0026lt;\/script\u0026gt; tags and executes the contained script. Figure 6 shows the deobfuscated script.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/MSFT%200day\/Fig6.png\u0022\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Second document, first stage VBScript\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 6 shows the following malicious actions:\u003C\/p\u003E\n\u003Col\u003E\n\u003Cli\u003ETerminate the winword.exe process with taskkill.exe \u0026nbsp;to hide the prompt shown in Figure 1\u003C\/li\u003E\n\u003Cli\u003EDownload an executable from http[:]\/\/95.141.38[.]110\/mo\/dnr\/copy.jpg, saving it to \u0027%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\winword.exe\u0027\u003C\/li\u003E\n\u003Cli\u003EDownload a document from http[:]\/\/95.141.38[.]110\/mo\/dnr\/docu.doc, saving it to %temp%\\document.doc\u003C\/li\u003E\n\u003Cli\u003EClean up the Word Resiliency keys for Word versions 15.0 and 16.0, so that Microsoft Word will restart normally\u003C\/li\u003E\n\u003Cli\u003EExecute the malicious payload at \u0027%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\winword.exe\u0027\u003C\/li\u003E\n\u003Cli\u003EOpen the decoy document, %temp%\\document.doc, to hide the malicious activity from the user\u003C\/li\u003E\n\u003C\/ol\u003E\n\u003Cp\u003EExamination of the malicious payload revealed that it is a variant of the dropper for what Microsoft calls \u003Ca href=\u0022http:\/\/download.microsoft.com\/download\/E\/B\/0\/EB0F50CC-989C-4B66-B7F6-68CD3DC90DE3\/Microsoft_Security_Intelligence_Report_Volume_21_English.pdf\u0022\u003EWingBird\u003C\/a\u003E, which has similar characteristics as FinFisher. The malware is heavily obfuscated with several anti-analysis measures, including a custom VM to slow analysis. A \u003Ca href=\u0022https:\/\/artemonsecurity.blogspot.com\/2017\/01\/wingbird-rootkit-analysis.html\u0022\u003Eblog post by \u0026quot;Artem\u0026quot;\u003C\/a\u003E covers a payload driver of WingBird. The blog author briefly mentions the protection techniques of the dropper, which match this sample.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMD5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESize\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022117\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EName\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDescription\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec10dabb05a38edd8a9a0ddda1c9af10e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E70,269\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022117\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0421\u041f\u0423\u0422\u041d\u0418\u041a \u0420\u0410\u0417\u0412\u0415\u0414\u0427\u0418\u041a\u0410.doc\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalicious document\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E9dec125f006f787a3f8ad464d480eed1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E27,500\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022117\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Etemplate.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMalicious HTA file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eacde6fb59ed431000107c8e8ca1b7266\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1,312,768\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022117\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecopy.jpg\/winword.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFinal payload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022187\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee01982913fbc22188b83f5f9fadc1c17\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002257\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6,220,783\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022117\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edocu.doc\/document.doc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002282\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDecoy document\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Second document metadata\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EFireEye observed CVE-2017-0199, a vulnerability in Microsoft Word that allows an attacker to execute a malicious Visual Basic script. The CVE-2017-0199 vulnerability is a logic bug and bypasses most mitigations. Upon execution of the malicious script, it downloads and executes malicious payloads, as well as displays decoy documents to the user. The two documents achieve execution of their malicious payloads, with one containing LATENTBOT and the other containing WingBird\/FinFisher. The malicious document contained only a link to the attacker controlled server, showing the advantage of FireEye\u2019s MVX engine to detect multi-stage attacks. Further campaigns leveraging this attack have been observed prior to patch availability, but are not covered in this blog.\u003C\/p\u003E\n\u003Cp\u003EWe recommend that Microsoft Office users apply the \u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2017-0199\u0022\u003Epatch\u003C\/a\u003E as soon as possible.\u003C\/p\u003E\n\u003Ch4\u003EAcknowledgement\u003C\/h4\u003E\n\u003Cp\u003EThank you to Michael Matonis, Dhanesh Kizhakkinan, Yogesh Londhe, Swapnil Patil, Joshua Triplett, and Tyler Dean from FLARE Team, FireEye Labs Team, and FireEye iSIGHT Intelligence for their contributions to this blog. Thank you as well to everyone who worked with us at the Microsoft Security Response Center (MSRC).\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Apr 11 2017 13:44:34 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "lynda.hall@fireeye.com",
      "jcr:lastModified": "Tue Apr 25 2017 16:09:13 GMT-0400",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye recently detected malicious Microsoft Office RTF documents that leverage CVE-2017-0199, a previously undisclosed vulnerability.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Apr 11 2017 12:47:38 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
