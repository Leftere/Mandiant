{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Sep 06 2018 11:13:20 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Fallout Exploit Kit Used in Malvertising Campaign to Deliver GandCrab Ransomware",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "81bd97b1-97ac-4893-b2a2-98ad2cb6aa78",
    "author": "Manish Sardiwal",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "be328fc7-db2b-4559-926b-d1f20b17fc73"
    ],
    "jcr:created": "Thu Sep 06 2018 11:32:23 GMT-0400",
    "cq:lastReplicated": "Thu Sep 06 2018 11:32:22 GMT-0400",
    "cq:lastModified": "Thu Sep 06 2018 11:32:15 GMT-0400",
    "jcr:baseVersion": "be328fc7-db2b-4559-926b-d1f20b17fc73",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:manish-sardiwal",
      "fireeye-blog-authors:muhammad-umair",
      "fireeye-blog-authors:zain-gardezi",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:exploit-kits",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:ransomware"
    ],
    "jcr:uuid": "e5ff32c5-4b60-4ff2-8dcc-7c88f68811fc",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Sep 06 2018 11:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003ETowards the end of August 2018, FireEye identified a new exploit kit (EK) that was being served up as part of a malvertising campaign affecting users in Japan, Korea, the Middle East, Southern Europe, and other countries in the Asia Pacific region.\u003C\/p\u003E\n\u003Cp\u003EThe first instance of the campaign was observed on Aug. 24, 2018, on the domain finalcountdown[.]gq. Tokyo-based researchers \u201cnao_sec\u201d identified an instance of this campaign on Aug. 29, and in their own blog post they refer to the exploit kit as \u003Ca href=\u0022https:\/\/www.nao-sec.org\/2018\/09\/hello-fallout-exploit-kit.html\u0022\u003EFallout Exploit Kit\u003C\/a\u003E. As part of our research, we observed additional domains, regions, and payloads associated with the campaign. Other than SmokeLoader being distributed in Japan, which is mentioned in the nao_sec blog post, we observed GandCrab ransomware being distributed in the Middle East, which we will be focusing on in this blog post.\u003C\/p\u003E\n\u003Cp\u003EFallout EK fingerprints the user browser profile and delivers malicious content if the user profile matches a target of interest. If successfully matched, the user is redirected from a genuine advertiser page, via multiple 302 redirects, to the exploit kit landing page URL. The complete chain from legit domain, \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/03\/still_getting_served.html\u0022\u003Ecushion domains\u003C\/a\u003E, and then to the exploit kit landing page is shown in Figure 1.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Malvertisement redirection to Fallout Exploit Kit landing page\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe main ad page prefetches cushion domain links while loading the ad and uses the \u0026lt;noscript\u0026gt; tag to load separate links in cases where JavaScript is disabled in a browser (Figure 2).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Content in the first ad page\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn regions not mentioned earlier in this blog post, the \u2018link rel=\u0026quot;dns-prefetch\u0026quot; href\u201d\u2019 tag has a different value and the ad does not lead to the exploit kit. The complete chain of redirection via 302 hops is shown in Figure 3, 4 and 5\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: 302 redirect to exploit kit controlled cushion servers\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Another redirection before exploit kit landing page\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Last redirect before user reaches exploit kit landing page\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EURIs for the landing page keep changing and are too generic for a pattern, making it harder for IDS solutions that rely on detections based on particular patterns.\u003C\/p\u003E\n\u003Cp\u003EDepending on browser\/OS profiles and the location of the user, the malvertisement either delivers the exploit kit or tries to reroute the user to other social engineering campaigns. For example, in the U.S. on a fully patched macOS system, malvertising redirects users to social engineering attempts similar to those shown in Figure 6 and Figure 7.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Fake AV prompt for Mac users\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Fake Flash download prompt\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe strategy is consistent with the rise of social engineering attempts FireEye has been observing for some time, where bad actors use them to target users that are on fully patched systems or any OS\/software profile that is not ideal for any exploit attempts due to software vulnerability. The malvertisement redirect involved in the campaign has been abused heavily in many social engineering campaigns in North America as well.\u003C\/p\u003E\n\u003Cp\u003EFireEye Dynamic Threat Intelligence (DTI) shows that this campaign has triggered alerts from customers in the government, telecom and healthcare sectors.\u003C\/p\u003E\n\u003Ch4\u003ELanding Page\u003C\/h4\u003E\n\u003Cp\u003EInitially, the landing page only contained code for a VBScript vulnerability (\u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2018-8174\u0022\u003ECVE-2018-8174\u003C\/a\u003E). However, Flash embedding code was later added for more reliable execution of the payload.\u003C\/p\u003E\n\u003Cp\u003EThe landing page keeps the VBScript code as Base64 encoded text in the \u2018\u0026lt;span\u0026gt;\u2019 tag. It loads a JScript function when the page loads, which decodes the next stage VBScript code and executes it using the VBScript ExecuteGlobal function (Figure 8).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Snippet of landing page\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 9 shows the JScript function that decodes the malicious VBScript code.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Base64 decode function\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFlash embedding code is inside the \u2018noscript\u2019 tag and loads only when scripts are disabled (Figure 10).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Flash embedding code\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe decoded VBScript code exploits the \u003Ca href=\u0022https:\/\/portal.msrc.microsoft.com\/en-US\/security-guidance\/advisory\/CVE-2018-8174\u0022\u003ECVE-2018-8174 vulnerability\u003C\/a\u003E and executes shellcode (Figure 11).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Decoded VBScript\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;The shellcode downloads a XOR\u2019d payload at %temp% location, decrypts it, and executes it (Figure 12).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture12.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: XOR binary transfer that decrypts to 4072690b935cdbfd5c457f26f028a49c\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPayload Analysis (4072690b935cdbfd5c457f26f028a49c)\u003C\/h4\u003E\n\u003Cp\u003EThe malware contains PE loader code that is used for initial loading and final payload execution (Figure 13).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture13.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: Imports resolver from the PE loader\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe unpacked DLL 83439fb10d4f9e18ea7d1ebb4009bdf7 starts by initializing a structure of function pointers to the malware\u0026#39;s core functionality (Figure 14).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture14.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Core structure populated with function pointers\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIt then enumerates all running processes, creates their crc32 checksums, and tries to match them against a list of blacklisted checksums. The list of checksums and their corresponding process names are listed in Table 1.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECRC32 Checksum\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EProcess Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E99DD4432h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evmwareuser.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2D859DB4h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evmwareservice.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E64340DCEh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evboxservice.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E63C54474h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evboxtray.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E349C9C8Bh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESandboxiedcomlaunch.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5BA9B1FEh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eprocmon.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3CE2BEF3h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eregmon.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3D46F02Bh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efilemon.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E77AE10F7h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ewireshark.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0F344E95Dh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Enetmon.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E278CDF58h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Evmtoolsd.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Blacklisted checksums\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIf any process checksums match, the malware goes into an infinite loop, effectively becoming benign from this point onward (Figure 15).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture15.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: Blacklisted CRC32 check\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIf this check passes, a new thread is started in which the malware first acquires \u0026quot;SeShutdownPrivilege\u0026quot; and checks its own image path, OS version, and architecture (x86\/x64). For OS version 6.3 (Windows 8.1\/Windows Server 2012), the following steps are taken:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EAcquire \u0026quot;SeTakeOwnershipPrivilege\u0026quot;, and take ownership of \u0026quot;C:\\Windows\\System32\\ctfmon.exe\u0026quot;\u003C\/li\u003E\n\u003Cli\u003EIf running under WoW64, disable WoW64 redirection via Wow64DisableWow64FsRedirection to be able to replace 64-bit binary\u003C\/li\u003E\n\u003Cli\u003EReplace \u0026quot;C:\\Windows\\System32\\ctfmon.exe\u0026quot; with a copy of itself\u003C\/li\u003E\n\u003Cli\u003ECheck whether \u0026quot;ctfmon.exe\u0026quot; is already running. If not, add itself to startup through the registry key \u0026quot;\\Registry\\Machine\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\u0026quot;\u003C\/li\u003E\n\u003Cli\u003ECall ExitWindowsEx to reboot the system\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIn other OS versions, the following steps are taken:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EAcquire \u0026quot;SeTakeOwnershipPrivilege\u0026quot;, and take ownership of \u0026quot;C:\\Windows\\System32\\rundll32.exe\u0026quot;\u003C\/li\u003E\n\u003Cli\u003EIf running under WoW64, disable WoW64 redirection via Wow64DisableWow64FsRedirection to be able to replace 64-bit binary\u003C\/li\u003E\n\u003Cli\u003EReplace \u0026quot;C:\\Windows\\System32\\rundll32.exe\u0026quot; with a copy of itself\u003C\/li\u003E\n\u003Cli\u003EAdd itself to startup through the registry key \u0026quot;\\Registry\\Machine\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\u0026quot;\u003C\/li\u003E\n\u003Cli\u003ECall ExitWindowsEx to reboot the system\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIn either case, if the malware fails to replace system files successfully, it will copy itself at the locations listed in Table 2, and executes via ShellExecuteW.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDump Path\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDump Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E%APPDATA%\\Microsoft\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E{random alphabets}.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E{random alphabets}.pif\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Alternate dump paths\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EOn execution the malware checks if it is running as ctfmon.exe\/rundll32 or as an executable in Table 2. If this check passes, the downloader branch starts executing (Figure 16).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture16.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 16: Downloader code execution after image path checks\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EA mutex \u0026quot;Alphabeam ldr\u0026quot; is created to prevent multiple executions. Here payload URL decoding happens. Encoded data is copied to a blob via mov operations (Figure 17).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture17.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 17: Encoded URL being copied\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EA 32-byte multi-XOR key is set up with the algorithm shown in Figure 18.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture18.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 18: XOR key generation\u003C\/span\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EXOR Key\u003C\/b\u003E (83439fb10d4f9e18ea7d1ebb4009bdf7)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E{ 0x25, 0x24, 0x60, 0x67, 0x00, 0x20, 0x23, 0x65, 0x6c, 0x00, 0x2f, 0x2e, 0x6e, 0x69, 0x00, 0x2a, 0x35, 0x73, 0x76, 0x00, 0x31, 0x30, 0x74, 0x73, 0x00, 0x3c, 0x3f, 0x79, 0x78, 0x00, 0x3b, 0x3a }\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EFinally, the actual decoding is done using PXOR with XMM registers (Figure 19).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture19.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 19: Payload URL XOR decoding\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThis leads the way for the downloader switch loop to execute (Figure 20).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture20.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 20: Response\/Download handler\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ETable 3 shows a breakdown of HTTP requests, their expected responses (where body = HTTP response body), and corresponding actions.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022624\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ERequest #\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ERequest URL\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E(Expected Response) body+0x0\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003Ebody+0x4\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003Ebody+0x7\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EAction\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/91[.]210.104.247\/update.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x666555\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eurl for request #2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload payload via request #2, verify MZ and PE header, execute via CreateProcessW\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/91[.]210.104.247\/update.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x666555\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESupposed to be executing already downloaded payload via CreateProcess. However, the functionality has been shortcircuited; instead, it does nothing and continues loop after sleep\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/91[.]210.104.247\/update.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x666555\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eurl for request #2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload payload via request #2, verify MZ and PE header, load it manually in native process space using its PE loader module\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/91[.]210.104.247\/update.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x666555\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESupposed to be executing already downloaded payload via its PE loader. However, the functionality has been shortcircuited; instead, it does nothing and continues loop after sleep\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/91[.]210.104.247\/update.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x666555\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eurl for request #3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPerform request #3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/91[.]210.104.247\/update.bin\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESleep for 10 minutes and continue from request #1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efrom response #1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPE payload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExecute via CreateProcessW or internal PE loader, depending on previous response\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efrom response #1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022104\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002294\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EN\/A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022114\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENo action taken. Sleep for 10 minutes and start with request #1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: HTTP requests, responses, and actions\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe request sequence leads to \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2018\/04\/cryptocurrencies-cyber-crime-blockchain-infrastructure-use.html\u0022\u003EGandCrab ransomware\u003C\/a\u003E being fetched and manually loaded into memory by the malware. Figure 21 and Figure 22 show sample request #1 and request #2 respectively, leading to the download and execution of GandCrab (\u003Ca href=\u0022https:\/\/www.virustotal.com\/#\/file\/0d6ddcaeed4039b20a916532a328ef2689266649013a73bc2e3c363b0e030167\/detection\u0022\u003E8dbaf2fda5d19bab0d7c1866e0664035\u003C\/a\u003E).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture21.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 21: Request #1 fetching initial command sequence from payload URL\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FalloutEK\/Picture22.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 22: Request #2 downloads GandCrab ransomware that gets manually loaded into memory\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EIn recent years, arrests and distruptions of underground operations have led to exploit kit activity declining heavily. Still, exploit kits pose a significant threat to users who are not running fully patched systems. Nowadays we see more exploit kit activity in the Asia Pacific region, where users tend to have more vulnerable software. Meanwhile, in North America, the focus tends to be on more straightforward social engineering campaigns.\u003C\/p\u003E\n\u003Cp\u003EFireEye \u003Ca href=\u0022https:\/\/www.fireeye.com\/solutions\/nx-network-security-products.html\u0022\u003ENetwork Security\u003C\/a\u003E detects all exploits, social engineering campaigns, malware, and command and control communication mentioned in this post. MVX technology used in multiple FireEye products detects the first stage and second stage malware described in this post.\u003C\/p\u003E\n\u003Ch4\u003EIndicators of Compromise\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDomain \/ IP \/ Address \/ Filename\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5 Hash Or Description\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efinalcountdown.gq, naosecgomosec.gq,\u003C\/p\u003E\n\u003Cp\u003Eladcbteihg.gq, dontneedcoffee.gq\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExploit kit domains\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E78.46.142.44, 185.243.112.198\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EExploit kit IPs\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E47B5.tmp\u003Cb\u003E\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4072690b935cdbfd5c457f26f028a49c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp:\/\/\u003Cb\u003E46.101.205.251\/wt\/ww.php\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003Ehxxp:\/\/107.170.215.53\/workt\/trkmix.php?device=desktop\u0026amp;country=AT\u0026amp;connection.type=BROADBAND\u0026amp;clickid=58736927880257537\u0026amp;countryname=\u003Cbr\u003E\nAustria\u0026amp;browser=ie\u0026amp;browserversion=11\u0026amp;carrier=%3F\u0026amp;cost=0.0004922\u0026amp;isp=BAXALTA+INCORPORATED+ASN\u0026amp;os=windows\u0026amp;osversion=6.1\u0026amp;useragent=\u003Cbr\u003E\nMozilla%2F5.0+%28Windows+NT+6.1%3B+WOW64%3B+Trident%2F7.0%3B+rv%3A11.0%29+like+Gecko\u0026amp;campaignid=1326906\u0026amp;language=de\u0026amp;zoneid=1628971\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERedirect URL examples used between malvertisement and exploit kit controlled domains\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E91.210.104[.]247\/update.bin\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESecond stage payload download URL\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003E91.210.104[.]247\/not_a_virus.dll\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E8dbaf2fda5d19bab0d7c1866e0664035\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003Cp\u003ESecond stage payload (GandCrab ransomware)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Ch4\u003EAcknowledgements\u003C\/h4\u003E\n\u003Cp\u003EWe would like to thank Hassan Faizan for his contributions to this blog post.\u003C\/p\u003E\n",
        "jcr:lastModified": "Thu Sep 06 2018 11:17:00 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EFireEye identified a new exploit kit that was being served up as part of a malvertising campaign affecting users in Japan, Korea, the Middle East, Southern Europe, and other countries in the Asia Pacific region.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Sep 05 2018 21:08:26 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Sep 06 2018 11:32:15 GMT-0400",
      "imageRotate": "0"
    }
  }
}
