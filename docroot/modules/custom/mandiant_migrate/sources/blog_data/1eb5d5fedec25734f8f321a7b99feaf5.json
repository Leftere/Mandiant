{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Wed May 04 2016 09:04:18 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "Operation RussianDoll: Adobe \u0026 Windows Zero-Day Exploits Likely Leveraged by Russia\u2019s APT28 in Highly-Targeted Attack",
    "jcr:versionHistory": "4dbe62c5-8b2c-4ae4-9c97-4abdaf131771",
    "author": "Fireeye Labs",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "focusKeyword": "Zero day",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "15332024-3844-4c98-92e2-51b3ed481df9"
    ],
    "jcr:created": "Fri Jul 24 2020 06:59:06 GMT+0000",
    "cq:lastModified": "Fri Jul 24 2020 06:58:43 GMT+0000",
    "jcr:baseVersion": "15332024-3844-4c98-92e2-51b3ed481df9",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-fireeye-labs",
      "fireeye-blog-threat-research:threat-research"
    ],
    "jcr:uuid": "eeb7a34b-5ff6-4f25-85f7-f83e2744e055",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Sat Apr 18 2015 09:10:00 GMT-0700",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "reference-adjustment-service",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "jonathan.falgate@fireeye.com",
        "text": "\u003Cp\u003EFireEye Labs recently detected a limited APT campaign exploiting zero-day vulnerabilities in Adobe Flash and a brand-new one in Microsoft Windows. Using the \u003Ca href=\u0022\/content\/fireeye-www\/en_US\/mandiant\/threat-intelligence.html\u0022 target=\u0022_self\u0022\u003EDynamic Threat Intelligence Cloud (DTI)\u003C\/a\u003E, FireEye researchers detected a pattern of attacks beginning on April 13\u003Csup\u003Eth\u003Ca href=\u0022\/content\/fireeye-www\/en_US\/mandiant\/threat-intelligence.html\u0022\u003E\u003C\/a\u003E\u003C\/sup\u003E, 2015. Adobe independently patched the vulnerability (CVE-2015-3043) in \u003Ca href=\u0022https:\/\/helpx.adobe.com\/security\/products\/flash-player\/apsb15-06.html\u0022\u003EAPSB15-06\u003C\/a\u003E. Through correlation of technical indicators and command and control infrastructure, FireEye assess that APT28 is probably responsible for this activity.\u003C\/p\u003E\r\n\u003Cp\u003EMicrosoft is aware of the outstanding local privilege escalation vulnerability in Windows (CVE-2015-1701). While there is not yet a patch available for the Windows vulnerability, updating Adobe Flash to the latest version will render this in-the-wild exploit innocuous. We have only seen CVE-2015-1701 in use in conjunction with the Adobe Flash exploit for CVE-2015-3043. The Microsoft Security Team is working on a fix for CVE-2015-1701.\u003C\/p\u003E\r\n\u003Ch2\u003EExploit Overview\u003C\/h2\u003E\r\n\u003Cp\u003EThe high level flow of the exploit is as follows:\u003C\/p\u003E\r\n\u003Cp\u003E1.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; User clicks link to attacker controlled website\u003Cbr\u003E\r\n2.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; HTML\/JS launcher page serves Flash exploit\u003Cbr\u003E\r\n3.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Flash exploit triggers CVE-2015-3043, executes shellcode\u003Cbr\u003E\r\n4.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Shellcode downloads and runs executable payload\u003Cbr\u003E\r\n5.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Executable payload exploits local privilege escalation (CVE-2015-1701) to steal System token\u003C\/p\u003E\r\n\u003Cp\u003EThe Flash exploit is served from unobfuscated HTML\/JS. The launcher page picks one of two Flash files to deliver depending upon the target\u2019s platform (Windows 32 versus 64bits).\u003C\/p\u003E\r\n\u003Cp\u003EThe Flash exploit is mostly unobfuscated with only some light variable name mangling. The attackers relied heavily on the CVE-2014-0515 Metasploit module, which is well documented. It is ROPless, and instead constructs a fake vtable for a FileReference object that is modified for each call to a Windows API.\u003C\/p\u003E\r\n\u003Cp\u003EThe payload exploits a local privilege escalation vulnerability in the Windows kernel if it detects that it is running with limited privileges. It uses the vulnerability to run code from userspace in the context of the kernel, which modifies the attacker\u2019s process token to have the same privileges as that of the System process.\u003C\/p\u003E\r\n\u003Ch2\u003ECVE-2015-3043 Exploit\u003C\/h2\u003E\r\n\u003Cp\u003EThe primary difference between the CVE-2014-0515 metasploit module and this exploit is, obviously, the vulnerability. CVE-2014-0515 exploits a vulnerability in Flash\u2019s Shader processing, whereas CVE-2015-3043 exploits a vulnerability in Flash\u2019s FLV processing. The culprit FLV file is embedded within AS3 in two chunks, and is reassembled at runtime.\u003C\/p\u003E\r\n\u003Ch3\u003EVulnerability\u003C\/h3\u003E\r\n\u003Cp\u003EA buffer overflow vulnerability exists in Adobe Flash Player (\u0026lt;=17.0.0.134) when parsing malformed FLV objects. Attackers exploiting the vulnerability can corrupt memory and gain remote code execution.\u003C\/p\u003E\r\n\u003Cp\u003EIn the exploit, the attacker embeds the FLV object directly in the ActionScript code, and plays the video using NetStream class. In memory, it looks like the following:\u003C\/p\u003E\r\n\u003Cp\u003E0000000: 46 4c 56 01 05 00 00 00 09 00 00 00 00 12 00 00\u0026nbsp; FLV.............\u003Cbr\u003E\r\n0000010: f4 00 00 00 00 00 00 00 02 00 0a 6f 6e 4d 65 74\u0026nbsp; ...........onMet\u003Cbr\u003E\r\n0000020: 61 44 61 74 61 08 00 00 00 0b 00 08 64 75 72 61\u0026nbsp; aData.......dura\u003Cbr\u003E\r\n0000030: 74 69 6f 6e 00 40 47 ca 3d 70 a3 d7 0a 00 05 77\u0026nbsp; tion.@G.=p.....w\u003Cbr\u003E\r\n0000040: 69 64 74 68 00 40 74 00 00 00 00 00 00 00 06 68\u0026nbsp; idth.@t........h\u003Cbr\u003E\r\n0000050: 65 69 67 68 74 00 40 6e 00 00 00 00 00 00 00 0d\u0026nbsp; eight.@n........\u003Cbr\u003E\r\n0000060: 76 69 64 65 6f 64 61 74 61 72 61 74 65 00 00 00\u0026nbsp; videodatarate...\u003Cbr\u003E\r\n\u2026..\u003Cbr\u003E\r\n0003b20: 27 6e ee 72 87 1b 47 f7 41 a0 00 00 00 3a 1b 08\u0026nbsp; \u0027n.r..G.A....:..\u003Cbr\u003E\r\n0003b30: 00 04 41 00 00 0f 00 00 00 00 68 ee ee ee ee ee\u0026nbsp; ..A.......h.....\u003Cbr\u003E\r\n0003b40: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee\u0026nbsp; ................\u003Cbr\u003E\r\n0003b50: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee\u0026nbsp; ................\u003Cbr\u003E\r\n0003b60: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee\u0026nbsp; ................\u003Cbr\u003E\r\n\u003C\/p\u003E\r\n\u003Cp\u003EFiles of the FLV file format contain a sequence of Tag structures. In Flash, these objects are created when parsing FLV Tags:\u003C\/p\u003E\r\n\u003Cp\u003E.text:1018ACE9 sub_1018ACE9\u0026nbsp;\u0026nbsp;\u0026nbsp; proc near\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ; CODE XREF: sub_1018BBAC+2Bp\u003Cbr\u003E\r\n.text:1018ACE9\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ; sub_10192797+1A1p ...\u003Cbr\u003E\r\n.text:1018ACE9\u003Cbr\u003E\r\n.text:1018ACE9 arg_0\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; = dword ptr\u0026nbsp; 4\u003Cbr\u003E\r\n.text:1018ACE9\u003Cbr\u003E\r\n.text:1018ACE9\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;\u0026nbsp;mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, ecx\u003Cbr\u003E\r\n.text:1018ACEB\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx, [esp+arg_0]\u003Cbr\u003E\r\n.text:1018ACEF\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [eax], offset off_10BA771C\u003Cbr\u003E\r\n.text:1018ACF5\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [eax+24h], 1\u003Cbr\u003E\r\n.text:1018ACFC\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; and\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; dword ptr [eax+14h], 0\u003Cbr\u003E\r\n.text:1018AD00\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [eax+28h], ecx\u003Cbr\u003E\r\n.text:1018AD03\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; byte ptr [eax+20h], 0\u003Cbr\u003E\r\n.text:1018AD07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; retn\u0026nbsp;\u0026nbsp;\u0026nbsp; 4\u003Cbr\u003E\r\n.text:1018AD07 sub_1018ACE9\u0026nbsp;\u0026nbsp;\u0026nbsp; endp\u003Cbr\u003E\r\n\u003C\/p\u003E\r\n\u003Cp\u003EIn the case of this exploit, a Tag structure begins at offset 0x3b2f into the FLV stream that, when parsed, populates the Tag structure as follows:\u003C\/p\u003E\r\n\u003Cp\u003ETag 2:\u003Cbr\u003E\r\nUINT_8 type: 8\u003Cbr\u003E\r\nUINT_24 datasize: 1089\u003Cbr\u003E\r\nUINT_24 timestamp: 15\u003Cbr\u003E\r\nUINT_8 timestamphi: 0\u003Cbr\u003E\r\nUINT_24 streamid: 0\u003Cbr\u003E\r\nUINT_4 fmt: 6\u003Cbr\u003E\r\nUINT_2 sr: 2\u003Cbr\u003E\r\nUINT_1 bits: 0\u003Cbr\u003E\r\nUINT_1 channels: 0\u003Cbr\u003E\r\nUBYTE data[1088]: \\xee\\xee\\xee\\xee\u2026\u003Cbr\u003E\r\nUINT_32 lastsize: 0xeeeeeeee\u003Cbr\u003E\r\n\u003C\/p\u003E\r\n\u003Cp\u003EBeginning within the data field, all contents of the FLV stream become 0xEE. Consequently, the data and lastsize fields are mangled, and one final tag technically exists consisting exclusively of 0xEE:\u003C\/p\u003E\r\n\u003Cp\u003ETag 3:\u003Cbr\u003E\r\nUINT_8 type: 0xEE\u003Cbr\u003E\r\nUINT_24 datasize: 0xEEEEEE\u003Cbr\u003E\r\n\u2026\u003Cbr\u003E\r\n\u003C\/p\u003E\r\n\u003Cp\u003EOne can see the datasize field of Tag2 populated from the attacker\u0027s FLV stream below:\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cbr\u003E\r\n.text:10192943\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, [ebx+24h]\u003Cbr\u003E\r\n.text:10192946\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [esi+14h], eax\u003Cbr\u003E\r\n.text:10192949\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; movzx\u0026nbsp;\u0026nbsp; eax, byte ptr [ebx+19h] ; 00\u003Cbr\u003E\r\n.text:1019294D\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; movzx\u0026nbsp;\u0026nbsp; ecx, byte ptr [ebx+1Ah] ; 04\u003Cbr\u003E\r\n.text:10192951\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; shl\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 8\u003Cbr\u003E\r\n.text:10192954\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; or\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, ecx\u003Cbr\u003E\r\n.text:10192956\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; movzx\u0026nbsp;\u0026nbsp; ecx, byte ptr [ebx+1Bh] ; 41\u003Cbr\u003E\r\n.text:1019295A\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; shl\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, 8\u003Cbr\u003E\r\n.text:1019295D\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; or\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; eax, ecx\u003Cbr\u003E\r\n.text:1019295F\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx, ebx\u003Cbr\u003E\r\n.text:10192961\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [esi+0Ch], eax\u0026nbsp; ; 0x441\u003Cbr\u003E\r\n.text:10192964\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; call\u0026nbsp;\u0026nbsp;\u0026nbsp; sub_1002E2B3\u003Cbr\u003E\r\n\u003C\/p\u003E\r\n\u003Cp\u003EThe buffer is allocated with fixed size 0x2000:\u003C\/p\u003E\r\n\u003Cp\u003E.text:101A647E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp;\u0026nbsp; 2000h\u003Cbr\u003E\r\n.text:101A6483\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp;ecx, esi\u003Cbr\u003E\r\n.text:101A6485\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; call\u0026nbsp;\u0026nbsp;\u0026nbsp; sub_101A6257\u0026nbsp;\u0026nbsp;\u0026nbsp; ; alloc 0x2000 buffer, store in esi+0xDC\u003Cbr\u003E\r\n\u2026\u2026\u003Cbr\u003E\r\n.text:101A627F\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp;\u0026nbsp; 0\u003Cbr\u003E\r\n.text:101A6281\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; push\u0026nbsp;\u0026nbsp;\u0026nbsp; edi\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ; 0x2000\u003Cbr\u003E\r\n.text:101A6282\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; call\u0026nbsp;\u0026nbsp;\u0026nbsp; sub_105EBEB0\u003Cbr\u003E\r\n.text:101A6287\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; pop\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx\u003Cbr\u003E\r\n.text:101A6288\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; pop\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ecx\u003Cbr\u003E\r\n.text:101A6289\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mov\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [esi+0DCh], eax\u003C\/p\u003E\r\n\u003Cp\u003ESince the size is controlled by the attacker, it\u2019s possible to overflow the fixed size buffer with certain data.\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Probable%20APT28\/figure-1.png\u0022\u003E\u003C\/p\u003E\r\n\u003Cp\u003EA datasize of 0x441 results in a value here of 0x1100 passed to sub_100F88F8, which memcopies 0x2200 bytes in 0x11 chunks of 0x200. The last memcpy overflows the fixed size 0x2000 buffer into a adjacent heap memory.\u003C\/p\u003E\r\n\u003Cp\u003EAttackers spray the heap with array of Vector, 0x7fe * 4 + 8 == 0x2000, and create holes of such size, which will be allocated by the said object.\u003C\/p\u003E\r\n\u003Cp\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; while (_local_2 \u0026lt; this._bp35) \/\/ _bp35 == 0x2000\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; {\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; this._ok47[_local_2] = new Vector.\u0026lt;uint\u0026gt;(this._lb60); \/\/ _lb60 == 0x07FE\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; _local_3 = 0x00;\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; while (_local_3 \u0026lt; this._lb60)\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; {\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; this._ok47[_local_2][_local_3] = 0x41414141;\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; _local_3++;\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; };\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; _local_2 = (_local_2 + 0x01);\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; };\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; _local_2 = 0x00;\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; while (_local_2 \u0026lt; this._bp35)\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; {\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; this._ok47[_local_2] = null;\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; _local_2 = (_local_2 + 0x02);\u003Cbr\u003E\r\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; };\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Probable%20APT28\/figure-2.JPG\u0022\u003E\u003C\/p\u003E\r\n\u003Cp\u003EAs the previous picture demonstrated, the followed Vector object\u2019s length field being overflowed as 0x80007fff, which enables the attacker to read\/write arbitrary data within user space.\u003C\/p\u003E\r\n\u003Ch2\u003EShellcode\u003C\/h2\u003E\r\n\u003Cp\u003EShellcode is passed to the exploit from HTML in flashvars. The shellcode downloads the next stage payload, which is an executable passed in plaintext, to the temp directory with UrlDownloadToFileA, which it then runs with WinExec.\u003C\/p\u003E\r\n\u003Ch2\u003EPayload \u0026amp; C2\u003C\/h2\u003E\r\n\u003Cp\u003EThis exploit delivers a malware variant that shares characteristics with the APT28 backdoors CHOPSTICK and CORESHELL malware families, both described in our APT28 \u003Ca href=\u0022https:\/\/www2.fireeye.com\/apt28.html\u0022\u003Ewhitepaper\u003C\/a\u003E.\u0026nbsp; The malware uses an RC4 encryption key that was previously used by the CHOPSTICK backdoor.\u0026nbsp; And the C2 messages include a checksum algorithm that resembles those used in CHOPSTICK backdoor communications.\u0026nbsp; In addition, the network beacon traffic for the new malware resembles those used by the CORESHELL backdoor.\u0026nbsp; Like CORESHELL, one of the beacons includes a process listing from the victim host.\u0026nbsp; And like CORESHELL, the new malware attempts to download a second-stage executable.\u003C\/p\u003E\r\n\u003Cp\u003EOne of the C2 locations for the new payload, \u003Cspan style=\u0022font-family: Courier New;\u0022\u003E87.236.215[.]246\u003C\/span\u003E, also hosts a suspected APT28 domain \u003Cspan style=\u0022font-family: Courier New;\u0022\u003Essl-icloud[.]com\u003C\/span\u003E.\u0026nbsp; The same subnet (\u003Cspan style=\u0022font-family: Courier New;\u0022\u003E87.236.215.0\/24\u003C\/span\u003E) also hosts several known or suspected APT28 domains, as seen in Table 1.\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Probable%20APT28\/table.PNG\u0022\u003E\u003C\/p\u003E\r\n\u003Cp\u003EThe target firm is an international government entity in an industry vertical that aligns with known APT28 targeting.\u003C\/p\u003E\r\n\u003Ch2\u003ECVE-2015-1701 Exploit\u003C\/h2\u003E\r\n\u003Cp\u003EThe payload contains an exploit for the unpatched local privilege escalation vulnerability CVE-2015-1701 in Microsoft Windows. The exploit uses CVE-2015-1701 to execute a callback in userspace. The callback gets the EPROCESS structures of the current process and the System process, and copies data from the System token into the token of the current process. Upon completion, the payload continues execution in usermode with the privileges of the System process.\u003C\/p\u003E\r\n\u003Cp\u003EBecause CVE-2015-3043 is already patched, this remote exploit will not succeed on a fully patched system. If an attacker wanted to exploit CVE-2015-1701, they would first have to be executing code on the victim\u2019s machine. Barring authorized access to the victim\u2019s machine, the attacker would have to find some other means, such as crafting a new Flash exploit, to deliver a CVE-2015-1701 payload.\u003C\/p\u003E\r\n\u003Cp\u003EMicrosoft is aware of CVE-2015-1701 and is working on a fix. CVE-2015-1701 does not affect Windows 8 and later.\u003C\/p\u003E\r\n\u003Ch1\u003EAcknowledgements\u003C\/h1\u003E\r\n\u003Cp\u003EThank you to all of the contributors to this blog!\u003C\/p\u003E\r\n\u003Cul class=\u0022list-bullet\u0022\u003E\r\n\u003Cli\u003EThe following people in FireEye: Dan Caselden, Yasir Khalid, James \u201cTom\u201d Bennett, GenWei Jiang, Corbin Souffrant, Joshua Homan, Jonathan Wrolstad, Chris Phillips, Darien Kindlund\u003C\/li\u003E\r\n\u003Cli\u003EMicrosoft \u0026amp; Adobe security teams\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\r\n",
        "jcr:lastModified": "Mon Sep 02 2019 13:18:00 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext",
        "textIsRich": "true"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    }
  }
}
