{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Oct 05 2017 10:43:31 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "Significant FormBook Distribution Campaigns Impacting the U.S. and South Korea",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "79094db5-9c19-4abc-bfa2-f09dfe236ff8",
    "author": "Nart Villeneuve",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "7c8d220b-c9b0-4cf8-adec-b774e990c31e"
    ],
    "jcr:created": "Wed May 08 2019 18:39:25 GMT-0400",
    "cq:lastReplicated": "Wed May 08 2019 18:39:25 GMT-0400",
    "cq:lastModified": "Wed May 08 2019 18:39:17 GMT-0400",
    "cq:distribute": true,
    "jcr:baseVersion": "7c8d220b-c9b0-4cf8-adec-b774e990c31e",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:cap-narottama-villeneuve",
      "fireeye-blog-authors:randi-eitzman",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-doctypes:blog",
      "fireeye-blog-authors:sandor-nemes",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-authors:tyler-dean",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:phishing",
      "fireeye-blog-tags:FLARE"
    ],
    "jcr:uuid": "9272f668-225d-4edc-89d1-b6982dfa45ac",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Oct 05 2017 10:30:00 GMT-0400",
    "_charset_": "UTF-8",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EWe observed several high-volume FormBook malware distribution campaigns primarily taking aim at Aerospace, Defense Contractor, and Manufacturing sectors within the U.S. and South Korea during the past few months. The attackers involved in these email campaigns leveraged a variety of distribution mechanisms to deliver the information stealing FormBook malware, including:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPDFs with download links\u003C\/li\u003E\n\u003Cli\u003EDOC and XLS files with malicious macros\u003C\/li\u003E\n\u003Cli\u003EArchive files (ZIP, RAR, ACE, and ISOs) containing EXE payloads\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe PDF and DOC\/XLS campaigns primarily impacted the United States and the Archive campaigns largely impacted the Unites States and South Korea.\u003C\/p\u003E\n\u003Ch3\u003EFormBook Overview\u003C\/h3\u003E\n\u003Cp\u003EFormBook is a data stealer and form grabber that has been advertised in various hacking forums since early 2016. Figure 1 and Figure 2 show the online advertisement for the malware.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: FormBook advertisement\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: FormBook underground pricing\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe malware injects itself into various processes and installs function hooks to log keystrokes, steal clipboard contents, and extract data from HTTP sessions. The malware can also execute commands from a command and control (C2) server. The commands include instructing the malware to download and execute files, start processes, shutdown and reboot the system, and steal cookies and local passwords.\u003C\/p\u003E\n\u003Cp\u003EOne of the malware\u0027s most interesting features is that it reads Windows\u2019\u00a0\u003Ci\u003Entdll.dll\u003C\/i\u003E\u00a0module from disk into memory, and calls its exported functions directly, rendering user-mode hooking and API monitoring mechanisms ineffective. The malware author calls this technique \u0026quot;Lagos Island method\u0026quot; (allegedly originating from a userland rootkit with this name).\u00a0\u003C\/p\u003E\n\u003Cp\u003EIt also features a persistence method that randomly changes the path, filename, file extension, and the registry key used for persistence.\u00a0\u003C\/p\u003E\n\u003Cp\u003EThe malware author does not sell the builder, but only sells the panel, and then generates the executable files as a service.\u003C\/p\u003E\n\u003Ch4\u003ECapabilities\u003C\/h4\u003E\n\u003Cp\u003EFormBook is a data stealer, but not a full-fledged banker (banking malware). It does not currently have any extensions or plug-ins. Its capabilities include:\u00a0\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EKey logging\u2028\u003C\/li\u003E\n\u003Cli\u003EClipboard monitoring\u2028\u003C\/li\u003E\n\u003Cli\u003EGrabbing HTTP\/HTTPS\/SPDY\/HTTP2 forms and network requests\u00a0\u003C\/li\u003E\n\u003Cli\u003EGrabbing passwords from browsers and email clients\u00a0\u003C\/li\u003E\n\u003Cli\u003EScreenshots\u00a0\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EFormBook can receive the following remote commands from the C2 server:\u00a0\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EUpdate bot on host system\u003C\/li\u003E\n\u003Cli\u003EDownload and execute file\u003C\/li\u003E\n\u003Cli\u003ERemove bot from host system\u003C\/li\u003E\n\u003Cli\u003ELaunch a command via ShellExecute\u003C\/li\u003E\n\u003Cli\u003EClear browser cookies\u003C\/li\u003E\n\u003Cli\u003EReboot system\u003C\/li\u003E\n\u003Cli\u003EShutdown system\u003C\/li\u003E\n\u003Cli\u003ECollect passwords and create a screenshot\u003C\/li\u003E\n\u003Cli\u003EDownload and unpack ZIP archive\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EInfrastructure\u003C\/h4\u003E\n\u003Cp\u003EThe C2 domains typically leverage less widespread, newer generic top-level domains (gTLDs) such as .site, .website, .tech, .online, and .info.\u003C\/p\u003E\n\u003Cp\u003EThe C2 domains used for this recently observed FormBook activity have been registered using the WhoisGuard privacy protection service. The server infrastructure is hosted on BlazingFast.io, a Ukrainian hosting provider. Each server typically has multiple FormBook panel installation locations, which could be indicative of an affiliate model.\u003C\/p\u003E\n\u003Ch3\u003EBehavior Details\u003C\/h3\u003E\n\u003Ch4\u003EFile Characteristics\u003C\/h4\u003E\n\u003Cp\u003EOur analysis in this blog post is based on the following representative sample:\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFilename\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022129\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EMD5 Hash\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022133\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESize (bytes)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022117\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECompile Time\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002289\u0022\u003E\u003Cp\u003EUnavailable\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022129\u0022\u003E\u003Cp\u003ECE84640C3228925CC4815116DDE968CB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022133\u0022\u003E\u003Cp\u003E747,652\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022117\u0022\u003E\u003Cp\u003E2012-06-09 13:19:49Z\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: FormBook sample details\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPacker\u003C\/h4\u003E\n\u003Cp\u003EThe malware is a self-extracting RAR file that starts an AutoIt loader. The AutoIt loader compiles and runs an AutoIt script. The script decrypts the FormBook payload file, loads it into memory, and then executes it.\u003C\/p\u003E\n\u003Ch4\u003EInstallation\u003C\/h4\u003E\n\u003Cp\u003EThe FormBook malware copies itself to a new location.\u00a0The malware first chooses one of the following strings to use as a prefix for its installed filename:\u003C\/p\u003E\n\u003Cp\u003Ems, win, gdi, mfc, vga, igfx, user, help, config, update, regsvc, chkdsk, systray, audiodg, certmgr, autochk, taskhost, colorcpl, services, IconCache, ThumbCache, Cookies\u003C\/p\u003E\n\u003Cp\u003EIt then generates two to five random characters and appends those to the chosen string above\u00a0\u003C\/p\u003E\n\u003Cp\u003Efollowed by one of the following file extensions:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E.exe, .com, .scr, .pif, .cmd, .bat\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIf the malware is running with elevated privileges, it copies itself to one of the following directories:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E%ProgramFiles%\u00a0\u003C\/li\u003E\n\u003Cli\u003E%CommonProgramFiles%\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EIf running with normal privileges, it copies itself to one of the following directories:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E%USERPROFILE%\u003C\/li\u003E\n\u003Cli\u003E%APPDATA%\u003C\/li\u003E\n\u003Cli\u003E%TEMP%\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EPersistence\u003C\/h4\u003E\n\u003Cp\u003EThe malware uses the same aforementioned string list with a random string to create a prefix, appends one to five random characters, and uses this value as the registry value name.\u003C\/p\u003E\n\u003Cp\u003EThe malware configures persistence to one of the following two locations depending on its privileges:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E(HKCU|HKLM)\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\u003C\/li\u003E\n\u003Cli\u003E(HKCU|HKLM)\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EStartup\u003C\/h4\u003E\n\u003Cp\u003EThe malware creates two 16-byte mutexes. The first mutex is the client identifier (e.g., 8-3503835SZBFHHZ). The second mutex value is derived from the C2 information and the username (e.g., LL9PSC56RW7Bx3A5).\u00a0\u003C\/p\u003E\n\u003Cp\u003EThe malware then iterates over a process listing and calculates a checksum value of process names (rather than checking the name itself) to figure out which process to inject. The malware may inject itself into browser processes and explorer.exe. Depending on the target process, the malware installs different function hooks (see the\u00a0\u003Cb\u003EFunction Hooks\u003C\/b\u003E\u00a0section for further detail).\u003C\/p\u003E\n\u003Ch4\u003EAnti-Analysis\u003C\/h4\u003E\n\u003Cp\u003EThe malware uses several techniques to complicate malware analysis:\u00a0\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ETiming checks using the RDTSC instruction\u003C\/li\u003E\n\u003Cli\u003ECalls NtQueryInformationProcess with InfoClass=7 (ProcessDebugPort)\u003C\/li\u003E\n\u003Cli\u003ESample path and filename checks (sample filename must be shorter than 32 characters)\u003C\/li\u003E\n\u003Cli\u003EHash-based module blacklist\u003C\/li\u003E\n\u003Cli\u003EHash-based process blacklist\u003C\/li\u003E\n\u003Cli\u003EHash-based username blacklist\u003C\/li\u003E\n\u003Cli\u003EBefore communicating, it checks whether the C2 server is present in the hosts file\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe results of these tests are then placed into a 16-byte array, and a SHA1 hash is calculated on the array, which will be later used as the decryption key for subsequent strings (e.g. DLL names to load). Failed checks may go unnoticed until the sample tries to load the supporting DLLs\u2028(kernel32.dll and advapi32.dll).\u003C\/p\u003E\n\u003Cp\u003EThe correct 16-byte array holding the result of the checks is:\u00a0\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E00 00 01 01 00 00 01 00 01 00 01 00 00 00 00 00\u00a0\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EHaving a SHA1 value of:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E5b85aaa14f74e7e8adb93b040b0914a10b8b19b2\u00a0\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EAfter completing all anti-analysis checks, the sample manually maps ntdll.dll from disk into memory and uses its exported functions directly in the code. All API functions will have a small stub function in the code that looks up the address of the API in the mapped ntdll.dll using the CRC32 checksum of the API name, and sets up the parameters on the stack.\u00a0\u003C\/p\u003E\n\u003Cp\u003EThis will be followed by a direct register call to the mapped ntdll.dll module. This makes regular debugger breakpoints on APIs inoperable, as execution will never go through the system mapped ntdll.dll.\u003C\/p\u003E\n\u003Ch4\u003EProcess Injection\u003C\/h4\u003E\n\u003Cp\u003EThe sample loops through all the running processes to find explorer.exe by the CRC32 checksum of its process name. It then injects into explorer.exe using the following API calls (avoiding more commonly identifiable techniques such as WriteProcessMemory and CreateRemoteThread):\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ENtMapViewOfSection\u003C\/li\u003E\n\u003Cli\u003ENtSetContextThread\u003C\/li\u003E\n\u003Cli\u003ENtQueueUserAPC\u2028\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe injected code in the hijacked instance of explorer.exe randomly selects and launches (as a suspended process) a built-in Windows executable from the following list:\u00a0\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Esvchost.exe, msiexec.exe, wuauclt.exe, lsass.exe, wlanext.exe, msg.exe, lsm.exe, dwm.exe, help.exe, chkdsk.exe, cmmon32.exe, nbtstat.exe, spoolsv.exe, rdpclip.exe, control.exe, taskhost.exe, rundll32.exe, systray.exe, audiodg.exe, wininit.exe, services.exe, autochk.exe, autoconv.exe, autofmt.exe, cmstp.exe, colorcpl.exe, cscript.exe, explorer.exe, WWAHost.exe, ipconfig.exe, msdt.exe, mstsc.exe, NAPSTAT.EXE, netsh.exe, NETSTAT.EXE, raserver.exe, wscript.exe, wuapp.exe, cmd.exe\u00a0\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe original process reads the randomly selected executable from the memory of explorer.exe and migrates into this new process via NtMapViewOfSection, NtSetContextThread, and NtQueueUserAPC.\u00a0\u2028\u003C\/p\u003E\n\u003Cp\u003EThe new process then deletes the original sample and sets up persistence (see the\u00a0\u003Cb\u003EPersistence\u003C\/b\u003E\u00a0section for more detail). It then goes into a loop that constantly enumerates running processes and looks for targets based on the CRC32 checksum of the process name.\u00a0\u003C\/p\u003E\n\u003Cp\u003ETargeted process names include, but are not limited to:\u00a0\u2028\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Eiexplore.exe, firefox.exe, chrome.exe, MicrosoftEdgeCP.exe, explorer.exe, opera.exe, safari.exe, torch.exe, maxthon.exe, seamonkey.exe, avant.exe, deepnet.exe, k-meleon.exe, citrio.exe, coolnovo.exe, coowon.exe, cyberfox.exe, dooble.exe,\u00a0vivaldi.exe, iridium.exe, epic.exe, midori.exe, mustang.exe, orbitum.exe,\u2028palemoon.exe, qupzilla.exe, sleipnir.exe, superbird.exe, outlook.exe, thunderbird.exe, totalcmd.exe\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EAfter injecting into any of the target processes, it sets up user-mode API hooks based on the process.\u00a0\u003C\/p\u003E\n\u003Cp\u003EThe malware installs different function hooks depending on the process. The primary purpose of these function hooks is to log keystrokes, steal clipboard data, and extract authentication information from browser HTTP sessions. The malware stores data in local password log files. The directory name is derived from the C2 information and the username (the same as the second mutex created above:\u00a0LL9PSC56RW7Bx3A5).\u00a0\u003C\/p\u003E\n\u003Cp\u003EHowever, only eight bytes from this value are used as the directory name (e.g.,\u00a0LL9PSC56). Next, the first three characters from the derived directory name are used as a prefix for the log file followed by the string\u00a0log. Following this prefix are names corresponding to the type of log file. For example, for Internet Explorer passwords, the following log file would be created:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E%APPDATA%\\LL9PSC56\\LL9logri.ini.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe following are the password log filenames without the prefix:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E(no name): Keylog data\u003C\/li\u003E\n\u003Cli\u003Erg.ini: Chrome passwords\u003C\/li\u003E\n\u003Cli\u003Erf.ini: Firefox passwords\u003C\/li\u003E\n\u003Cli\u003Ert.ini: Thunderbird passwords\u003C\/li\u003E\n\u003Cli\u003Eri.ini: Internet Explorer passwords\u003C\/li\u003E\n\u003Cli\u003Erc.ini: Outlook passwords\u003C\/li\u003E\n\u003Cli\u003Erv.ini: Windows Vault passwords\u003C\/li\u003E\n\u003Cli\u003Ero.ini: Opera passwords\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EOne additional file that does not use the\u00a0.INI\u00a0file extension is a screenshot file:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Eim.jpeg\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EFunction Hooks\u003C\/h4\u003E\n\u003Cp\u003EKeylog\/clipboard monitoring:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EGetMessageA\u003C\/li\u003E\n\u003Cli\u003EGetMessageW\u003C\/li\u003E\n\u003Cli\u003EPeekMessageA\u003C\/li\u003E\n\u003Cli\u003EPeekMessageW\u003C\/li\u003E\n\u003Cli\u003ESendMessageA\u003C\/li\u003E\n\u003Cli\u003ESendMessageW\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EBrowser hooks:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPR_Write\u003C\/li\u003E\n\u003Cli\u003EHttpSendRequestA\u003C\/li\u003E\n\u003Cli\u003EHttpSendRequestW\u003C\/li\u003E\n\u003Cli\u003EInternetQueryOptionW\u003C\/li\u003E\n\u003Cli\u003EEncryptMessage\u003C\/li\u003E\n\u003Cli\u003EWSASend\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe browser hooks look for certain strings in the content of HTTP requests and, if a match is found, information about the request is extracted. The targeted strings are:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Epass\u003C\/li\u003E\n\u003Cli\u003Etoken\u003C\/li\u003E\n\u003Cli\u003Eemail\u003C\/li\u003E\n\u003Cli\u003Elogin\u003C\/li\u003E\n\u003Cli\u003Esignin\u003C\/li\u003E\n\u003Cli\u003Eaccount\u003C\/li\u003E\n\u003Cli\u003Epersistent\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch3\u003ENetwork Communications\u003C\/h3\u003E\n\u003Cp\u003EThe malware communicates with the following C2 server using HTTP requests:\u00a0\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ewww[.]clicks-track[.]info\/list\/hx28\/\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EBeacon\u003C\/h4\u003E\n\u003Cp\u003EAs seen in Figure 3, FormBook sends a beacon request (controlled by a timer\/counter) using HTTP GET with an \u0026quot;id\u0026quot; parameter in the URL.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: FormBook beacon\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe decoded \u0026quot;id\u0026quot; parameter is as follows:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFBNG:134C0ABB 2.9:Windows 7 Professional x86:VXNlcg==\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EWhere:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u0026quot;FBNG\u0026quot; - magic bytes\u2028\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;134C0ABB\u0026quot; - the CRC32 checksum of the user\u0027s SID\u00a0\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;2.9\u0026quot; - the bot version\u2028\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;Windows 7 Professional\u0026quot; \u2013 operating system version\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;x86\u0026quot; \u2013 operating system architecture\u2028\u003C\/li\u003E\n\u003Cli\u003E\u0026quot;VXNlcg==\u0026quot; - the Base64 encoded username (i.e., \u0026quot;User\u0026quot; in this case)\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003ECommunication Encryption\u003C\/h4\u003E\n\u003Cp\u003EThe malware sends HTTP requests using hard-coded HTTP header values. The HTTP headers shown in Figure 4 are hardcoded.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Hard-coded HTTP header values\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EMessages to the C2 server are sent RC4 encrypted and Base64 encoded. The malware uses a slightly altered Base64 alphabet, and also uses the character\u00a0\u0026quot;.\u0026quot;\u00a0instead of\u00a0\u0026quot;=\u0026quot;\u00a0as the pad character:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EStandard Alphabet:\u00a0\u003Cul\u003E\n\u003Cli\u003EABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EModified Alphabet:\u00a0\u003Cul\u003E\n\u003Cli\u003EABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EThe RC4 key is created using an implementation of the SHA1 hashing algorithm with the C2 URL. The standard SHA1 algorithm reverses the DWORD endianness at the end of the algorithm. This implementation does not, which results in a reverse endian DWORDs. For example, the SHA1 hash for the aforementioned URL is\u00a0\u0026quot;9b198a3cfa6ff461cc40b754c90740a81559b9ae,\u0026quot; but when reordering the DWORDs, it produces the correct RC4 key:\u00a03c8a199b61f46ffa54b740cca84007c9aeb95915. The first DWORD \u0026quot;9b198a3c\u0026quot; becomes \u0026quot;3c8a199b.\u0026quot;\u003C\/p\u003E\n\u003Cp\u003EFigure 5 shows an example HTTP POST request.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Example HTTP POST request\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn this example, the decoded result is:\u00a0\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EClipboard\\r\\n\\r\\nBlank Page - Windows Internet Explorer\\r\\n\\r\\ncEXN{3wutV,\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EAccepted Commands\u003C\/h4\u003E\n\u003Cp\u003EWhen a command is sent by the C2 server, the HTTP response body has the format shown in Figure 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: FormBook C2 server response with command\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe data begins with the magic bytes \u0026quot;FBNG,\u0026quot; and a one-byte command code from hex bytes 31 to 39 (i.e., from \u0026quot;1\u0026quot; to \u0026quot;9\u0026quot;) in clear text. This is then followed by the RC4-encoded command data (where the RC4 key is the same as the one used for the request). In the decrypted data, another occurrence of the magic FBNG bytes indicates the end of the command data.\u00a0\u003C\/p\u003E\n\u003Cp\u003EThe malware accepts the commands shown in Table 2.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003ECommand\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EParameters (after decryption)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022\u003E\u003Cp\u003EPurpose\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00271\u0027 (0x31)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003E\u0026lt;\u003Ci\u003Epe_file_data\u003C\/i\u003E\u0026gt;FBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload and execute file from %TEMP% directory\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00272\u0027 (0x32)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003E\u0026lt;\u003Ci\u003Epe_file_data\u003C\/i\u003E\u0026gt;FBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUpdate bot on host machine\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00273\u0027 (0x33)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERemove bot from host machine\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00274\u0027 (0x34)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003E\u0026lt;\u003Ci\u003Ecommand_string\u003C\/i\u003E\u0026gt;FBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELaunch a command via ShellExecute\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00275\u0027 (0x35)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EClear browser cookies\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00276\u0027 (0x36)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFBNG\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReboot operating system\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00277\u0027 (0x37)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EShutdown operating system\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00278\u0027 (0x38)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003EFBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECollect email\/browser passwords and create a screenshot\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002262\u0022\u003E\u003Cp\u003E\u00279\u0027 (0x39)\u00a0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022163\u0022\u003E\u003Cp\u003E\u0026lt;\u003Ci\u003Ezip_file_data\u003C\/i\u003E\u0026gt;FBNG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022242\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload and unpack ZIP archive into %TEMP% directory\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: FormBook accepted commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch3\u003EDistribution Campaigns\u003C\/h3\u003E\n\u003Cp\u003EFireEye researchers observed FormBook distributed via email campaigns using a variety of different attachments:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPDFs with links to the \u0026quot;tny.im\u0026quot; URL-shortening service, which then redirected to a staging server that contained FormBook executable payloads\u003C\/li\u003E\n\u003Cli\u003EDOC and XLS attachments that contained malicious macros that, when enabled, initiated the download of FormBook payloads\u003C\/li\u003E\n\u003Cli\u003EZIP, RAR, ACE, and ISO attachments that contained FormBook executable files\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EThe PDF Campaigns\u003C\/h4\u003E\n\u003Cp\u003EThe PDF campaigns leveraged FedEx and DHL shipping\/package delivery themes (Figure 7 and Figure 8), as well as a document-sharing theme. The PDFs distributed did not contain malicious code, just a link to download the FormBook payload.\u003C\/p\u003E\n\u003Cp\u003EThe staging servers (shown in Table 3) appeared to be compromised websites.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Example PDF campaign email lure with attachment\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Example PDF campaign attachment\u003C\/span\u003E\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022238\u0022\u003E\u003Cp\u003ESample Subject Lines\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002286\u0022\u003E\u003Cp\u003EShorted URLs\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022139\u0022\u003E\u003Cp\u003EStaging Servers\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022238\u0022\u003E\u003Cp\u003E\u0026lt;\u003Ci\u003ERecipient\u2019s_Name\u003C\/i\u003E\u0026gt; - You have a parcel awaiting pick up\u003C\/p\u003E\n\u003Cp\u003E\u0026lt;\u003Ci\u003ERecipient\u2019s_Name\u003C\/i\u003E\u0026gt; \u2013 I shared a file with you\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002286\u0022\u003E\u003Cp\u003Etny[.]im\/9TK\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9Uw\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9G1\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9Q6\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9H1\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9R7\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9Tc\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9RM\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9G0\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9Oq\u003C\/p\u003E\n\u003Cp\u003Etny[.]im\/9Oh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022139\u0022\u003E\u003Cp\u003Emaxsutton[.]co[.]uk\u003C\/p\u003E\n\u003Cp\u003Esolderie[.]dream3w[.]com\u003C\/p\u003E\n\u003Cp\u003Elifekeeper[.]com[.]au\u003C\/p\u003E\n\u003Cp\u003Ebrinematriscript[.]com\u003C\/p\u003E\n\u003Cp\u003Ejaimagroup[.]com\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: Observed email subjects and download URLs for PDF campaign\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBased on data from the tny.im-shortened links, there were a total of 716 hits across 36 countries. As seen in Figure 9, most of the malicious activity from the PDF campaign impacted the United States.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig9.jpg\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Geolocation statistics from tny.im URL shortener\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EThe DOC\/XLS Campaigns\u003C\/h4\u003E\n\u003Cp\u003EThe email campaigns distributing DOC and XLS files relied on the use of malicious macros to download the executable payload. When the macros are enabled, the download URL retrieves an executable file with a PDF extension. Table 4 shows observed email subjects and download URLs used in these campaigns.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022460\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022239\u0022\u003E\u003Cp\u003ESample Subject Lines\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002286\u0022\u003E\u003Cp\u003EStaging Server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022135\u0022\u003E\u003Cp\u003EURL Paths\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022239\u0022\u003E\u003Cp\u003E61_Invoice_6654\u003C\/p\u003E\n\u003Cp\u003EACS PO 1528\u003C\/p\u003E\n\u003Cp\u003ENEW ORDER - PO-074\u003C\/p\u003E\n\u003Cp\u003ENEW ORDER - PO#074\u003C\/p\u003E\n\u003Cp\u003EREQUEST FOR QUOTATION\/CONTRACT OVERHAUL MV OCEAN MANTA\/\/SUPPLY P-3PROPELLER\u003C\/p\u003E\n\u003Cp\u003EURGENT PURCHASE ORDER 1800027695\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002286\u0022\u003E\u003Cp\u003Esdvernoms[.]ml\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022135\u0022\u003E\u003Cp\u003E\/oc\/runpie.pdf\u003C\/p\u003E\n\u003Cp\u003E\/sem\/essen.pdf\u003C\/p\u003E\n\u003Cp\u003E\/drops\/microcore.pdf\u003C\/p\u003E\n\u003Cp\u003E\/damp\/10939453.pdf\u003C\/p\u003E\n\u003Cp\u003E\/sem\/essentials.exe\u003C\/p\u003E\n\u003Cp\u003E\/oc\/runpie.pdf\u003C\/p\u003E\n\u003Cp\u003E\/sem\/ampama.pdf\u003C\/p\u003E\n\u003Cp\u003E\/js\/21509671Packed.pdf\u003C\/p\u003E\n\u003Cp\u003E\/sem\/essen.pdf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 4: Observed email subjects and download URLs for the DOC\/XLS campaign\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFireEye detection technologies observed this malicious activity between Aug. 11 and Aug. 22, 2017 (Figure 10). Much of the activity was observed in the United States (Figure 11), and the most targeted industry vertical was Aerospace\/Defense Contractors (Figure 12).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: DOC\/XLS campaign malicious activity by date\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig11.jpg\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Top 10 countries affected by the DOC\/XLS campaign\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig12.jpg\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Top 10 industry verticals affected by the DOC\/XLS campaign\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EThe Archive Campaign\u003C\/h4\u003E\n\u003Cp\u003EThe Archive campaign delivered a variety of archive formats, including ZIP, RAR, ACE, and ISO, and accounted for the highest distribution volume. It leveraged a myriad of subject lines that were characteristically business related and often regarding payment or purchase orders:\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022305\u0022\u003E\u003Cp\u003ESample Subject Lines\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022305\u0022\u003E\u003Cp\u003EHSBC MT103 PAYMENT CONFIRMATION Our Ref: HBCCTKF8003445VTC\u003C\/p\u003E\n\u003Cp\u003EMT103 PAYMENT CONFIRMATION Our Ref: BCCMKE806868TSC Counterparty:.\u003C\/p\u003E\n\u003Cp\u003EFwd: INQUIRY RFQ-18 H0018\u003C\/p\u003E\n\u003Cp\u003EFw: Remittance Confirmation\u003C\/p\u003E\n\u003Cp\u003ENEW ORDER FROM COBRA INDUSTRIAL MACHINES IN SHARJAH\u003C\/p\u003E\n\u003Cp\u003EPO. NO.: 10701 - Send Quotaion Pls\u003C\/p\u003E\n\u003Cp\u003ERe: bgcqatar project\u003C\/p\u003E\n\u003Cp\u003ERe: August korea ORDER\u003C\/p\u003E\n\u003Cp\u003EPurchase Order #234579\u003C\/p\u003E\n\u003Cp\u003Epurchase order for August017\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003EFireEye detection technologies observed this campaign activity between July 18 and Aug. 17, 2017 (Figure 13). Much of the activity was observed in South Korea and the United States (Figure 14), with the Manufacturing industry vertical being the most impacted (Figure 15).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig13.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: Archive campaign malicious activity by date\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig14.jpg\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Top 10 countries affected by the Archive campaign\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/FormBook%20campaigns\/Fig15.jpg\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 15: Top 10 industry verticals affected by the Archive campaign\u00a0\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch3\u003EConclusion\u003C\/h3\u003E\n\u003Cp\u003EWhile FormBook is not unique in either its functionality or distribution mechanisms, its relative ease of use, affordable pricing structure, and open availability make FormBook an attractive option for cyber criminals of varying skill levels. In the last few weeks, FormBook was seen downloading other malware families such as NanoCore. \u00a0The credentials and other data harvested by successful FormBook infections could be used for additional cyber crime activities including, but not limited to: identity theft, continued phishing operations, bank fraud and extortion.\u003C\/p\u003E\n",
        "jcr:lastModified": "Mon Oct 09 2017 12:42:20 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "alt": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "comments": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/commons\/components\/comments"
      },
      "trackback": {
        "jcr:primaryType": "nt:unstructured",
        "sling:resourceType": "social\/blog\/components\/trackback"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EWe observed several high-volume FormBook malware distribution campaigns taking aim at Aerospace, Defense Contractor, and Manufacturing sectors within the U.S. and South Korea during the third quarter of 2017.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Oct 04 2017 15:08:40 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Wed May 08 2019 18:39:17 GMT-0400",
      "imageRotate": "0"
    }
  }
}
