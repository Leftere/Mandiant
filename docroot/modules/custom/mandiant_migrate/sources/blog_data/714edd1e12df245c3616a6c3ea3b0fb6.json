{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "fireeye_global_admin",
  "jcr:created": "Tue Oct 15 2019 14:19:33 GMT+0000",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "fireeye_global_admin",
    "jcr:title": "LOWKEY: Hunting for the Missing Volume Serial ID",
    "jcr:versionHistory": "61e0b791-b22b-434c-9b8d-0a08d7a39165",
    "author": "Tobias Krueger",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "3b0bf028-b747-48e7-b39a-dd74c6c46eea"
    ],
    "jcr:created": "Tue Oct 15 2019 14:19:33 GMT+0000",
    "cq:lastModified": "Tue Oct 15 2019 14:19:23 GMT+0000",
    "jcr:baseVersion": "3b0bf028-b747-48e7-b39a-dd74c6c46eea",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:tobias-krueger",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:apt",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:backdoor",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:FLARE"
    ],
    "jcr:uuid": "d7c7a35a-a928-4619-9e73-c33569dff286",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Tue Oct 15 2019 10:15:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EIn August 2019, FireEye released the \u201c\u003Ca href=\u0022https:\/\/content.fireeye.com\/apt41\/rpt-apt41\u0022\u003EDouble Dragon\u003C\/a\u003E\u201d report on our newest graduated threat group: APT41. A China-nexus dual espionage and financially-focused group, APT41 targets industries such as gaming, healthcare, high-tech, higher education, telecommunications, and travel services.\u003C\/p\u003E\n\u003Cp\u003EThis blog post is about the sophisticated passive backdoor we track as LOWKEY, mentioned in the APT41 report and recently unveiled at the \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/summit.fireeye.com\/\u0022\u003EFireEye Cyber Defense Summit\u003C\/a\u003E. We observed LOWKEY being used in highly targeted attacks, utilizing payloads that run only on specific systems. Additional malware family names are used in the blog post and briefly described. For a complete overview of malware used by APT41 please refer to the Technical Annex section of our \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/content.fireeye.com\/apt-41\/rpt-apt41\/\u0022\u003EAPT41 report\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EThe blog post is split into three parts, which are shown in Figure 1. The first describes how we managed to analyze the encrypted payloads. The second part features position independent loaders we observed in multiple samples, adding an additional layer of obfuscation. The final part is about the actual backdoor we call LOWKEY, which comes in two variants, a passive TCP listener and a passive HTTP listener targeting Internet Information Services (IIS).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture1.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Blog post overview\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDEADEYE\u0026nbsp;\u2013 RC5\u003C\/h4\u003E\n\u003Cp\u003ETracking APT41 activities over the past months, we observed multiple samples that shared two unique features: the use of RC5 encryption which we don\u2019t encounter often, and a unique string \u201cf@Ukd!rCto R$.\u201d. We track these samples as DEADEYE.\u003Cbr\u003E\n\u003Cbr\u003E\nDEADEYE comes in multiple variants:\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EDEADEYE.DOWN has the capability to download additional payloads.\u003C\/li\u003E\n\u003Cli\u003EDEADEYE.APPEND has additional payloads appended to it.\u003C\/li\u003E\n\u003Cli\u003EDEADEYE.EXT loads payloads that are already present on the system.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EDEADEYE.DOWN\u003C\/h4\u003E\n\u003Cp\u003EA sample belonging to DEADEYE.DOWN (MD5: \u003Cb\u003E5322816c2567198ad3dfc53d99567d6e\u003C\/b\u003E) attempts to download two files on the first execution of the malware.\u003C\/p\u003E\n\u003Cp\u003EThe first file is downloaded from hxxp:\/\/checkin.travelsanignacio[.]com\/static\/20170730.jpg. The command and control (C2) server response is first RC5 decrypted with the key\u0026nbsp;\u201cwsprintfA\u201d\u0026nbsp;and then RC5 encrypted with a different key and written to disk as\u0026nbsp;\u0026lt;MODULE_NAME\u0026gt;.mui.\u003C\/p\u003E\n\u003Cp\u003EThe RC5 key is constructed using the volume serial number of the C drive. The volume serial number is a 4-byte value, usually based on the install time of the system. The volume serial number is XORed with the hard-coded constant \u201cf@Ukd!rCto R$.\u201d and then converted to hex to derive a key of up to 28 bytes in length. The key length can vary if the XORed value contains an embedded zero byte because the lstrlenA API call is used to determine the length of it. Note that the lstrlenA API call happens before the result is converted to hex. If the index of the byte modulo 4 is zero, the hex conversion is in uppercase. The key derivation is illustrated in Table 1.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 colspan=\u00223\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: center;\u0022\u003EVolume Serial number of C drive, for example 0xAABBCCDD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EF \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xAA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xCC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euppercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E@\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xBB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xFB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EU\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xCC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0x99\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ek\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xDD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xB6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xAA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xCE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euppercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E!\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xBB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0x9A\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Er\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xCC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xBE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EC\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xDD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0x9E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Et\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xAA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xDE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euppercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eo\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xBB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xD4\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E(0x20)\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xCC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xEC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ER\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xDD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0x8F\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E$\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xAA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0x8E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Euppercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ^\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0xBB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E=\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0x95\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022204\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Elowercase\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022623\u0022 colspan=\u00223\u0022 valign=\u0022top\u0022\u003E\u003Cp style=\u0022text-align: center;\u0022\u003EDerived key CCfb99b6CE9abe9eDEd4ec8f8E95\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Key derivation example\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe second file is downloaded from\u0026nbsp;hxxp:\/\/checkin.travelsanignacio[.]com\/static\/20160204.jpg. The C2 response is RC5 decrypted with the key \u201cwsprintfA\u201d and then XORed with\u0026nbsp;0x74,\u0026nbsp;before it is saved as\u0026nbsp;C:\\Windows\\System32\\wcnapi.mui.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture2.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: 5322816c2567198ad3dfc53d99567d6e download\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe sample then determines its own module name, appends the extension mui to it and attempts to decrypt the file using RC5 encryption. This effectively decrypts the file the malware just downloaded and stored encrypted on the system previously. As the file has been encrypted with a key based on the volume serial number it can only be executed on the system it was downloaded on or a system that has the same volume serial number, which would be a remarkable coincidence.\u003C\/p\u003E\n\u003Cp\u003EAn example mui file is the MD5 hash \u003Cb\u003Ee58d4072c56a5dd3cc5cf768b8f37e5e\u003C\/b\u003E. Looking at the encrypted file in a hex editor reveals a high entropy (7.999779\/8). RC5 uses Electronic Code Book (ECB) mode by default. ECB means that each code block (64 bit) is encrypted independent from other code blocks. This means the same plaintext block always results in the same cipher text, independent from its position in the binary. The file has 792933 bytes in total but almost no duplicate cipher blocks, which means the data likely has an additional layer of encryption.\u003C\/p\u003E\n\u003Cp\u003EWithout the correct volume serial number nor any knowledge about the plaintext there is no efficient way to decrypt the payload \u003Cb\u003Ee58d4072c56a5dd3cc5cf768b8f37e5e\u003C\/b\u003E with just the knowledge of the current sample.\u003C\/p\u003E\n\u003Ch4\u003EDEADEYE.APPEND\u003C\/h4\u003E\n\u003Cp\u003EFortunately searching for the unique string \u201cf@Ukd!rCto R$.\u201c in combination with artifacts from RC5 reveals additional samples. One of the related samples is DEADEYE.APPEND (MD5: \u003Cb\u003E37e100dd8b2ad8b301b130c2bca3f1ea\u003C\/b\u003E), which has been previously analyzed by Kaspersky (https:\/\/securelist.com\/operation-shadowhammer-a-high-profile-supply-chain-attack\/90380\/). This sample is different because it is protected with VMProtect and has the obfuscated binary appended to it. The embedded binary starts at offset 3287552 which can be seen in Figure 3 with the differing File Size and PE Size.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture3.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: A look at the PE header reveals a larger file size than PE size\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe encrypted payload has a slightly lower entropy of 7.990713 out of 8. Looking at the embedded binary in a hex editor reveals multiple occurrences of the byte pattern 51 36 94 A4 26 5B 0F 19, as seen in Figure 4. As this pattern occurs multiple times in a row in the middle of the encrypted data and ECB mode is being used, an educated guess is that the plaintext is supposed to be 00 00 00 00 00 00 00 00.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture4.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Repeating byte pattern in 37e100dd8b2ad8b301b130c2bca3f1ea\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ERC5 Brute Forcer\u003C\/h4\u003E\n\u003Cp\u003EWith this knowledge we decided to take \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/github.com\/stamparm\/cryptospecs\/blob\/master\/symmetrical\/sources\/rc5.c\u0022\u003Ea reference implementation of RC5\u003C\/a\u003E and add a main function that accounts for the key derivation algorithm used by the malware samples (see Figure 5). Brute forcing is possible as the key is derived from a single DWORD; even though the final key length might be 28 bytes, there are only 4294967296 possible keys. The code shown in Figure 5 generates all possible volume serial numbers, derives the key from them and tries to decrypt 51 36 94 A4 26 5B 0F 19 to 00 00 00 00 00 00 00 00. Running the RC5 brute forcer for a couple of minutes shows the correct volume serial number for the sample, which is 0xc25cff4c.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ENote if you want to run the brute forcer yourself\u003Cbr\u003E\n \u003C\/i\u003EThe number of DWORDs of the key in the reference implementation we used is represented by the global c, and we had to change it to 7 to match the malware\u2019s key length of 28 bytes. There were some issues with the conversion because in the malware a zero byte within the generated key ultimately leads to a shorter key length. The implementation we used uses a hard-coded key length (c), so we generated multiple executables with c = 6, c = 5, c = 4\u2026 as these usually only ran for a couple of minutes to cover the entire key space. All the samples mentioned in the Appendix 1 could be solved with c = 7 or c = 6.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture5a.png\u0022 alt=\u0022\u0022\u003E\u003Cspan class=\u0022type-XS\u0022\u003E\u003Cbr\u003E\nFigure 5: Main function RC5 brute forcer\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe decrypted payload belongs to the malware family POISONPLUG (MD5: \u003Cb\u003E84b69b5d14ba5c5c9258370c9505438f\u003C\/b\u003E). POISONPLUG is a highly obfuscated modular backdoor with plug-in capabilities. The malware is capable of registry or service persistence, self-removal, plug-in execution, and network connection forwarding. POISONPLUG has been observed using social platforms to host encoded command and control commands.\u003C\/p\u003E\n\u003Cp\u003EWe confirmed the findings from Kaspersky and additionally found a second command and control URL hxxps:\/\/steamcommunity[.]com\/id\/oswal053, as mentioned in our APT 41 report.\u003C\/p\u003E\n\u003Cp\u003ETaking everything into account that we learned from DEADEYE.APPEND (MD5:\u003Cb\u003E\u0026nbsp;37e100dd8b2ad8b301b130c2bca3f1ea\u003C\/b\u003E), we decided to take another look at the encrypted mui file (\u003Cb\u003Ee58d4072c56a5dd3cc5cf768b8f37e5e\u003C\/b\u003E). Attempts to brute force the first bytes to match with the ones of the decrypted POISONPLUG payload did not yield any results.\u003C\/p\u003E\n\u003Cp\u003EFortunately, we found additional samples that use the same encryption scheme. In one of the samples the malware authors included two checks to validate the decrypted payload. The expected plaintext at the specified offsets for DEADEYE.APPEND (MD5: \u003Cb\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/b\u003E) is shown in Table 2.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EOffset\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EExpected byte after decryption\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x48\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x8B\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x3C0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x48\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x3C1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x83\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Byte comparisons after decrypting in DEADEYE.APPEND (MD5: \u003Cb\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/b\u003E)\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EApplying these constraints to our brute forcer and trying to decrypt mui file (\u003Cb\u003Ee58d4072c56a5dd3cc5cf768b8f37e5e\u003C\/b\u003E) once more\u003Cb\u003E \u003C\/b\u003Eresulted in a low number of successful hits which we could then manually check. The correct volume serial number for the encrypted mui is 0x243e2562. Analysis determined the decrypted file is XMRig miner. This also explains why the dropper downloads two files. The first, \u0026lt;MODULE_NAME\u0026gt;.mui is the crypto miner, and the second C:\\Windows\\System32\\wcnapi.mui, is the configuration. The decrypted mui contains another layer of obfuscation and is eventually executed with the command x -c wcnapi.mui. An explanation on how the command was obtained and the additional layer of obfuscation is given in the next part of the blog post.\u003C\/p\u003E\n\u003Cp\u003EFor a list of samples with the corresponding volume serial numbers, please refer to Appendix 1.\u003C\/p\u003E\n\u003Ch4\u003EAdditional RC4 Layer\u003C\/h4\u003E\n\u003Cp\u003EAn additional RC4 layer has been identified in droppers used by APT41, which we internally track as DEADEYE. The layer has been previously detailed in a \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.welivesecurity.com\/2019\/03\/11\/gaming-industry-scope-attackers-asia\/\u0022\u003Eblog post by ESET\u003C\/a\u003E. We wanted to provide some additional information on this, as it was used in some of the samples we managed to brute force.\u003C\/p\u003E\n\u003Cp\u003EThe additional layer is position independent shellcode containing a reflective DLL loader. The loader decrypts an RC4 encrypted payload and loads it in memory. The code itself is a straight forward loader with the exception of some interesting artifacts identified during analysis.\u003C\/p\u003E\n\u003Cp\u003EAs mentioned in the blog post by ESET, the encrypted payload is prepended with a header. It contains the RC4 encryption key and two fields of variable length, which have previously been identified as file names. These two fields are encrypted with the same RC4 encryption key that is also used to decrypt the payload. The header is shown in Table 3.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHeader bytes\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMeaning\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0 \u003Cb\u003E\u2013 \u003C\/b\u003E15\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERC4 key XOR encoded with 0x37\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E16 \u003Cb\u003E\u2013\u003C\/b\u003E 19\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESize of loader stub before the header\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E20 \u003Cb\u003E\u2013\u003C\/b\u003E 23\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ERC4 key size\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E24 \u003Cb\u003E\u2013\u003C\/b\u003E 27\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand ASCII size (CAS)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E28 \u003Cb\u003E\u2013\u003C\/b\u003E 31\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand UNICODE size (CUS)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E32 \u003Cb\u003E\u2013\u003C\/b\u003E 35\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESize of encrypted payload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E36 \u003Cb\u003E\u2013\u003C\/b\u003E 39\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELaunch type\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E40 \u003Cb\u003E\u2013\u003C\/b\u003E (40 + CAS)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand ASCII\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E(40 + CAS) \u003Cb\u003E\u2013\u003C\/b\u003E (40 + CAS + CUS)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECommand UNICODE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E(40 + CAS + CUS) \u003Cb\u003E\u2013\u003C\/b\u003E (40 + CAS + CUS + size of encrypted payload)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EEncrypted payload\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: RC4 header overview\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ELooking at the payloads hidden behind the RC5 layer, we observed, that these fields are not limited to file names, instead they can also contain commands used by the reflective loader. If no command is specified, the default parameter is the file name of the loaded payload. In some instances, this revealed the full file path and file name in the development environment. Table 4 shows some paths and file names. This is also how we found the command (x -c wcnapi.mui) used to launch the decrypted mui file from the first part of the blog post.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5 hash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EArguments found in the RC4 layer\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EE:\\code\\PortReuse\\3389-share\\DeviceIOContrl-Hook\\v1.3-53\\Inner-Loader\\x64\\Release\\Inner-Loader.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EE:\\code\\PortReuse\\3389-share\\DeviceIOContrl-Hook\\v1.3-53\\NetAgent\\x64\\Release\\NetAgent.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EE:\\code\\PortReuse\\3389-share\\DeviceIOContrl-Hook\\v1.3-53\\SK3.x\\x64\\Release\\SK3.x.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUserFunction.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EProcTran.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec11dd805de683822bf4922aecb9bfef5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EE:\\code\\PortReuse\\iis-share\\2.5\\IIS_Share\\x64\\Release\\IIS_Share.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec11dd805de683822bf4922aecb9bfef5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUserFunction.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec11dd805de683822bf4922aecb9bfef5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EProcTran.dll\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 4: Decrypted paths and file names\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ELOWKEY\u003C\/h4\u003E\n\u003Cp\u003EThe final part of the blog post describes the capabilities of the passive backdoor LOWKEY (MD5: \u003Cb\u003E8aab5e2834feb68bb645e0bad4fa10bd\u003C\/b\u003E) decrypted from DEADEYE.APPEND (MD5: \u003Cb\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/b\u003E). LOWKEY is a passive backdoor that supports commands for a reverse shell, uploading and downloading files, listing and killing processes and file management. We have identified two variants of the LOWKEY backdoor.\u003C\/p\u003E\n\u003Cp\u003EThe first is a TCP variant that listens on port 53, and the second is an HTTP variant that listens on TCP port 80. The HTTP variant intercepts URL requests matching the UrlPrefix http:\/\/+:80\/requested.html. The + in the given UrlPrefix means that it will match any host name. It has been briefly mentioned by Kaspersky\u0026nbsp;as \u201c\u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/securelist.com\/operation-shadowhammer-a-high-profile-supply-chain-attack\/90380\/\u0022\u003Eunknown backdoor\u003C\/a\u003E\u201d.\u003C\/p\u003E\n\u003Cp\u003EBoth variants are loaded by the reflective loader described in the previous part of the blog post. This means we were able to extract the original file names. They contain meaningful names and provide a first hint on how the backdoor operates.\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003EHTTP variant (MD5: c11dd805de683822bf4922aecb9bfef5)\u003Cbr\u003E\n \u003C\/i\u003EE:\\code\\PortReuse\\iis-share\\2.5\\IIS_Share\\x64\\Release\\IIS_Share.dll\u003C\/p\u003E\n\u003Cp\u003E\u003Ci\u003ETCP variant (MD5: 7f05d410dc0d1b0e7a3fcc6cdda7a2ff)\u003Cbr\u003E\n \u003C\/i\u003EE:\\code\\PortReuse\\3389-share\\DeviceIOContrl-Hook\\v1.3-53\\SK3.x\\x64\\Release\\SK3.x.exe\u003C\/p\u003E\n\u003Cp\u003EThe interesting parts are shown in Figure 6. PortReuse describes the general idea behind the backdoor, to operate on a well-known port. The paths also contain version numbers 2.5 and v1.3-53. IIS_Share is used for the HTTP variant and describes the targeted application, DeviceIOContrl-Hook is used for the TCP variant.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture6.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Overview important parts of executable path\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EBoth LOWKEY variants are functionally identical with one exception. The TCP variant relies on a second component, a user mode rootkit that is capable of intercepting incoming TCP connections. The internal name used by the developers for that component is E:\\code\\PortReuse\\3389-share\\DeviceIOContrl-Hook\\v1.3-53\\NetAgent\\x64\\Release\\NetAgent.exe.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture7.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: LOWKEY components\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EInner-Loader.dll\u003C\/h4\u003E\n\u003Cp\u003EInner-Loader.dll is a watch guard for the LOWKEY backdoor. It leverages the GetExtendedTcpTable API to retrieve all processes with an open TCP connection. If a process is listening on TCP port 53 it injects NetAgent.exe into the process. This is done in a loop with a 10 second delay. The loader exits the loop when NetAgent.exe has been successfully injected. After the injection it will create a new thread for the LOWKEY backdoor (SK3.x.exe).\u003C\/p\u003E\n\u003Cp\u003EThe watch guard enters an endless loop that executes every 20 minutes and ensures that the NetAgent.exe and the LOWKEY backdoor are still active. If this is not the case it will relaunch the backdoor or reinject the NetAgent.exe.\u003C\/p\u003E\n\u003Ch4\u003ENetAgent.exe\u003C\/h4\u003E\n\u003Cp\u003ENetAgent.exe is a user mode rootkit that provides covert communication with the LOWKEY backdoor component. It forwards incoming packets, after receiving the byte sequence FF FF 01 00 00 01 00 00 00 00 00 00, to the named pipe \\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00001-00001}.\u003Cbr\u003E\n\u003Cbr\u003E\nThe component works by hooking the NtDeviceIoControlFile API. It does that by allocating a suspiciously large\u0026nbsp;region of memory, which is used as a global hook table. The table consists of 0x668A0 bytes and has read, write and execute permissions set.\u003C\/p\u003E\n\u003Cp\u003EEach hook table entry consists of 3 pointers. The first points to memory containing the original 11 bytes of each hooked function, the second entry contains a pointer to the remaining original instructions and the third pointer points to the function hook. The malware will only hook one function in this manner and therefore allocates an unnecessary large amount of memory. The malware was designed to hook up to 10000 functions this way.\u003Cbr\u003E\n\u003Cbr\u003E\nThe hook function begins by iterating the global hook table and compares the\u0026nbsp;pointer to the hook function to itself. This is done to find the original instructions for the installed hook, in this case\u0026nbsp;NtDeviceIoControlFile. The malware then executes the saved instructions which results in a regular\u0026nbsp;NtDeviceIoControlFile\u0026nbsp;API call. Afterwards the\u0026nbsp;IoControlCode\u0026nbsp;is compared to 0x12017 (AFD_RECV).\u003C\/p\u003E\n\u003Cp\u003EIf the\u0026nbsp;IoControlCode\u0026nbsp;does not match, the original API call results are returned.\u003C\/p\u003E\n\u003Cp\u003EIf they match the malware compares the first 12 bytes of the incoming data. As it is effectively a TCP packet, it is parsing the TCP header to get the data of the packet. The first 12 bytes of the\u0026nbsp;data section are compared against the hard-coded byte pattern:\u0026nbsp;FF FF 01 00 00 01 00 00 00 00 00 00.\u003C\/p\u003E\n\u003Cp\u003EIf they match it expects to receive additional data, which seems to be unused, and then responds with a 16 byte header\u0026nbsp;00 00 00 00 00 91 03 00 00 00 00 00 80 1F 00 00, which seems to be hard-coded and to indicate that following packets will be forwarded to the named pipe\u0026nbsp;\\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00001-00001}. The backdoor component\u0026nbsp;(SK3.x.exe) receives and sends data to the named pipe. The hook function will forward all received data from the named pipe back to the socket, effectively allowing a covert communication between the named pipe and the socket.\u003C\/p\u003E\n\u003Ch4\u003ESK3.x.exe\u003C\/h4\u003E\n\u003Cp\u003ESK3.x.exe is the actual backdoor component. It supports writing and reading files, modification of file properties, an interactive command shell, TCP relay functionality and listing running processes. The backdoor opens a named pipe\u0026nbsp;\\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00001-00001} for communication.\u003C\/p\u003E\n\u003Cp\u003EData received by the backdoor is encrypted with RC4 using the key\u0026nbsp;\u201cCreateThread\u201c and then XORed with 0x77. All data sent by the backdoor uses the same encryption in reverse order (first XOR with 0x77, then RC4 encrypted with\u0026nbsp;the key \u201cCreateThread\u201c). Encrypted data is preceded by a 16-byte header which is unencrypted containing an identifier and the size of the following encrypted packet.\u003C\/p\u003E\n\u003Cp\u003EAn example header looks as follows:\u003Cbr\u003E\n00 00 00 00 00 FD 00 00 10 00 00 00 00 00 00 00\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EBytes\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMeaning\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E00 00 00 00 00\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eunknown\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFD 00\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EBytes 5 and 6 are the command identifier, for a list of all supported identifiers check Table 6 and Table 7.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E00\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eunknown\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E10 00 00 00\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESize of the encrypted packet that is send after the header\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E00 00 00 00\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022312\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eunknown\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 5: Subcomponents of header\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe backdoor supports the commands listed in tables Table 6 and Table 7. Most commands expect a string at the beginning which likely describes the command and is for the convenience of the operators, but this string isn\u0027t actively used by the malware and could be anything. For example,\u0026nbsp;KILL \u0026lt;PID\u0026gt;\u0026nbsp;could also be\u0026nbsp;A \u0026lt;PID\u0026gt;. Some of the commands rely on two payloads (UserFunction.dll and ProcTran.dll), that are embedded in the backdoor and are either injected into another process or launch another process.\u003C\/p\u003E\n\u003Ch4\u003EUserFunction.dll\u003C\/h4\u003E\n\u003Cp\u003EUserfunction.dll starts a hidden\u0026nbsp;cmd.exe\u0026nbsp;process, creates the named pipe\u0026nbsp;\\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00000-00000}\u0026nbsp;and forwards all received data from the pipe to the standard input of the\u0026nbsp;cmd.exe\u0026nbsp;process. All output from the process is redirected back to the named pipe. This allows interaction with the shell over the named pipe.\u003C\/p\u003E\n\u003Ch4\u003EProcTran.dll\u003C\/h4\u003E\n\u003Cp\u003EThe component opens a TCP connection to the provided host and port, creates the named pipe\u0026nbsp;\\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00000-00001}\u0026nbsp;and forwards all received data from the pipe to the opened TCP connection. All received packets on the connection are forwarded to the named pipe. This allows interaction with the TCP connection over the named pipe.\u003Cbr\u003E\n\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EIdentifier\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EArguments\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xC8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;\u003Cb\u003Ecmd\u003C\/b\u003E\u0026gt; \u0026lt;arg1\u0026gt; \u0026lt;arg2\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EProvides a simple shell, that supports the following commands, dir, copy, move, del, systeminfo and cd. These match the functionality of standard commands from a shell. This is the only case where the \u0026lt;cmd\u0026gt; is actually used.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xC9\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;cmd\u0026gt; \u0026lt;arg1\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThe argument is interpreted as a process id (PID). The backdoor injects UserFunction.dll into the process, which is an interactive shell that forwards all input and output data to Microsoft Ole Object {30000-7100-12985-00000-00000}. The backdoor will then forward incoming data to the named pipe allowing for communication with the opened shell. If no PID is provided, the `cmd.exe` is launched as child process of the backdoor process with input and output redirected to the named pipe Microsoft Ole Object {30000-7100-12985-00001-00001}\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xCA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;cmd\u0026gt; \u0026lt;arg1\u0026gt; \u0026lt;arg2\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWrites data to a file. The first argument is the \u0026lt;file_name\u0026gt;, the second argument is an offset into the file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xCB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;cmd\u0026gt; \u0026lt;arg1\u0026gt; \u0026lt;arg2\u0026gt;\u003Cbr\u003E\n\u0026lt;arg3\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReads data from a file. The first argument is the \u0026lt;file_name\u0026gt;, the second argument is an offset into the file, the third argument is optional, and the exact purpose is unknown\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xFA\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELists running processes, including the process name, PID, process owner and the executable path\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xFB\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;cmd\u0026gt; \u0026lt;arg1\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EKills the process with the provided process id (PID)\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xFC\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;cmd\u0026gt; \u0026lt;arg1\u0026gt; \u0026lt;arg2\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECopies the files CreationTime, LastAccessTime and LastWriteTime from the second argument and applies them to the first argument. Both arguments are expected to be full file paths. The order of the arguments is a bit unusual, as one would usually apply the access times from the second argument to the third\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xFD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EList running processes with additional details like the SessonId and the CommandLine by executing the WMI query SELECT Name,ProcessId,SessionId,CommandLine,ExecutablePath FROM Win32_Process\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002267\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xFE\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002279\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022478\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPing command, the malware responds with the following byte sequence 00 00 00 00 00 65 00 00 00 00 00 00 06 00 00 00. Experiments with the backdoor revealed that the identifier 0x65 seems to indicate a successful operation, whereas 0x66 indicates an error.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 6: C2 commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe commands listed in Table 7 are used to provide functionality of a TCP traffic relay. This allows operators to communicate through the backdoor with another host via TCP. This could be used for lateral movement in a network. For example, one instance of the backdoor could be used as a jump host and additional hosts in the target network could be reached via the TCP traffic relay. Note that the commands 0xD2, 0xD3 and 0xD6 listed in Table 7 can be used in the main backdoor thread, without having to use the ProcTran.dll.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002296\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EIdentifier\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002272\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EArguments\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022456\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002296\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x105\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002272\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;cmd\u0026gt; \u0026lt;arg1\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022456\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThe argument is interpreted as a process id (PID). The backdoor injects ProcTran.dll into the process, which is a TCP traffic relay component that forwards all input and output data to Microsoft Ole Object {30000-7100-12985-00000-00001}. The commands 0xD2, 0xD3 and 0xD6 can then be used with the component.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002296\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xD2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002272\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;arg1\u0026gt; \u0026lt;arg2\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022456\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EOpens a connection to the provided host and port, the first argument is the host, the second the port. On success a header with the identifier set to 0xD4 is returned (00 00 00 00 00 D4 00 00 00 00 00 00 00 00 00 00). This effectively establishes a TCP traffic relay allowing operators to communicate with another system through the backdoored machine.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002296\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xD3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002272\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026lt;arg1\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022456\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EReceives and sends data over the connection opened by the 0xD2 command. Received data is first RC4 decrypted with the key \u201cCreateThread\u201c and then single-byte XOR decoded with 0x77. Data sent back is directly relayed without any additional encryption.\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002296\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xD6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002272\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022456\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECloses the socket connection that had been established by the 0xD2 command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u002296\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xCF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002272\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022456\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECloses the named pipe Microsoft Ole Object {30000-7100-12985-00000-00001} that is used to communicate with the injected ProcTran.dll. This seems to terminate the thread in the targeted process by the 0x105 command\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 7: C2 commands TCP relay\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ESummary\u003C\/h4\u003E\n\u003Cp\u003EThe TCP LOWKEY variant passively listens for the byte sequence FF FF 01 00 00 01 00 00 00 00 00 00 on TCP port 53 to be activated. The backdoor then uses up to three named pipes for communication. One pipe is used for the main communication of the backdoor, the other ones are used on demand for the embedded payloads.\u003C\/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00001-00001} main communication pipe\u003C\/li\u003E\n\u003Cli\u003E\\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00000-00001} named pipe used for interaction with the TCP relay module ProcTran.dll\u003C\/li\u003E\n\u003Cli\u003E\\\\.\\pipe\\Microsoft Ole Object {30000-7100-12985-00000-00000} named pipe used for the interactive shell module UserFunction.dll\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EFigure 8 summarizes how the LOWKEY components interact with each other.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/lowkey\/Picture8.png\u0022 alt=\u0022\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: LOWKEY passive backdoor overview\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAppendix\u003C\/h4\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5 HASH\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECorrect Volume Serial\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDropper Family\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFinal Payload Family\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E2b9244c526e2c2b6d40e79a8c3edb93c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xde82ce06\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E04be89ff5d217796bc68678d2508a0d7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x56a80cc8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E092ae9ce61f6575344c424967bd79437\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x58b5ef5c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELOWKEY.HTTP\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E37e100dd8b2ad8b301b130c2bca3f1ea\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xc25cff4c\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E39fe65a46c03b930ccf0d552ed3c17b1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x24773b24\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5322816c2567198ad3dfc53d99567d6e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.DOWN\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E-\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E557ff68798c71652db8a85596a4bab72\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x4cebb6e9\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E64e09cf2894d6e5ac50207edff787ed7\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x64fd8753\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E650a3dce1380f9194361e0c7be9ffb97\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xeaa61f82\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7dc6bbc202e039dd989e1e2a93d2ec2d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xa8c5a006\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELOWKEY\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E7f05d410dc0d1b0e7a3fcc6cdda7a2ff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x9438158b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELOWKEY\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E904bbe5ac0d53e74a6cefb14ebd58c0b\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xde82ce06\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec11dd805de683822bf4922aecb9bfef5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xcab011e1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELOWKEY.HTTP\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed49c186b1bfd7c9233e5815c2572eb98\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x4a23bd79\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELOWKEY\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ee58d4072c56a5dd3cc5cf768b8f37e5e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x243e2562\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENone - encrypted data\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EXMRIG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eeb37c75369046fb1076450b3c34fb8ab\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x00e5a39e\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELOWKEY\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eee5b707249c562dc916b125e32950c8d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xdecb3d5d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eff8d92dfbcda572ef97c142017eec658\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xde82ce06\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022247\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Effd0f34739c1568797891b9961111464\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022100\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xde82ce06\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022150\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDEADEYE.APPEND\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022126\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPOISONPLUG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003EAppendix 1: List of samples with RC5 encrypted payloads\u003C\/span\u003E\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue Oct 15 2019 14:19:23 GMT+0000",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003ELearn about a\u0026nbsp;sophisticated passive backdoor mentioned in our APT41 report.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon Oct 14 2019 22:54:25 GMT+0000",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Tue Oct 15 2019 14:17:50 GMT+0000",
      "imageRotate": "0"
    }
  }
}
