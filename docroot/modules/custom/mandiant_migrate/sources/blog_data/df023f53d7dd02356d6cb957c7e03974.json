{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Mon May 14 2018 08:52:00 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "A Deep Dive Into RIG Exploit Kit Delivering Grobios Trojan",
    "twitterSize": "small",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "1c539891-21f1-4436-b0b9-80ec9a509894",
    "author": "Irshad Muhammad",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "adam.greenberg@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "7cdd0c48-71f2-4e08-a038-fd5537005abf"
    ],
    "jcr:created": "Tue May 15 2018 13:44:14 GMT-0400",
    "cq:lastReplicated": "Tue May 15 2018 13:44:14 GMT-0400",
    "cq:lastModified": "Tue May 15 2018 13:44:07 GMT-0400",
    "jcr:baseVersion": "7cdd0c48-71f2-4e08-a038-fd5537005abf",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:irshad-muhammad",
      "fireeye-blog-authors:shahzad-ahmed",
      "fireeye-blog-authors:hassan-faizan",
      "fireeye-blog-authors:zain-gardezi",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:trojan",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:exploit-kits"
    ],
    "jcr:uuid": "538978c2-e199-4209-bbaf-9e61965198e0",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Mon May 14 2018 09:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Cp\u003EAs discussed in \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/10\/magniber-ransomware-infects-only-the-right-people.html\u0022\u003Eprevious blogs\u003C\/a\u003E, exploit kit activity has been on the decline since the latter half of 2016. However, we do still periodically observe significant developments in this space, and we have been observing interesting ongoing activity involving RIG Exploit Kit (EK). Although the volume of its traffic observed in-the-wild has been on the decline, RIG EK remains active, with a wide range of associated crimeware payloads.\u003C\/p\u003E\n\u003Cp\u003EIn this recent finding, RIG EK was observed delivering a Trojan named Grobios. This blog post will discuss this Trojan in depth with a focus on its evasion and anti-sandbox techniques, but first let\u2019s take a quick look at the attack flow. Figure 1 shows the entire infection chain for the activity we observed.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Infection chain\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWe first observed redirects to RIG EK on Mar. 10, 2018, from the compromised domain,\u0026nbsp;latorre[.]com[.]au, which had a malicious iframe injected to it (Figure 2).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Malicious Iframe injected in latorre[.]com\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe iframe loads a malvertisement domain, which communicates over SSL (certificate shown in Figure 3) and leads to the RIG EK landing page that loads the malicious Flash file (Figure 4).\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Malicious SSL flow\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: RIG EK SWF download request\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EWhen opened, the Flash file drops the Grobios Trojan. Figure 5 shows the callback traffic from the Grobios Trojan.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Grobios callback\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EAnalysis of the Dropped Malware\u003C\/h4\u003E\n\u003Cp\u003EGrobios uses various techniques to evade detection and gain persistence on the machine, which makes it hard for it to be uninstalled or to go inactive on the victim machine. It also uses multiple anti-debugging, anti-analysis and anti-VM techniques to hide its behavior. After successful installation on the victim machine, it connects to its command and control (C2) server, which\u0026nbsp;responds\u0026nbsp;with commands.\u003C\/p\u003E\n\u003Cp\u003EIn an effort to evade static detection, the authors have packed the sample with\u0026nbsp;PECompact 2.xx. The unpacked sample\u0026nbsp;has no function entries in the import table. It uses API hashing to obfuscate the names of API functions it calls and parses the PE header of the DLL files to match the name of a function to its hash. The malware also uses stack strings. Figure 6 shows an example of the malware calling WinApi using the hashes.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: An example of calling WinAPI using their hashes.\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003ELoading\u003C\/h4\u003E\n\u003Cp\u003EThe malware sample starts a copy of itself, which further injects its code into\u0026nbsp;svchost.exe\u0026nbsp;or\u0026nbsp;IEXPLORE.EXE\u0026nbsp;depending\u0026nbsp;on the user privilege level. Both parent and child quit after injection\u0026nbsp;is\u0026nbsp;complete. Only\u0026nbsp;svchost.exe\/IEXPLORE.EXE\u0026nbsp;keeps running. Figure 7 shows the process tree.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Process tree of the malware\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EPersistence\u003C\/h4\u003E\n\u003Cp\u003EThe malware has an aggressive approach to persistence. It employs the following techniques:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EIt drops a copy of itself\u0026nbsp;into the\u0026nbsp;%APPDATA%\u0026nbsp;folder, masquerading\u0026nbsp;as a version of legitimate software installed on the victim machine. It creates an Autorun registry key and a shortcut in\u0026nbsp;the Windows\u0026nbsp;Startup\u0026nbsp;folder. During our analysis, it dropped itself to the following path:\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 80px;\u0022\u003E%APPDATA%\\Google\\v2.1.13554\\\u0026lt;RandomName\u0026gt;.exe.\u0026nbsp;\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EThe path can vary depending on the folders the malware finds in\u0026nbsp;%APPDATA%.\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EIt drops multiple copies of itself in subfolders of a\u0026nbsp;program at the\u0026nbsp;path %ProgramFiles%\/%PROGRAMFILES(X86)%,\u0026nbsp; again\u0026nbsp;masquerading as a different version of the installed program, and sets an Autorun registry\u0026nbsp;key or creates a scheduled task.\u003C\/li\u003E\n\u003Cli\u003EIt drops a copy itself in the\u0026nbsp;%Temp%\u0026nbsp;folder, and creates a scheduled task to run it.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003EOn an infected system, the malware creates two scheduled tasks, as shown in Figure 8.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Scheduled tasks created by the malware\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe malware changes the\u0026nbsp;file\u0026nbsp;Created,\u0026nbsp;Modified, and Accessed times\u0026nbsp;of\u0026nbsp;all of its dropped copies to the\u0026nbsp;Last Modified time\u0026nbsp;of\u0026nbsp;ntdll.dll.\u0026nbsp;To bypass the \u201cFile Downloaded from the Internet\u201d warning, the malware removes\u0026nbsp;the\u0026nbsp;:Zone.Identifier\u0026nbsp;flag using\u0026nbsp;DeleteFile\u0026nbsp;API, as shown in Figure 9.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Call to DeleteFileW to remove the :Zone.Identifier Flag from the dropped copy\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAn interesting behavior of this malware is that it protects its\u0026nbsp;copy in the %TEMP%\u0026nbsp;folder\u0026nbsp;using EFS (Windows Encrypted File System), as seen in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Cipher Command Shows the Malware Copy Protected by EFS\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EDetecting VM and Malware Analysis Tools\u003C\/h4\u003E\n\u003Cp\u003EJust before connecting to the C2, the malware does a series of checks to detect the VM\u0026nbsp;and malware analysis environment. It can detect almost all well-known VM\u0026nbsp;software,\u0026nbsp;including Xen, QEMU, VMWare, Virtualbox, Hyper-V, and so on. The following is the list of checks it performs on the victim system:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EUsing the\u0026nbsp;FindWindowEx\u0026nbsp;API, it checks whether any of the analysis tools\u0026nbsp;in Table 1 are running on the system.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EAnalysis Tools \u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EPacketSniffer\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFileMon\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWinDbg\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EProcess Explorer\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EOllyDbg\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESmartSniff\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecwmonitor\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ESniffer\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWireshark\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: Analysis tools detected by malware\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe malware contains a list of hashes of blacklisted process names. It checks whether the hash of any of running process matches a hash on the blacklist, as shown in Figure 11.\u0026nbsp;\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig11.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 11: Check for blacklisted processes\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EWe were able to crack the hashes of the blacklisted processes shown in Table 2.\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash \u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EProcess\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E283ADE38h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmware.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E8A64214Bh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmount2.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E13A5F93h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmusrvc.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0F00A9026h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmsrvc.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0C96B0F73h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evboxservice.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0A1308D40h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evboxtray.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0E7A01D35h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Exenservice.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E205FAB41h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ejoeboxserver.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E6F651D58h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ejoeboxcontrol.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E8A703DD9h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ewireshark.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E1F758DBh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003ESniffhit.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0CEF3A27Ch\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EsysAnalyzer.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E6FDE1C18h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EFilemon.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E54A04220h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eprocexp.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0A17C90B4h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EProcmon.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E7215026Ah\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003ERegmon.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E788FCF87h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eautoruns.exe\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0A2BF507Ch\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u0026nbsp;\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0A9046A7Dh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u0026nbsp;\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Blacklisted processes\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe malware enumerates registry keys in the following paths to see if they contain the words\u0026nbsp;xen or VBOX:\u003Cul\u003E\n\u003Cli\u003EHKLM\\HARDWARE\\ACPI\\DSDT\u003C\/li\u003E\n\u003Cli\u003EHKLM\\HARDWARE\\ACPI\\FADT\u003C\/li\u003E\n\u003Cli\u003EHKLM\\HARDWARE\\ACPI\\RSDT\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003C\/li\u003E\n\u003Cli\u003EIt checks whether services installed on the system contain any of the keywords in Table 3:\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmmouse\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmdebug\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmicexchange\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmicshutdown\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmicvss\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmicheartbeat\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Emsvmmouf\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EVBoxMouse\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evpcuhub\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evpc-s3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evpcbus\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmx86\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmware\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EVMMEMCTL\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EVMTools\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EXenVMM\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Exenvdb\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Exensvc\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Exennet6\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Exennet\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Exenevtchn\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EVBoxSF\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EVBoxGuest\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u0026nbsp;\u003C\/td\u003E\n\u003Ctd width=\u002275\u0022\u003E\u0026nbsp;\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: Blacklisted service names\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EIt checks whether the username contains any of these words:\u0026nbsp;\u0026nbsp;MALWARE, VIRUS, SANDBOX, MALTEST\u003C\/li\u003E\n\u003Cli\u003EIt has a list of hashes of blacklisted driver names. It traverses the windows driver\u0026nbsp;directory\u0026nbsp;%WINDIR%\\system32\\drivers\\\u0026nbsp;using\u0026nbsp;FindFirstFile\/FindNextFile\u0026nbsp;APIs to check if the hash of the name of any drivers matches with that of any blacklisted driver\u0026#39;s name, as shown in Table 4.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDriver\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0E687412Fh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Ehgfs.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E5A6850A1h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmhgfs.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0CA5B452h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eprleth.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0F9E3EE20h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eprlfs.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0E79628D7h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eprlmouse.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E68C96B8Ah\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eprlvideo.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0EEA0F1C2h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Eprl_pv32.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E443458C9h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evpcs3.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E2F337B97h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmsrvc.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E4D95FD80h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmx86.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0EB7E0625h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003Evmnet.sys\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 4: Hashes of blacklisted driver names\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EIt calculates the hash\u0026nbsp;of\u0026nbsp;ProductId\u0026nbsp;and\u0026nbsp;matches it with three blacklisted hashes to detect public sandboxes, shown in Table 5.\u003Cbr\u003E\n\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EHash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EProduct Id\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESandbox Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E4D8711F4h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E76487-337-8429955-22614\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EAnubis Sanbox\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E7EBAB69Ch\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E76487-644-3177037-23510\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003ECWSandbox\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003ED573F44D\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E55274-640-2673064-23950\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EJoe Sandbox\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 5: Blacklisted product IDs\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe malware calculates the hash of loaded module (DLL) names\u0026nbsp;and\u0026nbsp;compares them with the list of hashes of blacklisted module names shown in Table 6. These are the DLLs commonly loaded into the process being debugged, such as\u0026nbsp;dbhelp.dll and api_log.dll.\u0026nbsp; \u0026nbsp;\u0026nbsp;\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u002295\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E6FEC47C1h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E6C8B2973h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E0AF6D9F74h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E49A4A30h\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E3FA86C7Dh\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 6: Blacklisted module names hashes\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 12 shows the flow of code that checks for blacklisted module hashes.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig12.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 12: Code checks for blacklisted module hashes\u003C\/span\u003E\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EIt checks whether Registry keys present at the\u0026nbsp;path\u0026nbsp;HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum and HKLM\\SYSTEM\\ControlSet001\\Services\\Disk\\Enum\u0026nbsp;contain\u0026nbsp;any of these words:\u0026nbsp;QEMU, VBOX, VMWARE, VIRTUAL\u003C\/li\u003E\n\u003Cli\u003EIt checks whether registry keys at the path\u0026nbsp;HKLM\\SOFTWARE\\Microsoft, HKLM\\SOFTWARE\u0026nbsp; contain these words:\u0026nbsp;VirtualMachine, vmware, Hyber-V\u003C\/li\u003E\n\u003Cli\u003EIt checks whether the system bios version present at registry path\u0026nbsp;HKLM\\HARDWARE\\DESCRIPTION\\System\\SystemBiosVersion\u0026nbsp;contains these words:\u0026nbsp;QEMU, BOCHS, VBOX\u003C\/li\u003E\n\u003Cli\u003EIt checks whether the video bios version present at registry\u0026nbsp;path\u0026nbsp;HKLM\\HARDWARE\\DESCRIPTION\\System\\VideoBiosVersion\u0026nbsp;contains\u0026nbsp;\u0026nbsp;VIRTUALBOX\u0026nbsp;substring.\u003C\/li\u003E\n\u003Cli\u003EIt checks whether the registry key at path\u0026nbsp;HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\\Identifier\u0026nbsp;contains any of these words:\u0026nbsp;QEMU,vbox, vmware\u003C\/li\u003E\n\u003Cli\u003EIt checks whether the registry\u0026nbsp;key\u0026nbsp;HKLM\\SOFTWARE\\Oracle\\VirtualBox Guest Additions\u0026nbsp; exists\u0026nbsp;on the system.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003ENetwork Communication\u003C\/h4\u003E\n\u003Cp\u003EThe malware contains two hardcoded obfuscated C2s. After de-obfuscating the C2 URLs, it generates a random string of 20 characters, appends it to the end of URL, and sends the request for commands. Before it executes the commands, the malware verifies the identity of the C2. It calculates the hash of 4 bytes of data\u0026nbsp;using the CALG_MD5\u0026nbsp;algorithm.\u0026nbsp;It then uses the Base64 data from\u0026nbsp;the\u0026nbsp;CERT\u0026nbsp;command\u0026nbsp;as a Public Key\u0026nbsp;in\u0026nbsp;CryptVerifySignature\u0026nbsp;to verify the hash signature (Figure 13). If the signature is verified, the malware executes the commands.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig13.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 13: Malware verifies the C2 hash\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EDuring our initial analysis, we found that the malware supports the commands shown in Table 7.\u0026nbsp;\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommand\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003ECERT \u0026lt;Base64 data\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EContains the data used to verify the identity of the C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003ECONNECT \u0026lt;IP:Port\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EConnect to given host for further commands\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EDISCONNECT\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EClose all the connections\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EWAIT \u0026lt;Number of seconds\u0026gt;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EWait for the number of seconds before executing the next commands\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EREJECT\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EKind of NOP. Move on to next command after waiting for 5 second\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 7: Commands supported by malware\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 14 shows commands being issued by the C2 server.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/Grobios\/Fig14.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 14: Commands issued by the C2 server\u003C\/span\u003E\u003C\/p\u003E\n\u003Ch4\u003EConclusion\u003C\/h4\u003E\n\u003Cp\u003EDespite the decline in activity, exploit kits still continue to put users at risk \u2013 especially those running older versions of software. Enterprises need to make sure their network nodes are fully patched.\u003C\/p\u003E\n\u003Cp\u003EAll FireEye products detect the malware in our MVX engine. Additionally, \u003Ca adhocenable=\u0022false\u0022 href=\u0022https:\/\/www.fireeye.com\/solutions\/nx-network-security-products.html\u0022\u003EFireEye Network Security\u003C\/a\u003E blocks delivery at the infection point.\u003C\/p\u003E\n\u003Ch4\u003EIndicators of Compromise (IOCs)\u003C\/h4\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003E30f03b09d2073e415a843a4a1d8341af\u003C\/li\u003E\n\u003Cli\u003E99787d194cbd629d12ef172874e82738\u003C\/li\u003E\n\u003Cli\u003E169.239.129[.]17\u003C\/li\u003E\n\u003Cli\u003Egrobiosgueng[.]su\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Ch4\u003EAcknowledgments\u0026nbsp;\u003C\/h4\u003E\n\u003Cp\u003EWe acknowledge\u0026nbsp;Mariam Muntaha\u0026nbsp;for her contribution to the blog regarding malicious traffic analysis.\u003C\/p\u003E\n",
        "jcr:lastModified": "Tue May 15 2018 13:44:07 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Mon May 14 2018 08:51:27 GMT-0400",
      "imageRotate": "0"
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EAlthough exploit kit activity is on the decline, we recently observed RIG Exploit Kit delivering a Trojan named Grobios.\u003C\/p\u003E\n",
      "jcr:lastModified": "Mon May 14 2018 00:35:37 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    }
  }
}
