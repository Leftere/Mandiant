{
  "jcr:primaryType": "cq:Page",
  "jcr:createdBy": "admin",
  "jcr:created": "Thu Sep 13 2018 12:00:22 GMT-0400",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "jcr:mixinTypes": [
      "mix:versionable"
    ],
    "jcr:createdBy": "admin",
    "jcr:title": "APT10 Targeting Japanese Corporations Using Updated TTPs",
    "cq:lastReplicationAction": "Activate",
    "jcr:versionHistory": "010f5959-36c5-4ab8-949e-2d501793adf9",
    "author": "Ayako Matsuda",
    "cq:template": "\/apps\/fireeye-blog\/templates\/page_blogpost",
    "cq:lastReplicatedBy": "lynda.hall@fireeye.com",
    "jcr:language": "en_us",
    "jcr:predecessors": [
      "2527a99d-5f65-4f8c-8a84-511bad6152d4"
    ],
    "jcr:created": "Mon Sep 24 2018 18:48:42 GMT-0400",
    "cq:lastReplicated": "Mon Sep 24 2018 18:48:41 GMT-0400",
    "cq:lastModified": "Thu Sep 13 2018 11:53:33 GMT-0400",
    "jcr:baseVersion": "2527a99d-5f65-4f8c-8a84-511bad6152d4",
    "jcr:isCheckedOut": true,
    "cq:tags": [
      "fireeye-blog-authors:ayako-matsuda",
      "fireeye-blog-authors:irshad-muhammad",
      "fireeye-blog-threat-research:threat-research",
      "fireeye-blog-tags:apt",
      "fireeye-blog-tags:homepage-carousel",
      "fireeye-blog-tags:latest",
      "fireeye-blog-tags:backdoor",
      "fireeye-blog-tags:malware",
      "fireeye-blog-tags:TTPs"
    ],
    "jcr:uuid": "76cf34bc-573a-48fd-a254-fff93f78104f",
    "sling:resourceType": "social\/blog\/components\/page",
    "published": "Thu Sep 13 2018 12:00:00 GMT-0400",
    "cq:lastModifiedBy": "adam.greenberg@fireeye.com",
    "par": {
      "jcr:primaryType": "nt:unstructured",
      "sling:resourceType": "foundation\/components\/parsys",
      "entry": {
        "jcr:primaryType": "nt:unstructured",
        "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
        "text": "\u003Ch4\u003EIntroduction\u003C\/h4\u003E\n\u003Cp\u003EIn July 2018, FireEye devices detected and blocked what appears to be APT10 (Menupass) activity targeting the Japanese media sector. APT10 is a Chinese cyber espionage group that FireEye has tracked since 2009, and they have a history of \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/04\/apt10_menupass_grou.html\u0022\u003Etargeting Japanese entities\u003C\/a\u003E.\u003C\/p\u003E\n\u003Cp\u003EIn this campaign, the group sent spear phishing emails containing malicious documents that led to the installation of the UPPERCUT backdoor. This backdoor is well-known in the security community as \u003Ca href=\u0022https:\/\/blog.trendmicro.com\/trendlabs-security-intelligence\/chessmaster-adds-updated-tools-to-its-arsenal\/\u0022\u003EANEL\u003C\/a\u003E, and it used to come in beta or RC (release candidate) until recently. Part of this blog post will discuss the updates and differences we have observed across multiple versions of this backdoor.\u003C\/p\u003E\n\u003Ch4\u003EAttack Overview\u003C\/h4\u003E\n\u003Cp\u003EThe attack starts with Microsoft Word documents containing a malicious VBA macro being attached to spear phishing emails. Although the contents of the malicious documents are unreadable (see Figure 3), the Japanese titles are related to maritime, diplomatic, and North Korean issues. Table 1 shows the UPPERCUT indicators of compromise (IoCs).\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022602\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022236\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EFile Name\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESize\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EC2\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022236\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u81ea\u6c11\u515a\u6d77\u6d0b\u7dcf\u5408\u6226\u7565\u5c0f\u59d4\u54e1\u4f1a\u304c\u653f\u5e9c\u306b\u63d0\u8a00\u7533\u3057\u5165\u308c.doc\u003C\/p\u003E\n\u003Cp\u003EGovernment Recommendations from the Liberal Democratic Party\u2019s Comprehensive Strategic Maritime Subcommittee\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E4f83c01e8f7507d23c67ab085bf79e97\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E843022\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eeservake.jetos[.]com\u003C\/p\u003E\n\u003Cp\u003E82.221.100.52\u003C\/p\u003E\n\u003Cp\u003E151.106.53.147\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022236\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u30b0\u30c6\u30de\u30e9\u5927\u4f7f\u8b1b\u6f14\u4f1a\u6848\u5185\u72b6.doc\u003C\/p\u003E\n\u003Cp\u003EInvitation to Lecture by Guatemalan Ambassador\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef188936d2c8423cf064d6b8160769f21\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E720384\u003C\/p\u003E\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eeservake.jetos[.]com\u003C\/p\u003E\n\u003Cp\u003E151.106.53.147\u003C\/p\u003E\n\u003Cp\u003E153.92.210.208\u0026nbsp;\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022236\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u7c73\u56fd\u63a5\u8fd1\u306b\u63fa\u308c\u308b\u5317\u671d\u9bae\u5185\u90e8.doc\u003C\/p\u003E\n\u003Cp\u003ENorth Korean interior swayed by the approach of the United States\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022170\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ecca227f70a64e1e7fcf5bccdc6cc25dd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E733184\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022130\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eeservake.jetos[.]com\u003C\/p\u003E\n\u003Cp\u003E153.92.210.208\u003C\/p\u003E\n\u003Cp\u003E167.99.121.203\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 1: UPPERCUT IoCs\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFor the North Korean lure, a news article with an identical title was \u003Ca href=\u0022http:\/\/www.worldtimes.co.jp\/column\/88334.html\u0022\u003Ereadily available online\u003C\/a\u003E. It\u2019s also worth noting that in the Guatemalan lure, the attacker used an unusual spelling of Guatemala in Japanese. The top result of a Google search using the same spelling led us to the event website for the lecture of the Guatemalan Ambassador, held in August 2018. Figure 1 shows the screenshot of the event page.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture1.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 1: Event Website for the Lecture of Guatemala Ambassador\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 2 shows the macro function that displays the lure document. At the bottom of this function, we can see the readable text that matches the contact information found in Figure 1. Thus, people who would have an interest in Latin American issues may have been the targets of this campaign.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture2.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 2: Macro to display lure document\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe initial Word documents were password protected, likely in an effort to bypass detection. Once the password (delivered in the body of the email) is entered, the users are presented with a document that will request users to enable the malicious macro, as shown in Figure 3.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Figure3.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 3: Lure document\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFigure 4 shows what happens when the malicious macro is executed.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture4.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 4: Macro to install UPPERCUT\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EThe execution workflow is as follows:\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E1.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; The macro drops three PEM files, padre1.txt, padre2.txt, and padre3.txt, to the victim\u2019s %TEMP% folder and then copies them from %TEMP% to the %AllUserProfile% folder.\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E2.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; The macro decodes the dropped files using Windows certutil.exe with the following commands (certutil.exe is a legitimate built-in command-line program to manage certificates in Windows):\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022102%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EC:\\Windows\\System32\\cmd.exe\u0026quot; \/c certutil -decode C:\\ProgramData\\padre1.txt C:\\ProgramData\\\\GUP.txt\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EC:\\Windows\\System32\\cmd.exe\u0026quot; \/c certutil -decode C:\\ProgramData\\padre2.txt C:\\ProgramData\\\\libcurl.txt\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EC:\\Windows\\System32\\cmd.exe\u0026quot; \/c certutil -decode C:\\ProgramData\\padre3.txt C:\\ProgramData\\\\3F2E3AB9\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E3.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; The macro creates a copy of the files with their proper extensions using Extensible Storage Engine Utilities (esentutil.exe) with the following commands (esentutil.exe is also a legitimate program that is pre-installed in Windows):\u003C\/p\u003E\n\u003Ctable border=\u00220\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022100%\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EC:\\Windows\\System32\\esentutl.exe\u0026quot; \/y C:\\ProgramData\\\\GUP.txt \/d C:\\ProgramData\\GUP.exe \/o\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd valign=\u0022top\u0022\u003E\u003Cp\u003EC:\\Windows\\System32\\esentutl.exe\u0026quot; \/y C:\\ProgramData\\\\libcurl.txt \/d C:\\ProgramData\\libcurl.dll \/o\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003EThe dropped files include the following:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EGUP.exe\u0026nbsp;:\u0026nbsp;GUP, a free (LGPL) Generic Updater.\u0026nbsp;GUP is an open source binary used by Notepad++ for software updates. The version used here is version 4.1 digitally signed by Notepad++, as shown in Figure 5.\u003C\/li\u003E\n\u003Cli\u003Elibcurl.dll:\u0026nbsp;Malicious Loader DLL\u003C\/li\u003E\n\u003Cli\u003E3F2E3AB9:\u0026nbsp;Encrypted shellcode\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture5.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 5: Notepad++ signed updater\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E4.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; The macro launches the legitimate executable GUP.exe.\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EThe executable sideloads the malicious DLL (libcurl.dll), which decrypts and runs shellcode (3F2E3AB9) located in the same folder.\u003C\/li\u003E\n\u003Cli\u003EThe shellcode decodes and decompresses another DLL, which is an updated variant of UPPERCUT. Before decoding the DLL, the shellcode uses an anti-debug technique based on ntdll_NtSetInformationThread which causes the thread to be detached from the debugger, as shown in Figure \u003Ci\u003E6\u003C\/i\u003E. The DLL is then loaded into memory and the randomly named exported function is called.\u003C\/li\u003E\n\u003C\/ul\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture6.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 6: Anti-debug technique used by shellcode\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp style=\u0022margin-left: 40px;\u0022\u003E5.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; The macro deletes the initially dropped .txt files using Windows esentutl.exe and changes the document text to an embedded message.\u003C\/p\u003E\n\u003Cp\u003EThe complete attack overview is shown in Figure 7.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture7.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 7: Attack overview\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003ESeveral threat actors leverage the technique of using \u003Ca href=\u0022https:\/\/www.fireeye.com\/blog\/threat-research\/2017\/12\/targeted-attack-in-middle-east-by-apt34.html\u0022\u003EWindows certutil.exe\u003C\/a\u003E for \u003Ca href=\u0022https:\/\/securelist.com\/apt-trends-report-q2-2017\/79332\/\u0022\u003Epayload decoding\u003C\/a\u003E, and \u003Ca href=\u0022https:\/\/www.pwc.co.uk\/cyber-security\/pdf\/cloud-hopper-annex-b-final.pdf\u0022\u003EAPT10\u003C\/a\u003E continues to employ this technique.\u003C\/p\u003E\n\u003Ch4\u003EEvolution of UPPERCUT\u003C\/h4\u003E\n\u003Cp\u003EFigure 8 shows the timeline of updates for UPPERCUT. The PE compile time of loaders and the create time of droppers (Word documents) are plotted in the graph. The compile time of loaders in the newer version(s) are not shown here since the timestamps are overwritten and filled with zeroes. We don\u2019t have visibility into UPPERCUT 5.2.x series, but it\u2019s possible that minor revisions were released every few months between December 2017 and May 2018.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture8.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 8: Timeline of UPPERCUT updates\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EUnlike previous versions, the exported function names are randomized in the latest version (Table 2).\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022631\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022244\u0022 colspan=\u00222\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EEncoded Payload\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022386\u0022 colspan=\u00223\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDecoded Payload\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022179\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ESize\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EImport Hash\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EExported Function\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EVersion\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022179\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Eaa3f303c3319b14b4829fe2faa5999c1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E322164\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E182ee99b4f0803628c30411b1faa9992\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003El7MF25T96n45qOGWX\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5.3.2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022179\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E126067d634d94c45084cbe1d9873d895\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E330804\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5f45532f947501cf024d84c36e3a19a1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EhJvTJcdAU3mNkuvGGq7L\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5.4.1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022179\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efce54b4886cac5c61eda1e7605483ca3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E345812\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec1942a0ca397b627019dace26eca78d8\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022160\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EWcuH\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u002266\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E5.4.1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 2: Static characteristics of UPPERCUT\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAnother new feature in the latest UPPERCUT sample is that the malware sends an error code in the Cookie header if it fails to receive the HTTP response from the command and control (C2) server. The error code is the value returned by the GetLastError function and sent in the next beacon. This was likely included to help the attackers understand the problem if the backdoor is unable to receive a response (Figure 9). This Cookie header is a unique indicator that can be used for network-based detection.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture9.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 9: Example of callback\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EEarlier versions of UPPERCUT used the hard-coded string \u201cthis is the encrypt key\u201d for Blowfish encryption when communicating with a C2. However, in the latest version, the keys are hard-coded uniquely for each C2 address and use the C2\u2019s calculated MD5 hash to determine which key to use, as shown in Figure 10.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Picture10.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003EFigure 10: Blowfish key generation\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EFor instance, Table \u003Ci\u003E3\u003C\/i\u003E\u0026nbsp;lists the hard-coded C2 addresses, their MD5 hash, and the corresponding Blowfish key in the decoded payload of 126067d634d94c45084cbe1d9873d895.\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022671\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EC2\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022217\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EMD5\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EBlowfish Key\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp[:]\/\/151.106.53[.]147\/VxQG\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022217\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef613846eb5bed227ec1a5f8df7e678d0\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ebdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp[:]\/\/153.92.210[.]208\/wBNh1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022217\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E50c60f37922ff2ff8733aaeaa9802da5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Efb9f7fb3c709373523ff27824ed6a31d800e275ec5217d8a11024a3dffb577dd\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ehxxp[:]\/\/eservake.jetos[.]com\/qIDj\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022217\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ec500dae1ca41236830b59f1467ee96c1\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ed3450966ceb2eba93282aace7d7684380d87c6621bbd3c4f621caa079356004a\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022198\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDefault\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022217\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u0026nbsp;Default\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022255\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003Ef12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 3: Example of Blowfish keys\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EIn this example, the MD5 hash of hxxp[:]\/\/151.106.53[.]147\/VxQG will be f613846eb5bed227ec1a5f8df7e678d0. When the malware interacts with this URL, bdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d will be selected as a Blowfish key. If the MD5 hash of the URL does not match any of the listed hashes, then the default key f12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53 will be used.\u003C\/p\u003E\n\u003Cp\u003EAnother difference in the network traffic generated from the malware is that the encoded proxy information has been added in the URL query values during the C2 communication. Table 4 shows the parameters sent to C2 server from the backdoor in the newer versions. These are sent via POST request, as shown in Figure 9.\u003C\/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\/content\/dam\/fireeye-www\/blog\/images\/APT10\/Table%204.png\u0022\u003E\u003Cbr\u003E\n\u003Cspan class=\u0022type-XS\u0022\u003ETable 4: URL parameters\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003EAdditionally, the command string is hashed using the same RGPH hashing algorithm as before. Two more commands, 0xD290626C85FB1CE3 and 0x409C7A89CFF0A727, are supported in the newer versions (Table 5).\u003C\/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00220\u0022 width=\u0022621\u0022\u003E\n\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003ECommands\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E\u003Cb\u003EDescription\u003C\/b\u003E\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x97A168D9697D40DD\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload and validate file (XXHash comparison) from C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x7CF812296CCC68D5\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EUpload file to C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x652CB1CEFF1C0A00\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ELoad PE file\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x27595F1F74B55278\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EDownload, validate (XXHash comparison), execute file, and send output to C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0xD290626C85FB1CE3\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EFormat the current timestamp\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003E0x409C7A89CFF0A727\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ECapture the desktop screenshot in PNG format and send it to C2\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd width=\u0022161\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003ENone of the above\u003C\/p\u003E\n\u003C\/td\u003E\n\u003Ctd width=\u0022460\u0022 valign=\u0022top\u0022\u003E\u003Cp\u003EThe received buffer is executed via cmd.exe and the output is then sent to the C2 server\u003C\/p\u003E\n\u003C\/td\u003E\n\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\n\u003Cp\u003E\u003Cspan class=\u0022type-XS\u0022\u003ETable 5: Supported commands\u003C\/span\u003E\u003C\/p\u003E\n\u003Cp\u003E\u003Cb\u003EConclusion\u003C\/b\u003E\u003C\/p\u003E\n\u003Cp\u003EWhile APT10 consistently targets the same geolocation and industry, the malware they use is actively evolving. In the newer versions of UPPERCUT, there is a significant change in the way backdoor initializes the Blowfish encryption key, which makes it harder for analysts to detect and decrypt the backdoor\u2019s network communications. This shows that APT10 is very capable of maintaining and updating their malware.\u003C\/p\u003E\n\u003Cp\u003ETo mitigate the threat, users are advised to disable Office macros in their settings and not to open documents from unknown sources. FireEye Multi-Vector Execution (MVX) engine is able to recognize and block this threat with the following detection names:\u003C\/p\u003E\n\u003Cul style=\u0022list-style-position: inside;\u0022\u003E\n\u003Cli\u003EAPT.Backdoor.Win.UPPERCUT\u003C\/li\u003E\n\u003Cli\u003EFE_APT_Backdoor_Win32_UPPERCUT\u003C\/li\u003E\n\u003C\/ul\u003E\n",
        "jcr:lastModified": "Thu Sep 13 2018 08:16:02 GMT-0400",
        "sling:resourceType": "social\/blog\/components\/entrytext"
      }
    },
    "summary": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "text": "\u003Cp\u003EIn July 2018, FireEye devices detected and blocked what appears to be APT10 (Menupass) activity targeting the Japanese media sector.\u003C\/p\u003E\n",
      "jcr:lastModified": "Wed Sep 12 2018 23:19:33 GMT-0400",
      "sling:resourceType": "social\/blog\/components\/entrytextteaser"
    },
    "image": {
      "jcr:primaryType": "nt:unstructured",
      "jcr:lastModifiedBy": "adam.greenberg@fireeye.com",
      "jcr:lastModified": "Thu Sep 13 2018 11:53:33 GMT-0400",
      "imageRotate": "0"
    }
  }
}
