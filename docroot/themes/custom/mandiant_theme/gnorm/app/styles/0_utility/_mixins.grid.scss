/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
  margin-left: auto;
  margin-right: auto;
  padding-left: ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  width: 100%;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-left: ($grid-gutter-width / -2);
  margin-right: ($grid-gutter-width / -2);
}

@mixin make-col-ready() {
  padding-left: ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: if($num == 0, 0, percentage($num));
  $num: $size / $columns;
}

@mixin anchor-column-grid($gap: 3rem) {
  display: grid;
  position: relative;

  @include breakpoint($tablet) {
    &.cols-4,
    &.cols-3,
    &.cols-2,
    &.cols-1 {
      grid-gap: $gap;
    }

    &.cols-4 {
      grid-template-columns: repeat(4, 1fr);
    }

    &.cols-3 {
      grid-template-columns: repeat(3, 1fr);

      // phone landscape mode
      @include breakpoint(max-height 400px) {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    &.cols-2 {
      grid-template-columns: repeat(2, 1fr);
    }

    &.cols-1 {
      grid-template-columns: repeat(1, 1fr);

      > a {
        justify-self: center;
      }
    }
  }
}

@mixin anchor-column-grid-alter-bios() {
  &.cols-2,
  &.cols-1 {
    > a {
      justify-self: center;
      min-width: auto;
    }
  }

  &.cols-2 {
    max-width: 60%;

    > a {
      min-width: 100%;
    }
  }
}
